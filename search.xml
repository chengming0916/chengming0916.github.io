<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git代码提交规范</title>
    <url>/2024/12/19/Git/Git%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h5 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h5><p>每个提交消息都由一个标题、一个正文和一个页脚组成。而标题又具有特殊格式，包括修改类型、影响范围和内容主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改类型(影响范围): 标题</span><br><span class="line">&lt;--空行--&gt;</span><br><span class="line">[正文]</span><br><span class="line">&lt;--空行--&gt;</span><br><span class="line">[页脚]</span><br></pre></td></tr></table></figure>

<p>标题是<strong>强制性</strong>的，但标题的<strong>范围是可选的</strong>。</p>
<h5 id="修改类型"><a href="#修改类型" class="headerlink" title="修改类型"></a>修改类型</h5><p>每个类型值都表示了不同的含义，类型值必须是以下的其中一个：</p>
<ul>
<li><strong>feat</strong>：提交新功能</li>
<li><strong>fix</strong>：修复了bug</li>
<li><strong>docs</strong>：只修改了文档</li>
<li><strong>style</strong>：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等）</li>
<li><strong>refactor</strong>：代码重构，既没修复bug也没有添加新功能</li>
<li><strong>perf</strong>：性能优化，提高性能的代码更改</li>
<li><strong>test</strong>：添加或修改代码测试</li>
<li><strong>chore</strong>：对构建流程或辅助工具和依赖库（如文档生成等）的更改</li>
</ul>
<h5 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h5><p>代码回滚比较特殊，如果本次提交是为了恢复到之前的某个提交，那提交消息应该以<code>revert:</code>开头，后跟要恢复到的那个提交的标题。然后在消息正文中，应该写上<code>This reverts commit &lt;hash&gt;</code>，其中<code>&lt;hash&gt;</code>是要还原的那个提交的SHA值。</p>
<h5 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h5><p>范围不是固定值，它可以是你提交代码实际影响到的任何内容。例如<code>$location</code>、<code>$browser</code>、<code>$compile</code>、<code>$rootScope</code>、<code>ngHref</code>、<code>ngClick</code>、<code>ngView</code>等，唯一需要注意的是它必须足够简短。</p>
<p>当修改影响多个范围时，也可以使用<code>*</code>。</p>
<h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>标题是对变更的简明描述：</p>
<ul>
<li>使用祈使句，现在时态：是“change”不是“changed”也不是“changes”</li>
<li>不要大写首字母</li>
<li>结尾不要使用句号</li>
</ul>
<h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>正文是对标题的补充，但它不是必须的。和标题一样，它也要求使用祈使句且现在时态，正文应该包含更详细的信息，如代码修改的动机，与修改前的代码对比等。</p>
<h5 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h5><p>任何<strong>Breaking Changes（破坏性变更，不向下兼容）</strong>都应该在页脚中进行说明，它经常也用来引用<a href="https://link.zhihu.com/?target=https://help.github.com/articles/closing-issues-via-commit-messages/">本次提交解决的GitHub Issue</a>。</p>
<p><strong>Breaking Changes</strong>应该以“BREAKING CHANGE:”开头，然后紧跟一个空格或两个换行符，其他要求与前面一致。</p>
<h3 id="分支功能描述"><a href="#分支功能描述" class="headerlink" title="分支功能描述"></a>分支功能描述</h3><p><strong>master</strong>: 长期分支，用于对外版本发布，所有版本出自此版本库。此分支不允许直接提交代码，只从bugfix分支和develop分支合并。</p>
<p><strong>develop</strong>: 长期分支，用于日常代码开发，与master分支 保持同步，当新功能开发完成后线合并到此分支，经过测试后再合并到master分支。</p>
<p><strong>bugfix</strong>: 临时分支，当出现bug时基于master分支新建<code>bugfix/bug-1</code>,bug分支可根据bug编号命名。bug测试完毕合并进入develop分支和master分支</p>
<p><strong>feature</strong>: 临时分支，开发新功能时从develop分支新建<code>feature/feature-1</code>,feature分支可根据功能命名。新特性开发完成合并进入develop分支并删除feature分支。</p>
<p><strong>release</strong>: 临时分支，需要发布版本时从master分支新建<code>release/release-1.0.0</code>,release分支根据版本号命名。</p>
<p>release分支禁止再合并功能，只提交bug修改，版本发布完成后合并进入master和develop，并再对应的提交上打版本Tag。</p>
<h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><p>参考格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;: &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt; 空行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt; 空行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>type:  本次commit的类型，如bugfix,docs,style等</p>
</li>
<li><p>feat: 添加新特性</p>
</li>
<li><p>fix: 修复bug</p>
</li>
<li><p>docs: 修改文档</p>
</li>
<li><p>style: 修改格式缩进,不改变代码逻辑</p>
</li>
<li><p>refactor: 代码重构,没有添加新下功能或者修复bug</p>
</li>
<li><p>perf: 增加代码进行性能测试</p>
</li>
<li><p>test: 增加测试用例</p>
</li>
<li><p>chore:  改变构建流程或者增加依赖库、工具等</p>
</li>
<li><p>scope: 本次commit波及范围</p>
</li>
<li><p>subject: 简明扼要阐述本次commit的主旨</p>
<ul>
<li>使用祈使句</li>
<li>首字母不要大写</li>
<li>结尾无需添加标点</li>
</ul>
</li>
<li><p>body: 详细描述本次commit,如需换行则使用<code>|</code></p>
</li>
<li><p>footer: 描述下与之关联的 issue 或 breadk change</p>
</li>
</ul>
<p>标题行： 50个字符以内，描述主要变更内容</p>
<p>主体内容: 更详细下说明文本，建议72个字符以内。需要描述信息包括：</p>
<ul>
<li>为什么这个变更是必须的，它可能是用来修复一个bug，增加一个feature,提升性能、可靠性、稳定性等</li>
<li>如何解决这个问题，具体描述解决问题的步骤</li>
<li>是否存在副作用、风险</li>
</ul>
<p>如果需要的话可以添加一个连接到issue或其他文档</p>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docs(README): README添加代码提交规范</span><br><span class="line"></span><br><span class="line">添加代码规范，提升提交日志的可读性和功能</span><br><span class="line"></span><br><span class="line">#123 #没有关联的issue可以省略</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">feat: 增加XXX功能</span><br><span class="line"></span><br><span class="line">增加XXX功能，实现XXX效果</span><br><span class="line"></span><br><span class="line">#21</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git解决中文乱码</title>
    <url>/2017/03/11/Git/Git%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h2 id="解决路径显示数字问题"><a href="#解决路径显示数字问题" class="headerlink" title="解决路径显示数字问题"></a>解决路径显示数字问题</h2><ul>
<li>命令及现象</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status <span class="comment"># 当提交文件中有中文目录时，目录会显示为数字</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>原因</p>
<p>在默认设置下中文名不能正常显示，而是显示为八进制的字符编码。</p>
</li>
<li><p>解决办法</p>
<p>修改git配置文件<code>core.quotepath</code> 为false</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --global 表示全局配置</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<h2 id="终端输出中文为乱码"><a href="#终端输出中文为乱码" class="headerlink" title="终端输出中文为乱码"></a>终端输出中文为乱码</h2><ul>
<li><p>命令及现象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 当log中有中文日志时，日志显示为乱码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原因</p>
<p>git commit  默认的编码是UTF-8 ,cmd默认的编码是GB-2312,字符集不同显示为乱码。</p>
</li>
<li><p>解决办法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置GUI编码为UTF-8</span></span><br><span class="line">git config --global gui.encoding utf-8</span><br><span class="line"><span class="comment"># 设置提交日志编码为UTF-8</span></span><br><span class="line">git config --global i18n.commitencoding  utf-8</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件默认存放路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\[用户名]\.gitconfig # 全局配置文件存放路径，修改此文件效果等价git config --global</span><br><span class="line">[存储库根目录]\.git\config    # 当前存储库配置文件，只影响当前存储库，效果等价于在此存储库执行 git config</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局设置</span></span><br><span class="line">[gui]  </span><br><span class="line">    encoding = utf-8 </span><br><span class="line">[core]</span><br><span class="line">	quotePath = <span class="literal">false</span></span><br><span class="line">[i18n]  </span><br><span class="line">    commitencoding = utf-8  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置</title>
    <url>/2019/04/12/Git/Git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#配置用户名和邮箱</span></span><br><span class="line">git config --global user.name </span><br><span class="line">git config --global user.email</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置编码"><a href="#配置编码" class="headerlink" title="配置编码"></a>配置编码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#中文路径和文件名乱码</span></span><br><span class="line">git config --global core.quotePath <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改commit编码方式</span></span><br><span class="line">git config --global i18n.commitEncoding utf-8</span><br><span class="line">git config --global i18n.logOutputEncoding</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置内网域名证书"><a href="#配置内网域名证书" class="headerlink" title="配置内网域名证书"></a>配置内网域名证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.<span class="string">&quot;内网域名&quot;</span>.sslCAInfo <span class="string">&quot;证书所在路径&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git config --global http.<span class="string">&quot;https://example.io&quot;</span>.sslCAInfo ~/.certs/selfsigned-root-ca.crt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git子库</title>
    <url>/2020/04/29/Git/submodule/</url>
    <content><![CDATA[<p>原文链接:<a href="https://www.cnblogs.com/AhuntSun-blog/p/12736934.html">Git应用详解第十讲：Git子库：submodule与subtree</a></p>
<p>一个中大型项目往往会依赖几个模块，<code>git</code>提供了子库的概念。可以将这些子模块存放在不同的仓库中，通过<code>submodule</code>或<code>subtree</code>实现仓库的嵌套。本讲为<code>Git</code>应用详解的倒数第二讲，胜利离我们不远了！</p>
<h3 id="一、submodule"><a href="#一、submodule" class="headerlink" title="一、submodule"></a>一、<code>submodule</code></h3><p><code>submodule</code>：子模块的意思，表示将一个版本库作为子库引入到另一个版本库中：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351334.png" class="" title="img">

<h4 id="1-引入子库"><a href="#1-引入子库" class="headerlink" title="1.引入子库"></a>1.引入子库</h4><p>需要使用如下命令：</p>
<h5 id="git-submodule-add-子库地址-保存目录"><a href="#git-submodule-add-子库地址-保存目录" class="headerlink" title="git submodule add 子库地址 保存目录"></a><code>git submodule add 子库地址 保存目录</code></h5><p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git submodule add git@github.<span class="property">com</span>:<span class="title class_">AhuntSun</span>/git_child.<span class="property">git</span> mymodule</span><br></pre></td></tr></table></figure>

<p>执行上述命令会将地址对应的远程仓库作为子库，保存到当前版本库的<code>mymodule</code>目录下：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351385.png" class="" title="img">

<p>随后查看当前版本库的状态：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351455.png" class="" title="image-20200329203048016">

<p>可以发现新增了两个文件。查看其中的<code>.gitmodules</code>文件：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351530.png" class="" title="image-20200329203507411">

<p>可以看到当前文件的路径和子模块的<code>url</code>，随后将这两个新增文件<strong>添加</strong>、<strong>提交</strong>并<strong>推送</strong>。在当前仓库<code>git_parent</code>对应的远程仓库中多出了两个文件：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351620.png" class="" title="image-20200329203746236">

<p>其中<code>mymodule</code>文件夹上的<code>3bd7f76</code> 对应的是<strong>子仓库</strong><code>git_child</code>中的<strong>最新提交</strong>：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351694.png" class="" title="image-20200329203905051">

<p>点击<code>mymodule</code>文件夹，会自动跳转到<strong>子仓库</strong>中：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351761.png" class="" title="image-20200329203957392">

<p>通过上述分析，可以得出结论：两个仓库已经关联起来了，并且仓库<code>git_child</code>为仓库<code>git_parent</code>的子仓库；</p>
<h4 id="2-同步子库变化"><a href="#2-同步子库变化" class="headerlink" title="2.同步子库变化"></a>2.同步子库变化</h4><p><strong>当被依赖的子版本库发生变化时</strong>：在子版本库<code>git_child</code>中新增文件<code>world.txt</code>并提交到远程仓库：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351830.png" class="" title="image-20200329204252524">

<p>这个时候依赖它的父版本库<code>git_parent</code>要如何感知这一变化呢？</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>这个时候<code>git_parent</code>只需要进入存放子库<code>git_child</code>的目录<code>mymodule</code>，执行<code>git pull</code>就能将子版本库<code>git_child</code>的更新拉取到本地：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351898.png" class="" title="image-20200330102106961">

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>当父版本库<code>git_parent</code>依赖的<strong>多个子版本库</strong>都发生变化时，可以采用如下方法遍历更新所有子库：首先回到版本库主目录，执行以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure>

<p>该命令会<strong>遍历</strong>当前版本库所依赖的<strong>所有</strong>子版本库，并将它们的更新<strong>拉取</strong>到父版本库<code>git_parent</code>：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173351970.png" class="" title="image-20200330102642607">

<p>拉取完成后，查看状态，发现<code>mymodule</code>目录下文件发生了变化，所以需要执行一次添加、提交、推送操作：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352045.png" class="" title="image-20200330102914556">

<h4 id="3-复制父版本库"><a href="#3-复制父版本库" class="headerlink" title="3.复制父版本库"></a>3.复制父版本库</h4><p>如果将使用了<code>submodule</code>添加依赖了子库的父版本库<code>git_parent</code>，克隆一份到本地的话。在克隆出来的新版本库<code>git_parent2</code>中，原父版本库存放依赖子库的目录虽在，但是内容不在：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352136.png" class="" title="image-20200330103417911">

<p>进入根据<code>git_parent</code>复制出来的仓库<code>git_parent2</code>，会发现<code>mymodule</code>目录为空：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352199.png" class="" title="image-20200330103502848">

<p><strong>解决方法：</strong>可采用多条命令的分步操作，也可以通过参数将多步操作进行合并。</p>
<h5 id="分步操作"><a href="#分步操作" class="headerlink" title="分步操作"></a>分步操作</h5><p>这是在执行了<code>clone</code>操作后的额外操作，还需要做两件事：</p>
<ul>
<li><p>手动初始化<code>submodule</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动拉取依赖的子版本库；：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule update --recursive</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352268.png" class="" title="image-20200330103803762">

<p>执行完两步操作后，子版本库中就有内容了。由此完成了<code>git_parent</code>的克隆；</p>
<h5 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h5><p>分步操作相对繁琐，还可以通过添加参数的方式，将多步操作进行合并。通过以下指令基于<code>git_parent</code>克隆一份<code>git_parent3</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:AhuntSun/git_parent.git git_parent3 --recursive</span><br></pre></td></tr></table></figure>

<img src="/2020/04/29/Git/submodule/IMG-20250804173352329.png" class="" title="image-20200330104210732">

<p><code>--recursive</code>表示递归地克隆<code>git_parent</code>依赖的所有子版本库。</p>
<h4 id="4-删除子版本库"><a href="#4-删除子版本库" class="headerlink" title="4.删除子版本库"></a>4.删除子版本库</h4><p><code>git</code>没有提供直接删除<code>submodule</code>子库的命令，但是我们可以通过其他指令的组合来达到这一目的，分为三步：</p>
<ul>
<li><p>将<code>submodule</code>从版本库中删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cache mymodule</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352397.png" class="" title="image-20200330105131697">

<blockquote>
<p><code>git rm</code>的作用为删除版本库中的文件，并将这一操作纳入暂存区；</p>
</blockquote>
<ul>
<li>将<code>submodule</code>从工作区中删除；</li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352456.png" class="" title="image-20200330105226923">

<ul>
<li>最后将<code>.gitmodules</code>目录删除；</li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352522.png" class="" title="image-20200330105542069">

<p>完成三步操作后，再进行添加，提交，推送即可完成删除子库的操作：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352584.png" class="" title="image-20200330105614793">

<h3 id="二、subtree"><a href="#二、subtree" class="headerlink" title="二、subtree"></a>二、<code>subtree</code></h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p><code>subtree</code>与<code>submodule</code>的作用是一样的，但是<code>subtree</code>出现得比<code>submodule</code>晚，它的出现是为了弥补<code>submodule</code>存在的问题：</p>
<ul>
<li><strong>第一：</strong><code>submodule</code>不能在父版本库中修改子版本库的代码，只能在子版本库中修改，是单向的；</li>
<li><strong>第二：</strong><code>submodule</code>没有直接删除子版本库的功能；</li>
</ul>
<p>而<code>subtree</code>则可以实现双向数据修改。官方推荐使用<code>subtree</code>替代<code>submodule</code>。</p>
<h4 id="2-创建子库"><a href="#2-创建子库" class="headerlink" title="2.创建子库"></a>2.创建子库</h4><p>首先创建两个版本库：<code>git_subtree_parent</code>和<code>git_subtree_child</code>然后在<code>git_subtree_parent</code>中执行<code>git subtree</code>会列出该指令的一些常见的参数：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352649.png" class="" title="image-20200330112616987">

<h4 id="3-建立关联"><a href="#3-建立关联" class="headerlink" title="3.建立关联"></a>3.建立关联</h4><p>首先需要给<code>git_subtree_parent</code>添加一个子库<code>git_subtree_child</code>:</p>
<p><strong>第一步：</strong>添加子库的远程地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add subtree-origin git@github.com:AhuntSun/git_subtree_child.git</span><br></pre></td></tr></table></figure>

<p>添加完成后，父版本库中就有两个远程地址了：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352728.png" class="" title="image-20200330113223780">

<p>这里的<code>subtree-origin</code>就代表了远程仓库<code>git_subtree_child</code>的地址。</p>
<p><strong>第二步：</strong>建立依赖关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix=subtree subtree-origin master --squash</span><br><span class="line">//其中的--prefix=subtree可以写成：--p subtree 或 --prefix subtree</span><br></pre></td></tr></table></figure>

<p>该命令表示将远程地址为<code>subtree-origin</code>的，子版本库上<code>master</code>分支的，文件克隆到<code>subtree</code>目录下；</p>
<blockquote>
<p>注意：是在某一分支（如<code>master</code>）上将<code>subtree-origin</code>代表的远程仓库的某一分支（如<code>master</code>）作为子库拉取到<code>subtree</code>文件夹中。可切换到其他分支重复上述操作，也就是说子库的实质就是子分支。</p>
</blockquote>
<p><code>--squash</code>是可选参数，它的含义是<strong>合并，压缩</strong>的意思。</p>
<ul>
<li>如果不增加这个参数，则会把远程的子库中指定的分支（这里是<code>master</code>）中的提交一个一个地拉取到本地再去创建一个合并提交；</li>
<li>如果增加了这个参数，会将远程子库指定分支上的多次提交合并压缩成一次提交再拉取到本地，这样拉取到本地的，远程子库中的，指定分支上的，历史提交记录就没有了。</li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352794.png" class="" title="image-20200330114203889">

<p>拉取完成后，父版本库中会增添一个<code>subtree</code>目录，里面是子库的文件，相当于把依赖的子库代码拉取到了本地：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352867.png" class="" title="image-20200330114316257">

<p>此时查看一下父版本库的提交历史：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173352932.png" class="" title="image-20200330114500554">

<p>会发现其中没有子库李四的提交信息，这是因为<code>--squash</code>参数将他的提交压缩为一次提交，并由父版本库张三进行合并和提交。所以父版本库多出了两次提交。</p>
<p>随后，我们在父版本库中进行一次推送：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353000.png" class="" title="image-20200330114730534">

<p>结果远程仓库中多出了一个存放子版本库文件的<code>subtree</code>目录，并且完全脱离了版本库<code>git_subtree_child</code>，仅仅是属于父版本库<code>git_subtree_parent</code>的一个目录。而不像使用<code>submodule</code>那样，是一个点击就会自动跳转到依赖子库的<strong>指针</strong>：</p>
<ul>
<li><code>subtree</code>的远程父版本库：</li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353062.png" class="" title="image-20200330115004586">

<ul>
<li><code>submodule</code>的远程父版本库：</li>
</ul>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353132.png" class="" title="image-20200329203746236">

<p>即<code>submodule</code>与<code>subtree</code>子库的区别为：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353195.png" class="" title="image-20200408224805624">

<h4 id="4-同步子库变化"><a href="#4-同步子库变化" class="headerlink" title="4.同步子库变化"></a>4.同步子库变化</h4><p>在子库中创建一个新文件<code>world</code>并推送到远程子库：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353257.png" class="" title="image-20200330115440136">

<p>在父库中通过如下指令更新依赖的子库内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree pull --prefix=subtree subtree-origin master --squash</span><br></pre></td></tr></table></figure>

<img src="/2020/04/29/Git/submodule/IMG-20250804173353320.png" class="" title="image-20200330115726052">

<p>此时查看一下提交历史：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353393.png" class="" title="image-20200330115755340">

<p>发现没有子库李四的提交信息，这都是<code>--squash</code>的作用。子库的修改交由父库来提交。</p>
<h4 id="5-参数-squash"><a href="#5-参数-squash" class="headerlink" title="5.参数--squash"></a>5.参数<code>--squash</code></h4><p>该参数的作用为：防止子库指定分支上的提交历史污染父版本库。比如在子库的<code>master</code>分支上进行了三次提交分别为：<code>a</code>、<code>b</code>、<code>c</code>，并推送到远程子库。</p>
<p>首先，复习一下合并分支时遵循的<strong>三方合并</strong>原则：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353499.png" class="" title="image-20200408003842196">

<p>当提交<code>4</code>和<code>6</code>需要合并的时候，<code>git</code>会先寻找二者的公共父提交节点，如图中的<code>2</code>，然后在提交<code>2</code>的基础上进行<code>2</code>、<code>4</code>、<code>6</code>的三方合并，合并后得到提交<code>7</code>。</p>
<p>父仓库执行<code>pull</code>操作时：如果添加参数<code>--squash</code>，就会把远程子库<code>master</code>分支上的这三次提交合并为一次新的提交<code>abc</code>；随后再与父仓库中子库的<code>master</code>分支进行合并，又产生一次提交<code>X</code>。整个<code>pull</code>的过程一共产生了五次提交，如下图所示：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353566.png" class="" title="image-20200420103912282">

<p><strong>存在的问题：</strong></p>
<p>由于<code>--squash</code>指令的合并操作，会导致远程<code>master</code>分支上的合并提交<code>abc</code>与本地<code>master</code>分支上的最新提交<code>2</code>，找不到公共父节点，从而合并失败。同时<code>push</code>操作也会出现额外的问题。</p>
<p><strong>最佳实践：要么全部操作都使用<code>--squash</code>指令，要么全部操作都不使用该参数，这样就不会出错。</strong></p>
<p><strong>错误示范：</strong></p>
<p>为了验证，重新创建两个仓库<code>A</code>和<code>B</code>，并通过<code>subtree</code>将<code>B</code>设置为<code>A</code>的子库。这次全程都没有使用参数<code>--squash</code>，重复上述操作：</p>
<ul>
<li>首先，修改子库文件；</li>
<li>然后，通过下列指令，在不使用参数<code>--squash</code>的情况下，将远程子库<code>A</code>变化的文件拉取到本地：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree pull --prefix=subtree subtree-origin master</span><br></pre></td></tr></table></figure>

<img src="/2020/04/29/Git/submodule/IMG-20250804173353638.png" class="" title="image-20200330141920474">

<p>此时查看提交历史：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353705.png" class="" title="image-20200330142000915">

<p>可以看到子库<code>儿子</code>的提交信息污染了父版本库的提交信息，验证了上述的结论。</p>
<p>所以要么都使用该指令，要么都不使用才能避免错误；如果不需要子库的提交日志，推荐使用<code>--squash</code>指令。</p>
<blockquote>
<p><strong>补充：</strong><code>echo &#39;new line&#39; &gt;&gt; test.txt</code>：表示在<code>test.txt</code>文件末尾追加文本<code>new line</code>；如果是一个<code>&gt;</code>表示替换掉<code>test.txt</code>内的全部内容。</p>
</blockquote>
<h4 id="6-修改子库"><a href="#6-修改子库" class="headerlink" title="6.修改子库"></a>6.修改子库</h4><p><code>subtree</code>的强大之处在于，它可以在父版本库中修改依赖的子版本库。以下为演示：</p>
<p>进入父版本库存放子库的<code>subtree</code>目录，修改子库文件<code>child.txt</code>，并推送到远程父仓库：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353778.png" class="" title="image-20200330121429186">

<p>此时远程父版本库中存放子库文件的<code>subtree</code>目录发生了变化，但是独立的远程子库<code>git_subtree_child</code>并没有发生变化。</p>
<ul>
<li><p><strong>修改独立的远程子库：</strong></p>
<p>可执行以下命令，同步地修改远程子版本库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=subtree subtree-origin master</span><br></pre></td></tr></table></figure>

<p>如下图所示，父库中的子库文件<code>child.txt</code>新增的<code>child2</code>内容，同步到了独立的远程子库中：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353847.png" class="" title="image-20200330125911158">
</li>
<li><p><strong>修改独立的本地子库：</strong></p>
<p>回到本地子库<code>git_subtree_child</code>，将对应的远程子库进行的修改拉取到本地进行合并同步：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353920.png" class="" title="image-20200330144044823">

<p>由此无论是远程的还是本地的子库都被修改了。</p>
</li>
</ul>
<blockquote>
<p>实际上使用<code>subtree</code>后，在外部看起来父仓库和子仓库是一个整体的仓库。执行<code>clone</code>操作时，不会像<code>submodule</code>那样需要遍历子库来单独克隆。而是可以将整个父仓库和它所依赖的子库当做一个整体进行克隆。</p>
</blockquote>
<h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><p>父版本库拉取远程子库进行更新同步会出现的问题：</p>
<ul>
<li><p><strong>子仓库第一次修改：</strong></p>
<p>经历了上述操作，本地子库与远程子库的文件达到了同步，其中文件<code>child.txt</code>的内容都是<code>child~4</code>。在此基础上本地子库为该文件添加<code>child5~6</code>：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173353989.png" class="" title="image-20200330145702019">

<p>然后推送到远程子库。</p>
</li>
<li><p><strong>父仓库第一次拉取：</strong></p>
<p>随后父版本库通过下述指令，拉取远程子库，与本地父仓库<code>git_subtree_parent</code>中的子库进行同步：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree pull --p subtree subtree-origin master --squash</span><br></pre></td></tr></table></figure>

<p>结果出现了合并失败的情况：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354061.png" class="" title="image-20200330145839093">

<p>我们查看冲突产生的文件：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354122.png" class="" title="image-20200330145922152">

<p>发现父版本库中的子库与远程子库内容上并无冲突，但是却发生了冲突，这是为什么呢？</p>
<p>探究冲突产生的原因之前我们先解决冲突，先删除多余的内容：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354192.png" class="" title="image-20200330150141430">

<p>随后执行<code>git add</code>命令和<code>git commit</code>命令标识解决了冲突：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354255.png" class="" title="image-20200330150312944">

<img src="/2020/04/29/Git/submodule/IMG-20250804173354332.png" class="" title="image-20200330150406317">

<p>解决完冲突后将该文件推送到独立的远程子库，发现文件并没有发生更新，也就是说<code>git</code>认为我们并没有解决冲突：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354398.png" class="" title="image-20200330150747452">
</li>
<li><p><strong>子仓库第二次修改与父仓库第二次拉取：</strong></p>
<p>再次修改本地子库的文件并推送到对应的远程仓库，父版本库再次将远程子库更新的文件拉取到本地进行同步：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354467.png" class="" title="image-20200330151140092">

<p>这次却成功了！为什么同样的操作，有的时候成功有的时候失败呢？</p>
</li>
</ul>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>原因出现在<code>--squash</code>指令中。实际上，<code>--squash</code>指令把子库中的提交信息合并了，导致父仓库在执行<code>git pull</code>操作时找不到公共的父节点，从而导致即使文件没有冲突的内容，也会出现合并冲突的情况。其实不使用<code>--squash</code>也会有这种问题，问题的根本原因仍然是<strong>三方合并时找不到公共父节点</strong>。我们打开<code>gitk</code>：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354530.png" class="" title="image-20200330154944300">

<p>从图中不难看出，当使用<code>subtree</code>时，子库与父库之间是没有公共节点的，所以时常会因为找不到公共节点而出现合并冲突的情况，此时只需要解决冲突，手动合并即可。</p>
<blockquote>
<p>不使用<code>subtree</code>时，普通的版本库中的各分支总会有一个公共节点：</p>
<img src="/2020/04/29/Git/submodule/IMG-20250804173354600.png" class="" title="image-20200330160206258">
</blockquote>
<p><strong>再次强调：</strong>使用<code>--squash</code>指令时一定要小心，要么都使用它，要么都不使用。</p>
<h4 id="7-抽离子库"><a href="#7-抽离子库" class="headerlink" title="7.抽离子库"></a>7.抽离子库</h4><h5 id="git-subtree-split"><a href="#git-subtree-split" class="headerlink" title="git subtree split"></a><code>git subtree split</code></h5><p>当开发过程中出现某些子库完全可以复用到其他项目中时，我们希望将它独立出来。</p>
<ul>
<li><p><strong>方法一：</strong>可以手动将文件拷贝出来。缺点是，这样会丢失关于该子库的提交记录；</p>
</li>
<li><p>方法二：</p>
<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git subtree split</span><br></pre></td></tr></table></figure>

<p>指令，该指令会把关于独立出来的子库的每次提交都记录起来。但是，这样存在弊端：</p>
<ul>
<li>比如该独立子库为<code>company.util</code>，当一次提交同时修改了<code>company.util</code>和<code>company.server</code>两个子库时。</li>
<li>通过上述命令独立出来的子库<code>util</code>只会记录对自身修改的提交，而不会记录对<code>company.server</code>的修改，这样在别人看来这次提交就只修改了<code>util</code>，这是不完整的。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Subtree</tag>
        <tag>SubModule</tag>
      </tags>
  </entry>
  <entry>
    <title>git subtree教程</title>
    <url>/2019/07/27/Git/subtree%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>关于子仓库或者说是仓库共用，git官方推荐的工具是git subtree。 我自己也用了一段时间的git subtree，感觉比git submodule好用，但是也有一些缺点，在可接受的范围内。<br>所以对于仓库共用，在git subtree 与 git submodule之中选择的话，我推荐git subtree。</p>
<p>git subtree 可以实现一个仓库作为其他仓库的子仓库。</p>
<img src="/2019/07/27/Git/subtree%E6%95%99%E7%A8%8B/IMG-20241219140954387.webp" class="">


<p>使用git subtree 有以下几个原因：</p>
<ul>
<li>旧版本的git也支持(最老版本可以到 v1.5.2).</li>
<li>git subtree与git submodule不同，它不增加任何像<code>.gitmodule</code>这样的新的元数据文件.</li>
<li>git subtree对于项目中的其他成员透明，意味着可以不知道git subtree的存在.</li>
</ul>
<p>当然，git subtree也有它的缺点，但是这些缺点还在可以接受的范围内：</p>
<ul>
<li>必须学习新的指令(如：git subtree).</li>
<li>子仓库的更新与推送指令相对复杂。</li>
</ul>
<p>git subtree的主要命令有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree <span class="built_in">split</span> --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们先准备一个仓库叫photoshop，一个仓库叫libpng，然后我们希望把libpng作为photoshop的子仓库。<br>photoshop的路径为<code>https://github.com/test/photoshop.git</code>，仓库里的文件有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">photoshop</span><br><span class="line">    |</span><br><span class="line">    |-- photoshop.c</span><br><span class="line">    |-- photoshop.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.md</span><br></pre></td></tr></table></figure>

<p>libPNG的路径为<code>https://github.com/test/libpng.git</code>，仓库里的文件有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libpng</span><br><span class="line">    |</span><br><span class="line">    |-- libpng.c</span><br><span class="line">    |-- libpng.h</span><br><span class="line">    \-- README.md</span><br></pre></td></tr></table></figure>

<p>以下操作均位于父仓库的根目录中。</p>
<h2 id="在父仓库中新增子仓库"><a href="#在父仓库中新增子仓库" class="headerlink" title="在父仓库中新增子仓库"></a>在父仓库中新增子仓库</h2><p>我们执行以下命令把libpng添加到photoshop中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng https://github.com/test/libpng.git master --squash</span><br></pre></td></tr></table></figure>

<p>(<code>--squash</code>参数表示不拉取历史信息，而只生成一条commit信息。)</p>
<p>执行<code>git status</code>可以看到提示新增两条commit：  </p>
<img src="/2019/07/27/Git/subtree%E6%95%99%E7%A8%8B/IMG-20241219140954353.webp" class="">

<p>image</p>
<p><code>git log</code>查看详细修改：  </p>
<img src="/2019/07/27/Git/subtree%E6%95%99%E7%A8%8B/IMG-20241219140954312.webp" class="">

<p>image</p>
<p>执行<code>git push</code>把修改推送到远端photoshop仓库，现在本地仓库与远端仓库的目录结构为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">photoshop</span><br><span class="line">    |</span><br><span class="line">    |-- sub/</span><br><span class="line">    |   |</span><br><span class="line">    |   \--libpng/</span><br><span class="line">    |       |</span><br><span class="line">    |       |-- libpng.c</span><br><span class="line">    |       |-- libpng.h</span><br><span class="line">    |       \-- README.md</span><br><span class="line">    |</span><br><span class="line">    |-- photoshop.c</span><br><span class="line">    |-- photoshop.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.md</span><br></pre></td></tr></table></figure>

<p>注意，现在的photoshop仓库对于其他项目人员来说，可以不需要知道libpng是一个子仓库。什么意思呢？<br>当你<code>git clone</code>或者<code>git pull</code>的时候，你拉取到的是整个photoshop(包括libpng在内，libpng就相当于photoshop里的一个普通目录)；当你修改了libpng里的内容后执行<code>git push</code>，你将会把修改push到photoshop上。<br>也就是说photoshop仓库下的libpng与其他文件无异。</p>
<h2 id="从源仓库拉取更新"><a href="#从源仓库拉取更新" class="headerlink" title="从源仓库拉取更新"></a>从源仓库拉取更新</h2><p>如果源libpng仓库更新了，photoshop里的libpng如何拉取更新？使用<code>git subtree pull</code>，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree pull --prefix=sub/libpng https://github.com/test/libpng.git master --squash</span><br></pre></td></tr></table></figure>

<h2 id="推送修改到源仓库"><a href="#推送修改到源仓库" class="headerlink" title="推送修改到源仓库"></a>推送修改到源仓库</h2><p>如果在photoshop仓库里修改了libpng，然后想把这个修改推送到源libpng仓库呢？使用<code>git subtree push</code>，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=sub/libpng https://github.com/test/libpng.git master</span><br></pre></td></tr></table></figure>

<h2 id="简化git-subtree命令"><a href="#简化git-subtree命令" class="headerlink" title="简化git subtree命令"></a>简化git subtree命令</h2><p>我们已经知道了git subtree 的命令的基本用法，但是上述几个命令还是显得有点复杂，特别是子仓库的源仓库地址，特别不方便记忆。<br>这里我们把子仓库的地址作为一个remote，方便记忆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add -f libpng https://github.com/test/libpng.git</span><br></pre></td></tr></table></figure>

<p>然后可以这样来使用git subtree命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree pull --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree push --prefix=sub/libpng libpng master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Subtree</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客配置</title>
    <url>/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/Hexo-%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本地安装 Git NodeJS</p>
<p>检查环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -v</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>切换镜像站,具体参考<a href="https://zhuanlan.zhihu.com/p/1903405138527384159">NPM配置国内源</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h2 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install -g hexo-cli                <span class="comment"># 安装Hexo cli工具</span></span><br><span class="line"></span><br><span class="line">hexo init                            <span class="comment"># 初始化博客环境</span></span><br><span class="line">npm install                          <span class="comment"># 安装依赖库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件</span></span><br><span class="line">npm install hexo-asset-img           <span class="comment"># 头像</span></span><br><span class="line">npm install hexo-auto-category       <span class="comment"># 自动分类</span></span><br><span class="line">npm install hexo-generator-searchdb  <span class="comment"># 生成搜索数据库</span></span><br><span class="line">npm install hexo-backlink            <span class="comment"># Obsdian链接转换</span></span><br><span class="line">npm install hexo-deploy-git          <span class="comment"># git自动发布</span></span><br><span class="line">npm install hexo-theme-next          <span class="comment"># hexo NexT主题</span></span><br><span class="line">npm install hexo-server              <span class="comment"># hexo服务器</span></span><br><span class="line">npm install hexo-next-giscus         <span class="comment"># giscus评论组件</span></span><br><span class="line">npm install hexo-wordcount           <span class="comment"># 字数统计</span></span><br></pre></td></tr></table></figure>

<h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p>参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">theme: next     # 配置主题next</span><br><span class="line"></span><br><span class="line">giscus:         # 评论配置</span><br><span class="line">  enable: true</span><br><span class="line">  repo:  # Github repository name</span><br><span class="line">  repo_id: # Github repository id</span><br><span class="line">  category: # Github discussion category</span><br><span class="line">  category_id: # Github discussion category id</span><br><span class="line">  # Available values: pathname | url | title | og:title</span><br><span class="line">  mapping: title</span><br><span class="line">  # Available values: 0 | 1</span><br><span class="line">  reactions_enabled: 1</span><br><span class="line">   # Available values: 0 | 1</span><br><span class="line">  emit_metadata: 1</span><br><span class="line">  # Available values: light | light_high_contrast | light_protanopia | light_tritanopia | dark | dark_high_contrast | dark_protanopia | dark_tritanopia | dark_dimmed | preferred_color_scheme | transparent_dark | noborder_light | noborder_dark | noborder_gray | cobalt | purple_dark</span><br><span class="line">  theme: light</span><br><span class="line">  # Available values: en | zh-CN</span><br><span class="line">  lang: zh-CN</span><br><span class="line">  # Place the comment box above the comments</span><br><span class="line">  input_position: bottom</span><br><span class="line">  # Load the comments lazily</span><br><span class="line">  loading: lazy</span><br><span class="line">  </span><br><span class="line">deploy:   # 发布配置</span><br><span class="line">  - type: git</span><br><span class="line">    repo:        # 仓库发布地址</span><br><span class="line">    branch: main # 发布分支</span><br><span class="line">    name:        # git用户名 git config user.name &lt;username&gt;</span><br><span class="line">    email:       # git邮箱 git config user.email &lt;email&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 评论部分需要借助Github Discussions, 参考<a href="Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEGiscus%E8%AF%84%E8%AE%BA.md">Hexo博客配置Giscus评论</a></p>
<h2 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h2><p>安装主题后从<code>npm_modules/&lt;主题名&gt;/</code>文件夹中复制<code>_config.yml</code>到博客根目录并重命名为<code>_config.next.yml</code>,当博客deploy时回自动应用主题配置，一下主题修改都基于此文件进行。</p>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>NexT主题支持多种语言，只需要编辑<code>_config.next.yml</code>中的<code>language</code>设置即可</p>
<table>
<thead>
<tr>
<th>语言</th>
<th>代码</th>
<th>设定示例</th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td>en</td>
<td>language: en</td>
</tr>
<tr>
<td>简体中文</td>
<td>zh-CN（注：zh-Hans已经无法使用）</td>
<td>language: zh-CN</td>
</tr>
<tr>
<td>Frangais</td>
<td>fr-FR</td>
<td>language: fr-FR</td>
</tr>
<tr>
<td>Portugues</td>
<td>pt</td>
<td>language: pt  <br>或者  <br>language:pt-BR</td>
</tr>
<tr>
<td>繁體中文</td>
<td>zh-hk  <br>或者  <br>zh-tw</td>
<td>language: zh-hk</td>
</tr>
<tr>
<td>Pycckmi 93bIK</td>
<td>ru</td>
<td>language: ru</td>
</tr>
<tr>
<td>Deutsch</td>
<td>de</td>
<td>language: de</td>
</tr>
<tr>
<td>日本語</td>
<td>ja</td>
<td>language: ja</td>
</tr>
<tr>
<td>Indonesian</td>
<td>id</td>
<td>language: id</td>
</tr>
<tr>
<td>Korean</td>
<td>ko</td>
<td>language: ko</td>
</tr>
<tr>
<td>如果需要添加非内置的字段需要手动添加翻译文件，例如中文的翻译文件路径为<code>node_modules/next/languages/zh-CN.yml</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="设置关于"><a href="#设置关于" class="headerlink" title="设置关于"></a>设置关于</h3><p>在<code>source/about/index.md</code>中添加如下内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line"><span class="section">date: 2025-08-27 00:00:00</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;个人信息&gt;</span><br></pre></td></tr></table></figure>

<h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Schem</p>
<ul>
<li>Muse - 默认 Scheme</li>
<li>Mist - Muse 的紧凑版本</li>
<li>Pisces - 双栏 Scheme</li>
<li>Gemini</li>
</ul>
<h3 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu: home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span> </span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span> </span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span> </span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span> </span><br><span class="line"><span class="comment">#schedule: /schedule/ || calendar </span></span><br><span class="line"><span class="comment">#sitemap: /sitemap.xml || sitemap </span></span><br><span class="line"><span class="comment">#commonweal: /404/ || heartbeat </span></span><br><span class="line"><span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br></pre></td></tr></table></figure>

<p>NexT 默认的菜单项有（标注 <code>* </code>的项表示需要手动创建这个页面）：</p>
<p><strong>注意</strong>: 若站点运行在子目录中，请将链接前缀的 &#x2F; 去掉。</p>
<table>
<thead>
<tr>
<th align="left">键值</th>
<th align="left">设定值</th>
<th align="left">显示文本（简体中文）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">home</td>
<td align="left">home: &#x2F;</td>
<td align="left">主页</td>
</tr>
<tr>
<td align="left">archives</td>
<td align="left">archives: &#x2F;archives</td>
<td align="left">归档页</td>
</tr>
<tr>
<td align="left">categories</td>
<td align="left">categories: &#x2F;categories</td>
<td align="left">分类页<code> *</code></td>
</tr>
<tr>
<td align="left">tags</td>
<td align="left">tags: &#x2F;tags</td>
<td align="left">标签页 <code>*</code></td>
</tr>
<tr>
<td align="left">about</td>
<td align="left">about: &#x2F;about</td>
<td align="left">关于页面<code>*</code></td>
</tr>
<tr>
<td align="left">commonweal</td>
<td align="left">commonweal: &#x2F;404.html</td>
<td align="left">公益 404 !</td>
</tr>
</tbody></table>
<h3 id="侧栏配置"><a href="#侧栏配置" class="headerlink" title="侧栏配置"></a>侧栏配置</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。配置具体如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidbar:</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span>     <span class="comment"># 配置侧栏居左</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span>      <span class="comment"># 侧栏显示行为</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>侧栏显示位置支持</p>
<ul>
<li><code>left</code>:  居左显示</li>
<li><code>right</code>:  居右显示</li>
</ul>
<p>侧栏显示行为支持</p>
<ul>
<li><code>post</code> 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> 所有页面都显示</li>
<li><code>hide</code> 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> 完全移除</li>
</ul>
<p>注册Github账号,Gitea账号(可选)<br>[^注] Github由于网络问题会经常无法链接，可使用Gitea作为中转，先将代码提交道Gitea，然后Gitea配置自动推送到Github</p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure>

<p>头像地址如果是以<code>/</code>起始则表示头像图片放置在博客发布后的目录下，例如测试博客地址是<code>http://localhost:4000</code>,头像图片地址为<code>http://localhost:4000/images/avatar.jpg</code><br>此配置需要在博客的<code>source/images</code>目录中放置头像图片<code>avatar.jpg</code></p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  #GitHub: https://github.com/&lt;username&gt; || fab fa-github</span><br><span class="line">  #E-Mail: &lt;email&gt; || fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>

<p>next主题默认支持的社交链接 <code>||</code>符号后是链接的图标</p>
<p>使用已有配置放开注释即可，如果要添加默认不存在链接示例如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="string">微信:</span> <span class="string">https://wx.qq.com</span> <span class="string">||</span> <span class="string">weixin</span></span><br></pre></td></tr></table></figure>


<p><strong>注意</strong>: 图标对应的名称是FontAwesom图标的名称（不必带 <code>fa-</code> 前缀）</p>
<h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward </span></span><br><span class="line"><span class="attr">reward:</span> </span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/custom/wechatpay.jpg</span> </span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/custom/alipay.jpg</span> </span><br></pre></td></tr></table></figure>
<p>放开此部分注释并在<code>source/images</code>中放入收款码图片</p>
<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2025</span></span><br></pre></td></tr></table></figure>

<h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Wechat Subscriber </span><br><span class="line">wechat_subscriber: </span><br><span class="line">  enabled: true </span><br><span class="line">  qcode: /images/wechat-qcode.jpg </span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure>
<p>放开此部分注释，并在<code>source/images</code>中放入公众号二维码</p>
<p><strong>注意</strong>: 此功能需要NexT版本在5.0.1之后</p>
<h3 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h3><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 <code>false</code> 来关闭动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use velocity to animate everything. </span><br><span class="line">motion: </span><br><span class="line">  enable: true </span><br><span class="line">  async: true </span><br><span class="line">  transition: </span><br><span class="line">    # Transition variants: </span><br><span class="line">    # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut </span><br><span class="line">    # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut </span><br><span class="line">    # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut </span><br><span class="line">    # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut </span><br><span class="line">    # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut </span><br><span class="line">    # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut </span><br><span class="line">    post_block: fadeIn </span><br><span class="line">    post_header: slideDownIn </span><br><span class="line">    post_body: slideDownIn </span><br><span class="line">    coll_header: slideLeftIn # Only for Pisces | Gemini. </span><br><span class="line">    sidebar: slideUpIn</span><br></pre></td></tr></table></figure>

<h3 id="设置全文阅读"><a href="#设置全文阅读" class="headerlink" title="设置全文阅读"></a>设置全文阅读</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示方式。</p>
<ul>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 <strong>推荐</strong>。</li>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，需要添加如下配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend. </span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately. </span></span><br><span class="line"><span class="attr">auto_excerpt:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="设置字数统计-阅读时长"><a href="#设置字数统计-阅读时长" class="headerlink" title="设置字数统计&#x2F;阅读时长"></a>设置字数统计&#x2F;阅读时长</h3><p>在<code>_config.yml</code>中配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings </span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount </span></span><br><span class="line"><span class="attr">post_wordcount:</span> </span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-minimal</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><p>在<code>_config.yml</code>中配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb </span></span><br><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span> </span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> </span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> </span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在_config.next.yml中配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search </span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search </span></span><br><span class="line"><span class="attr">local_search:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input </span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button   </span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> </span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1 </span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>参考<br><a href="https://hexo.io/zh-cn/docs/">官方文档</a><br><a href="https://jiz4oh.com/2020/09/hexo-next/">Hexo 博客使用 Next 主题及美化 | Jiz4oh’s Life</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 增加站内文章链接</title>
    <url>/2024/08/29/Hexo%E5%8D%9A%E5%AE%A2/Hexo-%E5%A2%9E%E5%8A%A0%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="使用markdown的链接语法"><a href="#使用markdown的链接语法" class="headerlink" title="使用markdown的链接语法"></a>使用markdown的链接语法</h3><p>使用markdown的语法指定url创建站内链接，有绝对地址和相对地址两种方式，绝对地址与相对地址的区别在于是否以<code>/</code>开头：</p>
<h4 id="使用绝对地址"><a href="#使用绝对地址" class="headerlink" title="使用绝对地址"></a>使用绝对地址</h4><p>代码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 格式 [<span class="string">标题</span>](<span class="link">文章地址</span>)</span></span><br><span class="line">[<span class="string">Hexo 增加站内文章链接</span>](<span class="link">/Hexo博客/Hexo-增加站内文章链接</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例中，<code>Hexo-增加站内文章链接</code>使用的是文章对应的md文件名，使用hexo n创建post时，空格会转换为中划线-。<code>/Hexo</code>是为了文章管理方便在<code>_posts</code>目录下增加的子目录，<code>Hexo-增加站内文章链接.md</code>位于<code>_posts/Hexo/</code>目录下。</p>
</blockquote>
<p>结果如下：</p>
<p><a href="/Hexo%E5%8D%9A%E5%AE%A2/Hexo-%E5%A2%9E%E5%8A%A0%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5">Hexo 增加站内文章链接</a></p>
<p>Hexo对绝对地址和相对地址的处理方式是不一样的。对于绝对地址<code>/Hexo/Hexo-博客配置</code>，生成的目标url不会变化。</p>
<h4 id="使用相对地址"><a href="#使用相对地址" class="headerlink" title="使用相对地址"></a>使用相对地址</h4><p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Hexo 增加站内文章链接](Hexo/Hexo-增加站内文章链接)</span><br></pre></td></tr></table></figure>

<p>对于相对地址<code>Hexo/Hexo-增加站内文章链接</code>，生成的目标URL会叠加文章的的URL，结果是<code>/Hexo/Hexo/Hexo-增加站内文章链接</code>，这显然不是期望的结果。但是如果是文章内的锚点链接，使用这种方式非常合适。</p>
<p>代码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 格式 [<span class="string">标题</span>](<span class="link">#文章内要跳转的标题</span>)</span></span><br><span class="line">[<span class="string">测试文章内跳转锚点</span>](<span class="link">#测试文章内跳转锚点</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下：<br><a href="#%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%E5%86%85%E8%B7%B3%E8%BD%AC%E9%94%9A%E7%82%B9">跳转文章内测试锚点</a></p>
<p>生成的URL可以正确的跳转到文章内的锚点。注意，标题中的空格用<code>-</code>代替。</p>
<h3 id="使用post-link标签"><a href="#使用post-link标签" class="headerlink" title="使用post_link标签"></a>使用post_link标签</h3><p>由于Hexo文章的URL规则是可以配置的，在<code>_config.yml</code>中可以配置URL自动添加日期、目录等信息。如果使用markdown语法的链接规则多有不便，一方面需要知道目标URL，一方面如果规则修改或者站点迁移，对应的内容需要修改。</p>
<p>好在Hexo提供了<code>post_link</code>标签解决这个问题。</p>
<p>代码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 格式 &#123;% post<span class="emphasis">_link 以_</span>post下文件路径 &#x27;显示链接名&#x27;%&#125;</span></span><br><span class="line">&#123;% post<span class="emphasis">_link Hexo博客/Hexo-博客配置 &#x27;Hexo 博客配置&#x27; %&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例中，<code>Hexo-博客配置</code>使用的是文章对应的md文件名，使用hexo n创建post时，空格会转换为中划线-。<code>Hexo</code>是为了文章管理方便在<code>_posts</code>目录下增加的子目录，<code>Hexo-博客配置.md</code>位于<code>_posts/Hexo</code>目录下。</p>
</blockquote>
<p>结果如下：</p>
<a href="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/Hexo-%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/" title="Hexo 博客配置">Hexo 博客配置</a>

<p>这样的链接会自动适配<code>_config.yml</code>中的文章URL规则。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>对比markdown语法和<code>post_link</code>标签，推荐在文章链接到站内文章时优先使用<code>post_link</code>，链接到文章内锚点时优先使用markdown语法。</p>
<h3 id="测试文章内跳转锚点"><a href="#测试文章内跳转锚点" class="headerlink" title="测试文章内跳转锚点"></a>测试文章内跳转锚点</h3><p>文章内锚点跳转示例</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客配置Giscus评论</title>
    <url>/2025/08/27/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEGiscus%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<p>参考<br><a href="https://weilado.github.io/2025/06/18/%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9F%BA%E4%BA%8Egiscus%EF%BC%89/">如何为博客添加评论系统（基于giscus） | 栞的图书馆</a><br><a href="https://blog.csdn.net/sinat_41212418/article/details/137819858">5分钟，为你的博客增加评论功能_giscus-CSDN博客</a><br><a href="https://mrh233.github.io/2024/04/17/%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Egiscus%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">如何基于giscus配置评论功能 - 奕皓的个人博客</a></p>
<p><a href="https://blog.lanweihong.com/posts/24011/">Hexo NexT 主题使用 utterances 搭建评论系统 | 蓝伟洪的博客</a><br><a href="https://toypipi.github.io/2024/06/21/Hexo-Next-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-utterances-%E8%AF%84%E8%AE%BA/">Hexo NexT 主题配置 utterances 评论 | Toypipi’s blog</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Giscus</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Actions部署Hexo博客</title>
    <url>/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为技术博主，博客的高效维护与部署一直是我关注的重点。近期在维护博客时，我遇到了两个核心问题：</p>
<ol>
<li><strong>内容管理混乱</strong>：草稿箱文件堆积，缺乏分类标准，甚至因误操作破坏了原有配置；</li>
<li><strong>兼容性局限</strong>：计划将文章同步至 FastGPT 等 AI 知识库时，发现官方推荐的 Hexo 部署方案（源码与静态文件混存）中，冗余的 <code>public</code> 目录会干扰 RAG 系统提取内容，且源码与发布产物耦合易引发冲突。</li>
</ol>
<p>为解决这些问题，我采用了<strong>源码与发布分离</strong>的部署架构：将 Markdown 源文件单独存放在一个仓库，通过 GitHub Actions 自动在另一个仓库构建并发布静态文件。这种方式的优劣对比如下：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>官方混仓部署</td>
<td>支持本地手动 &#x2F; 自动发布，预览方便，配置简单</td>
<td>仓库体积大，源码与产物混合，不利于二次利用</td>
</tr>
<tr>
<td>本文分离部署</td>
<td>源码纯净、产物独立，兼容 AI 知识库，自动构建</td>
<td>本地预览需搭测试环境，配置较复杂（双仓库 + 鉴权）</td>
</tr>
</tbody></table>
<h2 id="部署核心思路"><a href="#部署核心思路" class="headerlink" title="部署核心思路"></a>部署核心思路</h2><p>核心逻辑：当源码仓库收到推送时，GitHub Actions 自动将源文件检出到 <code>source/_posts</code>，并从 <code>_hexo</code> 目录复制配置文件还原 Hexo 环境，最终执行构建与发布。</p>
<p><strong>文件结构设计</strong>（源码仓库）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- _hexo/ # Hexo 核心配置目录 </span><br><span class="line">| |-- _config.yml # Hexo 主配置 </span><br><span class="line">| |-- _config.next.yml # NexT 主题配置 </span><br><span class="line">| |-- package.json # Node 环境依赖 </span><br><span class="line">| |-- scaffolds/ # 文章模板（draft/page/post.md） </span><br><span class="line">| |-- static/ # 静态资源（头像、支付码等） </span><br><span class="line">|-- .github/workflows/ # GitHub Actions 工作流配置 </span><br><span class="line">|-- .obsidian/ # Obsidian 编辑器配置（可选）</span><br></pre></td></tr></table></figure>

<h2 id="详细部署步骤"><a href="#详细部署步骤" class="headerlink" title="详细部署步骤"></a>详细部署步骤</h2><h3 id="1-生成-SSH-密钥对（用于仓库间鉴权）"><a href="#1-生成-SSH-密钥对（用于仓库间鉴权）" class="headerlink" title="1. 生成 SSH 密钥对（用于仓库间鉴权）"></a>1. 生成 SSH 密钥对（用于仓库间鉴权）</h3><p>需要生成一对 SSH 密钥，用于源码仓库向发布仓库推送构建结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&lt;github 注册邮箱&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行后会在以下路径生成两个文件：</p>
<ul>
<li>私钥：<code>~/.ssh/id_rsa</code>（Linux&#x2F;Mac）或 <code>C:\Users\&lt;用户名&gt;\.ssh\id_rsa</code>（Windows）</li>
<li>公钥：<code>~/.ssh/id_rsa.pub</code>（同上路径）</li>
</ul>
<p><strong>注意</strong>：.ssh为隐藏目录，需要修改系统设置显示此文件夹</p>
<img src="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/IMG-20250827165137638.png" class="">

<h3 id="2-准备两个仓库"><a href="#2-准备两个仓库" class="headerlink" title="2. 准备两个仓库"></a>2. 准备两个仓库</h3><h4 id="仓库-1：源码仓库（存放-Markdown-与配置）"><a href="#仓库-1：源码仓库（存放-Markdown-与配置）" class="headerlink" title="仓库 1：源码仓库（存放 Markdown 与配置）"></a>仓库 1：源码仓库（存放 Markdown 与配置）</h4><ul>
<li>新建仓库（例如命名为 <code>hexo-source</code>）</li>
<li>进入仓库设置：<code>Settings → Secrets and variables → Actions → New repository secret</code></li>
<li>添加一个名为 <code>HEXO_DEPLOY_KEY</code> 的密钥，值为<strong>私钥 <code>id_rsa</code> 的内容</strong>（用记事本打开复制）</li>
</ul>
<img src="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/IMG-20250827165137689.png" class="">

<img src="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/IMG-20250827165137708.png" class="">


<h4 id="仓库-2：发布仓库（存放静态文件，用于-GitHub-Pages）"><a href="#仓库-2：发布仓库（存放静态文件，用于-GitHub-Pages）" class="headerlink" title="仓库 2：发布仓库（存放静态文件，用于 GitHub Pages）"></a>仓库 2：发布仓库（存放静态文件，用于 GitHub Pages）</h4><ul>
<li>仓库名必须为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>（固定格式，否则 GitHub Pages 无法生效）</li>
<li>权限需设为<strong>公开</strong>，并开启 <code>Discussions</code> 功能（进入仓库设置 → <code>Features</code> 勾选）</li>
<li>配置部署密钥：<code>Settings → Deploy keys → Add deploy key</code><ul>
<li>Title 填 <code>HEXO_DEPLOY_PUB</code></li>
<li>Key 填入<strong>公钥 <code>id_rsa.pub</code> 的内容</strong>，并勾选 <code>Allow write access</code>（允许推送权限）</li>
</ul>
</li>
</ul>
<img src="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/IMG-20250827165137733.png" class="">

<img src="/2021/10/22/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Github-Actions%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/IMG-20250827165137761.png" class="">
<h3 id="3-配置-Hexo-环境文件"><a href="#3-配置-Hexo-环境文件" class="headerlink" title="3. 配置 Hexo 环境文件"></a>3. 配置 Hexo 环境文件</h3><p>在源码仓库中创建 <code>_hexo</code> 目录，放入以下核心文件（可从本地 Hexo 环境中复制, 参考<a href="Hexo-%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE.md">Hexo-博客配置</a>）：</p>
<ul>
<li><code>_config.yml</code>：Hexo 主配置（需修改部署相关配置，见步骤 4）</li>
<li><code>_config.next.yml</code>：NexT 主题配置（其他主题同理）</li>
<li><code>package.json</code>：依赖配置（需包含 <code>hexo</code>、<code>hexo-deployer-git</code> 等核心依赖）</li>
<li><code>scaffolds/</code>：文章模板（<code>draft.md</code>&#x2F;<code>page.md</code>&#x2F;<code>post.md</code>）</li>
<li>静态资源：如头像（<code>avatar.jpg</code>）、关于页（<code>about.md</code>）等，按实际需求存放</li>
</ul>
<h3 id="4-配置部署与工作流文件"><a href="#4-配置部署与工作流文件" class="headerlink" title="4. 配置部署与工作流文件"></a>4. 配置部署与工作流文件</h3><h4 id="①-Hexo-部署配置（-hexo-config-yml）"><a href="#①-Hexo-部署配置（-hexo-config-yml）" class="headerlink" title="① Hexo 部署配置（_hexo/_config.yml）"></a>① Hexo 部署配置（<code>_hexo/_config.yml</code>）</h4><p>在配置文件中添加部署规则，指向发布仓库：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&lt;username&gt;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&lt;email&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="②-GitHub-Actions-工作流（-github-workflows-hexo-deploy-yml）"><a href="#②-GitHub-Actions-工作流（-github-workflows-hexo-deploy-yml）" class="headerlink" title="② GitHub Actions 工作流（.github/workflows/hexo-deploy.yml）"></a>② GitHub Actions 工作流（<code>.github/workflows/hexo-deploy.yml</code>）</h4><p>创建工作流文件，实现自动构建部署：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">hexo-deploy</span>  <span class="comment"># 工作流名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件：向 master 分支推送时执行</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;master&quot;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>  <span class="comment"># 使用 Ubuntu 环境</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 1. 配置时区（避免时间显示异常）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Timezone</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">szenius/set-timezone@v2.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">timezoneLinux:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 2. 拉取源码仓库内容到 source/_posts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">source/_posts</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 3. 安装 Node.js（需与本地开发环境版本一致，这里用 20.x）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;20&#x27;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 4. 缓存 NPM 依赖（加速构建）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 5. 配置 SSH 密钥（用于向发布仓库推送）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span>  <span class="comment"># 引用源码仓库的私钥</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa  # 严格权限，否则 SSH 会拒绝使用</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts  # 信任 GitHub 主机</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 6. 拉取主题（以 NexT 为例，其他主题修改仓库地址即可）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Themes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">next-theme/hexo-theme-next</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/next</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 7. 还原 Hexo 环境（从 _hexo 目录复制配置文件）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli  # 全局安装 Hexo 命令行工具</span></span><br><span class="line"><span class="string">          # 复制核心配置文件</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/_config.yml .</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/_config.next.yml .</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/package.json .</span></span><br><span class="line"><span class="string">          # 复制文章模板</span></span><br><span class="line"><span class="string">          mkdir scaffolds</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/scaffolds/* scaffolds/</span></span><br><span class="line"><span class="string">          # 复制静态页面（关于页、分类页等，按实际需求调整）</span></span><br><span class="line"><span class="string">          mkdir -p source/about source/categories source/tags source/images</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/about.md source/about/index.md</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/categories.md source/categories/index.md</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/tags.md source/tags/index.md</span></span><br><span class="line"><span class="string">          cp source/_posts/_hexo/*.jpg source/images/  # 复制图片资源</span></span><br><span class="line"><span class="string">          # 安装依赖</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 8. 缓存部署目录（加速后续构建）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-deploy-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-deploy-cache</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 9. 构建并发布</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd .deploy_git &amp;&amp; git pull  # 拉取最新发布内容，避免冲突</span></span><br><span class="line"><span class="string">          cd ..</span></span><br><span class="line"><span class="string">          hexo clean  # 清理缓存</span></span><br><span class="line"><span class="string">          hexo generate  # 生成静态文件</span></span><br><span class="line"><span class="string">          hexo deploy  # 部署到发布仓库</span></span><br></pre></td></tr></table></figure>

<h2 id="验证与使用"><a href="#验证与使用" class="headerlink" title="验证与使用"></a>验证与使用</h2><ol>
<li>将上述文件提交到源码仓库的 <code>master</code> 分支，GitHub Actions 会自动触发工作流；</li>
<li>进入源码仓库的 <code>Actions</code> 标签页，查看工作流执行状态，若显示绿色对勾则部署成功；</li>
<li>访问 <code>https://&lt;你的用户名&gt;.github.io</code>，即可看到最新发布的博客。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>私钥 <code>HEXO_DEPLOY_KEY</code> 是敏感信息，切勿泄露或提交到仓库；</li>
<li>发布仓库名必须严格为 <code>&lt;用户名&gt;.github.io</code>，否则 GitHub Pages 无法正常访问；</li>
<li>若主题是自定义修改过的，建议将主题 fork 到自己的仓库，再在工作流中拉取自己的 fork 版本；</li>
<li>本地预览时，可在源码仓库中手动搭建 Hexo 环境（复制 <code>_hexo</code> 目录文件，执行 <code>hexo server</code>）。</li>
</ol>
<p>参考</p>
<p><a href="https://hexo.io/zh-cn/docs/github-pages">Hexo官方提供的Github Actions部署示例</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Obsidian配合Hexo写博客</title>
    <url>/2024/09/20/Hexo%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8Obsidian%E9%85%8D%E5%90%88Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>参考<br><a href="https://zhuanlan.zhihu.com/p/688561305">【2024】从零开始用Hexo+GithubPage搭建个人网站（保姆级） - 知乎 (zhihu.com)</a><br><a href="https://segmentfault.com/a/1190000042111566">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 个人文章 - SegmentFault 思否</a><br><a href="https://zhuanlan.zhihu.com/p/554333805">Obsidian+Git完美维护Hexo博客 - 知乎 (zhihu.com)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux安装</title>
    <url>/2018/03/21/Linux/ArchLinux%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-下载镜像-制作启动U盘"><a href="#1-下载镜像-制作启动U盘" class="headerlink" title="1. 下载镜像 制作启动U盘"></a>1. 下载镜像 制作启动U盘</h1><p>Arch Linux 官方网站 <a href="https://www.archlinux.org/">https://www.archlinux.org/</a></p>
<p>制作启动盘工具 <a href="https://rufus.ie/zh/">Rufus - 轻松创建 USB 启动盘</a></p>
<p>Linux下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=*iso of /dev/sdb bs=41M</span><br></pre></td></tr></table></figure>

<h1 id="2-网络连接"><a href="#2-网络连接" class="headerlink" title="2. 网络连接"></a>2. 网络连接</h1><p>参考 <a href="/2018/05/24/Linux/Linux%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E5%8F%8ASSH%E9%85%8D%E7%BD%AE/" title="Linux配置网络及SSH配置">Linux配置网络及SSH配置</a></p>
<h1 id="3-选择软件源"><a href="#3-选择软件源" class="headerlink" title="3. 选择软件源"></a>3. 选择软件源</h1><p>推荐国内的用户选择<a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn</a> 默认的mirrorlist是开启所有源的，因此我们使用sed先在所有源的前面加上#</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sed -i &quot;s/^\b/#/g&quot; /etc/pacman.d/mirrorlist</span><br><span class="line">#nano /etc/pacman.d /mirrorlist</span><br></pre></td></tr></table></figure>
<p>将mirrors.ustc.edu.cn前面的#去掉</p>
<h1 id="4-分区-格式化-挂载"><a href="#4-分区-格式化-挂载" class="headerlink" title="4. 分区&#x2F;格式化&#x2F;挂载"></a>4. 分区&#x2F;格式化&#x2F;挂载</h1><p> 参考 <a href="/2018/03/22/Linux/Linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/" title="Linux硬盘分区">Linux硬盘分区</a></p>
<h1 id="5-安装基本系统"><a href="#5-安装基本系统" class="headerlink" title="5. 安装基本系统"></a>5. 安装基本系统</h1><h2 id="1-将基本系统安装到根目录上去"><a href="#1-将基本系统安装到根目录上去" class="headerlink" title="1. 将基本系统安装到根目录上去"></a>1. 将基本系统安装到根目录上去</h2><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure>
    
其实，这里安装的基本系统也肯定有自己用不到的冗余功能，例如我就用不到nano文本编辑器，但系统会默认给安上。如果知道基本系统每个文件的作用，其实也完全可以自定义安装。比如：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacstrap /mnt bash coreutils file filesystem grub2 linux pacman \</span><br><span class="line">    procps-ng syslog-ng glibc systemd-sysvcompat shawd dhcpcd vi</span><br></pre></td></tr></table></figure>

&gt; 如果你想使用ifconfig之类的工具，请在上面加上net-tools
</code></pre>
<h2 id="2-生成fstab"><a href="#2-生成fstab" class="headerlink" title="2. 生成fstab"></a>2. 生成fstab</h2><pre><code>用下面命令生成 fstab。如果想使用 UUIDs，使用 -U 选项；如果想使用标签，用 -L 选项.

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#genfstab -U -p /mnt &gt;&gt;/mnt/etc/fstab</span><br></pre></td></tr></table></figure>

&gt; [red]**后面如果出现问题，请不要再次运行genfstab**[red]，如果需要，手动编辑/etc/fstab
/etc/fstab文件在运行genfstab后应该被检查一下。如果之前你生成了一个EFI系统分区，那么 genfstab给EFI分区添加了错误的选项，会导致无法启动。因此你需要移除EFI分区的所有选项，除了noatime. 对其他分区, 替换&quot;codepage=cp437&quot; 为 &quot;codepage=437&quot; , 会挂载失败导致systemd进入恢复模式。
</code></pre>
<h2 id="3-切换到新系统中"><a href="#3-切换到新系统中" class="headerlink" title="3. 切换到新系统中"></a>3. 切换到新系统中</h2><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#arch-chroot /mnt</span><br><span class="line">#sh-4.2#bash</span><br></pre></td></tr></table></figure>
&gt; 到这一步之后，开始系统的主要配置，如果下面文件不存在，需要手动创建。
&gt; 理解并完全安装步骤设置是保证系统配置成功的关键。
</code></pre>
<h2 id="4-对新的基本系统进行设置"><a href="#4-对新的基本系统进行设置" class="headerlink" title="4. 对新的基本系统进行设置"></a>4. 对新的基本系统进行设置</h2><h4 id="写入本机的字符编码方式"><a href="#写入本机的字符编码方式" class="headerlink" title="写入本机的字符编码方式"></a>写入本机的字符编码方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#nano /etc/locale.conf #</span><br><span class="line"></span><br><span class="line">LANG=en_US.UTF-8 #简略写法 echo LANG= en_US.UTF-8 &gt;&gt; locale.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>locale.conf 文件默认不存在，一般设置LANG就行了，它是其它设置的默认值。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/locale.conf</span><br><span class="line"></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_TIME=en_GB.UTF-8</span><br></pre></td></tr></table></figure>

<h4 id="修改本机编码"><a href="#修改本机编码" class="headerlink" title="修改本机编码"></a>修改本机编码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nano /etc/locale.gen  将用不到的编码全删掉，只保留en_US与zh_CN的几行。 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下 &#x2F;etc&#x2F;locale.gen 是一个仅包含注释文档的空文件。选定你需要的本地化类型(移除前面的＃即可), 比如中文系统可以使用:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.GB18030 GB18030</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure>

<p>对系统的编码进行更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#locale-gen </span><br></pre></td></tr></table></figure>

<h4 id="写入本机的名称"><a href="#写入本机的名称" class="headerlink" title="写入本机的名称"></a>写入本机的名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nano /etc/hostname #简略写法：echo &#123;name&#125; &gt;/etc/hostname，也是一样的。</span><br></pre></td></tr></table></figure>


<h4 id="写入键盘布局方案"><a href="#写入键盘布局方案" class="headerlink" title="写入键盘布局方案"></a>写入键盘布局方案</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#nano /etc/vconsole.conf</span><br></pre></td></tr></table></figure>
<p>美式键盘，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KEYMAP=us</span><br><span class="line">FONT=</span><br><span class="line">FONT_MAP=</span><br></pre></td></tr></table></figure>

<h4 id="写入时区"><a href="#写入时区" class="headerlink" title="写入时区"></a>写入时区</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nano /etc/timezone</span><br><span class="line"></span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h4 id="建立时区的软链接"><a href="#建立时区的软链接" class="headerlink" title="建立时区的软链接"></a>建立时区的软链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>

<h4 id="设定系统将用的时间方案"><a href="#设定系统将用的时间方案" class="headerlink" title="设定系统将用的时间方案"></a>设定系统将用的时间方案</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#hwclock --systohc --utc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个时间方案我是试过很多次，如果是双系统，电脑里还有win系统的话，建议设为：–localtime，否则可设为—utc。不过，我现在虽然也用双系统，但还是设的utc，因为设为–localtime虽然在win下时间不会出错，但回到linux下，经常系统会有些古怪的问题，比如，升级系统之时，报密钥错误。使用–utc，虽然在linux下时间会慢8个多小时，但毕竟对整个系统没有影响。</p>
</blockquote>
<p>生成内核的启动镜象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mkinitcpio -p linux</span><br></pre></td></tr></table></figure>


<h4 id="安装必要工具"><a href="#安装必要工具" class="headerlink" title="安装必要工具"></a>安装必要工具</h4><blockquote>
<p>安装必要的网络工具以便于开机后可以配置网络连接(包括无线)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacman –S wpa_supplicant net-tools</span><br><span class="line">#pacman -S dialog</span><br><span class="line">#pacman -S netctl</span><br><span class="line">#pacman -S wireless_tools</span><br></pre></td></tr></table></figure>

<h2 id="6-安装引导"><a href="#6-安装引导" class="headerlink" title="6. 安装引导"></a>6. 安装引导</h2><h4 id="安装grub"><a href="#安装grub" class="headerlink" title="安装grub"></a>安装grub</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacman -S grub-bios os-prober</span><br><span class="line">#grub-install /dev/sda</span><br></pre></td></tr></table></figure>
<p>UEFI 注意分区,参考: <a href="Linux%E5%88%86%E5%8C%BA.%E6%A0%BC%E5%BC%8F%E5%8C%96.%E6%8C%82%E8%BD%BD.md">Linux分区.格式化.挂载</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacman -S grub-bios efibootmgr os-prober</span><br><span class="line">#grub-install --efi-directory=/boot/efi --bootloader-id=arch-grub --target=x86_64-efi</span><br></pre></td></tr></table></figure>

<h4 id="生成启动菜单"><a href="#生成启动菜单" class="headerlink" title="生成启动菜单"></a>生成启动菜单</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">#nano /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<h4 id="生成grub引导windows"><a href="#生成grub引导windows" class="headerlink" title="生成grub引导windows"></a>生成grub引导windows</h4><p>如何生成grub引导文件grub.cfg 这里我们需要充分参考点击打开链接grub的说明。首先，需要额外安装一个 <code>os-prober</code>的软件包，直接pacman就行；然后grub-makeconfig 到&#x2F;boot&#x2F;grub&#x2F;grub.cfg 。此时才能生成可以引导多系统的引导文件.如下图。<br><img src="/2018/03/21/Linux/ArchLinux%E5%AE%89%E8%A3%85/1.png" alt="Window引导"></p>
<h4 id="开机自启网络"><a href="#开机自启网络" class="headerlink" title="开机自启网络"></a>开机自启网络</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#systemctl enable dhcpcd@.service</span><br><span class="line">#dhcpcd</span><br></pre></td></tr></table></figure>

<h4 id="卸载挂载的分区并重启"><a href="#卸载挂载的分区并重启" class="headerlink" title="卸载挂载的分区并重启"></a>卸载挂载的分区并重启</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#umount /mnt/&#123;boot,home,mnt&#125;</span><br><span class="line"># reboot</span><br></pre></td></tr></table></figure>

<p>基本系统已安装完成</p>
<h1 id="7-系统配置"><a href="#7-系统配置" class="headerlink" title="7. 系统配置"></a>7. 系统配置</h1><blockquote>
<p>忘记安装net-tools补救</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip link show #查看网卡</span><br><span class="line">ip link set eth0 up # 启用网卡</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果是DHCP的当然简单，直接<code>dhcpcd</code>即可，如果是固定IP的，则要如下操作：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ip addr add 固定IP/24 dev eth0</span><br><span class="line">#ip link set dev eth0 up</span><br><span class="line">#ip route add default via 网关</span><br></pre></td></tr></table></figure>

<h4 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacman –Syu</span><br></pre></td></tr></table></figure>

<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#useradd -m 新用户 #新建用户</span><br><span class="line">#passwd 新用户     #指定密码：</span><br><span class="line">#usermod -a -G video,audio,lp,log,wheel,optical,scanner,games,users,storage,power 新用户 #指定用户所在的组 </span><br></pre></td></tr></table></figure>

<h4 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/sudoers (添加sudo权限)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>放开<code>%wheel %sudo</code>权限</p>
</blockquote>
<h4 id="sudo命令补全"><a href="#sudo命令补全" class="headerlink" title="sudo命令补全"></a>sudo命令补全</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sudo pacman -S bash-completion </span><br><span class="line">#echo &quot;source /usr/share/bash-completion/bash_completion&quot; &gt;&gt;/home/$USER/.bashrc </span><br></pre></td></tr></table></figure>

<h4 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pacman -S reflector </span><br></pre></td></tr></table></figure>

<p>reflector是一个可以从arch官方MirrorStatus列表取回最新mirrorlist的脚本，并且可以根据最新同步时间和速度排序。<br>下面先说如何自动配置源列表。直接终端输入命令5（注意备份原有源列表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#reflector --verbose --country &#x27;China&#x27; -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<h4 id="安装yaourt"><a href="#安装yaourt" class="headerlink" title="安装yaourt"></a>安装yaourt</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">#The Chinese Arch Linux communities packages.</span><br><span class="line">SigLevel = Optional TrustAll</span><br><span class="line">Server   = http://repo.archlinuxcn.org/$arch</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -Syu yaourt</span><br></pre></td></tr></table></figure>

<h4 id="安装powerpill"><a href="#安装powerpill" class="headerlink" title="安装powerpill"></a>安装powerpill</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#yaourt -S powerpill</span><br></pre></td></tr></table></figure>

<blockquote>
<p>powerpill是一个可以从多个源多线程下载软件包的程序，类似于迅雷一样，可以明显提升更新速度，相当于pacman的外壳程序，使用方法完全和pacman相同。下面说说powerpill，玩arch的人不知道powerpill是不行的，需要注意的是它也是要调用reflector的，但并不是作为依赖。如果安装reflector后powerpill更新前会默认从mirrorstatus取回45个最新更新的源地址，然后并行下载，否则就是读取&#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist然后配置下载。当然我们推荐第一种，总不能每次都手动执行</p>
</blockquote>
<h1 id="7-驱动显卡"><a href="#7-驱动显卡" class="headerlink" title="7. 驱动显卡"></a>7. 驱动显卡</h1><h4 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S mesa</span><br><span class="line"># lspci | grep VGA（查看本机的显卡类型）</span><br><span class="line"># pacman -Ss xf86-video | less（查看能够安装的显卡类型）</span><br><span class="line"># pacman -S …… 安装显卡驱动（或者可以直接所有驱动都自动安装）</span><br><span class="line"># pacman –S xf86-video-vesa</span><br><span class="line"># pacman –S xf86-video-nouveau  #如果是ATI显卡的话，要安xf86-video-ati; </span><br><span class="line"># pacman –S virtualbox-guest-utils #虚拟机</span><br></pre></td></tr></table></figure>

<h4 id="安装系统基础程序："><a href="#安装系统基础程序：" class="headerlink" title="安装系统基础程序："></a>安装系统基础程序：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils dbus # 先安装x-window服务</span><br><span class="line"># pacman –S xterm xorg-xclock  xorg-twm # 安装测试环境</span><br></pre></td></tr></table></figure>

<h4 id="重设系统的编码方式"><a href="#重设系统的编码方式" class="headerlink" title="重设系统的编码方式"></a>重设系统的编码方式</h4><p>编辑<code>.xinitrc</code>，把以下内容添加到文件最开始。内可以使用你所喜欢的编辑器，比如<code>nano</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure>

<p>更新系统的编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#locale-gen</span><br></pre></td></tr></table></figure>

<p>更新一下系统的时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># date -s &quot;2013-01-14 14:40:10&quot;</span><br><span class="line"># hwclock --systohc</span><br></pre></td></tr></table></figure>

<p>音频管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S alsa-utils pulseaudio-alsa</span><br></pre></td></tr></table></figure>

<p>安装网络管理工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman –S networkmanager network-manager-applet wireless_tools</span><br><span class="line"># systemctl enable NetworkManager</span><br><span class="line"># systemctl start NetworkManager</span><br></pre></td></tr></table></figure>

<p>安装桌面</p>
<p>击右键菜单，找到文件管理器，然后进入到目录<code>/usr/share/applications/</code>下，你会看到你已经安装完成的程序，全都可以从这儿启动。此时，你不妨复制几个常用的到你的用户目录：<code>/home/新用户/桌面/</code>下去。复制之后，你会在你的桌面上，看到这些程序的启动器。</p>
<p>安装完ibus之后，在<code>/home/$USER/.xinitrc</code>文件中，写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">ibus-daemon -d -x</span><br></pre></td></tr></table></figure>

<p>Windows下的磁盘挂载<br>    参考<a href="Windows%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD.md">Windows下的磁盘挂载</a></p>
<p>Xfce主题</p>
<p>字体及补丁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S ttf-dejavu ttf-ubuntu-font-family ttf-arphic-ukai ttf-arphic-uming</span><br><span class="line"># pacman -S wqy-microhei wqy-bitmapfont wqy-zenhei ttf-fireflysung</span><br><span class="line">$ yaourt -S cairo-ubuntu libxft-ubuntu freetype2-ubuntu fontconfig-ubuntu       #以普通用户身份执行</span><br></pre></td></tr></table></figure>
<p>安装系统主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gtk-aurora-engine gtk-engine-murrine </span><br></pre></td></tr></table></figure>
<p>鼠标主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xcursor-vanilla-dmz xcursor-vanilla-dmz-aa</span><br></pre></td></tr></table></figure>

<p>图标主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S gnome-icon-theme-extras oxygen-icons human-icon-theme lxde-icon-theme tangerine-icon-theme</span><br></pre></td></tr></table></figure>

<p>针对笔记本电脑的配置：（Speed－step 、 Suspend 等功能）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S  gnome-power-manager  volumeicon</span><br><span class="line">$ yaourt -S laptop-mode-tools pmount</span><br></pre></td></tr></table></figure>

<p>Grub主题<br>在启动过程中发现Xfce桌面启动载入真心简陋，没有关系，我们在AUR里下载一个balou并设置就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yaourt -S archlinux-themes-balou</span><br></pre></td></tr></table></figure>

<p>下面来配置grub的启动界面。AUR里有一个非常棒的包<code>grub2-theme-archlinux</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yaourt -S grub2-theme-archlinux</span><br></pre></td></tr></table></figure>
<p>安装后编辑&#x2F;etc&#x2F;default&#x2F;grub，<br>将<code>#GRUB_THEME=&quot;/path/to/gfxtheme&quot;</code>改为<code>GRUB_THEME=&quot;/boot/grub/themes/Archlinux/theme.txt&quot;</code><br>将<code>GRUB_GFXMODE=auto</code>改为<code>GRUB_GFXMODE=1024x768</code>修改完成后重新生成一下启动文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>安装 i3 窗口管理器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S i3</span><br></pre></td></tr></table></figure>

<p>安装 lightdm 显示管理器，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pacman -S lightdm-gtk3-greeter</span><br></pre></td></tr></table></figure>
<p>然后 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl enable lightdm</span><br><span class="line"># systemctl start lightdm</span><br></pre></td></tr></table></figure>

<h1 id="8-桌面及美化"><a href="#8-桌面及美化" class="headerlink" title="8. 桌面及美化"></a>8. 桌面及美化</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Awesome桌面</title>
    <url>/2024/08/29/Linux/Awesome%E6%A1%8C%E9%9D%A2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Awesome</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian安装NFS</title>
    <url>/2024/04/23/Linux/Debian%E5%AE%89%E8%A3%85NFS/</url>
    <content><![CDATA[<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 安装nfs服务</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nfs-common nfs-kernel-server portman -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建共享目录</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /mnt/share/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /mnt/share</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑映射文件</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享目录</span></span><br><span class="line">/mnt/share	*(rw,<span class="built_in">sync</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ACL赋予nfsnobody权限</span></span><br><span class="line"><span class="built_in">sudo</span> setfacl -m u:nfsbody:rw /mnt/share</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动NFS服务</span></span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/nfs-kernel-server start</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/nfs-common start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查服务启动</span></span><br><span class="line"><span class="built_in">sudo</span> showmount -e</span><br></pre></td></tr></table></figure>



<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nfs</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nfs-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建本地文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo mount [nfs_server]:[server_dir] [local_mount_point]</span></span><br><span class="line"><span class="comment"># [nfs_server] nfs服务器ip</span></span><br><span class="line"><span class="comment"># [server_dir] 服务器共享路径</span></span><br><span class="line"><span class="comment"># [local_mount_point] 本地挂载路径</span></span><br><span class="line"><span class="built_in">sudo</span> mount [nfs_server]:[server_dir] [local_mount_point]</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="built_in">sudo</span> mount 192.168.1.100:/mnt/share /mnt/nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看挂载是否成功</span></span><br><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure>

<p>编辑fstab 配置自动挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/fstab</span><br><span class="line"><span class="comment"># 在最后一行添加 </span></span><br><span class="line">[nfs_server]:/mnt/share	/mnt/nfs	nfs	defaults	0	0</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> umount [local_mount_point] </span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="built_in">sudo</span> umount /mnt/nfs</span><br></pre></td></tr></table></figure>



<p>需要认证参考<a href="https://cn.linux-console.net/?p=22601">为 Linux 客户端设置具有基于 Kerberos 的身份验证的 NFS 服务器 (linux-console.net)</a></p>
<p>安全相关参考<a href="https://cloud.tencent.com/developer/article/1072369">如何确保NFS服务安全-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>用户身份映射参考<a href="https://www.cnblogs.com/wangmo/p/15048045.html">NFS服务的用户身份映射 - wangmo - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>IPTables配置</title>
    <url>/2024/12/10/Linux/IPTables%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>IPTable</tag>
      </tags>
  </entry>
  <entry>
    <title>Gentoo安装</title>
    <url>/2023/05/23/Linux/Gentoo%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h4><p>官方镜像<br><a href="https://distfiles.gentoo.org/releases/amd64/autobuilds/20241208T163323Z/install-amd64-minimal-20241208T163323Z.iso">Minimal CD</a> <a href="https://distfiles.gentoo.org/releases/amd64/autobuilds/20241208T163323Z/stage3-amd64-openrc-20241208T163323Z.tar.xz">Stage</a><br>国内加速<br><a href="https://mirrors.tuna.tsinghua.edu.cn/gentoo/releases/amd64/autobuilds/">清华大学开源软件镜像站</a><br><a href="https://mirrors.ustc.edu.cn/gentoo/releases/amd64/autobuilds/">中国科技大学开源镜像站</a></p>
<p>使用Rufus制作启动U盘.</p>
<img src="/2023/05/23/Linux/Gentoo%E5%AE%89%E8%A3%85/IMG-20241210170128574.png" class="" title="image-20240829112011985">

<h4 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h4><a href="/2018/05/24/Linux/Linux%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E5%8F%8ASSH%E9%85%8D%E7%BD%AE/" title="Linux配置网络及SSH配置">Linux配置网络及SSH配置</a>

<h4 id="分区规划"><a href="#分区规划" class="headerlink" title="分区规划"></a>分区规划</h4><p>参考 <a href="/2018/03/22/Linux/Linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/" title="Linux硬盘分区">Linux硬盘分区</a></p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/gentoo</span><br><span class="line">mount /dev/sdx? /mnt/gentoo</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/gentoo/home</span><br><span class="line">mount /dev/sdx? /mnt/gentoo/home</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/gentoo/boot</span><br><span class="line">mount /dev/sdx? /mnt/gentoo/boot</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/gentoo/boot/efi</span><br><span class="line">mount /dev/sdx? /mnt/gentoo/boot/efi</span><br></pre></td></tr></table></figure>

<h3 id="配置Portage"><a href="#配置Portage" class="headerlink" title="配置Portage"></a>配置Portage</h3><h4 id="释放stage"><a href="#释放stage" class="headerlink" title="释放stage"></a>释放stage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令行浏览器下载stage</span></span><br><span class="line">links http://www.gentoo.org/main/en/mirrors.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送stage3</span></span><br><span class="line">scp stage3-amd64-*.tar.xz root@192.168.0.2:/mnt/gentoo</span><br><span class="line"><span class="built_in">cd</span> /mnt/gentoo</span><br><span class="line"><span class="comment"># 释放stage3</span></span><br><span class="line">tar xpvf stage3-*.tar.bz2 --xattrs-include=<span class="string">&#x27;*.*&#x27;</span> --numeric-owner</span><br></pre></td></tr></table></figure>

<h4 id="挂载系统必要环境"><a href="#挂载系统必要环境" class="headerlink" title="挂载系统必要环境"></a>挂载系统必要环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount --types proc /proc /mnt/gentoo/proc</span><br><span class="line">mount --rbind /sys /mnt/gentoo/sys</span><br><span class="line"><span class="comment">#mount --make-rslave /mnt/gentoo/sys (不使用systemd，所以注释掉)</span></span><br><span class="line">mount --rbind /dev /mnt/gentoo/dev</span><br><span class="line"><span class="comment">#mount --make-rslave /mnt/gentoo/dev (不使用systemd，所以注释掉)</span></span><br><span class="line">mount --rbind /run /mnt/gentoo/run</span><br><span class="line"><span class="comment">#mount --make-slave /mnt/gentoo/run (不使用systemd，所以注释掉)</span></span><br></pre></td></tr></table></figure>

<h4 id="复制DNS"><a href="#复制DNS" class="headerlink" title="复制DNS"></a>复制DNS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/</span><br></pre></td></tr></table></figure>

<h4 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h4><h5 id="常规源"><a href="#常规源" class="headerlink" title="常规源"></a>常规源</h5><p>选择中国源，这一步是非必须的，提供的<code>/etc/portage/make.conf</code>里已经有中国的所有源了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/portage/make.conf   </span><br></pre></td></tr></table></figure>
<h5 id="创建主仓库"><a href="#创建主仓库" class="headerlink" title="创建主仓库"></a>创建主仓库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p -v /mnt/gentoo/etc/portage/repos.conf</span><br><span class="line"></span><br><span class="line">cp -v /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf</span><br><span class="line"></span><br><span class="line"># 加入中国源</span><br><span class="line">nano -w /mnt/gentoo/etc/portage/repos.conf/gentoo.conf：    </span><br><span class="line"></span><br><span class="line">## 源地址</span><br><span class="line">sync-uri = rsync://mirrors.tuna.tsinghua.edu.cn/gentoo-portage/</span><br><span class="line">#sync-uri = rsync://rsync.mirrors.ustc.edu.cn/gentoo-portage/</span><br><span class="line">#sync-uri = rsync://mirrors.yun-idc.com/gentoo-portage/</span><br></pre></td></tr></table></figure>

<h5 id="二进制源"><a href="#二进制源" class="headerlink" title="二进制源"></a>二进制源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改二进制源地址为国内源</span></span><br><span class="line">nano -w /etc/portage/binrepos.conf/gentoobinhost.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原有内容</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># These settings were set by the catalyst build script that automatically</span></span><br><span class="line"><span class="comment"># built this stage.</span></span><br><span class="line"><span class="comment"># Please consider using a local mirror.</span></span><br><span class="line"></span><br><span class="line">[gentoobinhost]</span><br><span class="line">priority = 1</span><br><span class="line"><span class="comment"># sync-uri = https://distfiles.gentoo.org/releases/amd64/binpackages/23.0/x86-64</span></span><br><span class="line">sync-uri = https://mirrors.tuna.tsinghua.edu.cn/gentoo/releases/amd64/binpackages/23.0/x86-64/</span><br><span class="line"><span class="comment"># sync-uri = https://mirrors.ustc.edu.cn/gentoo/releases/amd64/binpackages/23.0/x86-64/</span></span><br></pre></td></tr></table></figure>

<p>如果启用二进制源需要在<code>USE</code>中添加 <code>getbinpkg binpkg-request-signature </code></p>
<h4 id="生成fstab"><a href="#生成fstab" class="headerlink" title="生成fstab"></a>生成fstab</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt/gentoo &gt;&gt; /mnt/gentoo/etc/fstab</span><br></pre></td></tr></table></figure>

<p>生成的fstab格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UUID=......      /boot/efi      vfat      noauto,defaults,noatime,<span class="built_in">umask</span>=0077                               0 2</span><br><span class="line">UUID=......      /              xfs       defaults,noatime                                                 0 1</span><br><span class="line">UUID=......      /home          xfs       noatime,discard    </span><br></pre></td></tr></table></figure>

<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><h4 id="进入新系统环境"><a href="#进入新系统环境" class="headerlink" title="进入新系统环境"></a>进入新系统环境</h4><p><strong>从现在开始，所有的动作将立即在新 Gentoo Linux 环境里生效。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chroot</span> /mnt/gentoo /bin/bash</span><br><span class="line">env-update						</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;(chroot) <span class="variable">$&#123;PS1&#125;</span>&quot;</span> <span class="comment"># 切换提示符，避免混淆</span></span><br></pre></td></tr></table></figure>

<h4 id="同步stage"><a href="#同步stage" class="headerlink" title="同步stage"></a>同步stage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge-webrsync</span><br></pre></td></tr></table></figure>

<p><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>: gentoo handbook上提到可以使用emerge -rsync升级软件包数据库到最近2小时的最新版，这是没有必要的，而且下载的速度会极其慢，所以不推荐这样做。单用emerge-webrsync就可以同步数据库到最近3～4天内的最新版了。</p>
<h4 id="设置profile"><a href="#设置profile" class="headerlink" title="设置profile"></a>设置profile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eselect profile list     <span class="comment">#查看profile予设值</span></span><br><span class="line">eselect profile <span class="built_in">set</span> X    <span class="comment">#这里先保持选择默认值，即“default/linux/amd64/17.1 (stable)”</span></span><br></pre></td></tr></table></figure>

<h4 id="检测cpu指令集"><a href="#检测cpu指令集" class="headerlink" title="检测cpu指令集"></a>检测cpu指令集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装cpuid2cpuflags</span></span><br><span class="line">emerge --ask app-portage/cpuid2cpuflags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看CPU指令集</span></span><br><span class="line">cpuid2cpuflags   </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*/* <span class="subst">$(cpuid2cpuflags)</span>&quot;</span> &gt; /etc/portage/package.use/00cpu-flags</span><br></pre></td></tr></table></figure>

<h4 id="安装CCache-可选，加速编译"><a href="#安装CCache-可选，加速编译" class="headerlink" title="安装CCache(可选，加速编译)"></a>安装CCache(可选，加速编译)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask ccache </span><br><span class="line"><span class="built_in">mkdir</span> -p /var/cache/ccache</span><br><span class="line"><span class="built_in">chown</span> root:portage /var/cache/ccache -R</span><br><span class="line"><span class="built_in">chmod</span> 2775 /var/cache/ccache -R</span><br></pre></td></tr></table></figure>

<p>在portage&#x2F;make.conf中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FEATURES=<span class="string">&quot;ccache -test&quot;</span> </span><br><span class="line">CCACHE_DIR=<span class="string">&quot;/var/cache/ccache&quot;</span></span><br><span class="line"></span><br><span class="line">USE=<span class="string">&quot;... <span class="variable">$&#123;FEATURES&#125;</span>&quot;</span> <span class="comment"># 在USE中添加$&#123;FEATURES&#125; </span></span><br></pre></td></tr></table></figure>

<h4 id="安装Aria2-可选，加快包下载"><a href="#安装Aria2-可选，加快包下载" class="headerlink" title="安装Aria2(可选，加快包下载)"></a>安装Aria2(可选，加快包下载)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask net-misc/aria2</span><br></pre></td></tr></table></figure>

<p>在portage&#x2F;make.conf中添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DISTDIR=&quot;/var/cache/distfiles&quot;</span><br><span class="line">FETCHCOMMAND=&quot;/usr/bin/aria2c -d \$&#123;DISTDIR&#125; -o \$&#123;FILE&#125; \</span><br><span class="line">    --allow-overwrite=true --max-tries=5 --max-file-not-found=2 \</span><br><span class="line">    --max-concurrent-downloads=5 --connect-timeout=5 --timeout=5 \</span><br><span class="line">    --split=5 --min-split-size=2M --lowest-speed-limit=20K \</span><br><span class="line">    --max-connection-per-server=9 --uri-selector=feedback \$&#123;URI&#125;&quot;</span><br><span class="line">RESUMECOMMAND=&quot;$&#123;FETCHCOMMAND&#125;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="配置编译选项"><a href="#配置编译选项" class="headerlink" title="配置编译选项"></a>配置编译选项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /mnt/gentoo/etc/portage/make.conf</span><br></pre></td></tr></table></figure>

<p><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>: 设置编译标志 -march&#x3D;native (如果你知道自己处理器的代号，就用自己的处理器代号替换这里的native 比如我的是skylake，如果不确定就使用native)<br><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>: 设置 <strong>MAKEOPTS&#x3D;”-j8”</strong> 来定义安装软件时并行编译的数量 这个数字等于你的CPU线程数（也称为逻辑CPU数）参考<a href="https://link.zhihu.com/?target=https://wiki.gentoo.org/wiki/MAKEOPTS">MAKEOPTS WiKi</a></p>
<p>完整的配置文件如下(转自<a href="https://zhuanlan.zhihu.com/p/122222365">Gentoo安装流程分享(step by step)，第一篇之基本系统的安装</a>，修改了下注释格式，删除不用的部分)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># These settings were set by the catalyst build script that automatically</span></span><br><span class="line"><span class="comment"># built this stage.</span></span><br><span class="line"><span class="comment"># Please consult /usr/share/portage/config/make.conf.example for a more</span></span><br><span class="line"><span class="comment"># detailed example.</span></span><br><span class="line"><span class="comment"># GCC编译配置 -O3代表优化级别,如果采用更高的-Ofast可能会导致部分软件包编译错误, </span></span><br><span class="line"><span class="comment"># -march=native代表为本机cpu进行编译,如果是交叉编译需要去掉</span></span><br><span class="line">COMMON_FLAGS=<span class="string">&quot;-march=skylake -O2 -pipe&quot;</span></span><br><span class="line">CFLAGS=<span class="string">&quot;<span class="variable">$&#123;COMMON_FLAGS&#125;</span>&quot;</span></span><br><span class="line">CXXFLAGS=<span class="string">&quot;<span class="variable">$&#123;COMMON_FLAGS&#125;</span>&quot;</span></span><br><span class="line">FCFLAGS=<span class="string">&quot;<span class="variable">$&#123;COMMON_FLAGS&#125;</span>&quot;</span></span><br><span class="line">FFLAGS=<span class="string">&quot;<span class="variable">$&#123;COMMON_FLAGS&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源代码包构建时传递给`make`的参数</span></span><br><span class="line"><span class="comment"># 同时编译的线程数,根据cpu线程数和内存大小/2中较小的</span></span><br><span class="line">MAKEOPTS=<span class="string">&quot;-j8&quot;</span>                </span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统上托管的主软件包存储库,其默认值为 `/var/db/repos/gentoo`</span></span><br><span class="line">PORTDIR=<span class="string">&quot;/var/db/repos/gentoo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Portage存储下载的源代码归档的位置，默认为新安装的`/var/cache/distfiles`</span></span><br><span class="line">DISTDIR=<span class="string">&quot;/var/cache/distfiles&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Portage临时文件的位置，默认为`/var/tmp`</span></span><br><span class="line"><span class="comment"># 如果内存足够大(8G、16G)，那么建议把编译程序时存放临时中间文件的目录设置</span></span><br><span class="line"><span class="comment"># 为内存的tmpfs(/tmp目录)，以减少编译时对硬盘的大量读写、延长硬盘使用寿命、</span></span><br><span class="line"><span class="comment"># 并加快编译速度；但如果你的内存较小(&lt;=4G)，那么建议把此项注释掉，否则很多</span></span><br><span class="line"><span class="comment"># 程序会因内存容量不足而导致编译失败</span></span><br><span class="line">PORTAGE_TMPDIR=<span class="string">&quot;/tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE: This stage was built with the bindist Use flag enabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This sets the language of build output to English.</span></span><br><span class="line"><span class="comment"># Please keep this setting intact when reporting bugs.</span></span><br><span class="line">LC_MESSAGES=C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步镜像</span></span><br><span class="line">GENTOO_MIRRORS=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/gentoo&quot;</span></span><br><span class="line"><span class="comment"># 备选</span></span><br><span class="line"><span class="comment"># GENTOO_MIRRORS=&quot;https://mirrors.ustc.edu.cn/gentoo/&quot;</span></span><br><span class="line"><span class="comment"># GENTOO_MIRRORS=&quot;https://mirrors.aliyun.com/gentoo/&quot;</span></span><br><span class="line"><span class="comment"># GENTOO_MIRRORS=&quot;https://mirrors.cloud.tencent.com/gentoo/&quot;</span></span><br><span class="line"><span class="comment"># GENTOO_MIRRORS=&quot;https://mirrors.huaweicloud.com/gentoo/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># emerge的默认选项</span></span><br><span class="line">EMERGE_DEFAULT_OPTS=<span class="string">&quot;--keep-going --with-bdeps=y --quiet --ask --verbose&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次安装完包之后自动清理</span></span><br><span class="line">AUTO_CLEAN=<span class="string">&quot;yes&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定软件包的可用性和稳定性级别。</span></span><br><span class="line"><span class="comment"># 如果更喜欢最新那这里用~amd64(接受安装和更新处于测试阶段的软件包)</span></span><br><span class="line">ACCEPT_KEYWORDS=<span class="string">&quot;amd64&quot;</span>           </span><br><span class="line"><span class="comment"># 接受所有许可证的软件</span></span><br><span class="line">ACCEPT_LICENSE=<span class="string">&quot;*&quot;</span>                </span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言设置</span></span><br><span class="line">L10N=<span class="string">&quot;en-US zh-CN en zh&quot;</span> </span><br><span class="line">LINGUAS=<span class="string">&quot;en_US zh_CN en zh&quot;</span>          </span><br><span class="line"></span><br><span class="line"><span class="comment"># intel集成显卡和nvidia显卡(不使用novueau)</span></span><br><span class="line">VIDEO_CARDS=<span class="string">&quot;intel i965 iris nvidia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># intel声卡</span></span><br><span class="line">ALSA_CARDS=<span class="string">&quot;hda_intel&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入设备 非笔记本去除后面的synaptics</span></span><br><span class="line">INPUT_DEVICES=<span class="string">&quot;libinput synaptics&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置GRUB版本</span></span><br><span class="line">GRUB_PLATFORMS=<span class="string">&quot;efi-64&quot;</span>            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ccache来大大提高重新编译时的速度,安装ccache后解除注释</span></span><br><span class="line"><span class="comment"># CCACHE=&quot;parallel-fetch ccache&quot;  </span></span><br><span class="line"><span class="comment"># ccache使用的目录</span></span><br><span class="line"><span class="comment"># CCACHE_DIR=&quot;/var/cache/ccache&quot;     </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用aria2提高下载速度（不设置也无大碍，设置的话一定要注意指令拼写正确）,</span></span><br><span class="line"><span class="comment"># 安装aria2后解除注释</span></span><br><span class="line"><span class="comment"># FETCHCOMMAND=&quot;/usr/bin/aria2c -d \$&#123;DISTDIR&#125; -o \$&#123;FILE&#125; \</span></span><br><span class="line"><span class="comment">#   --allow-overwrite=true --max-tries=5 --max-file-not-found=2 \</span></span><br><span class="line"><span class="comment">#	--max-concurrent-downloads=5 --connect-timeout=5  --timeout=5 \</span></span><br><span class="line"><span class="comment">#	--split=5 --min-split-size=2M --lowest-speed-limit=20K \</span></span><br><span class="line"><span class="comment">#	--max-connection-per-server=9 --uri-selector=feedback \$&#123;URI&#125;&quot;</span></span><br><span class="line"><span class="comment"># RESUMECOMMAND=&quot;$&#123;FETCHCOMMAND&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># USE变量</span></span><br><span class="line"><span class="comment"># 用户希望在系统中启用的Portage特性列表,影响Portage的行为。</span></span><br><span class="line"><span class="comment"># 由于这是一个增量变量，可以在不直接覆盖通过 Gentoo profile</span></span><br><span class="line"><span class="comment"># 实现的FEATURES值的情况下添加FEATURES值。</span></span><br><span class="line">FEATURES=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gnome和kde及其相关组件</span></span><br><span class="line">DESK_ENV=<span class="string">&quot;-gnome -gnome-shell -gnome-keyring -nautilus -kde icu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用systemd plymouth consolekit 只使用elogind</span></span><br><span class="line"><span class="comment"># 旧教程会使用consolekit，elogind是consolekit未来的替代品</span></span><br><span class="line">FUCKSV=<span class="string">&quot;-systemd -bindist -mdev elogind -oss -grub -plymouth -consolekit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于音频相关软件使用pulseaudio alsa jack特性</span></span><br><span class="line">AUDIO=<span class="string">&quot;alsa jack pulseaudio&quot;</span></span><br><span class="line"></span><br><span class="line">SOFTWARE=<span class="string">&quot;sudo client git openmp minizip udev blkid efi hwdb smack \</span></span><br><span class="line"><span class="string">    acpi ccache dbus policykit udisks cjk emoji -test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络相关</span></span><br><span class="line">NET=<span class="string">&quot;network networkmanager connection-sharing wifi http2 dhclient \</span></span><br><span class="line"><span class="string">    -dhcpcd policykit nftables&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形相关</span></span><br><span class="line">VIDEO=<span class="string">&quot;X vulkan layers glamor nvidia gallium&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要的USE变量</span></span><br><span class="line">USE=<span class="string">&quot;<span class="variable">$&#123;DESK_ENV&#125;</span> <span class="variable">$&#123;FUCKSV&#125;</span> <span class="variable">$&#123;AUDIO&#125;</span> <span class="variable">$&#123;NET&#125;</span> <span class="variable">$&#123;VIDEO&#125;</span> <span class="variable">$&#123;SOFTWARE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制包保存路径</span></span><br><span class="line"><span class="comment"># PKGDIR=&quot;/var/cache/binpkgs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用二进制软件包,加入USE生效</span></span><br><span class="line"><span class="comment"># BIN_PKG=&quot;getbinpkg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># emerge时用到的代理 需要代理时候自行设置</span></span><br><span class="line"><span class="comment"># http_proxy=&quot;http://127.0.0.1:8889&quot; </span></span><br><span class="line"><span class="comment"># https_proxy=&quot;http://127.0.0.1:8889&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="永久禁用nouveau驱动模块"><a href="#永久禁用nouveau驱动模块" class="headerlink" title="永久禁用nouveau驱动模块"></a>永久禁用nouveau驱动模块</h4><p><strong>强烈要求你禁用Nouveau驱动！！能省掉以后很多莫名其妙的麻烦！</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/modprobe.d/</span><br><span class="line">nano -w /etc/modprobe.d/blacklist.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入以下内容</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure>

<p>即便在编译内核前就已经设置内核禁用Nouveau驱动了，但是内核安装时还是会默认把nouveau驱动作为内核模块自动加载。启用了nouveau驱动模块的内核会出现各式各样的莫名其妙的数不清的问题，所以为了避免以后出现这些问题，必须禁用nouveau模块。</p>
<h4 id="内核配置和编译"><a href="#内核配置和编译" class="headerlink" title="内核配置和编译"></a>内核配置和编译</h4><p>安装内核源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask sys-kernel/gentoo-sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果安装多个版本内核时执行</span></span><br><span class="line">eselect kernel list 	<span class="comment"># 查看内核列表</span></span><br><span class="line">eselect kernel <span class="built_in">set</span> 1 	<span class="comment"># 选择内核版本</span></span><br></pre></td></tr></table></figure>

<p>某些驱动程序在工作之前需要在系统上安装其他固件。这通常是网络接口的情况，尤其是无线网络接口。此外，在使用开源驱动程序时，来自AMD，Nvidia和Intel等供应商的现代视频芯片通常需要外部固件文件。大多数固件都封装在<a href="https://links.jianshu.com/go?to=https://packages.gentoo.org/packages/sys-kernel/linux-firmware">sys-kernel &#x2F; linux-firmware</a>中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask --quiet sys-kernel/linux-firmware</span><br></pre></td></tr></table></figure>

<p>除了独立显卡硬件和网络接口之外，CPU 可能也需要固件更新。通常这种固件被称为<em>微码（microcode）</em>。有时需要更新版本的微码来修补 CPU 硬件中的不稳定性、安全问题或其他复杂的错误。</p>
<p>AMD CPU 的微码更新在前面提到的 <a href="https://packages.gentoo.org/packages/sys-kernel/linux-firmware">sys-kernel&#x2F;linux-firmware</a> 软件包内分发。Intel CPU 的微码可以在 <a href="https://packages.gentoo.org/packages/sys-firmware/intel-microcode">sys-firmware&#x2F;intel-microcode</a> 包中找到，并且需要单独安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Intel CPU 执行</span></span><br><span class="line">emerge --ask sys-firmware/intel-microcode</span><br></pre></td></tr></table></figure>


<p>三种方法安装内核</p>
<p><strong>安装系统时可选择安装二进制内核，系统安装完后再配置编译内核，参考 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel/zh-cn">配置Linux内核 - Gentoo Wiki</a></strong></p>
<ol>
<li><p>全自动安装</p>
<p>当为基于 amd64 的系统安装和编译内核时，Gentoo 推荐使用 <a href="https://packages.gentoo.org/packages/sys-kernel/gentoo-sources">sys-kernel&#x2F;gentoo-sources</a> 软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask sys-kernel/installkernel</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合安装(推荐方式)</p>
<p>生成内核配置文件</p>
<p>将genkernel的默认内核配置文件“generated-config”复制过来，里面已经设置好了绝大部分应用场景以及绝大部分硬件驱动的配置，非常方便，值得借过来使用，只需要在自己手动配置内核的时候将其加载，在其基础上做一点点轻微的修改或完全不修改都可以，对内核新手极其友好！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask sys-kernel/genkernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以genkernel的配置文件为基础进行自定义配置</span></span><br><span class="line"><span class="built_in">cp</span> /usr/share/genkernel/arch/x86_64/generated-config /usr/src/linux/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /usr/src/linux/generated-config /usr/src/linux/generated-config.bak </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">genkernel --mountboot --install all</span><br></pre></td></tr></table></figure>

<p><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>如果想在以后支持jack低延迟实时音频组件（Jack-Audio-Connection-Kit），则需要vim generated-config，手动设置“CONFIG_CGROUPS&#x3D;y”、“CONFIG_CGROUP_SCHED&#x3D;y”、“CONFIG_RT_GROUP_SCHED&#x3D;y”，然后重新make menuconfig载入保存generated-config一遍，接下来再编译内核。<br><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>: 使用nvidia显卡闭源驱动，需要将内核配置中“CONFIG_I2C_NVIDIA_GPU”这一项禁用，否则会和官方nvidia-drivers冲突！！！
</p>
</li>
<li><p>全手动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge sys-apps/pciutils</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/linux</span><br><span class="line"><span class="comment"># 配置内核</span></span><br><span class="line">make menuconfig </span><br></pre></td></tr></table></figure></li>
</ol>
<p>![[Gentoo安装&#x2F;IMG-20241210170128644.png]]<br>有些内核选项是必须的，必须编译到内核中，而不是作为模块加载。<code>*</code>表示包括到内核中，<code>M</code>表示作为模块加载，<code>[]</code>只有包括到内核中和排除在外两种选项，<code>&lt;&gt;</code>则有包括到内核中、排除在外和以模块加载三种选项。下面这些选项都必须以<code>*</code>方式编译到内核中。</p>
<p>devtmpfs支持。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Device Drivers ---&gt;</span><br><span class="line">  Generic Driver Options ---&gt;</span><br><span class="line">    [*] Maintain a devtmpfs filesystem to mount at /dev</span><br><span class="line">    [*]   Automount devtmpfs at /dev, after the kernel mounted the rootfs</span><br></pre></td></tr></table></figure>

<p>SCSI磁盘支持。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Device Drivers ---&gt;</span><br><span class="line">   SCSI device support  ---&gt;</span><br><span class="line">      &lt;*&gt; SCSI disk support</span><br></pre></td></tr></table></figure>
<p>选择支持的文件系统。<strong>因为ESP分区用的FAT32格式化的，根目录用的XFS格式化的，所以这里这两项（FAT32也就是VFAT）必须包括到内核中，虚拟内存和proc文件系统也是必选的</strong>。其实这里还可以取消掉不需要的文件系统，但是对于新手不建议取消任何自己不明白的东西，很容易弄的最后内核没办法启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File systems ---&gt;</span><br><span class="line">  &lt; &gt; Second extended fs support</span><br><span class="line">  &lt; &gt; The Extended 3 (ext3) filesystem</span><br><span class="line">  &lt;*&gt; The Extended 4 (ext4) filesystem</span><br><span class="line">  &lt; &gt; Reiserfs support</span><br><span class="line">  &lt; &gt; JFS filesystem support</span><br><span class="line">  &lt; &gt; XFS filesystem support</span><br><span class="line">  &lt; &gt; Btrfs filesystem support</span><br><span class="line">  DOS/FAT/NT Filesystems  ---&gt;</span><br><span class="line">    &lt;*&gt; MSDOS fs support</span><br><span class="line">    &lt;*&gt; VFAT (Windows-95) fs support</span><br><span class="line"> </span><br><span class="line">Pseudo Filesystems ---&gt;</span><br><span class="line">    [*] /proc file system support</span><br><span class="line">    [*] Tmpfs virtual memory file system support (former shm fs)</span><br></pre></td></tr></table></figure>
<p>如果处理器是多核的，还需要开启SMP（对称多处理器支持）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Processor type and features  ---&gt;</span><br><span class="line">  [*] Symmetric multi-processing support</span><br></pre></td></tr></table></figure>
<p>USB也必须启用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Device Drivers ---&gt;</span><br><span class="line">  HID support  ---&gt;</span><br><span class="line">    -*- HID bus support</span><br><span class="line">    &lt;*&gt;   Generic HID driver</span><br><span class="line">    [*]   Battery level reporting for HID devices</span><br><span class="line">      USB HID support  ---&gt;</span><br><span class="line">        &lt;*&gt; USB HID transport layer</span><br><span class="line">  [*] USB support  ---&gt;</span><br><span class="line">    &lt;*&gt;     xHCI HCD (USB 3.0) support</span><br><span class="line">    &lt;*&gt;     EHCI HCD (USB 2.0) support</span><br><span class="line">    &lt;*&gt;     OHCI HCD (USB 1.1) support</span><br></pre></td></tr></table></figure>

<p><strong>系统体系相关的内核配置</strong></p>
<p>因为选择了multlib，所以32和64位的程序都会安装。为了支持32位程序，必须启用32位程序模拟功能。这里其实倒是不用怎么改，默认已经都选上了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Processor type and features  ---&gt;</span><br><span class="line">   [*] Machine Check / overheating reporting </span><br><span class="line">   [*]   Intel MCE Features</span><br><span class="line">   [*]   AMD MCE Features</span><br><span class="line">   Processor family (AMD-Opteron/Athlon64)  ---&gt;</span><br><span class="line">      ( ) Opteron/Athlon64/Hammer/K8</span><br><span class="line">      ( ) Intel P4 / older Netburst based Xeon</span><br><span class="line">      ( ) Core 2/newer Xeon</span><br><span class="line">      ( ) Intel Atom</span><br><span class="line">      (*) Generic-x86-64</span><br><span class="line">Binary Emulations  ---&gt;</span><br><span class="line">   [*] IA32 Emulation</span><br></pre></td></tr></table></figure>
<p>启用GPT支持，因为前面我用的GPT分区表，EFI启动方式，所以这两项也必须启用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-*- Enable the block layer ---&gt;</span><br><span class="line">   Partition Types ---&gt;</span><br><span class="line">      [*] Advanced partition selection</span><br><span class="line">      [*] EFI GUID Partition support</span><br></pre></td></tr></table></figure>

<p>EFI的支持。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Processor type and features  ---&gt;</span><br><span class="line">    [*] EFI runtime service support </span><br><span class="line">    [*]   EFI stub support</span><br><span class="line">    [*]     EFI mixed-mode support</span><br><span class="line"> </span><br><span class="line">Firmware Drivers  ---&gt;</span><br><span class="line">    EFI (Extensible Firmware Interface) Support  ---&gt;</span><br><span class="line">        &lt;*&gt; EFI Variable Support via sysfs</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编译内核</span><br><span class="line">make -j12 #（CPU核心数根据机器cpu调整）      </span><br><span class="line">make modules_install</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>使用二进制内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装二进制内核</span></span><br><span class="line">emerge --ask sys-kernel/gentoo-kernel-bin</span><br></pre></td></tr></table></figure>

<p>可选：生成一个initramfs</p>
<p>在某些情况中需要建立一个initramfs——一个基于内存的初始化文件系统。最觉的原因是当重要的文件系统位置（如&#x2F;usr&#x2F;或&#x2F;var&#x2F;）在分离的分区。通过一个initramfs，这些分区可以使用initramfs里面的工具来完成挂载。</p>
<p>用dracut生成内核的initramfs，快速且方便，新手友好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask sys-kernel/dracut</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /boot</span><br><span class="line"></span><br><span class="line">dracut --hostonly</span><br></pre></td></tr></table></figure>

<p>或者使用genkernel生成内核的initramfs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/src/linux/generated-config /etc/kernels/kernel-config-&lt;内核版本号&gt;-gentoo-x86_64</span><br><span class="line">genkernel --install initramfs</span><br></pre></td></tr></table></figure>



<h3 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h3><h4 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nano -w /etc/conf.d/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;HOSTNAME&quot;</span> &gt; /etc/hostname</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置系统时区"><a href="#配置系统时区" class="headerlink" title="配置系统时区"></a>配置系统时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/share/zoneinfo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决时间差8小时问题（双系统时会遇到Windows时间不对）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/localtime</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -sv /usr/share/zoneinfo/Universal /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> emerge --config sys-libs/timezone-data</span><br></pre></td></tr></table></figure>

<h4 id="配置编码"><a href="#配置编码" class="headerlink" title="配置编码"></a>配置编码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano -w /etc/locale.gen 		<span class="comment">#将以下几项取消注释，如果没有手动输入</span></span><br><span class="line"></span><br><span class="line">en_US ISO-8859-1</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN GBK </span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line"></span><br><span class="line">locale-gen 						<span class="comment"># 更新</span></span><br></pre></td></tr></table></figure>

<h4 id="设置系统locale"><a href="#设置系统locale" class="headerlink" title="设置系统locale"></a>设置系统locale</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看可用系统时区和地区配置</span></span><br><span class="line">eselect locale list  </span><br><span class="line"></span><br><span class="line"><span class="comment">#这里只能选择“en-US.utf8”！！假如设置成了中文后，整个系统的终端命令行会乱码！！！</span></span><br><span class="line">eselect locale <span class="built_in">set</span> X    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新环境</span></span><br><span class="line">env-update &amp;&amp; <span class="built_in">source</span> /etc/profile &amp;&amp; <span class="built_in">export</span> PS1=<span class="string">&quot;(chroot) <span class="variable">$&#123;PS1&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置sudo自动补全"><a href="#配置sudo自动补全" class="headerlink" title="配置sudo自动补全"></a>配置sudo自动补全</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> emerge --ask app-shells/bash-completion</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 bash-completion 全局 USE 标记</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/protage/make.conf</span><br><span class="line">USE=<span class="string">&quot;... bash-completion&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> emerge --avuDN world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用bash-completion的功能</span></span><br><span class="line"><span class="built_in">sudo</span> eselect bashcomp <span class="built_in">enable</span> base</span><br><span class="line"><span class="comment"># sudo bashcomp-config enable base</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哪些命令支持bash-completion</span></span><br><span class="line"><span class="built_in">sudo</span> eselect bashcomp list</span><br></pre></td></tr></table></figure>

<h4 id="安装网络工具"><a href="#安装网络工具" class="headerlink" title="安装网络工具"></a>安装网络工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无线</span></span><br><span class="line">emerge --ask net-wireless/iw</span><br><span class="line">emerge --ask net-wireless/wpa_supplicant</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有线</span></span><br><span class="line">emerge --ask net-misc/netifrc <span class="comment"># openrc 自带</span></span><br><span class="line"><span class="comment"># emerge --ask net-misc/systemd-networkd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PPPoE环境</span></span><br><span class="line">emerge --ask net-dialup/ppp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用GUI可跳过</span></span><br><span class="line"><span class="comment"># 要在引导时激活网络接口，需要将它们添加到默认运行级别</span></span><br><span class="line"><span class="comment"># 首先使用 ifconfig 查看网络接口名称</span></span><br><span class="line"><span class="built_in">cd</span> /etc/init.d/</span><br><span class="line"><span class="built_in">ln</span> -s net.lo net.eno1 <span class="comment"># 此处网卡名称需要和实际网卡名对应</span></span><br><span class="line">rc-update add net.eno1 default</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>![[Gentoo安装&#x2F;IMG-20241210170128726.png]]<br>安装配置networkmanager</p>
<p>最方便支持多种联网方式的工具是NetworkManager,基本满足所有需求，但同时它的依赖有点多。如果使用桌面环境的话建议安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano -w /etc/portage/make.conf:</span><br><span class="line">USE=“networkmanager connection-sharing dhclient policykit ppp wifi -dhcpcd”</span><br><span class="line"></span><br><span class="line">emerge net-misc/networkmanager </span><br><span class="line"></span><br><span class="line">nano -w /etc/dhcp/dhclient.conf：</span><br><span class="line">send host-name <span class="string">&quot;Gentoo&quot;</span>    <span class="comment">#your hostname</span></span><br><span class="line"></span><br><span class="line">nano -w /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">[connectivity]</span><br><span class="line">uri=http://nmcheck.gnome.org/check_network_status.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nano -w /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">[main]</span><br><span class="line">plugins=keyfile</span><br><span class="line">dns=dnsmasq</span><br><span class="line">hostname-mode=none</span><br><span class="line"></span><br><span class="line">rc-update del dhcpcd</span><br><span class="line">rc-update add NetworkManager default</span><br><span class="line"><span class="comment"># systemctl disable dhcpcd</span></span><br><span class="line"><span class="comment"># systemctl enable networkmanager</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gpasswd -a &lt;你的桌面使用用户名&gt; plugdev   #没有这一步，用户将不能使用networkmanager，也就不能上网。不过先跳过这一步，在设置系统用户的时候再做。</span></span><br><span class="line"></span><br><span class="line">nano -w /etc/dnsmasq.conf:</span><br><span class="line">server=114.114.114.114</span><br></pre></td></tr></table></figure>

<h4 id="安装必要的工具"><a href="#安装必要的工具" class="headerlink" title="安装必要的工具"></a>安装必要的工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统日志</span></span><br><span class="line">emerge --ask app-admin/sysklogd</span><br><span class="line">rc-update add sysklogd default</span><br><span class="line"><span class="comment"># systemctl enable sysklogd</span></span><br><span class="line"><span class="comment"># systemctl start sysklogd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计划任务管理</span></span><br><span class="line">emerge --ask sys-process/cronie</span><br><span class="line">rc-update add cronie default</span><br><span class="line"><span class="comment"># systemctl enable cronie</span></span><br><span class="line"><span class="comment"># systemctl start cronie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件索引</span></span><br><span class="line">emerge --ask sys-apps/mlocate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电源管理</span></span><br><span class="line">emerge --ask sys-power/acpid</span><br><span class="line">rc-update add acpid default</span><br><span class="line"><span class="comment"># systemctl enable acpid</span></span><br><span class="line"><span class="comment"># systemctl start acpid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU温度管理</span></span><br><span class="line">emerge sys-power/thermald</span><br><span class="line">rc-update add thermald default</span><br><span class="line"><span class="comment"># systemctl enable thermald </span></span><br><span class="line"><span class="comment"># systemctl start thermald</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设备管理工具</span></span><br><span class="line">emerge --ask virtual/udev</span><br><span class="line">rc-update add udev sysinit</span><br><span class="line"><span class="comment"># systemctl enable udev</span></span><br><span class="line"><span class="comment"># systemctl start udev</span></span><br></pre></td></tr></table></figure>



<h4 id="配置系统用户"><a href="#配置系统用户" class="headerlink" title="配置系统用户"></a>配置系统用户</h4><p>安装sudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge app-admin/sudo</span><br><span class="line"></span><br><span class="line">nano -w /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>把 <code>%wheel ALL=(ALL) ALL</code> 这一行去掉注释，如果希望执行sudu不需要密码则取消注释<code>%wheel ALL=(ALL) NOPASSWD:ALL</code></p>
<p>添加用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd <span class="built_in">sudo</span> </span><br><span class="line">useradd -m -G <span class="built_in">users</span>,wheel,usb,portage,video,audio,<span class="built_in">sudo</span> -s /bin/bash [用户名]</span><br><span class="line"><span class="built_in">chmod</span> 700 /home/[用户名] -R</span><br></pre></td></tr></table></figure>

<p>设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置root密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line">passwd &#123;用户名&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加操作系统启动项"><a href="#添加操作系统启动项" class="headerlink" title="添加操作系统启动项"></a>添加操作系统启动项</h4><p>在<code>/etc/portage/make.conf</code>中添加grub配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_PLATFORMS=<span class="string">&quot;efi-64&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装grub2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask sys-boot/grub:2</span><br><span class="line">emerge --ask sys-boot/os-prober <span class="comment"># 用于识别其他分区的系统（双系统）</span></span><br></pre></td></tr></table></figure>

<p>grub安装到硬盘并生成开机启动项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Gentoo</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /sys/firmware/efi/efivarsos-prober</span><br></pre></td></tr></table></figure>

<p>如果出现No space left on device，请运行以下命令，之后再重复上述步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -t efivarfs efivarfs /sys/firmware/efi/efivars</span><br><span class="line"><span class="built_in">rm</span> /sys/firmware/efi/efivars/dump-*</span><br></pre></td></tr></table></figure>

<p>grub默认配置添加自定义配置，可提高intel cpu的稳定性和性能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano -w /etc/default/grub：</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;intel_idle.max_cstate=0 processor.max_cstate=1&quot;</span></span><br><span class="line"></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> /stage3-*.tag.ge</span><br><span class="line"><span class="comment"># 退出chroot</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">umount -lR /mnt/gentoo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功开机并进入系统后</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p><strong>如果开机不正常参考挂载文件系统(不要执行分区和mkfs操作)，可重新chroot进入系统修改错误的配置。</strong></p>
<h3 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h3><h4 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 x11-base/xorg-drivers-21.1 开始,x11-base/xorg-drivers更改 [USE 标志]设置</span></span><br><span class="line"><span class="comment"># 这将弃用x11-drivers/xf86-video-intel驱动程序，以支持内置的通用模式设置DDX驱动程序</span></span><br><span class="line"><span class="comment"># 具有video_cards_i915USE 标志集将继续安装 Intel DDX 驱动程序。</span></span><br><span class="line">emerge --ask x11-base/xorg-drivers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英伟达显卡</span></span><br><span class="line">emerge --ask x11-drivers/nvidia-drivers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装xorg-server</span></span><br><span class="line">emerge --ask x11-base/xorg-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装双显卡设置工具</span></span><br><span class="line">emerge --ask x11-apps/xrandr </span><br><span class="line"></span><br><span class="line"><span class="comment"># 让nvidia自动设置双显卡prime配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/X11/xorg.conf </span><br><span class="line"><span class="built_in">sudo</span> nvidia-xconfig --prime </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完更新当前系统组件环境</span></span><br><span class="line">env-update &amp;&amp; <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p><a href="**%E8%BF%99%E4%B8%AA%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9fstab%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E9%A1%B9%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BD%E5%BC%82%E5%B8%B8%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8**">^注意</a>: 以后每次重新编译安装内核kernel后，均须要运行一遍“emerge @module-rebuild”，重新编译安装nvidia驱动模块加载到内核之中，否则nvidia驱动无法加载！！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep nvidia</span><br><span class="line"><span class="built_in">sudo</span> rmmod nvidia</span><br><span class="line"><span class="built_in">sudo</span> modprobe nvidia</span><br><span class="line"></span><br><span class="line">lsmod|grep nvidia</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/modules-load.d/nvidia.conf:</span><br><span class="line">nvidia</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/modprobe.d/nvidia-drm.conf:</span><br><span class="line">options nvidia-drm modeset=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> rc-update add modules boot</span><br><span class="line"><span class="built_in">sudo</span> reboot </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="LightDM"><a href="#LightDM" class="headerlink" title="LightDM"></a>LightDM</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装LightDM，使用KDE可忽略</span></span><br><span class="line"><span class="built_in">sudo</span> emerge --ask gui-libs/display-manager-init</span><br><span class="line"><span class="built_in">sudo</span> emerge --ask x11-misc/lightdm </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不安装桌面管理器需要加入环境，登录后自动启动桌面</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;XSESSION=\&quot;awesome\&quot;&quot;</span> &gt; /etc/env.d/90xsession</span><br><span class="line">env-update &amp;&amp; <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># openrc</span></span><br><span class="line">nano -w /etc/conf.d/display-manager</span><br><span class="line">DISPLAYMANAGER=<span class="string">&quot;lightdm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认开机启动</span></span><br><span class="line">rc-update add display-manager default</span><br><span class="line"><span class="comment"># 设置dubs默认开机启动，虽然display-manager也会启动它，但有时候会出现奇怪的问题</span></span><br><span class="line">rc-update add dbus default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动启动</span></span><br><span class="line">rc-service dbus start </span><br><span class="line">rc-service display-manager start</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd</span></span><br><span class="line"><span class="comment"># systemctl enable lightdm.service</span></span><br></pre></td></tr></table></figure>

<h4 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装KDE桌面可忽略上边LightDM,同时需要删除USE中`-kde`</span></span><br><span class="line"><span class="built_in">sudo</span> emerge --ask x11-misc/sddm</span><br><span class="line"><span class="built_in">sudo</span> emerge --ask kde-plasma/plasma-meta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Dock</span></span><br><span class="line"><span class="comment"># 安装完打开latte-dock后会自动设置为开机自启动</span></span><br><span class="line"><span class="built_in">sudo</span> emerge --ask kde-misc/latte-dock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改登陆管理器配置文件</span></span><br><span class="line">nano -w /etc/conf.d/display-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- xdm内容</span></span><br><span class="line">DISPLAYMANAGER=<span class="string">&quot;sddm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加SDDM开机启动</span></span><br><span class="line"><span class="built_in">sudo</span> rc-update add xdm default</span><br><span class="line"><span class="comment"># 启动SDDM</span></span><br><span class="line"><span class="built_in">sudo</span> rc-service xdm start </span><br><span class="line"></span><br><span class="line"><span class="comment"># Systemd</span></span><br><span class="line"><span class="comment"># sudo systemctl enable xdm</span></span><br><span class="line"><span class="comment"># sudo systemctl start xdm</span></span><br></pre></td></tr></table></figure>

<h4 id="Awesome"><a href="#Awesome" class="headerlink" title="Awesome"></a>Awesome</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awesome 平铺式桌面</span></span><br><span class="line">emerge --ask x11-wm/awesome </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.config/awesome/</span><br><span class="line"><span class="built_in">cp</span> /etc/xdg/awesome/rc.lua ~/.config/awesome/rc.lua</span><br><span class="line">awesome -k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 壁纸支持</span></span><br><span class="line">emerge --ask media-gfx/feh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在~/.config/awesome/theme/theme中添加一下内容</span></span><br><span class="line">theme.wallpaper_cmd = &#123; <span class="string">&quot;wesetbg -f .config/awesome/themes/awesome-wallpaper.png&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mate"><a href="#Mate" class="headerlink" title="Mate"></a>Mate</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择profile</span></span><br><span class="line">eselect profile list</span><br><span class="line">eselect profile <span class="built_in">set</span> 0 <span class="comment"># 选择default/linux/amd64/23.0/desktop</span></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">emerge -auvDU @world</span><br><span class="line"></span><br><span class="line"><span class="comment"># Meta 桌面</span></span><br><span class="line">emerge --ask mate-base/mate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改xsession配置</span></span><br><span class="line">nano -w /etc/env.d/90xsession</span><br><span class="line"><span class="comment">#--- 90xsession内容</span></span><br><span class="line">XSESSION=<span class="string">&quot;Mate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--- </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改LightDM配置(需要安装LightDM)</span></span><br><span class="line">nano -w /etc/conf.d/display-manager</span><br><span class="line"><span class="comment">#--- display-manager内容</span></span><br><span class="line">DISPLAYMANAGER=<span class="string">&quot;lightdm&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># xfce4桌面</span></span><br><span class="line">emerge --ask xfce-base/xfce4-meta </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试桌面启动指令</span></span><br><span class="line">startxfce4 <span class="comment"># 启动Xfce桌面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pulseaudio音量控制</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-volumed-pulse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝牙音乐播放组件</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-pulseaudio-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有正在运行的程序的列表，以及每个程序占用的CPU和内存消耗。 </span></span><br><span class="line">emerge --ask xfce-extra/xfce4-taskmanager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监视和管理电源使用情况的应用程序。 这对笔记本电脑特别重要！</span></span><br><span class="line"><span class="comment"># 电源管理器允许用户调节屏幕亮度，选择最大性能或节电模式，</span></span><br><span class="line"><span class="comment"># 并在盖子关闭或按下按钮时设置休眠，暂停和关闭操作</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-power-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 适合笔记本电脑用户。 它显示电池百分比，剩余时间，电源（交流或电池），风扇状态，警告，</span></span><br><span class="line"><span class="comment"># 甚至可以配置为在特定功率级别执行命令。 此功能可用于在电池电量几乎耗尽时将笔记本电脑置于休眠模式。</span></span><br><span class="line">xfce-extra/xfce4-battery-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加几个窗口管理器主题</span></span><br><span class="line">emerge --ask x11-themes/xfwm4-themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个X11终端，比准系统更可配置和有用 xterm </span></span><br><span class="line">emerge --ask x11-terms/xfce4-terminal</span><br><span class="line"></span><br><span class="line"><span class="comment"># Xfce的默认图形文件管理器。</span></span><br><span class="line">emerge --ask xfce-base/thunar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许用户从Thunar内预览某些类型的文件，例如图像和字体。</span></span><br><span class="line">emerge --ask xfce-extra/tumbler</span><br><span class="line"></span><br><span class="line"><span class="comment"># manages自动挂载可移动介质和驱动器。</span></span><br><span class="line">emerge --ask xfce-extra/thunar-volman</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌入面板的一个小命令行。 它比打开终端运行命令更快。</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-verve-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供一种方便的方法，只需点击鼠标即可安装/etc/fstab中列出的设备。</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-mount-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许用户监视硬件传感器，例如CPU温度，风扇RPM，硬盘驱动器温度，主板电压等。</span></span><br><span class="line">emerge --ask xfce-extra/xfce4-sensors-plugin</span><br></pre></td></tr></table></figure>

<h4 id="音频控制"><a href="#音频控制" class="headerlink" title="音频控制"></a>音频控制</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask alsa-utils</span><br><span class="line">emerge --ask alsa-plugins</span><br></pre></td></tr></table></figure>

<h4 id="中文字体"><a href="#中文字体" class="headerlink" title="中文字体"></a>中文字体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emerge --ask media-fonts/arphicfonts</span><br><span class="line">emerge --ask media-fonts/noto-cjk</span><br><span class="line">emerge --ask media-fonts/source-han-sans</span><br><span class="line">emerge --ask media-fonts/wqy-microhei</span><br><span class="line">emerge --ask media-fonts/wqy-zenhei</span><br><span class="line"></span><br><span class="line">eselect fontconfig list </span><br><span class="line">eselect fontconfig <span class="built_in">enable</span> X X X <span class="comment"># 选择所有wqy开头的项</span></span><br></pre></td></tr></table></figure>

<h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入法主题框架</span></span><br><span class="line"><span class="comment"># 其中， app-i18n/fcitx:5 是 fcitx 的主程序</span></span><br><span class="line"><span class="comment"># 　　　 app-i18n/fcitx-configtool:5 是它的配置工具</span></span><br><span class="line"><span class="comment"># 　　　 app-i18n/fcitx-qt:5 用于支持在 qt 程序上使用它</span></span><br><span class="line"><span class="comment"># 　　　 app-i18n/fcitx-gtk:5 用于支持在 gtk 程序上使用它</span></span><br><span class="line">emerge -vj app-i18n/fcitx:5 app-i18n/fcitx-configtool:5 app-i18n/fcitx-qt:5 app-i18n/fcitx-gtk:5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后再用户的~/.xsession文件内添加</span></span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> SDL_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用常规(基于源)更新</span></span><br><span class="line"><span class="comment"># --ask(-a)控制Portage显示要更新的软件列表，并提供是否更新选择</span></span><br><span class="line"><span class="comment"># --verbose(-v)在屏幕上输出完整的文件列表</span></span><br><span class="line"><span class="comment"># --update(-u)更新包的最佳版本</span></span><br><span class="line"><span class="comment"># --deep(-D)更新系统中的每个软件包</span></span><br><span class="line"><span class="comment"># --newuse(-N)USE标记变更后，要使用Portage检查USE标记的变动是否导致需要安装新的软件或将现有的软件包重新编译</span></span><br><span class="line"><span class="built_in">sudo</span> emerge --ask --verbose --update --deep --newuse @world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价简写</span></span><br><span class="line">emerge -avuDN @world</span><br><span class="line"></span><br><span class="line">emerge -av --deepclean</span><br><span class="line"></span><br><span class="line"><span class="comment">#gentookit包里的一个软件，用来检查系统的依赖是否都满足,自动安装缺失的依赖</span></span><br><span class="line">revdep-rebuild</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用二进制包更新系统</span></span><br><span class="line">emerge --ask --verbose --update --deep --changed-use --getbinpkg @world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 告诉 Portage 不要对一些指定的包或分类创建二进制包</span></span><br><span class="line">emerge -uDN @world --buildpkg --buildpkg-exclude <span class="string">&quot;virtual/* sys-kernel/*-sources&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并use标记</span></span><br><span class="line">etc-update </span><br><span class="line">-3 <span class="comment"># 自动合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理旧版本的内核</span></span><br><span class="line">emerge --prune sys-kernel/gentoo-kernel sys-kernel/gentoo-kernel-bin</span><br></pre></td></tr></table></figure>



<p>emerge 使用二进制包选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>–usepkg (-k)</td>
<td>尝试使用本地可用的 packages 目录中的二进制包。如果未找到二进制包，将执行常规（基于源）安装。</td>
</tr>
<tr>
<td>–usepkgonly (-K)</td>
<td>类似 –usepkg (-k) ，但如果找不到二进制包，则失败。</td>
</tr>
<tr>
<td>–getbinpkg (-g)</td>
<td>从远程二进制包主机下载二进制包。如果未找到二进制包，将执行常规（基于源）安装。</td>
</tr>
<tr>
<td>–getbinpkgonly (-G)</td>
<td>类似于 –getbinpkg (-g) ，但如果无法下载二进制包，则会失败</td>
</tr>
</tbody></table>
<h3 id="USE变量说明-官方文档"><a href="#USE变量说明-官方文档" class="headerlink" title="USE变量说明 官方文档"></a>USE变量说明 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Working/USE/zh-cn">官方文档</a></h3><p>USE是Gentoo为用户提供的最具威力的变量之一。很多程序通过它可以选择编译或者不编译某些可选的支持。例如，一些程 序可以在编译时加入对gtk或是对qt的支持。其它的程序可以在编译时加入或不加入对于SLL的支持。有些程序甚至可以在编译时加入对 framebuffer的支持（svgalib）以取代X11（X服务器）。<br>大多数的发行版会使用尽可能多的支持特性编译它们的软件包，这既增加了软件的大小也减慢了启动时间，而这些还没有算上可能会涉及到的大量依赖性问题。Gentoo可以让你自己定义软件编译的选项，而这正是USE要做的事。<br>在USE变量里可以定义关键字，它被用来对应相应的编译选项。例如，ssl将会把ssl支持编译到程序中以支持它。-X会移除其对于X服务器的支持（注意前面的减号）。gnome gtk -kde -qt4将会以支持GNOME（和GTK）但不支持KDE（和Qt）的方式编译软件，使系统为GNOME做完全调整（如果架构支持）。<br>默认的USE设置全放在了系统所使用的Gentoo配置文件的make.defaults文件中。Gentoo对它的配置文件们使用了一个（复杂的）继承系统，在这个阶段我们不去深入。最简单的检查当前活动的USE标记的办法是运行emerge –info并选择以USE开头的那一行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">emerge --info |grep ^USE</span><br></pre></td></tr></table></figure>
<p>![[Gentoo安装&#x2F;IMG-20241210170128821.png]]<br>可以在系统的&#x2F;usr&#x2F;portage&#x2F;profiles&#x2F;use.desc中找到可用的USE标记的完整描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less /usr/share/portage/profile/use.desc</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 常用软件</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo emerge --ask media-video/mpv</span><br><span class="line"></span><br><span class="line"># 电子邮件客户端</span><br><span class="line">sudo emerge mail-client/thunderbird</span><br><span class="line"></span><br><span class="line"># 视频播放器</span><br><span class="line">sudo emerge media-video/mplayer</span><br><span class="line"></span><br><span class="line"># 音乐播放器</span><br><span class="line">sudo emerge media-sound/exaile</span><br><span class="line"></span><br><span class="line"># 虚拟机</span><br><span class="line">sudo emerge app-emulation/virt-manager</span><br><span class="line">sudo emerge app-emulation/virtualbox</span><br><span class="line"></span><br><span class="line"># VIM</span><br><span class="line">sudo emerge app-editors/vim</span><br></pre></td></tr></table></figure>



<p>参考文章</p>
<p><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/zh-cn">Gentoo AMD64 Handbook - Gentoo Wiki</a></p>
<p><a href="https://www.cnblogs.com/devilyouwei/p/6657409.html">开始使用gentoo linux——gentoo安装笔记（上）</a></p>
<p><a href="https://www.cnblogs.com/devilyouwei/p/6659058.html">开始使用gentoo linux——gentoo安装笔记（下）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/122501653">Gentoo安装流程分享(step by step)，第二篇之KDE Plasma桌面的安装配置 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/515a1f39b438">gentoo linux配置intel和nvidia双显卡电脑，使用prime方案 - 简书 (jianshu.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Gentoo</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM常用命令</title>
    <url>/2024/09/02/Linux/KVM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="添加删除"><a href="#添加删除" class="headerlink" title="添加删除"></a>添加删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看虚拟机</span></span><br><span class="line">virsh list --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">virt-install -virt-type=kvm --name=&#123;虚拟机名&#125; --vcpus=4 \</span><br><span class="line">    --memory=1024 --location=&#123;iso文件&#125; \</span><br><span class="line">    --disk path=&#123;虚拟机硬盘存放路径&#125;.qcow2,size=30,format=qcow2 \</span><br><span class="line">    --network bridge=virbr0 --graphics none --extra-args=<span class="string">&#x27;console=ttyS0&#x27;</span></span><br><span class="line">    --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟机</span></span><br><span class="line">virsh undefine &#123;虚拟机名&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="开关机"><a href="#开关机" class="headerlink" title="开关机"></a>开关机</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 开启虚拟机</span></span><br><span class="line">virsh start &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">virsh shutdown &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制关机</span></span><br><span class="line">virsh destroy &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂起虚拟机</span></span><br><span class="line">virsh <span class="built_in">suspend</span> &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复挂起的</span></span><br><span class="line">virsh resume &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟机和物理机开机一起启动</span></span><br><span class="line">virsh autostart &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消虚拟机开机启动</span></span><br><span class="line">virsh autostart &#123;虚拟机名&#125;</span><br></pre></td></tr></table></figure>



<h4 id="备份克隆"><a href="#备份克隆" class="headerlink" title="备份克隆"></a>备份克隆</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 通过配置文件启动</span></span><br><span class="line">virsh create /etc/libvirt/qemu/&#123;虚拟机名&#125;.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份虚拟机配置文件</span></span><br><span class="line">virsh dumpxml &#123;虚拟机名&#125; &gt; &#123;存储路径&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复备份虚拟机</span></span><br><span class="line">virsh create &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟机克隆</span></span><br><span class="line">virt-clone -o &#123;虚拟机名&#125; -n localhost -f /virtual/KVM/&#123;虚拟机名&#125;.qcow2</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建快照</span></span><br><span class="line">virsh snapshot-create &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看快照</span></span><br><span class="line">virsh snapshot-list &#123;虚拟机名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复快照</span></span><br><span class="line">virsh snapshot-revert &#123;虚拟机名&#125; &#123;快照名称&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除快照</span></span><br><span class="line">virsh snapshot-delete &#123;虚拟机名&#125; &#123;快照名称&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux4.4内核配置</title>
    <url>/2022/01/01/Linux/Linux4.4%E5%86%85%E6%A0%B8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[Linux-4.4-x86_64 内核配置选项简介 <a href="https://www.jinbuguo.com/kernel/longterm-linux-kernel-options.html">金步国] (jinbuguo.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改MAC地址</title>
    <url>/2025/03/26/Linux/Linux%E4%BF%AE%E6%94%B9MAC%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h3 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h3><p><strong>方法一</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp; <span class="built_in">sudo</span> apt install net-tools    <span class="comment"># 安装 net-tools</span></span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 down                         <span class="comment"># 停用网卡</span></span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 hw ether AA:BB:CC:DD:EE:FF   <span class="comment"># 设置 MAC 地址</span></span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 up                           <span class="comment"># 启用网卡</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 down                      <span class="comment"># 停用网卡 </span></span><br><span class="line"><span class="built_in">sudo</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 address AA:BB:CC:DD:EE:FF <span class="comment"># 设置 MAC 地址</span></span><br><span class="line"><span class="built_in">sudo</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 up                        <span class="comment"># 启用网卡</span></span><br></pre></td></tr></table></figure>

<h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h3><p><strong>注意</strong>： 永久修改需要停止NetworkManager服务，此服务可能导致修改不生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop NetworkManager.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> NetworkManager.service</span><br></pre></td></tr></table></figure>

<p><strong>方法一</strong></p>
<p>编辑&#96;&#x2F;etc&#x2F;init.d&#x2F;rc.local&#96;&#96;文件,在此配置文件最后追加临时修改网卡MAC命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 ech0 网卡的 MAC 地址</span></span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 down <span class="comment"># 网卡名称可使用 ifconfig 或 ip addr 查看</span></span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 hw ether AA:BB:CC:DD:EE:FF</span><br><span class="line"><span class="built_in">sudo</span> ifconfig eth0 up</span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p>编辑<code>/etc/network/interfaces</code>文件，在此文件后追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0                         <span class="comment"># 网卡自动启动</span></span><br><span class="line">iface eth0 inet static            <span class="comment"># 静态 IP</span></span><br><span class="line">address 192.168.1.2               <span class="comment"># IP 地址</span></span><br><span class="line">netmask 255.255.255.0             <span class="comment"># 掩码</span></span><br><span class="line">gateway 192.168.1.1               <span class="comment"># 网关</span></span><br><span class="line">hwaddress ether AA:BB:CC:DD:EE:FF <span class="comment"># MAC 地址</span></span><br><span class="line">dns-nameservers 223.5.5.5         <span class="comment"># DNS 多个用空格隔开</span></span><br><span class="line">dns-search .com                   <span class="comment"># 限制 .com 的查询走上边设置的DNS服务器</span></span><br></pre></td></tr></table></figure>

<p>修改完成需要重启网络服务使配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart networking.service </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同系统服务名可能有不太一样，如果找不到就重启系统</span></span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核TCP网络参数.md</title>
    <url>/2024/12/11/Linux/Linux%E5%86%85%E6%A0%B8TCP%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctl.d/99-sysctl.conf：     #重启后生效</span><br><span class="line">fs.inotify.max_user_watches = 600000</span><br><span class="line">dev.i915.perf_stream_paranoid = 0</span><br><span class="line">vm.swappiness = 1</span><br><span class="line">net.ipv6.conf.all.accept_ra = 2</span><br><span class="line">fs.file-max = 6553560</span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line">net.core.rmem_default = 65536</span><br><span class="line">net.core.wmem_default = 65536</span><br><span class="line">net.core.optmem_max = 10000000</span><br><span class="line">net.core.netdev_max_backlog = 8096</span><br><span class="line">net.core.somaxconn = 8096</span><br><span class="line">net.ipv4.ip_default_ttl = 128</span><br><span class="line">net.ipv4.tcp_timestamps = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.tcp_slow_start_after_idle = 0</span><br><span class="line">net.ipv4.route.gc_timeout = 100</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 15</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_syn_retries = 2</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_ecn = 1</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_fack = 1</span><br><span class="line">net.ipv4.tcp_low_latency = 0</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line">net.ipv4.tcp_frto = 2</span><br><span class="line">net.ipv4.tcp_frto_response = 0</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line">net.ipv4.tcp_slow_start_after_idle = 0</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 30000</span><br><span class="line">net.ipv4.tcp_max_orphans = 262114</span><br><span class="line">net.ipv4.netfilter.ip_conntrack_max = 204800</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line"># for high-latency network Google BBR    #个人PC不建议开启BBR，对网速不会有提升，还会降低wifi吞吐量；还是等BBR2正式版出了再开启BBR2吧，BBR2对wifi就没有影响了</span><br><span class="line">#net.ipv4.tcp_congestion_control = bbr</span><br><span class="line">net.core.default_qdisc = fq_codel</span><br><span class="line">net.ipv4.tcp_congestion_control = cubic</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 0</span><br><span class="line">net.ipv6.ip_default_ttl = 128</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/security/limits.conf：</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft noproc 65536 </span><br><span class="line">* hard noproc 65536</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux实现U盘插入自动挂载</title>
    <url>/2025/03/27/Linux/Linux%E5%AE%9E%E7%8E%B0U%E7%9B%98%E6%8F%92%E5%85%A5%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>通过<code>udev</code>规则监听设备事件，编写<code>/etc/udev/rules.d/99-udev-mount.rules</code>规则实现U盘插入捕获U盘插入事件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入U盘自动挂载</span></span><br><span class="line">ACTION==<span class="string">&quot;add&quot;</span>, KERNEL==<span class="string">&quot;sd[a-z]*&quot;</span>, RUN+=<span class="string">&quot;/bin/mkdir -p /media/udev-%k&quot;</span>, RUN+=<span class="string">&quot;/bin/mount /dev/%k /media/udev-%k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除U盘自动卸载</span></span><br><span class="line">ACTION==<span class="string">&quot;remove&quot;</span>, KERNEL==<span class="string">&quot;sd[a-z]*&quot;</span>, RUN+=<span class="string">&quot;/bin/umount /media/udev-%k&quot;</span></span><br></pre></td></tr></table></figure>

<p>规则编辑完成后执行以下命令使规则生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> udevadm control --reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>U盘</tag>
        <tag>自动挂载</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux硬盘分区</title>
    <url>/2018/03/22/Linux/Linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars #UEFI/BIOS检测</span><br></pre></td></tr></table></figure>
<p>若该目录不存在，则 ArchISO 是以 BIOS&#x2F;CSM 模式启动，否则是以 UEFI 模式启动。</p>
<blockquote>
<p>通常而言，UEFI 系统须使用 GPT 分区才能引导，BIOS 系统须使用 MBR 分区才能引导。</p>
</blockquote>
<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l //查看所有分区情况</span><br></pre></td></tr></table></figure>
<p><em>常用fdisk命令：p 显示当前磁盘分区，d 删除指定分区，n 创建新分区， a 为指定分区创建启动标记，t 更改分区格式， w将磁盘分区信息写入磁盘。</em></p>
<h4 id="parted"><a href="#parted" class="headerlink" title="parted"></a>parted</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># parted /dev/sda</span><br><span class="line"></span><br><span class="line">检查 MINOR #对文件系统进行一个简单的检查</span><br><span class="line">cp [FROM-DEVICE] FROM-MINOR TO-MINOR #将文件系统复制到另一个分区</span><br><span class="line">help [COMMAND] #打印通用求助信息，或关于 COMMAND 的信息</span><br><span class="line">mklabel 标签类型 #创建新的磁盘标签 (分区表)</span><br><span class="line">mkfs MINOR 文件系统类型 #在 MINOR 创建类型为“文件系统类型”的文件系统</span><br><span class="line">mkpart 分区类型 [文件系统类型] 起始点 终止点 #创建一个分区</span><br><span class="line">mkpartfs 分区类型 文件系统类型 起始点 终止点 #创建一个带有文件系统的分区</span><br><span class="line">move MINOR 起始点 终止点 #移动编号为 MINOR 的分区</span><br><span class="line">name MINOR 名称 #将编号为 MINOR 的分区命名为“名称”</span><br><span class="line">print [MINOR] #打印分区表，或者分区</span><br><span class="line">quit #退出程序</span><br><span class="line">rescue 起始点 终止点 #挽救临近“起始点”、“终止点”的遗失的分区</span><br><span class="line">resize MINOR 起始点 终止点 #改变位于编号为 MINOR 的分区中文件系统的大小</span><br><span class="line">rm MINOR #删除编号为 MINOR 的分区</span><br><span class="line">select 设备 #选择要编辑的设备</span><br><span class="line">set MINOR 标志 状态 #改变编号为 MINOR 的分区的标志</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.vfat -F 32 /dev/sda1 #生成ESP分区的文件系统FAT32</span><br><span class="line">mkswap /dev/sda2 #格式化swap</span><br><span class="line">mkfs.ext4 /dev/sda3 #格式化ext4</span><br><span class="line">mkfs.xfx /dev/sda4 #格式化xfs</span><br></pre></td></tr></table></figure>

<h4 id="分区方案"><a href="#分区方案" class="headerlink" title="分区方案"></a>分区方案</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/sda1 /boot 500M</span><br><span class="line">/dev/sda2 swap 8G(根据内存大小调整)</span><br><span class="line">/dev/sda3 / 200G</span><br><span class="line">/dev/sda4 /home 剩余所有空间</span><br></pre></td></tr></table></figure>

<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mount /dev/sda6 /mnt # 挂载根分区</span><br></pre></td></tr></table></figure>
<p>非UEFI挂载boot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mkdir -p /mnt/boot</span><br><span class="line"># mount /dev/sda1 /mnt/boot</span><br></pre></td></tr></table></figure>

<p>建立efi目录，把EFI分区装载到刚建立的efi目录上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mkdir -p /mnt/boot/efi</span><br><span class="line">#mount /dev/sdc1 /mnt/boot/efi</span><br></pre></td></tr></table></figure>

<p>挂载交换分区和home</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#swap on /dev/sda5</span><br><span class="line">#mkdir -p /mnt/home</span><br><span class="line">#mount /dev/sda7 /mnt/home</span><br></pre></td></tr></table></figure>

<h4 id="生成引导"><a href="#生成引导" class="headerlink" title="生成引导"></a>生成引导</h4><ul>
<li>BIOS：</li>
</ul>
<blockquote>
<p>依赖包： grub os-prober</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># grub-install --recheck /dev/&lt;目标磁盘&gt;</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<ul>
<li>UEFI：—如果BIOS是UEFI的，就要用下面的命令安装grub了</li>
</ul>
<blockquote>
<p>依赖包： dosfstools grub efibootmgr</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># grub-install --target=x86_64-efi --efi-directory=&lt;EFI 分区挂载点&gt; --bootloader-id=arch_grub --recheck</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p><strong>低格填零</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># dd if=/dev/zero of=/dev/sda bs=16M</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Parted</tag>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统监视器Conky配置</title>
    <url>/2024/09/03/Linux/Linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E8%A7%86%E5%99%A8Conky%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install lm-sensors curl hddtemp  <span class="comment"># 安装工具</span></span><br><span class="line"></span><br><span class="line">sensors-detect <span class="comment"># 检测传感器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install conky <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">conky &amp; <span class="comment"># 运行conky</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>传感器数据样例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acpitz-virtual-0-</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1: +49.5°C (crit = +99.0°C)</span><br><span class="line"></span><br><span class="line">coretemp-isa-0000</span><br><span class="line">Adapter: ISA adapter</span><br><span class="line">Physical id 0: +49.0°C (high = +100.0°C, crit = +100.0°C)</span><br><span class="line">Core 0: +49.0°C (high = +100.0°C, crit = +100.0°C)</span><br><span class="line">Core 1: +49.0°C (high = +100.0°C, crit = +100.0°C)</span><br></pre></td></tr></table></figure>
<p>:TODO conky 默认运行效果截图</p>
<p>conky默认以一个弹窗的形式运行，并使用位于&#x2F;etc&#x2F;conky&#x2F;conky.conf的基础配置文件</p>
<h2 id="集成到桌面"><a href="#集成到桌面" class="headerlink" title="集成到桌面"></a>集成到桌面</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/conky/conky.conf /home/<span class="variable">$USER</span>/.conkyrc <span class="comment"># 复制默认配置文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux软件源</tag>
        <tag>Conky</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux设置swap分区</title>
    <url>/2022/01/01/Linux/Linux%E8%AE%BE%E7%BD%AEswap%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>交换空间</tag>
        <tag>SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置sudo无密码</title>
    <url>/2025/03/19/Linux/Linux%E9%85%8D%E7%BD%AEsudo%E6%97%A0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>最简单的一种方法，将当前用户添加到root组。这样做之后该用户将拥有所有<code>root</code>权限，从而使用户在使用<code>sudo</code>时不再需要输入密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> adduser &#123;当前用户名&#125; root </span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 将用户添加到<code>root</code>组后，该用户将拥有最高权限，因此在执行系统级操作时要特别小心，以避免可能的系统破坏。</p>
<h3 id="方法2（推荐）"><a href="#方法2（推荐）" class="headerlink" title="方法2（推荐）"></a>方法2（推荐）</h3><p>通过编辑<code>/etc/sudoers</code>文件来配置特定用户或组的<code>sudo</code>行为。这种方法允许更灵活的控制哪些命令可以绕过密码提示。<br>![[Linux配置sudo无密码&#x2F;IMG-20250319160639846.png]]</p>
<p>单用户配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;用户名&#125; ALL=(ALL:ALL) NOPASSWD:ALL #在 root 后新添加一行</span><br></pre></td></tr></table></figure>

<p>用户组配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;用户组&#125; ALL=(ALL:ALL) NOPASSWD:ALL # 在 %sudo 后添加</span><br></pre></td></tr></table></figure>
<p>使用此方式需将用户添加进组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -a -G &#123;用户组&#125; &#123;用户名&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置网络及SSH配置</title>
    <url>/2018/05/24/Linux/Linux%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E5%8F%8ASSH%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="识别接口名称"><a href="#识别接口名称" class="headerlink" title="识别接口名称"></a>识别接口名称</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要 net-tools</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果使用标准的<strong>ifconfig</strong>命令没有显示出接口，尝试使用带有<code>-a</code>选项的相同的命令。这个选项强制这个工具去显示系统检测到的所有的网络接口，不管他们是up或down状态。如果<strong>ifconfig -a</strong>没有提供结果，则硬件有错误或者接口驱动没有加载到内核中。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新版本系统大部分支持</span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>



<h4 id="dhcp"><a href="#dhcp" class="headerlink" title="dhcp"></a>dhcp</h4><p>DHCP（动态主机配置协议）使自动接受网络信息（IP地址、掩码、广播地址、网关、名称服务器等）变得容易。这只在网络中有DHCP服务器（或者如果ISP提供商提供一个DHCP服务）时有用.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dhcpcd eth0 # eth0 为网口名称,根据上一步识别出的接口名称修改</span><br></pre></td></tr></table></figure>



<h4 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用/禁用网卡</span></span><br><span class="line">ifconfig eth0 up/down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置IP地址及掩码</span></span><br><span class="line">ifconfig eth0 &#123;IP地址&#125; netmask &#123;掩码&#125; up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认网关</span></span><br><span class="line">route add default gw &#123;网关&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置DNS</span></span><br><span class="line">nano -w /etc.resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用下边模板填充</span></span><br><span class="line">nameserver &#123;名称服务器&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>花括号中内容使用具体的地址填充</p>
</blockquote>
<h4 id="ip命令"><a href="#ip命令" class="headerlink" title="ip命令"></a>ip命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用/禁用网卡</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 up/down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Ip地址及掩码,掩码一般用 24 相当于255.255.255.0</span></span><br><span class="line">ip addr add &#123;IP地址&#125;/&#123;掩码&#125; dev eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">ip addr del dev eth0 &#123;IP&#125;/&#123;掩码&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新接口IP(删除所有)</span></span><br><span class="line">ip addr flush eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认网关</span></span><br><span class="line">ip route add default via &#123;网关&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>网关的配置参考</p>
<p><a href="https://www.cnblogs.com/sudochen/p/15992994.html">ip route命令</a></p>
<p><a href="https://blog.csdn.net/meihualing/article/details/113058719">Linux上添加路由，删除路由，修改路由配置（route add, route del, 路由表项基本知识）</a></p>
<blockquote>
<p>| 子网掩码用来划分网络区域<br>| 子网掩码非0的位对应的ip上的数字表示这个ip的网络位<br>| 子网掩码0位对应的数字是ip的主机位<br>| 网络位表示网络区域<br>| 主机位表示网络区域里某台主机<br>|<br>| 11111111.11111111.11111111.00000000 &#x3D; 255.255.255.0 &#x3D; 24<br>| ——————————————  —————<br>|          网络位                                      主机位</p>
<p>| 网络位一致，主机位不一致的2个IP可以直接通讯<br>|<br>| 172.25.254.10&#x2F;24         #24&#x3D;255.255.255.0<br>|<br>| 172.25.254.20&#x2F;24<br>|<br>| 172.25.0.1&#x2F;16            #16&#x3D;255.255.0.0<br>| 前两个可以直接通讯，最后一个与其他俩个不能直接通讯</p>
</blockquote>
<h4 id="无线网连接"><a href="#无线网连接" class="headerlink" title="无线网连接"></a>无线网连接</h4><p>当使用一块无线（802.11）网卡，在继续之前需要先配置无线设置。要查看当前无线网卡的设置，你可以使用<strong>iw</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看连接信息</span></span><br><span class="line">iw dev wlan0 info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查连接状态</span></span><br><span class="line">iw dev wlan0 <span class="built_in">link</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接网络 （确保接口处于活动状态）</span></span><br><span class="line">iw dev wlan0 connect -w &#123;网络名称&#125; key 0:d:&#123;密码&#125; </span><br></pre></td></tr></table></figure>

<p>如果无线网络配置为WPA或WPA2，则需要使用<strong>wpa_supplicant</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找附近热点</span></span><br><span class="line">wpa_cli -i wlan0 scan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成连接配置文件</span></span><br><span class="line">wpa_passphrase &#123;网络名称&#125; &#123;密码&#125; &gt; /etc/wpa_supplicant.conf</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 连接网络</span></span><br><span class="line"><span class="comment"># -D 驱动程序名称（可以是多个驱动程序：nl80211,wext）</span></span><br><span class="line"><span class="comment"># -i 接口名称</span></span><br><span class="line"><span class="comment"># -c 配置文件</span></span><br><span class="line"><span class="comment"># -B 在后台运行守护进程</span></span><br><span class="line">wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf -B</span><br></pre></td></tr></table></figure>



<h4 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano -w /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放开注释</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用SSH密钥对登录，取消如下行的注释符</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizeKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h4 id="启动SSHD"><a href="#启动SSHD" class="headerlink" title="启动SSHD"></a>启动SSHD</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动SSH服务(需要有可登录的账户)</span></span><br><span class="line">/etc/init.d/sshd start</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>OpenSSL生成自签名证书</title>
    <url>/2024/09/03/Linux/OpenSSL%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><h5 id="CA-Certificate-Authority"><a href="#CA-Certificate-Authority" class="headerlink" title="CA(Certificate Authority)"></a>CA(Certificate Authority)</h5><p>证书授权机构,  负责发放和管理数字证书的权威机构，有自己的证书，可以拿自己的证书给别人签名。</p>
<h5 id="RootCA"><a href="#RootCA" class="headerlink" title="RootCA"></a>RootCA</h5><p>根证书，权威机构持有的证书，安装根证书意味着对这个证书机构的信任，所有其他证书都由这个根证书来签发。只需要把这个根证书添加到受信任的根证书，所有其他由此根证书签发的证书都会被自动信任。</p>
<h5 id="SubCA"><a href="#SubCA" class="headerlink" title="SubCA"></a>SubCA</h5><p>中间证书机构，由权威机构签发的证书，</p>
<h5 id="CSR-Certificate-Signing-Request"><a href="#CSR-Certificate-Signing-Request" class="headerlink" title="CSR(Certificate Signing Request)"></a>CSR(Certificate Signing Request)</h5><p>证书请求文件，证书申请者在申请数字证书时生成私钥的同时也生成证书请求文件，证书申请者只要把CSR文件提交给证书颁发机构后，证书颁发机构使用其根证书给私钥签名就生成了证书公钥文件，也就是颁发给用户的证书。</p>
<h5 id="常用后缀名"><a href="#常用后缀名" class="headerlink" title="常用后缀名"></a>常用后缀名</h5><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.crt,.cer</td>
<td>证书文件</td>
</tr>
<tr>
<td>.key</td>
<td>私钥文件</td>
</tr>
<tr>
<td>.csr</td>
<td>证书签名请求文件</td>
</tr>
<tr>
<td>.pem</td>
<td>base64编码证书文件,可以单独放证书或密钥，也可以同时放两个。Apache 和 NGINX 服务器偏向于使用这种编码格式，也是 openssl 默认采用的信息存放方式。</td>
</tr>
<tr>
<td>.der</td>
<td>二进制证书文件，可包含所有私钥、公钥和证书，是大多数浏览器的缺省格式，常见于 Windows 系统中的证书格式。</td>
</tr>
</tbody></table>
<h4 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h4><p>在证书链中，通常分为三级结构，分别是根证书、中间证书、服务器证书。正确的证书链顺序中服务器证书处在最底端，里面包含服务器域名域名服务器公钥和签名值等。服务器证书的上一级是中间证书，可以由多张证书组合在一起，最上级是根证书。对服务器身份进行校验时，需要验证一整个证书链。每一级证书都有签名值，根证书使用自己的根CA公钥验证自己的签名，也用来验证中间证书的签名值，中间证书的公钥用来验证下一级证书的签名值。</p>
<img src="/2024/09/03/Linux/OpenSSL%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/IMG-20250908095942730.png" class="">


<h4 id="生成根证书"><a href="#生成根证书" class="headerlink" title="生成根证书"></a>生成根证书</h4><h5 id="生成根私钥"><a href="#生成根私钥" class="headerlink" title="生成根私钥"></a>生成根私钥</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成CA认证机构的证书密钥</span></span><br><span class="line"><span class="comment"># 需要设置密码(输入两次)</span></span><br><span class="line">openssl genrsa -des3 -out root-ca.priv.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除密钥里的密码,有密码的话每次使用的时候都要输入密码才能使用。</span></span><br><span class="line"><span class="comment"># 需要再输入一次上一步的密码</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> root-ca.priv.key -out root-ca.key</span><br></pre></td></tr></table></figure>

<p>第一次生成的私钥，是带有 passphrase 的。这带来一个副作用，就是需要在使用过程中输入密码。这对于一些特定场景来说会带来一些问题。比如：Apache 的自动启动过程，或者一些工具，甚至有没有提供输入 passphrase 的机会。其实是<strong>可以将 3DES 的加密从秘钥中移除</strong>的，这样，使用的过程中就不再需要输入 passphrase。这也带来另一个问题，如果其他人获取到了未加密的私钥，对应的证书也需要被吊销，以避免带来危害。</p>
<h5 id="生成自签名的根证书请求"><a href="#生成自签名的根证书请求" class="headerlink" title="生成自签名的根证书请求"></a>生成自签名的根证书请求</h5><p>-subj 参考<a href="#%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">证书请求文件参数说明</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成根证书自签名请求</span></span><br><span class="line">openssl req -new -key root-ca.key \</span><br><span class="line">    -subj <span class="string">&quot;/C=CN/ST=Tianjin/L=Tianjin/O=Example/OU=DEV/CN=Example Root&quot;</span> \</span><br><span class="line">    -out root-ca.csr </span><br></pre></td></tr></table></figure>

<h5 id="生成自签名根证书"><a href="#生成自签名根证书" class="headerlink" title="生成自签名根证书"></a>生成自签名根证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># -x509	使用X.509证书结构生成证书，X.509 证书的结构是用 ASN1(Abstract Syntax Notation One)进行描述数据结构。</span></span><br><span class="line"><span class="comment"># -days 证书有效期,按天来算</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> root-ca.csr -signkey root-ca.key -out root-ca.crt -days 3650</span><br></pre></td></tr></table></figure>



<h4 id="生成中间证书"><a href="#生成中间证书" class="headerlink" title="生成中间证书"></a>生成中间证书</h4><p><strong>如果不是复杂场景可以跳过此步骤，使用根证书直接生成客户端证书</strong></p>
<p> 使用root-ca签发sub-ca的证书签名请求,中间证书指的是可以允许继续生成下级证书，否则的话默认生成终端证书，即使可以用中间证书生成下一级客户端和服务端等用户证书，最终验证的无法通过。</p>
<h5 id="生成中间证书私钥"><a href="#生成中间证书私钥" class="headerlink" title="生成中间证书私钥"></a>生成中间证书私钥</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥,方式1(参考根证书私钥)</span></span><br><span class="line">openssl genrsa -des3 -out mid-ca.priv.key 4096</span><br><span class="line">openssl rsa -<span class="keyword">in</span> mid-ca.priv.key -out mid-ca.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成私钥,方式2</span></span><br><span class="line">openssl genpkey -algorithm RSA -out mid-ca.key -pkeyopt rsa_keygen_bits:4096</span><br></pre></td></tr></table></figure>

<h5 id="生成中间证书请求"><a href="#生成中间证书请求" class="headerlink" title="生成中间证书请求"></a>生成中间证书请求</h5><p>-subj参考<a href="#%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">证书请求文件参数说明</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成中间证书自签名请求</span></span><br><span class="line">openssl req -new -key root-ca.key \</span><br><span class="line">    -subj <span class="string">&quot;/C=CN/ST=Tianjin/L=Tianjin/O=Example/OU=DEV/CN=Example Root&quot;</span> \</span><br><span class="line">    -out mid-ca.csr </span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时生成key和csr</span></span><br><span class="line">openssl req -new -newkey rsa:4096 -nodes -keyout mid-ca.key -out mid-ca.csr \</span><br><span class="line">    -subj=<span class="string">&quot;/C=CN/ST=Tianjin/L=Tianjin/O=Example/OU=DEV/CN=Example Mid&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="生成中间证书-1"><a href="#生成中间证书-1" class="headerlink" title="生成中间证书"></a>生成中间证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line">openssl x509 -req -extfile &lt;(<span class="built_in">printf</span> <span class="string">&quot;subjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid:always,issuer:always&quot;</span>) \</span><br><span class="line">    -days 3650 -<span class="keyword">in</span> mid-ca.csr -CA root-ca.crt -CAkey root-ca.key \</span><br><span class="line">    -CAcreateserial -out mid-ca.crt</span><br></pre></td></tr></table></figure>

<h5 id="验证中间证书"><a href="#验证中间证书" class="headerlink" title="验证中间证书"></a>验证中间证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile root-ca.crt mid-ca.crt</span><br></pre></td></tr></table></figure>



<h4 id="生成终端证书"><a href="#生成终端证书" class="headerlink" title="生成终端证书"></a>生成终端证书</h4><p>假设服务器域名为<code>example.io</code></p>
<h5 id="生成终端证书私钥"><a href="#生成终端证书私钥" class="headerlink" title="生成终端证书私钥"></a>生成终端证书私钥</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥，方式1(参考根证书私钥)</span></span><br><span class="line">openssl genrsa -des3 -out example.io.priv.key 4096</span><br><span class="line">openssl rsa -<span class="keyword">in</span> example.io.priv.key -out example.io.priv.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成私钥，方式2</span></span><br><span class="line">openssl genpkey -algorithm RSA -out example.io.key -pkeyopt rsa_keygen_bits:4096</span><br></pre></td></tr></table></figure>



<h5 id="生成终端证书请求"><a href="#生成终端证书请求" class="headerlink" title="生成终端证书请求"></a>生成终端证书请求</h5><p>-subj 参考<a href="#%E8%AF%81%E4%B9%A6%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">证书请求文件参数说明</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成终端证书自签名请求</span></span><br><span class="line">openssl req -new -key example.io.key -out example.io.csr -subj=<span class="string">&quot;/CN=example.io&quot;</span></span><br></pre></td></tr></table></figure>



<h5 id="生成终端证书-1"><a href="#生成终端证书-1" class="headerlink" title="生成终端证书"></a>生成终端证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 生成证书,如果不使用中间证书可把mid-ca.crt替换为root-ca.crt</span></span><br><span class="line">openssl x509 -req -days 3650 \</span><br><span class="line">    -extfile v3.ext</span><br><span class="line">    -CA root-ca.crt -CAkey root-ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> example.io.csr -signkey example.io.key \</span><br><span class="line">    -out example.io.crt</span><br><span class="line">    </span><br><span class="line">openssl x509 -req -extfile v3.ext -days 365 -<span class="keyword">in</span> example.io.csr -CA mid-ca.crt -CAkey mid-ca.key -CAcreateserial -out example.io.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出pfx,</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out example.io.pfx -inkey example.io.key -<span class="keyword">in</span> example.io.crt</span><br></pre></td></tr></table></figure>

<p>v3.ext参考<a href="#X.509%E6%89%A9%E5%B1%95%E9%85%8D%E7%BD%AE">X.509扩展配置</a></p>
<p><strong>注意:</strong> v3.ext中<code>basicConstraints=CA:FALSE</code>为必选项，否则生成证书无法使用</p>
<h5 id="验证终端证书"><a href="#验证终端证书" class="headerlink" title="验证终端证书"></a>验证终端证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile root-ca.crt example.io.crt</span><br></pre></td></tr></table></figure>



<h4 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看公钥的内容,如果为.PEM ,则会以 base 64 明文方式显示</span></span><br><span class="line">openssl rsa -noout -text -<span class="keyword">in</span> cakey.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看证书的内容命令为</span></span><br><span class="line">openssl x509 -noout -text -<span class="keyword">in</span> cacert.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书编码格式转换</span></span><br><span class="line"><span class="comment"># PEM 转为 DER</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> cacert.crt -outform der -out cacert.der</span><br><span class="line"><span class="comment"># DER 转为 PEM</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> cert.crt -inform der -outform pem -out cacert.pem</span><br></pre></td></tr></table></figure>



<h4 id="证书有效性验证"><a href="#证书有效性验证" class="headerlink" title="证书有效性验证"></a>证书有效性验证</h4><p>可以利用<code>openssl</code> 的<code>s_server</code>命令来模拟一个服务端，要使用到证书管理员生成的证书<code>client.crt</code>，以及申请人在创建<code>csr</code>时生成的 <code>client.key</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_server -cert example.io.crt -key example.io.key -debug -HTTP -accept 443</span><br></pre></td></tr></table></figure>

<p>然后浏览器访问 <code>https://ip地址</code>来查看证书是否有效（要先导入根证书到</p>
<p>信任的根证书颁发机构）。</p>
<h4 id="吊销证书"><a href="#吊销证书" class="headerlink" title="吊销证书"></a>吊销证书</h4><p>一般由于用户私钥泄露等情况才需要吊销一个未过期的证书。</p>
<p>假设需要被吊销的证书文件为 <code>cert.pem</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成证书吊销列表文件</span></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line"><span class="comment">#   -crldays 下一个吊销列表将在n天后发布</span></span><br><span class="line"><span class="comment">#   -crlhours 下一个吊销列表将在n小时后发布</span></span><br><span class="line">openssl ca -revoke cert.pem </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看吊销列表</span></span><br><span class="line">openssl crl -<span class="keyword">in</span> testca.crl -text -noout</span><br></pre></td></tr></table></figure>



<h4 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h4><h5 id="证书请求文件参数说明"><a href="#证书请求文件参数说明" class="headerlink" title="证书请求文件参数说明"></a>证书请求文件参数说明</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;C</td>
<td>Country Name (2 letter code)</td>
<td>两字母的国家代码，例如 “CN”。</td>
</tr>
<tr>
<td>&#x2F;ST</td>
<td>State or Province Name</td>
<td>州或省的全名。</td>
</tr>
<tr>
<td>&#x2F;L</td>
<td>Locality Name (e.g., city)</td>
<td>城市或地区的全名。</td>
</tr>
<tr>
<td>&#x2F;O</td>
<td>Organization Name (e.g., company)</td>
<td>公司或组织的全名。</td>
</tr>
<tr>
<td>&#x2F;OU</td>
<td>Organizational Unit Name (e.g., section)</td>
<td>部门或单位的全名。</td>
</tr>
<tr>
<td>&#x2F;CN</td>
<td>Common Name (e.g., your name or your server’s hostname)</td>
<td>通常是你的服务器的主机名。</td>
</tr>
<tr>
<td>emailAddress</td>
<td>Email Address</td>
<td>电子邮件地址，用于证书联系。</td>
</tr>
</tbody></table>
<p>这些信息将用于填写证书请求文件。在实际情况中，一些字段可能不是必需的，具体取决于你的使用场景和证书颁发机构（CA）的要求。通常，“Common Name” 是最重要的字段，应该设置为与你的服务器域名或主机名相匹配的值。其他字段的值可以根据实际情况填写。</p>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/C=CN/ST=Tianjin/L=Tianjin/O=Example/OU=DEV/CN=example.com/emailAddress=dev@example.com</span><br></pre></td></tr></table></figure>



<h5 id="X-509扩展配置"><a href="#X-509扩展配置" class="headerlink" title="X.509扩展配置"></a>X.509扩展配置</h5><p>v3.ext</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">authorityKeyIdentifier</span>=keyid,issuer</span><br><span class="line"><span class="attr">subjectKeyIdentifier</span>=hash</span><br><span class="line"><span class="attr">basicConstraints</span>=CA:<span class="literal">FALSE</span></span><br><span class="line"><span class="attr">keyUsage</span> = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line"><span class="comment">#extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="attr">subjectAltName</span> = @alt_names</span><br><span class="line"><span class="section">[alt_names]</span></span><br><span class="line"><span class="attr">DNS.1</span>=example.io</span><br><span class="line"><span class="attr">DNS.2</span>=*.example.io</span><br><span class="line"><span class="attr">IP.3</span>=<span class="number">192.168</span>.<span class="number">0.2</span></span><br></pre></td></tr></table></figure>

<p> extendedKeyUsage 可以指定证书目的，即用途，一般有</p>
<p>​	serverAuth 保证远程计算机的身份</p>
<p>​	clientAuth 向远程计算机证明你的身份</p>
<p>​	codeSigning 确保软件来自软件发布者，保护软件在发行后不被更改</p>
<p>​	emailProtection 保护电子邮件消息</p>
<p>​	timeStamping 允许用当前时间签名数据,如果不指定，则默认为 所有应用程序策略</p>
<p>SubjectAlternativeName</p>
<p>​	DNS.1用来确保网站的域名必须时<code>*.example.com</code>，</p>
<p>​	IP.1用来确保网站的IP地址，如果证书里面的内容和实际对应不上，浏览器就会报错。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://developer.baidu.com/article/detail.html?id=3350912">构建安全的X.509三级证书体系：OpenSSL实战指南-百度开发者中心 (baidu.com)</a></p>
<p><a href="https://www.cnblogs.com/happy-8090/articles/11830636.html">如何创建自签名的 SSL 证书 - HappyVK - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/linziping/p/16857167.html">关于OpeSSL生成自签名证书-包含完整证书链生成（全网最全） - 52只鱼 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Https证书</tag>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Systemd服务管理</title>
    <url>/2022/01/01/Linux/Systemd%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1516125">可能是史上最全面易懂的 Systemd 服务管理教程！( 强烈建议收藏 )-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Systemd</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu/Debian安装PostgreSQL和TimescaleDB插件</title>
    <url>/2022/07/01/Linux/Ubuntu-Debian%E5%AE%89%E8%A3%85PostgreSQL%E5%92%8CTimescaleDB%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>导入pg源及签名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#x27;echo &quot;deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;</span><br><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>导入TimeScalaDB 源及签名<br>debian版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;echo &#x27;deb [signed-by=/usr/share/keyrings/timescale.keyring] https://packagecloud.io/timescale/timescaledb/debian/ $(lsb_release -c -s) main&#x27; &gt; /etc/apt/sources.list.d/timescaledb.list&quot;</span><br><span class="line">wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /usr/share/keyrings/timescale.keyring</span><br></pre></td></tr></table></figure>

<p><a href="https://so.csdn.net/so/search?q=ubuntu&spm=1001.2101.3001.7020">ubuntu</a>版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;echo &#x27;deb [signed-by=/usr/share/keyrings/timescale.keyring] https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main&#x27; &gt; /etc/apt/sources.list.d/timescaledb.list&quot;</span><br><span class="line">wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /usr/share/keyrings/timescale.keyring</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install postgresql-14</span><br></pre></td></tr></table></figure>

<p>启动pg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service postgresql start</span><br><span class="line"></span><br><span class="line">apt install postgresql-14-postgis-3</span><br><span class="line"></span><br><span class="line">apt install timescaledb-2-2.5.1-postgresql-14</span><br><span class="line"></span><br><span class="line">create databases test;</span><br><span class="line"></span><br><span class="line">\c test</span><br><span class="line"></span><br><span class="line">create extension postgis;</span><br><span class="line"></span><br><span class="line">create extension timescaledb;</span><br></pre></td></tr></table></figure>

<p>创建timescaledb扩展时会报一下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL:  extension &quot;timescaledb&quot; must be preloaded</span><br><span class="line">HINT:  Please preload the timescaledb library via shared_preload_libraries.</span><br><span class="line"></span><br><span class="line">This can be done by editing the config file at: /etc/postgresql/14/main/postgresql.conf</span><br><span class="line">and adding &#x27;timescaledb&#x27; to the list in the shared_preload_libraries config.</span><br><span class="line">        # Modify postgresql.conf:</span><br><span class="line">        shared_preload_libraries = &#x27;timescaledb&#x27;</span><br><span class="line"></span><br><span class="line">Another way to do this, if not preloading other libraries, is with the command:</span><br><span class="line">        echo &quot;shared_preload_libraries = &#x27;timescaledb&#x27;&quot; &gt;&gt; /etc/postgresql/14/main/postgresql.conf</span><br><span class="line"></span><br><span class="line">(Will require a database restart.)</span><br><span class="line"></span><br><span class="line">If you REALLY know what you are doing and would like to load the library without preloading, you can disable this check with:</span><br><span class="line">        SET timescaledb.allow_install_without_preload = &#x27;on&#x27;;</span><br><span class="line">server closed the connection unexpectedly</span><br><span class="line">        This probably means the server terminated abnormally</span><br><span class="line">        before or while processing the request.</span><br><span class="line">The connection to the server was lost. Attempting reset: Succeeded.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据提示修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;shared_preload_libraries = &#x27;timescaledb&#x27;&quot; &gt;&gt; /etc/postgresql/14/main/postgresql.conf</span><br></pre></td></tr></table></figure>

<p>重启pg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service postgresql restart</span><br></pre></td></tr></table></figure>

<p>再次建立扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create extension timescaledb;</span><br></pre></td></tr></table></figure>

<p>查看已安装好的扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\dx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>TimescaleDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04安装ROS-Melodic</title>
    <url>/2025/09/04/Linux/Ubuntu18.04%E5%AE%89%E8%A3%85ROS-Melodic/</url>
    <content><![CDATA[<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><ul>
<li><strong>操作系统</strong>: Ubuntu 18.04 (Bionic Beaver)</li>
<li><strong>ROS 版本</strong>: Melodic Morenia (官方长期支持版本)</li>
<li><strong>Python 版本</strong>: 2.7.x (ROS Melodic 默认使用)</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-配置软件源和密钥"><a href="#1-配置软件源和密钥" class="headerlink" title="1. 配置软件源和密钥"></a>1. 配置软件源和密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure>

<h3 id="2-更新软件包列表"><a href="#2-更新软件包列表" class="headerlink" title="2. 更新软件包列表"></a>2. 更新软件包列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-ROS-Melodic"><a href="#3-安装-ROS-Melodic" class="headerlink" title="3. 安装 ROS Melodic"></a>3. 安装 ROS Melodic</h3><p><strong>完整桌面版</strong> (推荐，包含 GUI 工具、仿真器和常用库):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure>

<p><strong>其他可选版本</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ros-melodic-desktop    <span class="comment"># 基础桌面版（无仿真器）</span></span><br><span class="line"><span class="built_in">sudo</span> apt install ros-melodic-ros-base   <span class="comment"># 最小核心版（仅通信库和工具）</span></span><br></pre></td></tr></table></figure>

<h3 id="4-初始化-rosdep"><a href="#4-初始化-rosdep" class="headerlink" title="4. 初始化 rosdep"></a>4. 初始化 rosdep</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<h3 id="5-设置环境变量"><a href="#5-设置环境变量" class="headerlink" title="5. 设置环境变量"></a>5. 设置环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="6-安装构建工具和依赖"><a href="#6-安装构建工具和依赖" class="headerlink" title="6. 安装构建工具和依赖"></a>6. 安装构建工具和依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>

<h3 id="7-创建示例工作空间-可选"><a href="#7-创建示例工作空间-可选" class="headerlink" title="7. 创建示例工作空间 (可选)"></a>7. 创建示例工作空间 (可选)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure>

<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>打开新终端，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p>如果看到类似以下输出，说明安装成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">... logging to /home/username/.ros/log/xxx/roslaunch-hostname-xxx.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://hostname:xxx/</span><br><span class="line">ros_comm version 1.14.3</span><br></pre></td></tr></table></figure>

<h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-密钥获取失败"><a href="#1-密钥获取失败" class="headerlink" title="1. 密钥获取失败"></a>1. 密钥获取失败</h3><p>如果 <code>apt-key adv</code> 失败，可以手动下载并添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL <span class="string">&#x27;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&#x27;</span> | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>

<h3 id="2-网络问题"><a href="#2-网络问题" class="headerlink" title="2. 网络问题"></a>2. 网络问题</h3><p>如果下载速度慢，可以替换为国内镜像源（如清华源）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Python-版本验证"><a href="#3-Python-版本验证" class="headerlink" title="3. Python 版本验证"></a>3. Python 版本验证</h3><p>确保系统中已安装 Python 2.7：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version  <span class="comment"># 应显示 Python 2.7.x</span></span><br></pre></td></tr></table></figure>

<h2 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h2><p>安装完成后，可以使用以下命令测试 ROS 功能：</p>
<ul>
<li><code>roscore</code> - 启动 ROS master</li>
<li><code>rosrun roscpp_tutorials talker</code> - 运行发布者节点</li>
<li><code>rosrun roscpp_tutorials listener</code> - 运行订阅者节点</li>
</ul>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul>
<li><a href="http://wiki.ros.org/melodic">ROS Melodic 官方文档</a></li>
<li><a href="http://wiki.ros.org/ROS/Installation">ROS 安装指南</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ROS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署LIO-SAM</title>
    <url>/2025/09/04/Linux/Ubuntu%E9%83%A8%E7%BD%B2LIO-SAM/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>LIO-SAM (Lidar Inertial Odometry and Mapping) 是一个紧耦合的激光雷达惯性里程计框架，集成了 IMU 预积分和 GPS 数据，适用于机器人建图和定位。</p>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><table>
<thead>
<tr>
<th>组件</th>
<th>版本</th>
<th>下载地址</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Ubuntu</strong></td>
<td>18.04+</td>
<td>-</td>
</tr>
<tr>
<td><strong>ROS</strong></td>
<td>Melodic</td>
<td>-</td>
</tr>
<tr>
<td><strong>gtsam</strong></td>
<td>4.0.2</td>
<td><a href="https://github.com/borglab/gtsam">GitHub</a></td>
</tr>
<tr>
<td><strong>Eigen</strong></td>
<td>3.3.7</td>
<td><a href="https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz">GitLab</a></td>
</tr>
<tr>
<td><strong>LIO-SAM</strong></td>
<td>最新版</td>
<td><a href="https://github.com/TixiaoShan/LIO-SAM.git">GitHub</a></td>
</tr>
</tbody></table>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-安装系统依赖"><a href="#1-安装系统依赖" class="headerlink" title="1. 安装系统依赖"></a>1. 安装系统依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系统包列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的开发工具和依赖库</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y build-essential cmake libboost-all-dev</span><br></pre></td></tr></table></figure>

<h3 id="2-安装-Eigen-库"><a href="#2-安装-Eigen-库" class="headerlink" title="2. 安装 Eigen 库"></a>2. 安装 Eigen 库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并解压 Eigen</span></span><br><span class="line">wget https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz</span><br><span class="line">tar -zxvf eigen-3.3.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> eigen-3.3.7</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">sudo</span> cmake ..</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建符号链接以便系统找到 Eigen 头文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen/ /usr/local/include/</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-ROS-Melodic"><a href="#3-安装-ROS-Melodic" class="headerlink" title="3. 安装 ROS Melodic"></a>3. 安装 ROS Melodic</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 ROS 软件源（清华镜像）</span></span><br><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 ROS 密钥</span></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新包列表并安装 ROS</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-desktop-full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ROS 开发工具</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y ros-melodic-rqt* python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 rosdep</span></span><br><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<h3 id="4-配置-ROS-环境"><a href="#4-配置-ROS-环境" class="headerlink" title="4. 配置 ROS 环境"></a>4. 配置 ROS 环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 ROS 环境变量添加到 bashrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="5-安装-gtsam"><a href="#5-安装-gtsam" class="headerlink" title="5. 安装 gtsam"></a>5. 安装 gtsam</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆 gtsam 仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/borglab/gtsam.git</span><br><span class="line"><span class="built_in">cd</span> gtsam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 4.0.2 版本</span></span><br><span class="line">git checkout 4.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h3 id="6-安装-LIO-SAM"><a href="#6-安装-LIO-SAM" class="headerlink" title="6. 安装 LIO-SAM"></a>6. 安装 LIO-SAM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作空间</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆 LIO-SAM</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/TixiaoShan/LIO-SAM.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">rosdep install --from-paths src --ignore-src -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">catkin_make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作空间环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><h3 id="测试-ROS-安装"><a href="#测试-ROS-安装" class="headerlink" title="测试 ROS 安装"></a>测试 ROS 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 ROS 核心</span></span><br><span class="line">roscore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新终端中检查 ROS 环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-LIO-SAM-编译"><a href="#测试-LIO-SAM-编译" class="headerlink" title="测试 LIO-SAM 编译"></a>测试 LIO-SAM 编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 LIO-SAM 包是否存在</span></span><br><span class="line">rospack find lio_sam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试运行节点（需要相应的启动文件）</span></span><br><span class="line">roslaunch lio_sam run.launch</span><br></pre></td></tr></table></figure>

<h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-Eigen-头文件找不到"><a href="#1-Eigen-头文件找不到" class="headerlink" title="1. Eigen 头文件找不到"></a>1. Eigen 头文件找不到</h3><p><strong>问题</strong>：编译时出现 <code>fatal error: Eigen/Dense: No such file or directory</code></p>
<p><strong>解决方案</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保 Eigen 头文件在正确位置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/include/eigen3/Eigen /usr/local/include/Eigen</span><br></pre></td></tr></table></figure>

<h3 id="2-gtsam-版本不兼容"><a href="#2-gtsam-版本不兼容" class="headerlink" title="2. gtsam 版本不兼容"></a>2. gtsam 版本不兼容</h3><p><strong>问题</strong>：需要特定版本的 gtsam</p>
<p><strong>解决方案</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保使用 gtsam 4.0.2 版本</span></span><br><span class="line"><span class="built_in">cd</span> gtsam</span><br><span class="line">git checkout 4.0.2</span><br></pre></td></tr></table></figure>

<h3 id="3-ROS-依赖问题"><a href="#3-ROS-依赖问题" class="headerlink" title="3. ROS 依赖问题"></a>3. ROS 依赖问题</h3><p><strong>问题</strong>：缺少 ROS 包依赖</p>
<p><strong>解决方案</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装所有缺失的依赖</span></span><br><span class="line">rosdep install --from-paths src --ignore-src -y</span><br></pre></td></tr></table></figure>

<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="启动-LIO-SAM"><a href="#启动-LIO-SAM" class="headerlink" title="启动 LIO-SAM"></a>启动 LIO-SAM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 LIO-SAM 主要节点</span></span><br><span class="line">roslaunch lio_sam run.launch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动可视化工具</span></span><br><span class="line">roslaunch lio_sam visualization.launch</span><br></pre></td></tr></table></figure>

<h3 id="数据播放"><a href="#数据播放" class="headerlink" title="数据播放"></a>数据播放</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 播放 bag 文件</span></span><br><span class="line">rosbag play your_data.bag</span><br></pre></td></tr></table></figure>

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/catkin_ws/</span><br><span class="line">└── src/</span><br><span class="line">    └── LIO-SAM/</span><br><span class="line">        ├── config/          # 配置文件</span><br><span class="line">        ├── launch/          # 启动文件</span><br><span class="line">        ├── src/            # 源代码</span><br><span class="line">        └── package.xml     # ROS 包配置</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><strong>版本匹配</strong>：确保所有组件的版本兼容性</li>
<li><strong>内存要求</strong>：编译过程需要足够的内存，建议 8GB+ RAM</li>
<li><strong>网络连接</strong>：下载依赖需要稳定的网络连接</li>
<li><strong>权限问题</strong>：某些操作需要 sudo 权限</li>
</ol>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><ol>
<li><strong>配置参数</strong>：根据你的传感器调整 <code>config/params.yaml</code></li>
<li><strong>数据采集</strong>：使用你的传感器采集数据</li>
<li><strong>性能调优</strong>：根据实际场景调整算法参数</li>
</ol>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul>
<li><a href="https://github.com/TixiaoShan/LIO-SAM">LIO-SAM 官方文档</a></li>
<li><a href="http://wiki.ros.org/melodic/Installation/Ubuntu">ROS Melodic 安装指南</a></li>
<li><a href="https://gtsam.org/">gtsam 文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>机器人</tag>
        <tag>LIO-SAM</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署ROS</title>
    <url>/2025/08/29/Linux/Ubuntu%E9%83%A8%E7%BD%B2ROS/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>建议准备一个干净、换好源的 <strong>Ubuntu 16.04</strong> 及以上版本（建议 <a href="https://mirrors-i.tuna.tsinghua.edu.cn/help/ubuntu/">清华源</a> ），本教程也适用其他 ROS1版本。</p>
<p>查看ubuntu 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<p>根据自己的 Ubuntu 的版本选择 ROS 版本 (示例是 <strong>Ubuntu 18.04</strong> 所以对应ROS版本为 <strong>melodic</strong>）<br>![[Ubuntu部署ROS&#x2F;IMG-20250829234441526.png]]</p>
<h2 id="ROS安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h2><h4 id="1-安装源"><a href="#1-安装源" class="headerlink" title="1. 安装源"></a>1. 安装源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-设置密钥"><a href="#2-设置密钥" class="headerlink" title="2. 设置密钥"></a>2. 设置密钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install ros-melodic-desktop</span><br><span class="line"><span class="comment"># 其他版本替换对应的版本（例如 noetic ）</span></span><br><span class="line"><span class="comment"># sudo apt install ros-noetic-desktop</span></span><br></pre></td></tr></table></figure>

<h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment">#使环境生效</span></span><br><span class="line"><span class="comment"># 替换对应版本同上</span></span><br><span class="line"><span class="comment"># echo &quot;source /opt/ros/noetic/setup.bash&quot; &gt;&gt; ~/.bashrc</span></span><br></pre></td></tr></table></figure>

<h4 id="5-配置rosdep"><a href="#5-配置rosdep" class="headerlink" title="5. 配置rosdep"></a>5. 配置rosdep</h4><p>在使用许多 ROS 工具之前，需要初始化 <code>rosdep</code>，有些功能包源码编译需要<code>rosdep</code> 来安装这些系统依赖项，不配置也不影响ros使用，所以后面需要时再来配置也可以。 rosdep 请求的文件都放在 github 上的, 推荐使用代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">sudo</span> apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br><span class="line"><span class="comment"># 对于Ubuntu20</span></span><br><span class="line"><span class="comment"># sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="built_in">sudo</span> rosdep init</span><br><span class="line">rosdep update</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line">rosrun turtlesim turtlesim_node</span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>

<p>参考<br><a href="https://wiki.ros.org/melodic/Installation/Ubuntu">官方文档(melodic)</a><br><a href="https://blog.csdn.net/qq_41450811/article/details/99079041">ubuntu18.04安装ROS Melodic（最详细配置）-CSDN博客</a><br><a href="https://blog.csdn.net/qq_43310597/article/details/105756819?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&spm=1001.2101.3001.4242">基于Ubuntu18.04的ROS Melodic环境详细配置（含各种大坑及填坑）</a><br><a href="https://blog.csdn.net/maizousidemao/article/details/119846292">[ROS 系列学习教程] ROS与操作系统版本对应关系_ros版本-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ROS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows与Linux文件互传工具</title>
    <url>/2024/03/10/Linux/Windows%E4%B8%8ELinux%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://www.linuxidc.com/Linux/2015-02/113309.htm">pscp使用详解 Windows与Linux文件互传工具_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com)</a></p>
<p><a href="https://blog.csdn.net/zxl315/article/details/5955202">psftp的用法（超级详细）_psftp压缩文件夹命令-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>pscp</tag>
        <tag>scp</tag>
        <tag>sftp</tag>
        <tag>psftp</tag>
      </tags>
  </entry>
  <entry>
    <title>wpa_supplicant及wpa_cli使用方法</title>
    <url>/2019/08/04/Linux/wpa_supplicant%E5%8F%8Awpa_cli%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><code>wpa_supplicant</code>是一个连接、配置<code>WIFI</code>的工具，它主要包含<code>wpa_supplicant</code>与<code>wpa_cli</code>两个程序。通常情况下，可以通过<code>wpa_cli</code>来进行<code>WIFI</code>的配置与连接，如果有特殊的需要，可以编写应用程序直接调用<code>wpa_supplicant</code>的接口直接开发。</p>
<h2 id="启动wpa-supplicant应用"><a href="#启动wpa-supplicant应用" class="headerlink" title="启动wpa_supplicant应用"></a>启动<code>wpa_supplicant</code>应用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf -B</span></span><br></pre></td></tr></table></figure>

<p><code>/etc/wpa_supplicant.conf</code>文件里，添加下面代码:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ctrl_interface</span>=/var/run/wpa_supplicant update_config=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="启动wpa-cli应用"><a href="#启动wpa-cli应用" class="headerlink" title="启动wpa_cli应用"></a>启动<code>wpa_cli</code>应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 scan <span class="comment"># 搜索附近wifi网络 </span></span><br><span class="line">$ wpa_cli -i wlan0 scan_result <span class="comment"># 打印搜索wifi网络结果 </span></span><br><span class="line">$ wpa_cli -i wlan0 add_network <span class="comment"># 添加一个网络连接</span></span><br></pre></td></tr></table></figure>

<p>如果要连接加密方式是<code>[WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][ESS]</code> (<code>wpa</code>加密)，<code>wifi</code>名称是<code>name</code>，<code>wifi</code>密码是：<code>psk</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 set_network 0 ssid <span class="string">&#x27;&quot;name&quot;&#x27;</span> </span><br><span class="line">$ wpa_cli -i wlan0 set_network 0 psk <span class="string">&#x27;&quot;psk&quot;&#x27;</span> </span><br><span class="line">$ wpa_cli -i wlan0 enable_network 0</span><br></pre></td></tr></table></figure>

<p>如果要连接加密方式是<code>[WEP][ESS]</code> (<code>wep</code>加密)，<code>wifi</code>名称是<code>name</code>，<code>wifi</code>密码是<code>psk</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 set_network 0 ssid <span class="string">&#x27;&quot;name&quot;&#x27;</span> </span><br><span class="line">$ wpa_cli -i wlan0 set_network 0 key_mgmt NONE </span><br><span class="line">$ wpa_cli -i wlan0 set_network 0 wep_key0 <span class="string">&#x27;&quot;psk&quot;&#x27;</span> </span><br><span class="line">$ wpa_cli -i wlan0 enable_network 0</span><br></pre></td></tr></table></figure>

<p>如果要连接加密方式是<code>[ESS]</code> (无加密)，<code>wifi</code>名称是<code>name</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 set_network 0 ssid <span class="string">&#x27;&quot;name&quot;&#x27;</span> </span><br><span class="line">$ wpa_cli -i wlan0 set_network 0 key_mgmt NONE </span><br><span class="line">$ wpa_cli -i wlan0 enable_network 0</span><br></pre></td></tr></table></figure>

<h2 id="分配ip-netmask-gateway-dns"><a href="#分配ip-netmask-gateway-dns" class="headerlink" title="分配ip/netmask/gateway/dns"></a>分配<code>ip/netmask/gateway/dns</code></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">udhcpc -i wlan0 -s /etc/udhcpc.script -q</span></span><br></pre></td></tr></table></figure>

<p>执行完毕，就可以连接网络了。</p>
<h2 id="保存连接"><a href="#保存连接" class="headerlink" title="保存连接"></a>保存连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 save_config</span><br></pre></td></tr></table></figure>

<h2 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 disable_network 0</span><br></pre></td></tr></table></figure>

<h2 id="连接已有的连接"><a href="#连接已有的连接" class="headerlink" title="连接已有的连接"></a>连接已有的连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wpa_cli -i wlan0 list_network <span class="comment">#列举所有保存的连接 </span></span><br><span class="line">$ wpa_cli -i wlan0 select_network 0 <span class="comment">#连接第1个保存的连接 </span></span><br><span class="line">$ wpa_cli -i wlan0 enable_network 0 <span class="comment">#使能第1个保存的连接</span></span><br></pre></td></tr></table></figure>

<h2 id="断开wifi"><a href="#断开wifi" class="headerlink" title="断开wifi"></a>断开<code>wifi</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig wlan0 down </span><br><span class="line">$ killall udhcpc </span><br><span class="line">$ killall wpa_supplicant</span><br></pre></td></tr></table></figure>

<h2 id="wpa-wifi-tool使用方法"><a href="#wpa-wifi-tool使用方法" class="headerlink" title="wpa_wifi_tool使用方法"></a><code>wpa_wifi_tool</code>使用方法</h2><p><code>wpa_wifi_tool</code>是基于<code>wpa_supplicant</code>及<code>wpa_cli</code>的一个用于快速设置<code>wifi</code>的工具，方便调试时连接<code>wifi</code>使用。使用方法：1、运行<code>wpa_wifi_tool</code>;2、输入<code>help</code>进行命令查看;3、<code>s</code>进行<code>SSID</code>扫描;4、<code>c[n]</code>进行<code>wifi</code>连接，连接时若为新的<code>SSID</code>则需输入密码，若为已保存的<code>SSID</code>则可以使用保存过的密码或者重新输入密码;5、<code>e</code>退出工具。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>wifi</tag>
        <tag>wpa_cli</tag>
        <tag>wpa_supplicant</tag>
        <tag>无线</tag>
        <tag>Wi-Fi</tag>
      </tags>
  </entry>
  <entry>
    <title>编译Qt 4.8.7源码</title>
    <url>/2025/08/04/Linux/%E7%BC%96%E8%AF%91Qt%204.8.7%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>一、先来看一篇转载文章《<a href="https://www.jianshu.com/p/e2bf0dd962d9">在 VS2015 中使用 Qt4</a>》</p>
<p><a href="http://tangzx.qiniudn.com/post-0111-qt4-vs2015.html">http://tangzx.qiniudn.com/post-0111-qt4-vs2015.html</a> 最早的原文，看不到了</p>
<p><a href="https://github.com/district10/qt4-vs2015x64">https://github.com/district10/qt4-vs2015x64</a> 原作者的github，里面的东东都下载不了了</p>
<p>二、firecat本人的教程</p>
<p>0、Qt官方</p>
<p>Qt4.8.7官方源码下载</p>
<p><a href="https://download.qt.io/new_archive/qt/4.8/4.8.7/">https://download.qt.io/new_archive&#x2F;qt&#x2F;4.8&#x2F;4.8.7&#x2F;</a></p>
<p>官网的exe只提供了MSVC2010，没有更高版本的。高版本需要自己下载源码编译。</p>
<p>源码里面的配置文件已经提供了MSVC 2015的编译选项，\qt-everywhere-opensource-src-4.8.7\mkspecs\win32-msvc2015</p>
<p>参照官方提供的编译文档一步一步执行即可；但是配置文件里没有提供MSVC 2017的编译选项。</p>
<p>官方编译的文档</p>
<p><a href="https://doc.qt.io/archives/qt-4.8/installation.html">https://doc.qt.io/archives/qt-4.8/installation.html</a></p>
<p><a href="https://doc.qt.io/archives/qt-4.8/configure-options.html">https://doc.qt.io/archives/qt-4.8/configure-options.html</a></p>
<p><a href="https://doc.qt.io/archives/qt-4.8/install-win.html">https://doc.qt.io/archives/qt-4.8/install-win.html</a></p>
<p><a href="https://doc.qt.io/archives/qt-4.8/install-mac.html">https://doc.qt.io/archives/qt-4.8/install-mac.html</a></p>
<p><a href="https://doc.qt.io/qt-5/build-sources.html">https://doc.qt.io/qt-5/build-sources.html</a></p>
<p>1、Qt 4.8.7+MSVC 2017</p>
<p>推荐使用第三方提供的源码，它已经是修改好的，里面含有MSVC 2017编译选项，可以编译。</p>
<p><a href="https://github.com/scharsig/Qt">https://github.com/scharsig/Qt</a> Qt4.8.7+MSVC2017源码</p>
<p><a href="https://forum.qt.io/topic/91623/building-qt-4-8-7-with-visual-studio-2017">https://forum.qt.io/topic/91623/building-qt-4-8-7-with-visual-studio-2017</a> Qt4.8.7+MSVC2017论坛</p>
<p><a href="https://github.com/sandym/qt-patches">https://github.com/sandym/qt-patches</a> 仅供参考，编译补丁</p>
<p><a href="https://github.com/Homebrew/formula-patches/tree/master/qt">https://github.com/Homebrew/formula-patches/tree/master/qt</a> 仅供参考，编译补丁</p>
<p><a href="https://github.com/BartVandewoestyne/qt_4_8_7_with_vs2017_patch">https://github.com/BartVandewoestyne/qt_4_8_7_with_vs2017_patch</a> 仅供参考，编译补丁</p>
<p>完整的编译过程：</p>
<p>下载第三方源码<a href="https://github.com/scharsig/Qt/tree/master/qt-4.8.7-vs2017">https://github.com/scharsig/Qt/tree/master/qt-4.8.7-vs2017</a> 然后解压</p>
<p>-–step1—</p>
<p>Windows桌面-开始-程序-Visual Studio 2017-Visual Studio Tools-VC-x86 Native Tools Command Prompt for VS 2017</p>
<p>-–step2—</p>
<p>C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise&gt;cd F:\Qt\setup-exe\4.8.7\Qt-master\qt-4.8.7-vs2017</p>
<p>-–step3—</p>
<p>F:\Qt\setup-exe\4.8.7\Qt-master\qt-4.8.7-vs2017&gt;configure -help</p>
<p>-–step4—</p>
<p>F:\Qt\setup-exe\4.8.7\Qt-master\qt-4.8.7-vs2017&gt;<br>configure -make nmake -debug-and-release -opensource -confirm-license -platform win32-msvc2017 -prefix F:\Qt\Qt4.8.7-msvc2017 -nomake examples -nomake tests</p>
<p>如果不想编译这么多功能模块，可以精简为：</p>
<p>configure -make nmake -debug-and-release -opensource -confirm-license -platform win32-msvc2017 -prefix F:\Qt\Qt4.8.7-msvc2017 \<br>  -no-qt3support -no-multimedia \<br>  -no-audio-backend -no-phonon -no-phonon-backend -no-libtiff \<br>  -no-libmng -no-dbus -no-nis -nomake examples -nomake tests</p>
<pre><code> -release              Compile and link Qt with debugging turned off. -debug                Compile and link Qt with debugging turned on. -nomake tests         Disable building of tests to speed up compilation -nomake examples      Disable building of examples to speed up compilation -confirm-license      Automatically acknowledge the LGPL 2.1 license.
</code></pre>
<p>-–step5—</p>
<p>F:\Qt\setup-exe\4.8.7\Qt-master\qt-4.8.7-vs2017&gt;nmake</p>
<p>-–step6—</p>
<p>F:\Qt\setup-exe\4.8.7\Qt-master\qt-4.8.7-vs2017&gt;nmake install</p>
<p>-–step7—</p>
<p>添加到Qt Creator</p>
<p>![[编译Qt 4.8.7源码&#x2F;IMG-20250807081809727.png]]</p>
<p>-–step8—</p>
<p>新建项目测试，Qt Creator+Qt4.8.7+MSVC2017编译项目时，如果报错：</p>
<blockquote>
<p>intermediate\moc\moc_rs_actionzoompan.cpp:-1: error: C1041: 无法打开程序数据库“F:\CADCAM\QCAD\src\build-LibreCAD-v1.0.4-qt4-Desktop_Qt_4_8_7_MSVC2017_32bit-Debug\librecad\vc140.pdb”；如果要将多个 CL.EXE 写入同一个 .PDB 文件，请使用 &#x2F;FS</p>
</blockquote>
<p>解决办法：</p>
<p>在Qt Creator的项目文件，即.pro文件中，可以通过QMAKE_CXXFLAGS来给MSVC编译器传递编译开关。</p>
<p>QMAKE_CXXFLAGS +&#x3D; &#x2F;FS</p>
<pre><code>win32-msvc*:QMAKE_CXXFLAGS += /wd&quot;4819&quot; QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO -= -Zc:strictStrings 
</code></pre>
<p>MSVC 2017编译器常见错误的解决：</p>
<p><a href="https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/c-cpp-build-errors?view=vs-2017">https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/c-cpp-build-errors?view=vs-2017</a></p>
<p>2、Mac OS+Qt 4.8.7</p>
<p>笔者的Mac OS版本是MacOS-10.15-Catalina，高版本的OS和Clang已经不再支持Qt官方发布的Qt4了。</p>
<p>解决办法可以参见我的另一篇博文：<a href="https://blog.csdn.net/libaineu2004/article/details/104740623">https://blog.csdn.net/libaineu2004/article/details/104740623</a></p>
<p><a href="https://trac.macports.org/ticket/58651">https://trac.macports.org/ticket/58651</a> mac下编译qt4遇到问题</p>
<p><a href="https://github.com/macports/macports-ports/tree/master/aqua/qt4-mac">https://github.com/macports/macports-ports/tree/master/aqua/qt4-mac</a> mac编译补丁</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt源码编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/2017/02/10/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://www.open-open.com/lib/view/open1423703640748.html">非常详细的 Docker 学习笔记 - Docker - 服务器软件 - 深度开源 (open-open.com)</a></p>
<p><a href="https://www.cnblogs.com/zydev/p/5803461.html">Docker-创建和分享应用（3） - 头痛不头痛 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/wsscy2004/article/details/25878363">常用docker命令，及一些坑_dockerfile 2&gt;&amp;1-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/zhang__jiayu/article/details/42611469">Docker常用命令_docker -i -t -v-CSDN博客</a></p>
<p><a href="https://phuker.github.io/posts/docker-commands.html">Docker 常用命令 - Phuker’s Blog</a></p>
<p><a href="https://www.jb51.net/article/101509.htm">详解Docker 容器基础系统镜像打包_docker_脚本之家 (jb51.net)</a></p>
<p><a href="https://blog.csdn.net/hjh00/article/details/51437815">一种docker基础镜像制作方法_docker 从iso制作镜像-CSDN博客</a></p>
<p><a href="https://linux.cn/article-5427-1.html">系统运维|两种方式创建你自己的 Docker 基本映像 (linux.cn)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker编译多系统架构镜像</title>
    <url>/2025/03/20/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Docker%E7%BC%96%E8%AF%91%E5%A4%9A%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>Docker 19.03以上版本可以使用 <code>docker buildx build</code>命令使用<code>BuildKit</code>构建镜像。该命令支持<code>--platform</code>参数可以同时构建多种系统架构的Docker镜像。</p>
<h4 id="新建builder实例"><a href="#新建builder实例" class="headerlink" title="新建builder实例"></a>新建builder实例</h4><p>Docker for Linux不支持构建<code>arm</code>架构镜像，可以运行一个新的容器让其支持该特性，Docker Desktop版本无需进行此项设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm --privileged tonistiigi/binfmt:latest --install all </span><br></pre></td></tr></table></figure>
<p>由于Docker默认的<code>build</code>实例不支持同时指定多个 <code>--platform</code>，必须首先创建一个新的<code>builder</code>实例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 适用于国内环境</span></span><br><span class="line">$ docker buildx create --use --name=mybuilder-cn --driver docker-container --driver-opt image=dockerpracticesig/buildkit:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 适用于腾讯云环境(腾讯云主机、coding.net 持续集成)</span></span><br><span class="line">$ docker buildx create --use --name=mybuilder-cn --driver docker-container --driver-opt image=dockerpracticesig/buildkit:master-tencent</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ docker buildx create --name mybuilder --driver docker-container</span></span><br><span class="line"></span><br><span class="line">$ docker buildx use mybuilder</span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> --platform=$TARGETPLATFORM alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">uname</span> -a &gt; os.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;os.txt&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t &#123;镜像名称&#125; . --push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像信息</span></span><br><span class="line">docker buildx imagetools inspect &#123;镜像名称&#125;</span><br></pre></td></tr></table></figure>
<p><code>--push</code> 参数表示将构建好的镜像推送到Docker仓库</p>
<h3 id="架构相关变量"><a href="#架构相关变量" class="headerlink" title="架构相关变量"></a>架构相关变量</h3><p><strong>TARGETPLATFORM</strong><br>构建镜像的目标平台，例如 <code>linux/amd64</code>，<code>linux/arm/v7</code>，<code>windows/amd64</code></p>
<p><strong>TARGETOS</strong><br>构建镜像的OS类型，例如 <code>linux</code>，<code>windows</code></p>
<p><strong>TARGETARCH</strong><br>构建镜像的架构类型，例如 <code>amd64</code>，<code>arm</code></p>
<p><strong>BUILDPLATFORM</strong><br>构建镜像主机平台，例如 <code>linux/amd64</code></p>
<p><strong>BUILDOS</strong><br>构建镜像主机的OS类型，例如 <code>linux</code></p>
<p><strong>BUILDARCH</strong><br>构建镜像主机的架构类型，例如 <code>amd64</code></p>
<p><strong>BUILDVARIANT</strong><br><code>BUILDPLATFORM</code>的变种，该变量可能为空，例如 <code>v7</code></p>
<p>使用举例<br>例如要构建 <code>linux/arm/v7</code>和 <code>linux/amd64</code>两种架构的镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> docker.io/library/python:<span class="number">3.10</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量必须申明</span></span><br><span class="line"><span class="keyword">ARG</span> TARGETOS</span><br><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> main.py /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENTRYPOINT [/app]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署单节点ETCD</title>
    <url>/2025/03/17/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Docker%E9%83%A8%E7%BD%B2%E5%8D%95%E8%8A%82%E7%82%B9ETCD/</url>
    <content><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择"></a>镜像选择</h4><p>quay.io&#x2F;coreos&#x2F;etcd:3.2.7<br>bitname&#x2F;etcd</p>
<h4 id="创建ETCD数据目录"><a href="#创建ETCD数据目录" class="headerlink" title="创建ETCD数据目录"></a>创建ETCD数据目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data 存储容器持久化数据</span></span><br><span class="line"><span class="comment"># config 存储容器使用的配置文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/docker/etcd/&#123;data,config&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建ETCD配置文件"><a href="#创建ETCD配置文件" class="headerlink" title="创建ETCD配置文件"></a>创建ETCD配置文件</h4><p>配置文件路径为 <code>/usr/local/docker/etcd/config/etcd.config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">etcd</span> <span class="comment"># etcd member 名称，可根据实际情况修改</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/etcd</span> <span class="comment">#etcd 数据目录，可根据实际情况修改</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">http://0.0.0.0:2379</span> <span class="comment">#client 流量监听地址，没特殊需求按文档填写即可</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">http://0.0.0.0:2379</span> <span class="comment"># 该 member 向外部通告的客户端 url 列表，单节点部署时不需要修改，集群部署模式需修改为容器所在节点对外提供服务的 IP</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">http://0.0.0.0:2380</span> <span class="comment"># peer 流量监听地址，没特殊需求按文档填写即可</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">http://0.0.0.0:2380</span> <span class="comment"># 该 member 向同一集群内其他 member 通告的 peer url 列表，单节点部署时不需要修改，集群部署模式需修改为容器所在节点对外提供服务的 IP</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">etcd=http://0.0.0.0:2380</span> <span class="comment"># 初始化集群节点信息，单节点部署时不需要修改，集群部署模式需要填写集群中所有 member 的信息</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">etcd-cluster</span>  <span class="comment"># 初始化集群时使用的 token，随便写</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">new</span> <span class="comment"># 初始化集群状态，可选的值为 **new** 或者 **existing**，通常采用 **new**</span></span><br><span class="line"><span class="attr">logger:</span> <span class="string">zap</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="comment"># log-outputs: stderr</span></span><br></pre></td></tr></table></figure>
<h3 id="创建并启动ETCD服务"><a href="#创建并启动ETCD服务" class="headerlink" title="创建并启动ETCD服务"></a>创建并启动ETCD服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name etcd -p 2379:2379 -p 2380:2380 -v /usr/local/docker/etcd/data:/var/etcd -v /usr/local/docker/etcd/config:/var/lib/etcd/config quay.io/coreos/etcd: 3.5.12 </span><br></pre></td></tr></table></figure>

<h3 id="使用docker-compose部署"><a href="#使用docker-compose部署" class="headerlink" title="使用docker-compose部署"></a>使用docker-compose部署</h3><p>创建Docker-compose</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">etcd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/coreos/etcd:v3.5.12</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/etcd</span> <span class="string">--config-file=/var/lib/etcd/config/etcd.conf.yml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/data:/var/lib/etcd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/config/etcd.config.yml:/var/lib/etcd/conf/etcd.conf.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2379</span><span class="string">:2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2380</span><span class="string">:2380</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 船舰一个新的bridge模式网络，名称 etcd-tier,名称可以根据需求自定义</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etcd-tier</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>基于环境变量配置, 配置参考配置文件方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">etcd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/coreos/etcd:v3.5.12</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_NAME=etcd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_DATA_DIR=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_LISTEN_CLIENT_URLS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_ADVERTISE_CLIENT_URLS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_LISTEN_PEER_URLS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_INSTALL_ADVERTISE_PEER_URLS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_INSTALL_CLUSTER_TOKEN=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_INSTALL_CLUSTER</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_INSTALL_CLUSTER_STATE=new</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_LOGGER=zap</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ETCD_LOG_LEVEL=info</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ALLOW_NONE_AUTHENTICATION=&quot;yes&quot;</span> <span class="comment"># 允许无身份验证访问</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;DOCKER_VOLUME_DIRECTORY:=.&#125;/data:/var/etcd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:rw</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2379</span><span class="string">:2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2380</span><span class="string">:2380</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etcd-tier</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<p>创建并启动etcd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;docker-compose文件所在目录&#125;</span><br><span class="line">docker compose up -d </span><br></pre></td></tr></table></figure>

<h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">etcdctl --endpoints=192.168.1.2:2379 --write-out=table endpoint health</span><br><span class="line"></span><br><span class="line">etcdctl --endpoints=192.168.1.2:2379 --write-out=table endpoint status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看member状态</span></span><br><span class="line">etcdctl --endpoints=192.168.1.2:2379 --write-out=table member list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">etcdctl --endpoints=192.168.1.2:2379 put foo bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">etcdctl --endpoints=192.168.1.2:2379 get foo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ETCD</tag>
      </tags>
  </entry>
  <entry>
    <title>EdgeX Foundry</title>
    <url>/2022/07/27/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/EdgeX-Foundry/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/Jason_LiQuan/article/details/109717954">https://blog.csdn.net/Jason_LiQuan/article/details/109717954</a><br><a href="https://www.jianshu.com/nb/78768">https://www.jianshu.com/nb/78768</a><br><a href="https://www.hangge.com/blog/cache/detail_2351.html">https://www.hangge.com/blog/cache/detail_2351.html</a><br><a href="https://unblocked-pw.github.io/">https://unblocked-pw.github.io/</a><br><a href="https://blog.csdn.net/ewtewtewrt/article/details/110161010">https://blog.csdn.net/ewtewtewrt/article/details/110161010</a><br><a href="https://bthub11.xyz/cn">https://bthub11.xyz/cn</a><br><a href="https://blog.csdn.net/ewtewtewrt/article/details/110382703">https://blog.csdn.net/ewtewtewrt/article/details/110382703</a><br><a href="https://www.tpbaysproxy.com/">https://www.tpbaysproxy.com/</a><br><a href="https://github.com/fwonggh/Bthub">https://github.com/fwonggh/Bthub</a><br><a href="https://limetorrent.cc/">https://limetorrent.cc/</a><br><a href="https://blog.csdn.net/woaizard100/article/details/80910356">https://blog.csdn.net/woaizard100/article/details/80910356</a><br><a href="https://blog.csdn.net/woaizard100/category_7776741.html">https://blog.csdn.net/woaizard100/category_7776741.html</a><br><a href="https://cloud.tencent.com/developer/article/1671077">https://cloud.tencent.com/developer/article/1671077</a><br><a href="https://www.cnblogs.com/harrychinese/p/quartz_net.html#:~:text=Quartz.Net%20%E6%9C%89%E4%B8%A4%E7%B1%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2C%201.%20Quartz.%E7%B3%BB%E7%BB%9F%E7%BA%A7%E5%88%AB%E9%85%8D%E7%BD%AE%2C%20%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BA%20quartz.config%20%2C%20%E6%98%AFjava,job%2Ftrigger%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2C%20%E9%BB%98%E8%AE%A4%E5%90%8D%E7%A7%B0%E4%B8%BA%20quartz_jobs.xml%2C%20%E7%94%A8%E6%9D%A5%E9%85%8D%E7%BD%AE%20job%20%E5%92%8C%20trigger%20%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF">https://www.cnblogs.com/harrychinese/p/quartz_net.html#:~:text=Quartz.Net%20%E6%9C%89%E4%B8%A4%E7%B1%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2C%201.%20Quartz.%E7%B3%BB%E7%BB%9F%E7%BA%A7%E5%88%AB%E9%85%8D%E7%BD%AE%2C%20%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BA%20quartz.config%20%2C%20%E6%98%AFjava,job%2Ftrigger%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2C%20%E9%BB%98%E8%AE%A4%E5%90%8D%E7%A7%B0%E4%B8%BA%20quartz_jobs.xml%2C%20%E7%94%A8%E6%9D%A5%E9%85%8D%E7%BD%AE%20job%20%E5%92%8C%20trigger%20%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF</a>.<br><a href="https://www.cnblogs.com/z-huan/p/7412181.html">https://www.cnblogs.com/z-huan/p/7412181.html</a><br><a href="https://www.cnblogs.com/abeam/p/8044460.html">https://www.cnblogs.com/abeam/p/8044460.html</a><br><a href="https://blog.csdn.net/freewebsys/article/details/107950520">https://blog.csdn.net/freewebsys/article/details/107950520</a><br><a href="https://cloud.tencent.com/developer/article/1171966">https://cloud.tencent.com/developer/article/1171966</a><br><a href="https://blog.csdn.net/mr_zhongjie/article/details/106916512">https://blog.csdn.net/mr_zhongjie/article/details/106916512</a><br><a href="https://www.jianshu.com/p/e48dbd087133">https://www.jianshu.com/p/e48dbd087133</a><br><a href="https://blog.csdn.net/tianhuanqingyun/article/details/90454329">https://blog.csdn.net/tianhuanqingyun/article/details/90454329</a><br><a href="https://blog.csdn.net/Frank_Abagnale/article/details/114333740">https://blog.csdn.net/Frank_Abagnale/article/details/114333740</a><br><a href="https://blog.csdn.net/emqx_broker/article/details/106490836">https://blog.csdn.net/emqx_broker/article/details/106490836</a><br><a href="https://blog.csdn.net/qq_36827625/article/details/106502620">https://blog.csdn.net/qq_36827625/article/details/106502620</a><br><a href="https://blog.csdn.net/qq_41626768/article/details/109384703">https://blog.csdn.net/qq_41626768/article/details/109384703</a><br><a href="https://www.jianshu.com/p/af515094244b">https://www.jianshu.com/p/af515094244b</a><br><a href="https://my.oschina.net/LFAPAC/blog/4522385">https://my.oschina.net/LFAPAC/blog/4522385</a><br><a href="https://www.jianshu.com/p/f6b7f6781481">https://www.jianshu.com/p/f6b7f6781481</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI1OTI5NjU0Mg==&mid=2247484968&idx=1&sn=44e773b6a0df47b7634ca5f8c1014649&chksm=ea7a5a59dd0dd34f002b01a5249e0afe61ae9597d36949abb95cc2e28c2e085cfdd68b59c26e&scene=132#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI1OTI5NjU0Mg==&amp;mid=2247484968&amp;idx=1&amp;sn=44e773b6a0df47b7634ca5f8c1014649&amp;chksm=ea7a5a59dd0dd34f002b01a5249e0afe61ae9597d36949abb95cc2e28c2e085cfdd68b59c26e&amp;scene=132#wechat_redirect</a><br><a href="https://blog.csdn.net/flystreet7/article/details/122086529">https://blog.csdn.net/flystreet7/article/details/122086529</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>K3s安装</title>
    <url>/2024/03/11/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3S%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h2><h3 id="新装环境"><a href="#新装环境" class="headerlink" title="新装环境"></a>新装环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master安装</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | \</span><br><span class="line">    INSTALL_K3S_MIRROR=cn \</span><br><span class="line">    INSTALL_K3S_EXEC=<span class="string">&#x27;--write-kubeconfig-mode=644&#x27;</span> sh -</span><br><span class="line"></span><br><span class="line"><span class="comment">#  加入其他节点</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | \</span><br><span class="line">    K3S_URL=https://&lt;k3s-server-ip&gt;:6443 \</span><br><span class="line">    K3S_TOKEN=&lt;token&gt; \</span><br><span class="line">    INSTALL_K3S_EXEC=<span class="string">&#x27;--write-kubeconfig-mode=644&#x27;</span> sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXEC参数</span></span><br><span class="line"><span class="comment"># --write-kubeconfig-mode=644 设置配置文件权限</span></span><br><span class="line"><span class="comment"># --service-node-port-range=1-65535 解除端口限制，默认30000-32767</span></span><br><span class="line"><span class="comment"># --advertise-address=192.168.1.1 指定集群管理IP,默认端口6443</span></span><br><span class="line"><span class="comment"># --disable=traefik 禁用Traefik Ingress</span></span><br><span class="line"><span class="comment"># --default-local-storage-path=/mnt/storage/k3s # 自定义本地存储（local-path-config）的默认存储路径 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="comment"># INSTALL_K3S_MIRROR=cn 设置未中国区镜像</span></span><br><span class="line"><span class="comment"># INSTALL_K3S_SKIP_SELINUX_RPM=true 安装由于selinux导致失败时可加此配置跳过k3s selinux配置,注意是在 INSTALL_K3S_MIRROR后添加</span></span><br></pre></td></tr></table></figure>

<p>其中<code>&lt;k3s-server-ip&gt;</code>是K3s服务器的IP地址，<code>&lt;token&gt;</code>是由K3s服务器生成的唯一令牌。可以使用以下命令在K3s服务器上获取此令牌：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cat</span> /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure>

<p>设置 kubeconfig 文件路径用于对 Kubernetes 集群的访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/rancher/k3s/k3s.yaml&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="现有环境修改"><a href="#现有环境修改" class="headerlink" title="现有环境修改"></a>现有环境修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop k3s.service</span><br><span class="line">vim /etc/systemd/system/k3s.service </span><br><span class="line"><span class="comment"># 修改ExecStart</span></span><br><span class="line"><span class="comment"># 原有内容</span></span><br><span class="line">ExecStart=/usr/local/bin/k3s \</span><br><span class="line">	server \</span><br><span class="line">		<span class="string">&#x27;--write-kubeconfig-mode=644&#x27;</span></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">ExecStart=/usr/local/bin/k3s \</span><br><span class="line">	server \</span><br><span class="line">		<span class="string">&#x27;--write-kubeconfig-mode=644&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--service-node-port-range=1-65535&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--default-local-storage-path=/mnt/storage/k3s&#x27;</span> \</span><br><span class="line">        </span><br><span class="line">  </span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl start k3s.service</span><br></pre></td></tr></table></figure>

<h2 id="安装管理工具Helm"><a href="#安装管理工具Helm" class="headerlink" title="安装管理工具Helm"></a>安装管理工具Helm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装helm</span></span><br><span class="line">curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu 使用snap安装</span></span><br><span class="line"><span class="built_in">sudo</span> snap install helm --classic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离线安装</span></span><br><span class="line"><span class="comment"># 下载最新版离线安装包 https://github.com/helm/helm/releases</span></span><br><span class="line">tar xf helm-v2.11.0-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cp</span> linux-amd64/helm linux-amd64/tiller /usr/local/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="添加命令自动补全"><a href="#添加命令自动补全" class="headerlink" title="添加命令自动补全"></a>添加命令自动补全</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装自动补全</span><br><span class="line">sudo apt install bash-completion</span><br><span class="line"></span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line"></span><br><span class="line"># kubectl自动补全</span><br><span class="line"># 临时使用</span><br><span class="line">echo &#x27;source &lt; (kubectl completion bash)&#x27; &gt;&gt; ~/.bashrc </span><br><span class="line"></span><br><span class="line"># 永久生效</span><br><span class="line">kubectl completion bash | sudo tee /etc/bash_completion/kubectl &gt; /dev/null </span><br><span class="line"></span><br><span class="line"># helm 自动补全</span><br><span class="line"># 临时使用</span><br><span class="line">echo &#x27;source &lt; (helm completion bash)&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 永久生效</span><br><span class="line">helm completion bash | sudo tee /etc/bash_completion/helm &gt; /dev/null</span><br></pre></td></tr></table></figure>


<h3 id="常用Helm-Charts"><a href="#常用Helm-Charts" class="headerlink" title="常用Helm Charts"></a>常用Helm Charts</h3><p><a href="https://artificthub.io/">Artifact Hub</a></p>
<p><a href="https://charts.bitnami.com/">Bitnami Helm Charts</a></p>
<p><a href="https://mirror.azure.cn/kubernetes/charts/">Microsoft</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集权所有资源</span></span><br><span class="line">kubectl get all -A -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定命名空间</span></span><br><span class="line">kubectl get all -n &#123;namespace name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">kubectl logs -n &#123;namespace name&#125; pod/&#123;pod name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定命名空间下资源详细信息</span></span><br><span class="line">kubectl describe -n &#123;namespace name&#125; [service|pod|secret|carificate|...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点相关</span></span><br><span class="line">kubectl get node --show-labels -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启pod</span></span><br><span class="line">kubectl rollout restart &#123;pod name&#125;  -n </span><br><span class="line"></span><br><span class="line"><span class="comment"># 伸缩实例数量</span></span><br><span class="line">kubectl scale deploy <span class="built_in">whoami</span> --replicas=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 k3s 集群配置文件</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment">## Helm常用命令</span></span><br><span class="line"><span class="comment"># 获取charts的values文件</span></span><br><span class="line">helm show values bitnami/redis &gt; values.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建2副本的whoami应用，默认1副本</span></span><br><span class="line">kubectl create deploy <span class="built_in">whoami</span> --image=traefik/whoami --replicas=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看部署应用信息</span></span><br><span class="line">kubectl describe deploy <span class="built_in">whoami</span></span><br><span class="line"><span class="comment"># 监控Pod状态，通过缩容\扩容可直观看到Pod的调度状态</span></span><br><span class="line">kubectl get pods --watch</span><br><span class="line"></span><br><span class="line">kubectl scale deploy <span class="built_in">whoami</span> --replicas=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求链路理解</span></span><br><span class="line">request public-ip -&gt; node-port -&gt; svc-port -&gt; pod-port -&gt; container</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布K3s内网的服务</span></span><br><span class="line">kubectl expose deploy <span class="built_in">whoami</span> --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">kubectl get svc <span class="built_in">whoami</span> -owide</span><br><span class="line">kubectl describe svc <span class="built_in">whoami</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射端口到宿主机</span></span><br><span class="line"><span class="comment"># --tareget-port 容器映射端口</span></span><br><span class="line"><span class="comment"># --external-ip 指定公网IP</span></span><br><span class="line"><span class="comment"># --prot 集群内暴露端口</span></span><br><span class="line"><span class="comment"># --node-port type=NodePort时提供给集群外访问的端口</span></span><br><span class="line">kubectl expose deploy <span class="built_in">whoami</span> --<span class="built_in">type</span>=LoadBalancer --port=80 --external-ip &lt;PUBLIC_IP&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空测试</span></span><br><span class="line">kubectl delete all --all</span><br></pre></td></tr></table></figure>



<h2 id="配置国内源-私有镜像库"><a href="#配置国内源-私有镜像库" class="headerlink" title="配置国内源(私有镜像库)"></a>配置国内源(私有镜像库)</h2><p>K3s 默认的 containerd 配置文件目录为&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml，但直接操作 containerd 的配置文件去设置镜像仓库或加速器相比于操作 docker 要复杂许多。K3s 为了简化配置 containerd 镜像仓库的复杂度，K3s 会在启动时检查&#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;中是否存在 registries.yaml 文件，如果存在该文件，就会根据 registries.yaml 的内容转换为 containerd 的配置并存储到&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml，从而降低了配置 containerd 镜像仓库的复杂度。</p>
<p>K3s 镜像仓库配置文件由两大部分组成：mirrors 和 configs:</p>
<ul>
<li>Mirrors 是一个用于定义专用镜像仓库的名称和 endpoint 的指令</li>
<li>Configs 部分定义了每个 mirror 的 TLS 和证书配置。对于每个 mirror，你可以定义 auth 和&#x2F;或 tls</li>
</ul>
<p>containerd 使用了类似 K8S 中 svc 与 endpoint 的概念，svc 可以理解为访问名称，这个名称会解析到对应的 endpoint 上。也可以理解 mirror 配置就是一个反向代理，它把客户端的请求代理到 endpoint 配置的后端镜像仓库。mirror 名称可以随意填写，但是必须符合 IP 或域名的定义规则。并且可以配置多个 endpoint，默认解析到第一个 endpoint，如果第一个 endpoint 没有返回数据，则自动切换到第二个 endpoint，以此类推。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mirrors:</span><br><span class="line">  &quot;172.31.6.200:5000&quot;:</span><br><span class="line">    endpoint:</span><br><span class="line">      - &quot;http://172.31.6.200:5000&quot;</span><br><span class="line">  &quot;rancher.ksd.top:5000&quot;:</span><br><span class="line">    endpoint:</span><br><span class="line">      - &quot;http://172.31.6.200:5000&quot;</span><br><span class="line">  &quot;docker.io&quot;:</span><br><span class="line">    endpoint:</span><br><span class="line">      - &quot;https://fogjl973.mirror.aliyuncs.com&quot;</span><br><span class="line">      - &quot;https://registry-1.docker.io&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="非安全（http）私有仓库配置"><a href="#非安全（http）私有仓库配置" class="headerlink" title="非安全（http）私有仓库配置"></a>非安全（http）私有仓库配置</h4><p>配置非安全（http）私有仓库，只需要在 endpoint 中指定 http 协议头的地址即可。</p>
<p>在没有 TLS 通信的情况下，需要为 endpoints 指定 http:&#x2F;&#x2F;，否则将默认为 https。</p>
<h5 id="无认证"><a href="#无认证" class="headerlink" title="无认证"></a>无认证</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;172.31.6.200:5000&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;http://172.31.6.200:5000&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="有认证"><a href="#有认证" class="headerlink" title="有认证"></a>有认证</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;35.182.134.80&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;http://35.182.134.80&quot;</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">&quot;35.182.134.80&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span> <span class="comment"># this is the registry password</span></span><br></pre></td></tr></table></figure>



<h4 id="安全（https）私有仓库配置"><a href="#安全（https）私有仓库配置" class="headerlink" title="安全（https）私有仓库配置"></a>安全（https）私有仓库配置</h4><h5 id="使用授信-ssl-证书"><a href="#使用授信-ssl-证书" class="headerlink" title="使用授信 ssl 证书"></a>使用授信 ssl 证书</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;harbor.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://harbor.kingsd.top&quot;</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">&quot;harbor.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span> <span class="comment"># this is the registry password</span></span><br></pre></td></tr></table></figure>

<h5 id="使用自签-ssl-证书"><a href="#使用自签-ssl-证书" class="headerlink" title="使用自签 ssl 证书"></a>使用自签 ssl 证书</h5><p>如果后端仓库使用的是自签名的 ssl 证书，那么需要配置 CA 证书 用于 ssl 证书的校验。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;harbor-ksd.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://harbor-ksd.kingsd.top&quot;</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">&quot;harbor-ksd.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span> <span class="comment"># this is the registry password</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">ca_file:</span> <span class="string">/opt/certs/ca.crt</span></span><br></pre></td></tr></table></figure>

<h5 id="ssl-双向认证"><a href="#ssl-双向认证" class="headerlink" title="ssl 双向认证"></a>ssl 双向认证</h5><p>如果镜像仓库配置了双向认证，那么需要为 containerd 配置 ssl 证书用于 镜像仓库对 containerd 做认证。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;harbor-ksd.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://harbor-ksd.kingsd.top&quot;</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">&quot;harbor-ksd.kingsd.top&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span> <span class="comment"># this is the registry password</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">ca_file:</span> <span class="string">/opt/certs/ca.crt</span> <span class="comment"># path to the ca file used in the registry</span></span><br><span class="line">      <span class="attr">cert_file:</span> <span class="string">/opt/certs/harbor-ksd.kingsd.top.cert</span> <span class="comment"># path to the cert file used in the registry</span></span><br><span class="line">      <span class="attr">key_file:</span> <span class="string">/opt/certs/harbor-ksd.kingsd.top.key</span> <span class="comment"># path to the key file used in the registry</span></span><br></pre></td></tr></table></figure>



<h4 id="加速器配置"><a href="#加速器配置" class="headerlink" title="加速器配置"></a>加速器配置</h4><p>Containerd 与 docker 都有默认仓库，均为 docker.io 。如果配置中未指定 mirror 为 docker.io，containerd 后会自动加载 docker.io 配置。与 docker 不同的是，containerd 可以修改 docker.io 对应的 endpoint（默认为 <a href="https://registry-1.docker.io/">https://registry-1.docker.io</a>），而 docker 无法修改。</p>
<p>Docker 中可以通过 registry-mirrors 设置镜像加速地址。如果 pull 的镜像不带仓库地址（项目名+镜像名:tag），则会从默认镜像仓库去拉取镜像。如果配置了镜像加速地址，会先访问镜像加速仓库，如果没有返回数据，再访问默认的镜像仓库。</p>
<p>Containerd 目前没有直接配置镜像加速的功能，但 containerd 中可以修改 docker.io 对应的 endpoint，所以可以通过修改 endpoint 来实现镜像加速下载。因为 endpoint 是轮询访问，所以可以给 docker.io 配置多个仓库地址来实现 加速地址+默认仓库地址。如下配置示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://fogjl973.mirror.aliyuncs.com&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://registry-1.docker.io&quot;</span></span><br></pre></td></tr></table></figure>



<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/584076089">Kubernetes 入门到实践：搭建 K3s 集群初体验 - 知乎 (zhihu.com)</a></p>
<p>离线安装<a href="https://docs.k3s.io/installation/airgap">Air-Gap Install | K3s</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K8s</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s导出证书</title>
    <url>/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E5%AF%BC%E5%87%BA%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导出根证书</span><br><span class="line">kubectl get secret example-secret -o jsonpath=&#x27;&#123;.data.ca\.crt&#125;&#x27;| base64 --decode</span><br><span class="line"></span><br><span class="line">kubectl get secret example-secret -o jsonpath=&#x27;&#123;.data.tls\.crt&#125;&#x27;| base64 --decode</span><br><span class="line"></span><br><span class="line">kubectl get secret example-secret -o jsonpath=&#x27;&#123;.data.tls\.key&#125;&#x27;| base64 --decode</span><br></pre></td></tr></table></figure>
<hr>
<p>导出Secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get secret example-secret -o yaml &gt; example-secret.yaml</span><br></pre></td></tr></table></figure>

<p>导出内容格式如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">ca.crt:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/alt-names:</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    <span class="attr">cert-manager.io/certificate-name:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">cert-manager.io/common-name:</span> <span class="string">Tianjin</span> <span class="string">Pengan</span></span><br><span class="line">    <span class="attr">cert-manager.io/ip-sans:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    <span class="attr">cert-manager.io/issuer-group:</span> <span class="string">cert-manager.io</span></span><br><span class="line">    <span class="attr">cert-manager.io/issuer-kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line">    <span class="attr">cert-manager.io/issuer-name:</span> <span class="string">selfsigned-cluster-issuer</span></span><br><span class="line">    <span class="attr">cert-manager.io/subject-organizations:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">cert-manager.io/uri-sans:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2024-09-10T10:54:59Z&quot;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">controller.cert-manager.io/fao:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tjpengan-io-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;1730340&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">1c7d877b-ed86-4a1a-ad8c-0d8466c46506</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br></pre></td></tr></table></figure>

<p>Base64解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cert</span></span><br><span class="line"><span class="built_in">cat</span> example-secret.yaml | grep tls.crt | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">base64</span> --decode &gt; example-secret.cert</span><br><span class="line"></span><br><span class="line"><span class="comment">#key</span></span><br><span class="line"><span class="built_in">cat</span> example-secret.yaml | grep tls.key | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">base64</span> --decode &gt; example-secret.key</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Https证书</tag>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Dashboard</title>
    <url>/2024/04/08/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Dashboard/</url>
    <content><![CDATA[<h2 id="Helm部署"><a href="#Helm部署" class="headerlink" title="Helm部署"></a>Helm部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/</span><br><span class="line"></span><br><span class="line"><span class="comment">#helm会使用kubectl默认的KUBECONFIG配置，这里我们需要将KUBECONFIG换成k3s的否则会链接失败。</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意要指定端口号等信息，方便访问</span></span><br><span class="line"><span class="comment"># service.type=NodePort 默认是ClusterIP只能本机访问 </span></span><br><span class="line"><span class="comment"># service.nodePort=30080 指定访问端口号</span></span><br><span class="line"><span class="comment"># replicaCount=2 2个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helm v2</span></span><br><span class="line">helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \</span><br><span class="line">--create-namespace \</span><br><span class="line">--namespace kubernetes-dashboard  \</span><br><span class="line"><span class="comment"># --set service.type=NodePort \</span></span><br><span class="line"><span class="comment"># --set service.nodePort=30080 \</span></span><br><span class="line"><span class="comment"># --set replicaCount=2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helm v3+</span></span><br><span class="line">helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \</span><br><span class="line">--create-namespace \</span><br><span class="line">--namespace kubernetes-dashboard \</span><br><span class="line"><span class="comment"># --set service.type=NodePort \</span></span><br><span class="line"><span class="comment"># --set service.nodePort=30080 \</span></span><br><span class="line"><span class="comment"># --set replicaCount=2</span></span><br></pre></td></tr></table></figure>



<h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><h4 id="NodePort暴露端口"><a href="#NodePort暴露端口" class="headerlink" title="NodePort暴露端口"></a>NodePort暴露端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard edit service kubernetes-dashboard-web</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;343478&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">8e48f478-993d-11e7-87e0-901b0e532516</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.100</span><span class="number">.124</span><span class="number">.90</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="comment"># 修改开放端口方式</span></span><br><span class="line">  <span class="comment">#type: ClusterIP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Traefik-Ingress反向代理"><a href="#Traefik-Ingress反向代理" class="headerlink" title="Traefik Ingress反向代理"></a>Traefik Ingress反向代理</h4><p>创建证书请求文件<code>dashboard-cert-manager.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Certificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k3s-chemmy-io</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">secretName:</span> <span class="string">k3s-chemmy-io-tls</span></span><br><span class="line">  <span class="attr">issuerRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">letsencrypt-staging</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line">  <span class="attr">commonName:</span> <span class="string">k3s.chemmy.io</span></span><br><span class="line">  <span class="attr">dnsNames:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">k3s.sample.net</span></span><br></pre></td></tr></table></figure>

<p>此配置文件是测试版，正式版参考<a href="Kubernetes/K3s%E9%83%A8%E7%BD%B2cert-manager.md">K3s部署cert-manager</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f dashboard-cert-manager.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get certificates</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果状态不是READY，检查 </span></span><br><span class="line">kubectl describe certificates k3s-chemmy-io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理证书</span></span><br><span class="line">kubectl delete certificates k3s-chemmy-io</span><br><span class="line">kubectl delete secrets k3s-chemmy-io-tls</span><br></pre></td></tr></table></figure>





<h2 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h2><p>新建dashboard-admin.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建ServiceAccount</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#创建clusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>新建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署用户资源</span></span><br><span class="line">kubectl apply -f dashboard-admin.yaml</span><br></pre></td></tr></table></figure>

<p>获取token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># v1.24+</span></span><br><span class="line"><span class="built_in">sudo</span> k3s kubectl -n kubernetes-dashboard create token admin-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># v1.23 及之前的版本</span></span><br><span class="line"><span class="built_in">sudo</span> k3s kubectl -n kubernetes-dashboard describe secret admin-user-token | grep <span class="string">&#x27;^token&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="Kubectl部署"><a href="#Kubectl部署" class="headerlink" title="Kubectl部署"></a>Kubectl部署</h2><p>最新版本只支持Helm,旧版本v2.7支持Kubectl部署</p>
<p>下载 <a href="https://github.com/kubernetes/dashboard/blob/v2.7.0/aio/deploy/recommended.yaml">recommended.yaml</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>

<p>修改recommended.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 直接暴露端口使用NodePort,Traefik使用ClusterIP</span></span><br><span class="line">  <span class="comment">#type: ClusterIP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dashboard的默认webui证书是自动生成的，由于时间和名称存在问题，导致谷歌和ie浏览器无法打开登录界面，经过测试Firefox可以正常打开。解决证书问题参考<a href="https://www.jianshu.com/p/c6d560d12d50">Kubernetes Dashboard的安装与坑 - 简书 (jianshu.com)</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 注释内置自动生成的证书 </span></span><br><span class="line"><span class="comment">#apiVersion: v1</span></span><br><span class="line"><span class="comment">#kind: Secret</span></span><br><span class="line"><span class="comment">#metadata:</span></span><br><span class="line"><span class="comment">#  labels:</span></span><br><span class="line"><span class="comment">#    k8s-app: kubernetes-dashboard</span></span><br><span class="line"><span class="comment">#  name: kubernetes-dashboard-certs</span></span><br><span class="line"><span class="comment">#  namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="comment">#type: Opaque</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/dashboard:v2.1.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">          <span class="comment"># 注释自动生成证书</span></span><br><span class="line">          <span class="comment">#  - --auto-generate-certificates</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># 添加证书配置及证书文件映射</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--token-ttl=3600</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--bind-address=0.0.0.0</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tls-cert-file=tls.crt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tls-key-file=tls.key</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生成证书文件 tls.crt,tls.csr,tls.key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成key</span></span><br><span class="line">openssl genrsa -out tls.key 2048</span><br><span class="line"><span class="comment"># 生成csr</span></span><br><span class="line">openssl req -new -out tls.csr -key tls.key -subj <span class="string">&#x27;/CN=0.0.0.0&#x27;</span></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> tls.csr -signkey tls.key -out tls.crt </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建secret</span></span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=tls.crt --from-file=tls.key -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p>subj子参数解释</p>
<table>
<thead>
<tr>
<th>缩写</th>
<th>翻译</th>
<th>英文对照</th>
</tr>
</thead>
<tbody><tr>
<td>C</td>
<td>国家名称缩写</td>
<td>Country Name (2 letter code)</td>
</tr>
<tr>
<td>ST</td>
<td>州或省名称</td>
<td>State or Province Name (full name)</td>
</tr>
<tr>
<td>L</td>
<td>城市或区域称</td>
<td>Locality Name (eg, city)</td>
</tr>
<tr>
<td>O</td>
<td>组织名（或公司名）</td>
<td>Organization Name (eg, company)</td>
</tr>
<tr>
<td>OU</td>
<td>组织单位名称（或部门名）</td>
<td>Organizational Unit Name (eg, section)</td>
</tr>
<tr>
<td>CN</td>
<td>服务器域名&#x2F;证书拥有者名称</td>
<td>Common Name (e.g. server FQDN or YOUR name)</td>
</tr>
<tr>
<td>emailAddress</td>
<td>邮件地址</td>
<td>Email</td>
</tr>
</tbody></table>
<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/666638890">k3s集群单节点部署与集群内DashBoard部署 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/databank/p/15664859.html">k3s集群搭建并安装kubernetes-dashboard - 东峰叵,com - 博客园 (cnblogs.com)</a></p>
<p>[K8S 快速入门（十九）通过Helm 安装 Kubernetes Dashboard_helm安装dashboard ingress-CSDN博客](<a href="https://blog.csdn.net/weixin_41947378/article/details/111661539#:~:text=%E9%80%9A%E8%BF%87Helm">https://blog.csdn.net/weixin_41947378/article/details/111661539#:~:text=通过Helm</a> 安装 Kubernetes Dashboard 1 1. 下载 %23,外网访问 %23 将svc的ClusterIP改为NotePort，外网访问  … 5 5. 令牌方式登录仪表盘)</p>
<p><a href="https://blog.csdn.net/lwlfox/article/details/113403133">使用 traefik ingress暴露kubernetes-dashbord - HTTPS版本_svclb-traefik-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/655525723">Kubernetes dashboardv2.7.0安装指南：从零开始搭建可视化界面 - 知乎</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>Dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>基于K3S搭建DevOps</title>
    <url>/2024/03/12/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2DevOps/</url>
    <content><![CDATA[<h2 id="K3s安装"><a href="#K3s安装" class="headerlink" title="K3s安装"></a>K3s安装</h2><p>参考 <a href="/2024/03/11/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3S%E5%AE%89%E8%A3%85/" title="K3s安装">K3S安装</a></p>
<h2 id="组件配置信息"><a href="#组件配置信息" class="headerlink" title="组件配置信息"></a>组件配置信息</h2><p>开放端口</p>
<table>
<thead>
<tr>
<th>端口</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>53</td>
<td>CoreDNS服务，替代修改Hosts方式实现内网域名访问</td>
</tr>
<tr>
<td>5432&#x2F;3306</td>
<td>PostgreSQL&#x2F;MySQL数据库（二选一即可）</td>
</tr>
<tr>
<td>443，80</td>
<td>HTTPS、HTTP访问入口，Traefik</td>
</tr>
<tr>
<td>6379</td>
<td>Redis缓存</td>
</tr>
<tr>
<td>8022</td>
<td>SSH管理端口</td>
</tr>
<tr>
<td>22</td>
<td>git+ssh方式代码上传</td>
</tr>
</tbody></table>
<p>域名规划</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>访问地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cert-Manager</td>
<td></td>
<td>证书管理服务，有公网域名推荐使用，内网部署可生成自签名证书</td>
</tr>
<tr>
<td>Traefik Dashboard</td>
<td><a href="https://dashboard.example.io/">https://dashboard.example.io</a></td>
<td>反向代理&#x2F;负载均衡</td>
</tr>
<tr>
<td>Harbor</td>
<td><a href="https://harbor.example.io/">https://harbor.example.io</a></td>
<td>私有镜像库,镜像缓存</td>
</tr>
<tr>
<td>Gitea</td>
<td><a href="https://gitea.example.io/">https://gitea.example.io</a></td>
<td>源代码仓库</td>
</tr>
<tr>
<td>Tekton</td>
<td><a href="https://tekton.example.io/">https://tekton.example.io</a></td>
<td>云原生持续集成</td>
</tr>
<tr>
<td>Drone</td>
<td><a href="https://drone.example.io/">https://drone.example.io</a></td>
<td>容器化持续集成</td>
</tr>
<tr>
<td>Sonar Qube</td>
<td><a href="https://sonar.example.io/">https://sonar.example.io</a></td>
<td>静态代码审查。</td>
</tr>
<tr>
<td>ArgoCD</td>
<td><a href="https://argocd.example.io/">https://argocd.example.io</a></td>
<td>持续部署组件</td>
</tr>
</tbody></table>
<h2 id="组件部署"><a href="#组件部署" class="headerlink" title="组件部署"></a>组件部署</h2><h3 id="Traefik"><a href="#Traefik" class="headerlink" title="Traefik"></a>Traefik</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### ArgoCD</span><br><span class="line"></span><br><span class="line">Helm方式部署</span><br><span class="line"></span><br><span class="line">```bash</span><br></pre></td></tr></table></figure>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>参考 <a href="K3s%E9%83%A8%E7%BD%B2MySQL.md">K3s部署MySQL</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k3s使用 local-path 部署</span></span><br><span class="line">kubectl apply -f https://gitee.com/Chemmy/kube-template/MySQL/mysql-pvc-local-path.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署mysql-config</span></span><br><span class="line">kubectl apply -f https://gitee.com/Chemmy/kube-template/MySQL/mysql-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署deploy</span></span><br><span class="line">kubectl apply -f https://gitee.com/Chemmy/kube-template/MySQL/mysql-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署service(NodePort 方式)</span></span><br><span class="line">kubectl apply -f https://gitee.com/Chemmy/kube-template/MySQL/mysql-service.yaml</span><br></pre></td></tr></table></figure>

<h3 id="PostgresSQL"><a href="#PostgresSQL" class="headerlink" title="PostgresSQL"></a>PostgresSQL</h3><p>参考 <a href="K3s%E9%83%A8%E7%BD%B2PostgreSQL.md">K3s部署PostgreSQL</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k3s使用 local-path 部署</span></span><br><span class="line">kubectl apply -f https://gitee.com/Chemmy/kube-template/PostgreSQL/postgres-pvc-local-path.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署config</span></span><br><span class="line">kubectl apply -fhttps://gitee.com/Chemmy/kube-template/PostgreSQL/postgres-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署deploy</span></span><br><span class="line">kubectl apply -fhttps://gitee.com/Chemmy/kube-template/PostgreSQL/postgres-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署service(NodePort 方式)</span></span><br><span class="line">kubectl apply -fhttps://gitee.com/Chemmy/kube-template/PostgreSQL/postgres-service.yaml</span><br></pre></td></tr></table></figure>


<h3 id="cert-manager"><a href="#cert-manager" class="headerlink" title="cert-manager"></a>cert-manager</h3><p>参考<a href="/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/k3s%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/" title="K3s证书管理">k3s证书管理</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加镜像源</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"></span><br><span class="line">helm upgrade cert-manager jetstack/cert-manager \</span><br><span class="line">	--namespace cert-manager \</span><br><span class="line">	--install --create-namespace \</span><br><span class="line">	--<span class="built_in">set</span> crds.enabled=<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h3><p>参考<a href="K3s%E9%83%A8%E7%BD%B2Harbor%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.md">K3s部署Harbor私有镜像仓库</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h3><p>参考<a href="K3s%E9%83%A8%E7%BD%B2Gitea.md">K3s部署Gitea</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Tekton"><a href="#Tekton" class="headerlink" title="Tekton"></a>Tekton</h3><p>参考[[K3s部署Tenton]]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### Drone (已弃用)</span><br><span class="line"></span><br><span class="line">参考[K3s部署Drone](K3s部署Drone.md)</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3><p>参考<a href="K3s%E9%83%A8%E7%BD%B2SonarQube.md">K3s部署SonarQube</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="组件之间联动配置"><a href="#组件之间联动配置" class="headerlink" title="组件之间联动配置"></a>组件之间联动配置</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.gitea.com/">Gitea官方文档</a></p>
<p><a href="https://gitea.cn/gitea/gitea">Gitea README</a></p>
<p><a href="https://docs.drone.io/">Drone官方文档</a></p>
<p><a href="https://helm.sh/zh/docs">Helm官方文档</a></p>
<p><a href="https://goharbor.io/docs/2.11.0">Harbor官方文档</a></p>
<p><a href="https://doc.traefik.io/traefik/">Traefik Proxy Documentation - Traefik</a></p>
<p><a href="https://blog.csdn.net/qq_21233759/article/details/125947303">k3s 部署gitea+drone_golang k3s-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1839419">Harbor 结合 Traefik 的 HA 安装配置-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2014106">Traefik - Kubernetes 配置TCP&#x2F;HTTP服务-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.cnblogs.com/wosperry/p/17202852.html">Drone CI使用docker插件构建和推送镜像 - wosperry - 博客园 (cnblogs.com)</a></p>
<p><a href="https://hanggi.me/post/deployment/drone-ci-k8s/">在 Kubernetes 上部署 Drone 持续集成环境 | Hanggi - NGNL</a></p>
<p><a href="https://www.cnblogs.com/Gitea/p/drone.html">Gitea 与 Drone 集成实践：完全基于 Docker 搭建的轻量级 CI&#x2F;CD 系统 - Gitea - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_46660849/article/details/133386989">Helm Chart Kubernetes安装SonarQube_helm安装sunaqube-CSDN博客</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K8s</tag>
        <tag>K3s</tag>
        <tag>Drone</tag>
        <tag>Gitea</tag>
        <tag>Harbor</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署EMQX.md</title>
    <url>/2024/11/12/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2EMQX.md/</url>
    <content><![CDATA[<p><a href="https://www.emqx.com/zh/blog/emqx-mqtt-broker-k8s-cluster">https://www.emqx.com/zh/blog/emqx-mqtt-broker-k8s-cluster</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>EMQX</tag>
        <tag>mqtt</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Harbor(私有镜像仓库)</title>
    <url>/2024/04/10/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Harbor%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>[[..&#x2F;杂项&#x2F;OpenSSL生成自签名证书|OpenSSL生成自签名证书]]</p>
<a href="/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/k3s%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/" title="K3s证书管理">k3s证书管理</a>

<h3 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm show values harbor/harbor &gt; harbor-values.yaml</span><br></pre></td></tr></table></figure>



<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h3><p>harbor-value.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ingress</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">certSource:</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">&quot;example.io&quot;</span></span><br><span class="line">      <span class="attr">notarySecretName:</span> <span class="string">&quot;example.io&quot;</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="attr">core:</span> <span class="string">harbor.example.io</span></span><br><span class="line">      <span class="attr">notary:</span> <span class="string">notary.example.io</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">ingress.kubernetes.io/proxy-body-size:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;traefik&quot;</span></span><br><span class="line">      <span class="attr">traefik.ingress.kubernetes.io/router.tls:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="string">websecure</span></span><br><span class="line"></span><br><span class="line"><span class="attr">externalURL:</span> <span class="string">https://harbor.example.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">harborAdminPassword:</span> <span class="string">&quot;Harbor123456&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logLevel:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chartmuseum:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">external</span></span><br><span class="line">  <span class="attr">external:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;postgres.devops.svc.cluster.local&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">&quot;5432&quot;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">&quot;harbor&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;harbor&quot;</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">external</span></span><br><span class="line">  <span class="attr">external:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">&quot;redis.devops.svc.cluster.local:6379&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;passwd&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>harbor-ingress.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-portal</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-api</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/api/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-core</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/service/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-core</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-v2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/v2`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-core</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-chartrepo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/chartrepo/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-core</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">harbor-c</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">all-xxxx-com</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`harbor.example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/c/`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-core</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<h3 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加Harbor仓库</span></span><br><span class="line">helm repo add harbor https://helm.goharbor.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署或升级Harbor</span></span><br><span class="line">helm upgrade harbor harbor/harbor --namespace harbor \</span><br><span class="line">	--install --create-namespace \</span><br><span class="line">	-f harbor-values.yaml</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置library仓库源"><a href="#配置library仓库源" class="headerlink" title="配置library仓库源"></a>配置library仓库源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit configmap harobr-registry -n harbor</span><br><span class="line"></span><br><span class="line"># 在auth: 后边添加新节点</span><br><span class="line">proxy:</span><br><span class="line">  remoteurl: &quot;https://registry-1.docker.io&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用Harbor"><a href="#使用Harbor" class="headerlink" title="使用Harbor"></a>使用Harbor</h3><h3 id="配置镜像缓存"><a href="#配置镜像缓存" class="headerlink" title="配置镜像缓存"></a>配置镜像缓存</h3><p>参考</p>
<p><a href="https://northes.io/posts/docker/harbor/mirror/">Harbor 搭建镜像代理 | Northes</a></p>
<p><a href="https://blog.csdn.net/qq_35925862/article/details/128641810">Kubernetes ≥ 1.25 Containerd配置Harbor私有镜像仓库_containerd登录镜像仓库-CSDN博客</a></p>
<p><a href="https://lusyoe.github.io/2019/06/22/%E7%BB%93%E5%90%88Cert-Manager%E5%AE%8C%E6%88%90Harbor%E7%9A%84Https%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91/">结合Cert-Manager完成Harbor的Https证书自动签发 | 风格 | 风起于青萍之末 (lusyoe.github.io)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2308391">Containerd容器镜像管理-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.jianshu.com/p/9df9ae97db39">通过helm在k8s上搭建Harbor - 简书 (jianshu.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1754686">Kubernetes 集群仓库 harbor Helm3 部署-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.cnblogs.com/yangmeichong/p/16661444.html">containerd基本使用命令 - 杨梅冲 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1872039">Kubernetes1.21搭建harbor-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Locust</title>
    <url>/2024/06/01/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Locust/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://www.cnblogs.com/lvcisco/p/10697565.html">kubernetes Traefik ingress配置详解 - lvelvis - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>Locust</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署MySQL</title>
    <url>/2024/04/26/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2MySQL/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/379127137">利用Kubernetes搭建便携式开发环境之MySQL和Redis - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Redis</title>
    <url>/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Redis/</url>
    <content><![CDATA[<h1 id="Kubectl部署"><a href="#Kubectl部署" class="headerlink" title="Kubectl部署"></a>Kubectl部署</h1><p>配置文件</p>
<h1 id="Helm部署"><a href="#Helm部署" class="headerlink" title="Helm部署"></a>Helm部署</h1><p>添加helm库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加库</span></span><br><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新库缓存</span></span><br><span class="line">helm repo update </span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索redis镜像</span></span><br><span class="line">helm search repo redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取package的values.yaml</span></span><br><span class="line">helm show values bitnami/redis &gt; values-default.yaml</span><br></pre></td></tr></table></figure>

<p>配置 values.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># redis 访问密码</span></span><br><span class="line"><span class="attr">master:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">NodePort</span>		<span class="comment"># 服务对外暴露端口方式</span></span><br><span class="line">  <span class="attr">persistence:</span>			<span class="comment"># 配置点存储</span></span><br><span class="line">    <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">8Gi</span></span><br><span class="line"><span class="attr">replica:</span>				</span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">8Gi</span></span><br></pre></td></tr></table></figure>

<p>部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install -f values.yaml redis bitnami/redis --namespace --create-namespace</span><br></pre></td></tr></table></figure>



<p>参考</p>
<p><a href="https://www.cnblogs.com/zisefeizhu/p/14282299.html">kubernetes环境部署单节点redis - 紫色飞猪 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/muguazhi/article/details/132455056">K8S如何部署Redis（单机、集群）_k8部署redis单节点-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/smile_pbb/article/details/117771389">4. K8S发布redis主从-CSDN博客</a></p>
<p><a href="https://segmentfault.com/a/1190000040364886">redis集群 - Helm3-安装Redis - 全栈工程师进阶 - SegmentFault 思否</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署PostgreSQL</title>
    <url>/2024/04/28/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2PostgreSQL/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Kubernetes</tag>
        <tag>K8s</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Registry镜像仓库</title>
    <url>/2024/07/08/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Registry%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/succing/article/details/122757052">Docker学习：部署本地私有镜像仓库registry （高级应用）_docker registry部署-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1688877">三分钟Docker-推送本地镜像到仓库-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://blog.csdn.net/Jerry00713/article/details/108318950">Docker registry 、网络类型、跨主机访问 –3_docker it does not belong to any of this network-CSDN博客</a></p>
<p><a href="https://shikanon.github.io/2019/%E8%BF%90%E7%BB%B4/docker-registry-%E8%AE%BE%E7%BD%AE%E7%A7%81%E6%9C%89%E7%9A%84%E9%95%9C%E5%83%8F%E7%BC%93%E5%AD%98%E4%BB%93%E5%BA%93/">docker registry:设置私有的镜像缓存仓库 | shikanon</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1640240">私有docker registry的ssl访问实现-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>registry</tag>
        <tag>私有镜像仓库</tag>
        <tag>镜像缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s配置NVIDIA GPU</title>
    <url>/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%85%8D%E7%BD%AENVIDIA-GPU/</url>
    <content><![CDATA[<p><a href="https://fissssssh.aiursoft.cn/posts/configure-nvidia-gpus-in-k3s/">在K3s中配置使用NVIDIA GPUS | fissssssh (aiursoft.cn)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>NVIDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s部署Tekton</title>
    <url>/2025/05/29/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%83%A8%E7%BD%B2Tekton/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Tekton</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s 配置 Traefik Ingress</title>
    <url>/2024/06/01/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%85%8D%E7%BD%AEtraefik/</url>
    <content><![CDATA[<h2 id="启用Dashboard"><a href="#启用Dashboard" class="headerlink" title="启用Dashboard"></a>启用Dashboard</h2><p>K3s (≥1.21)默认没有启用 Traefik Dashboard。如果要在 K3s 中启用  Dashborad，我们可以借助 HelmChartConfig 来自定义由 Helm 部署的 Traefik 并启用 Dashboard。</p>
<blockquote>
<p>不建议手动编辑 <code>/var/lib/rancher/K3s/server/manifests/traefik.yaml</code> 来修改 Traefik 配置文件，因为 K3s 重启后会覆盖修改的内容。</p>
<p>建议通过在 <code>/var/lib/rancher/K3s/server/manifests</code> 中创建一个额外的 <code>HelmChartConfig</code> 清单来自定义 Traefik 配置，请参考：<a href="https://link.zhihu.com/?target=http://docs.rancher.cn/docs/K3s/helm/_index/">http://docs.rancher.cn/docs/K3</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /var/lib/rancher/K3s/server/manifests/traefik-config.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: helm.cattle.io/v1</span></span><br><span class="line"><span class="string">kind: HelmChartConfig</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: traefik</span></span><br><span class="line"><span class="string">  namespace: kube-system</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  valuesContent: |-</span></span><br><span class="line"><span class="string">    dashboard:</span></span><br><span class="line"><span class="string">      enabled: true</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      traefik:</span></span><br><span class="line"><span class="string">        expose: true</span></span><br><span class="line"><span class="string">    logs:</span></span><br><span class="line"><span class="string">      access:</span></span><br><span class="line"><span class="string">        enabled: true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>K8s 修改 traefik-vlues.yaml 中<code>ingressRoute.dashboard</code>并应用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm upgrade traefik traefik/traefik \</span><br><span class="line">    --namespace traefik -f traefik-vlues.yaml</span><br></pre></td></tr></table></figure>
<h2 id="配置Service及路由规则"><a href="#配置Service及路由规则" class="headerlink" title="配置Service及路由规则"></a>配置Service及路由规则</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">traefik-dashboard.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span> </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">allocateLoadBalancerNodePorts:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">web</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">websecure</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">traefik-kube-system</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">traefik</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-dashboard-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">match:</span> <span class="string">PathPrefix(`/dashboard`)</span> <span class="string">||</span> <span class="string">PathPrefix(`/api`)</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">api@internal</span></span><br><span class="line">          <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-dashboard-websecure</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">match:</span> <span class="string">PathPrefix(`/dashboard`)</span> <span class="string">||</span> <span class="string">PathPrefix(`/api`)</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">api@internal</span></span><br><span class="line">          <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">traefik-dashboard-tls</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-dashboard.yaml</span><br></pre></td></tr></table></figure>

<p><strong>访问Dashboard需要在最后加一个<code>/</code> 否则可能出现page not found</strong></p>
<h2 id="配置IngressRoute"><a href="#配置IngressRoute" class="headerlink" title="配置IngressRoute"></a>配置IngressRoute</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建测试环境</span></span><br><span class="line">kubectl create deploy <span class="built_in">whoami</span> --image=traefik/whoami --replicas=2</span><br><span class="line">kubectl expose deploy <span class="built_in">whoami</span> --port=80</span><br></pre></td></tr></table></figure>

<p>HTTP</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#whoami-no-tls-ingress-route.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">whoami-ingress-web</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`192.168.0.2`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/notls`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">whoami</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>HTTPS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 openssl 来创建一个自签名的证书</span></span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class="string">&quot;/CN=domain.example.com&quot;</span></span><br><span class="line"></span><br><span class="line">kubectl create secret tls whoami-tls --cert=tls.crt --key=tls.key</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># whoami-tls-ingress-route.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">whoami-ingress-websecure</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">websecure</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`192.168.0.2`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/tls`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">whoami</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">whoami-tls</span></span><br></pre></td></tr></table></figure>
<p>证书生成参考<a href="/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/k3s%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/" title="K3s证书管理">k3s证书管理</a></p>
<p>TCP&#x2F;UDP<br>默认配置文件下，只有<code>traefik</code>(9000)、<code>web</code>(80)、<code>websecure</code>(443)以及<code>metrics</code>(9100)开放，如果想要反代MySQL tcp又想自定义端口的话，需要单独在配置文件中进行配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRouteTCP</span> <span class="comment">#IngressRouteUDP</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">HostSNI(`*`)</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p> <strong>TCP Routers与HTTP Routers的routes有所不同：</strong></p>
<ul>
<li>TCP Routers match采用HostSNI,而HTTP Routers match直接匹配Host。</li>
<li>TCP Routers只能定位TCP服务（不能定位HTTP服务）。</li>
<li>如果HTTP Routers和TCP Routers都侦听相同的入口点，则TCP Routers将在HTTP Routers之前应用。如果找不到与TCP Routers匹配的路由，则HTTP Routers将接管。</li>
</ul>
<p>参考</p>
<p>K3s版本 &gt; v.121(Traefik 2.x)</p>
<p><a href="https://zhuanlan.zhihu.com/p/471264503?utm_id=0">K3S 中 Traefik v2 安装及采坑纪实 - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/qf0129/article/details/127564258">k3s开启traefik的dashboard网页-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/k3s2019/p/12671777.html">Step by Step！教你如何在k3s集群上使用Traefik 2.x - k3s中文社区 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2275318">traefik系列之一 | 简介、部署和配置-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/431491328">还不会Traefik？看这篇文章就够了！ - 知乎 (zhihu.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2347486">k3s 使用 Letsencrypt 和 Traefik 完成 https 入口部署-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>[Kubernetes环境Traefik部署与应用 - Tiscs - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/tiscs/p/notes-k8s-traefik.html#:~:text=%E5%AE%89%E8%A3%85Traefik">https://www.cnblogs.com/tiscs/p/notes-k8s-traefik.html#:~:text=安装Traefik</a> 1 配置 Helm Repo helm repo add, … 3 其他准备工作 获取 traefik 服务的负载均衡器地址。 )</p>
<p><a href="https://cloud.tencent.com/developer/article/2014106">Traefik - Kubernetes 配置TCP&#x2F;HTTP服务-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.cnblogs.com/dandelion/p/14083023.html">cert-manager管理内网k8s开发环境证书 - hueidou163 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2344889">Kubernetes (K8S)中Traefik路由(ingressRoute)-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>Dashboard无法访问问题参考</p>
<p><a href="https://www.cnblogs.com/rancherlabs/p/16034240.html">如何在 K3s 中启用 Traefik Dashborad - RancherLabs - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.thriveread.com/expose-k3s-with-traefik-dashboard/">How to Expose and Enable K3s with Traefik Dashboard (thriveread.com)</a></p>
<p><a href="https://stackoverflow.com/questions/68565048/how-to-expose-traefik-v2-dashboard-in-k3d-k3s-via-configuration">kubernetes - How to expose traefik v2 dashboard in k3d&#x2F;k3s via configuration? - Stack Overflow</a></p>
<p><a href="https://segmentfault.com/a/1190000044820490">kubernetes - 云原生 07：改用 K3s，并使用 K3s 内置的 Traefik 做 Ingress 网关 - 小鲜 - SegmentFault 思否</a></p>
<p><a href="https://agou-ops.cn/post/k8s%E4%B8%AD%E4%BD%BF%E7%94%A8traefik/">K8s中使用traefik（基础） - AGou’s Blog</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>Traefik</tag>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s配置内网域名解析</title>
    <url>/2024/07/20/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>K3s 启动后，会自动帮我们安装好 CoreDNS，不需要手动安装。如果你想修改 CoreDNS 的配置，常用的有两种方式：</p>
<ul>
<li>直接修改 CoreDNS 的 configmap 来调整 CoreDNS 的参数，例如：<code>kubectl -n kube-system edit configmap coredns</code></li>
<li>修改 K3s manifests 中的 CoreDNS 配置文件，文件位置：<code>/var/lib/rancher/k3s/server/manifests/coredns.yaml</code></li>
</ul>
<p>这两种方式虽然简单，但都有相同的弊端：当你重启 K3s 服务或者升级 K3s 时，由于 K3s 会重新初始化 manifests 中的 CoreDNS 等配置，所以会覆盖掉你通过以上两种方式修改的 coredns 配置。</p>
<p>如果你想修改 K3s 中 CoreDNS 中的配置，并且持久生效的话，可以通过额外的 <code>coredns-custom</code> configmap 安装到 CoreDNS 容器中，并从包含的文件中导入覆盖和额外的 CoreDNS 配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">coredns-custom</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log.override:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    log</span></span><br><span class="line"><span class="string"></span>  <span class="attr">example.server:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    example.io &#123;</span></span><br><span class="line"><span class="string">      errors</span></span><br><span class="line"><span class="string">      cache 30</span></span><br><span class="line"><span class="string">      hosts &#123;</span></span><br><span class="line"><span class="string">        192.168.0.2 test1.example.io # 内网域名映射地址</span></span><br><span class="line"><span class="string">        fallthrough</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>



<p>ConfigMap 的 name 一定刚要是 <code>coredns-custom</code> 才能够被 coredns 的 deployment 识别并挂载。</p>
<p>在其他Pod中验证CoreDNS配置是否生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create deploy nginx --image=nginx:latest <span class="comment"># 创建deploy</span></span><br><span class="line">kubectl get pod -w <span class="comment"># 等待nginx状态变为running</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngix-***** -- /bin/bash <span class="comment"># 切入容器，注意容器ID与上一步中查看容器ID一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 容器内操作</span></span><br><span class="line">ping test1.example.io </span><br><span class="line">nslookup test1.example.io</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>CoreDNS</tag>
        <tag>域名解析</tag>
      </tags>
  </entry>
  <entry>
    <title>KubeEdge</title>
    <url>/2022/07/27/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/KubeEdge/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/tttlv/p/14397699.html">https://www.cnblogs.com/tttlv/p/14397699.html</a><br><a href="https://www.cnblogs.com/ltaodream/p/15135365.html">https://www.cnblogs.com/ltaodream/p/15135365.html</a><br><a href="https://blog.csdn.net/weixin_42142364/article/details/111084493">https://blog.csdn.net/weixin_42142364/article/details/111084493</a><br><a href="https://blog.csdn.net/Obese_Tiger/article/details/104741708?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160378122119724836762566%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=160378122119724836762566&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-8-104741708.first_rank_ecpm_v3_pc_rank_v2&utm_term=kubeedge%E5%AE%89%E8%A3%85&spm=1018.2118.3001.4187">https://blog.csdn.net/Obese_Tiger/article/details/104741708?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160378122119724836762566%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160378122119724836762566&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-8-104741708.first_rank_ecpm_v3_pc_rank_v2&amp;utm_term=kubeedge%E5%AE%89%E8%A3%85&amp;spm=1018.2118.3001.4187</a><br><a href="https://blog.csdn.net/PinocchioNE/article/details/109337365">https://blog.csdn.net/PinocchioNE/article/details/109337365</a><br><a href="https://www.jianshu.com/p/c6fc46563cb6">https://www.jianshu.com/p/c6fc46563cb6</a><br><a href="https://www.dogfei.cn/archives/kubeedge#">https://www.dogfei.cn/archives/kubeedge#</a><br><a href="https://www.cnblogs.com/dream397/p/14628425.html">https://www.cnblogs.com/dream397/p/14628425.html</a><br><a href="https://blog.csdn.net/MSSC_/article/details/114866906">https://blog.csdn.net/MSSC_/article/details/114866906</a><br><a href="https://zhuanlan.zhihu.com/p/350335104">https://zhuanlan.zhihu.com/p/350335104</a><br><a href="https://www.cnblogs.com/kkbill/p/12600541.html">https://www.cnblogs.com/kkbill/p/12600541.html</a><br><a href="https://blog.csdn.net/weixin_38159695/article/details/118486461">https://blog.csdn.net/weixin_38159695/article/details/118486461</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes</title>
    <url>/2022/07/27/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/IUNIQUE/article/details/121787708">https://blog.csdn.net/IUNIQUE/article/details/121787708</a><br><a href="https://www.jianshu.com/p/3de558d8b57a">https://www.jianshu.com/p/3de558d8b57a</a><br><a href="https://www.cnblogs.com/chalon/p/14840216.html">https://www.cnblogs.com/chalon/p/14840216.html</a><br><a href="https://blog.csdn.net/f95_sljz/article/details/105544338">https://blog.csdn.net/f95_sljz/article/details/105544338</a><br><a href="https://www.cnblogs.com/zhaobowen/p/13399708.html">https://www.cnblogs.com/zhaobowen/p/13399708.html</a><br><a href="https://www.cnblogs.com/UncleZhao/p/14646127.html">https://www.cnblogs.com/UncleZhao/p/14646127.html</a><br><a href="https://segmentfault.com/a/1190000021036626">https://segmentfault.com/a/1190000021036626</a><br><a href="https://www.cnblogs.com/ltaodream/p/15116711.html">https://www.cnblogs.com/ltaodream/p/15116711.html</a><br><a href="https://knner.wang/2019/11/13/docker-io-gcr-io-k8s-gcr-io-quay-io-Chinese-source.html">https://knner.wang/2019/11/13/docker-io-gcr-io-k8s-gcr-io-quay-io-Chinese-source.html</a><br><a href="https://www.cnblogs.com/kevingrace/p/12778066.html">https://www.cnblogs.com/kevingrace/p/12778066.html</a><br><a href="https://www.cnblogs.com/hujinzhong/p/14995169.html">https://www.cnblogs.com/hujinzhong/p/14995169.html</a><br><a href="https://www.cnblogs.com/chenyishi/category/1359251.html">https://www.cnblogs.com/chenyishi/category/1359251.html</a><br><a href="https://oldtang.com/1772.html">https://oldtang.com/1772.html</a><br><a href="https://www.kubernetes.org.cn/7315.html">https://www.kubernetes.org.cn/7315.html</a><br><a href="https://blog.csdn.net/networken/article/details/84571373">https://blog.csdn.net/networken/article/details/84571373</a><br><a href="https://blog.csdn.net/JENREY/article/details/84205838">https://blog.csdn.net/JENREY/article/details/84205838</a><br><a href="https://blog.csdn.net/ggggyj/article/details/104922023">https://blog.csdn.net/ggggyj/article/details/104922023</a><br><a href="https://zhuanlan.zhihu.com/p/109803657">https://zhuanlan.zhihu.com/p/109803657</a><br><a href="https://www.cnblogs.com/cptao/p/10912644.html">https://www.cnblogs.com/cptao/p/10912644.html</a><br><a href="https://blog.51cto.com/billy98/2350660">https://blog.51cto.com/billy98/2350660</a><br><a href="https://z.itpub.net/article/detail/68E9894E9257CC55D0AD3643AD3E9C89">https://z.itpub.net/article/detail/68E9894E9257CC55D0AD3643AD3E9C89</a><br><a href="https://blog.csdn.net/w13657909078/article/details/120141490?spm=1001.2014.3001.5501">https://blog.csdn.net/w13657909078/article/details/120141490?spm=1001.2014.3001.5501</a><br><a href="https://blog.csdn.net/w13657909078/article/details/120342636?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_default&utm_relevant_index=10">https://blog.csdn.net/w13657909078/article/details/120342636?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7.pc_relevant_default&amp;utm_relevant_index=10</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/learn/modules/dotnet-deploy-microservices-kubernetes/">将 .NET 微服务部署到 Kubernetes - Learn | Microsoft Docs</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1908935">Kubernetes + .NET Core 的落地实践 - 腾讯云开发者社区-腾讯云</a></p>
<p><a href="https://www.cnblogs.com/harlanzhang/category/1362182.html">https://www.cnblogs.com/harlanzhang/category/1362182.html</a><br><a href="https://cloud.tencent.com/developer/article/1450346">https://cloud.tencent.com/developer/article/1450346</a><br><a href="https://www.cnblogs.com/dingcong1201/p/15472764.html#1-minikube">https://www.cnblogs.com/dingcong1201/p/15472764.html#1-minikube</a><br><a href="https://yiqisoft.cn/blog/server-side/171.html">https://yiqisoft.cn/blog/server-side/171.html</a><br><a href="https://blog.csdn.net/lwkhdx/article/details/103879460">https://blog.csdn.net/lwkhdx/article/details/103879460</a><br><a href="https://www.helloworld.net/p/ObLHGeiALU2D">https://www.helloworld.net/p/ObLHGeiALU2D</a><br><a href="https://blog.51cto.com/lvzhenjiang/2473866">https://blog.51cto.com/lvzhenjiang/2473866</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/642585379">helm3实战教程 | helm3常用命令和部署应用实战案例 - 知乎</a></p>
<p><a href="https://www.cnblogs.com/tylerzhou/p/11136107.html">kubernetes实战篇之helm完整示例 - 周国通 - 博客园</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/379127137?utm_id=0">利用Kubernetes搭建便携式开发环境之MySQL和Redis - 知乎</a></p>
<p><a href="https://www.cnblogs.com/pengpengboshi/p/15927879.html">Kubernetes使用helm部署单机版mysql(使用hostPath数据卷) - Sureing - 博客园</a></p>
<p><a href="https://www.emqx.com/zh/blog/emqx-mqtt-broker-k8s-cluster">从零开始建立 EMQX MQTT 服务器的 K8S 集群 | EMQ</a></p>
<p><a href="https://www.cnblogs.com/hujinzhong/p/14999877.html">Kubernetes集群部署Prometheus和Grafana - 运维人在路上 - 博客园</a></p>
<p><a href="https://www.cnblogs.com/zhanglianghhh/p/13743024.html">Kubernetes K8S之存储Secret详解 - 踏歌行666 - 博客园</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/657034495?utm_id=0">DevOps笔记 - k3s 默认ingress 配置 - 知乎</a></p>
<p><a href="https://juejin.cn/post/7088526899239976996">如何用NFS共享ZFS文件系统——详细教程 - 掘金</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes PV/PVC配置模板</title>
    <url>/2024/04/11/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>本地路径映射（HostPath）</p>
<blockquote>
<p>HostPath 卷存在许多安全风险，最佳做法是尽可能避免使用 HostPath。 当必须使用 HostPath 卷时，它的范围应仅限于所需的文件或目录，并以只读方式挂载。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">registry.k8s.io/test-webserver</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/test-pd</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># 宿主机上目录位置</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># 此字段为可选</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure>

<p>支持的 <code>type</code> 值如下:</p>
<table>
<thead>
<tr>
<th align="left">取值</th>
<th align="left">行为</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。</td>
</tr>
<tr>
<td align="left"><code>DirectoryOrCreate</code></td>
<td align="left">如果在给定路径上什么都不存在，那么将根据需要创建空目录，权限设置为 0755，具有与 kubelet 相同的组和属主信息。</td>
</tr>
<tr>
<td align="left"><code>Directory</code></td>
<td align="left">在给定路径上必须存在的目录。</td>
</tr>
<tr>
<td align="left"><code>FileOrCreate</code></td>
<td align="left">如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 kubelet 相同的组和所有权。</td>
</tr>
<tr>
<td align="left"><code>File</code></td>
<td align="left">在给定路径上必须存在的文件。</td>
</tr>
<tr>
<td align="left"><code>Socket</code></td>
<td align="left">在给定路径上必须存在的 UNIX 套接字。</td>
</tr>
<tr>
<td align="left"><code>CharDevice</code></td>
<td align="left">在给定路径上必须存在的字符设备。</td>
</tr>
<tr>
<td align="left"><code>BlockDevice</code></td>
<td align="left">在给定路径上必须存在的块设备。</td>
</tr>
</tbody></table>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-vol-default</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">vendor-name.example</span></span><br></pre></td></tr></table></figure>



<p>local</p>
<blockquote>
<p><code>local</code> 卷只能用作静态创建的持久卷。不支持动态配置。</p>
<p>与 <code>hostPath</code> 卷相比，<code>local</code> 卷能够以持久和可移植的方式使用，而无需手动将 Pod 调度到节点。系统通过查看 PersistentVolume 的节点亲和性配置，就能了解卷的节点约束。</p>
</blockquote>
<p>使用 <code>local</code> 卷时，你需要设置 PersistentVolume 对象的 <code>nodeAffinity</code> 字段。 Kubernetes 调度器使用 PersistentVolume 的 <code>nodeAffinity</code> 信息来将使用 <code>local</code> 卷的 Pod 调度到正确的节点。</p>
<p>PersistentVolume 对象的 <code>volumeMode</code> 字段可被设置为 “Block” （而不是默认值 “Filesystem”），以将 <code>local</code> 卷作为原始块设备暴露出来。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">100Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/mnt/disks/ssd1</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">          <span class="attr">values:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">example-node</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>NFS映射</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>Minio</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>Ceph</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>PV</tag>
        <tag>PVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes搭建</title>
    <url>/2020/12/29/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><a href="https://kubernetes.io/zh/docs/home/">官方文档(中文)</a></p>
<table>
<thead>
<tr>
<th>节点名称</th>
<th>节点IP</th>
<th>配置</th>
<th>系统版本</th>
</tr>
</thead>
<tbody><tr>
<td>VIP</td>
<td>192.168.50.220</td>
<td>虚拟IP</td>
<td></td>
</tr>
<tr>
<td>k8s-master-221</td>
<td>192.168.50.221</td>
<td>4核 2G</td>
<td>debian 11</td>
</tr>
<tr>
<td>k8s-master-222</td>
<td>192.168.50.222</td>
<td>4核 2G</td>
<td>debian 11</td>
</tr>
<tr>
<td>k8s-master-223</td>
<td>192.168.50.223</td>
<td>4核 2G</td>
<td>debian 11</td>
</tr>
<tr>
<td>k8s-node-224</td>
<td>192.168.50.224</td>
<td>4核 2G</td>
<td>debian 11</td>
</tr>
<tr>
<td>k8s-node-225</td>
<td>192.168.50.225</td>
<td>4核 2G</td>
<td>debian 11</td>
</tr>
</tbody></table>
<h3 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h3><h4 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置-hostname"><a href="#配置-hostname" class="headerlink" title="配置 hostname"></a>配置 hostname</h4><p><strong>注意节名称不能重复</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl --static set-hostname k8s-master-221</span><br></pre></td></tr></table></figure>

<h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables stop </span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<p>如果需要打开防火墙，执行以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master节点执行</span></span><br><span class="line">ufw allow 6443/tcp</span><br><span class="line">ufw allow 2379/tcp</span><br><span class="line">ufw allow 2380/tcp</span><br><span class="line">ufw allow 10250/tcp</span><br><span class="line">ufw allow 10251/tcp</span><br><span class="line">ufw allow 10252/tcp</span><br><span class="line">ufw allow 10255/tcp</span><br><span class="line">ufw reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># worker节点执行</span></span><br><span class="line">ufw allow 10250/tcp</span><br><span class="line">ufw allow 30000:32767/tcp</span><br><span class="line">ufw reload</span><br></pre></td></tr></table></figure>

<h4 id="关闭交换分区"><a href="#关闭交换分区" class="headerlink" title="关闭交换分区"></a>关闭交换分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line"><span class="built_in">set</span> -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<p>若需允许交换分区参考<a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">官方文档</a> 交换分区的配置</p>
<h4 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.50.221 k8s-master-221</span></span><br><span class="line"><span class="string">192.168.50.222 k8s-master-222</span></span><br><span class="line"><span class="string">192.168.50.223 k8s-master-223</span></span><br><span class="line"><span class="string">192.168.50.224 k8s-worker-224</span></span><br><span class="line"><span class="string">192.168.50.225 k8s-worker-225</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="开启-bridge-网桥过滤功能"><a href="#开启-bridge-网桥过滤功能" class="headerlink" title="开启 bridge 网桥过滤功能"></a>开启 bridge 网桥过滤功能</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桥接的ipv4流量转到iptables</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> modprobe overlay</span><br><span class="line"><span class="built_in">sudo</span> modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数,参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1 # 开启网桥模式(必须)</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1 # 开启网桥模式(必须)</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1 # 转发模式(默认开启)</span></span><br><span class="line"><span class="string">vm.panic_on_oom                     = 0 # 开启OOM(默认开启)</span></span><br><span class="line"><span class="string">vm.swappiness                       = 0 # 禁止使用swap空间</span></span><br><span class="line"><span class="string">vm.overcommit_memory                = 1 # 不检查物理内存是否够用</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br></pre></td></tr></table></figure>

<h4 id="配置-IPVS"><a href="#配置-IPVS" class="headerlink" title="配置 IPVS"></a>配置 IPVS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><h4 id="安装-Containerd"><a href="#安装-Containerd" class="headerlink" title="安装 Containerd"></a>安装 Containerd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt update </span><br><span class="line">apt install -y containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出默认配置</span></span><br><span class="line">containerd config default | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/containerd/config.toml &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>设置<code>cgroupdriver</code>为<code>systemd</code>,编辑 <code>/etc/containerd/config.toml</code> 文件，找到 <code>[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</code> 部分，添加一行内容：<code>SystemdCgroup = true</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SystemdCgroup \= false/SystemdCgroup \= true/g&#x27;</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>

<img src="/2020/12/29/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes%E6%90%AD%E5%BB%BA/IMG-20250804110102409.png" class="">

<p>重启containerd并设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart containerd</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br></pre></td></tr></table></figure>

<h4 id="安装-keadm-kubelete-kubectl"><a href="#安装-keadm-kubelete-kubectl" class="headerlink" title="安装 keadm,kubelete,kubectl"></a>安装 keadm,kubelete,kubectl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加安装源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt update </span><br><span class="line">apt install -y kubelet kubeadm kubectl </span><br><span class="line">apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>
<h3 id="部署高可用-仅-master-节点"><a href="#部署高可用-仅-master-节点" class="headerlink" title="部署高可用(仅 master 节点)"></a>部署高可用(仅 master 节点)</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install keepalived haproxy</span><br></pre></td></tr></table></figure>

<h4 id="修改haproxy配置"><a href="#修改haproxy配置" class="headerlink" title="修改haproxy配置"></a>修改haproxy配置</h4><p><code>/etc/haproxy/haproxy.cfg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">  maxconn  2000</span><br><span class="line">  ulimit-n  16384</span><br><span class="line">  log  127.0.0.1 local0 err</span><br><span class="line">  stats timeout 30s</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  log global</span><br><span class="line">  mode  http</span><br><span class="line">  option  httplog</span><br><span class="line">  timeout connect 5000</span><br><span class="line">  timeout client  50000</span><br><span class="line">  timeout server  50000</span><br><span class="line">  timeout http-request 15s</span><br><span class="line">  timeout http-keep-alive 15s</span><br><span class="line"></span><br><span class="line">frontend monitor-in</span><br><span class="line">  bind *:33305</span><br><span class="line">  mode http</span><br><span class="line">  option httplog</span><br><span class="line">  monitor-uri /monitor</span><br><span class="line"></span><br><span class="line">frontend k8s-master</span><br><span class="line">  bind 0.0.0.0:16443</span><br><span class="line">  bind 127.0.0.1:16443</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  tcp-request inspect-delay 5s</span><br><span class="line">  default_backend k8s-master</span><br><span class="line"></span><br><span class="line">backend k8s-master</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  option tcp-check</span><br><span class="line">  balance roundrobin</span><br><span class="line">  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class="line">  server k8s-master1	172.16.12.111:6443  check  </span><br><span class="line">  server k8s-master2	172.16.12.112:6443  check</span><br><span class="line">  server k8s-master3	172.16.12.113:6443  check</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置-keepalived"><a href="#配置-keepalived" class="headerlink" title="配置 keepalived"></a>配置 keepalived</h4><blockquote>
<p>interface         # 网卡名称<br>mcast_src_ip      # 节点ip<br>virtual_ipaddress # vip地址</p>
</blockquote>
<p>k8s-master-221配置文件<code>/etc/keepalived/keepalived.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_apiserver.sh&quot; #健康检查脚本</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER					#高可用主1</span><br><span class="line">    interface eth0					#网卡名称</span><br><span class="line">    mcast_src_ip 192.168.50.221		#该节点 IP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100				    #设置最高级优先级</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.50.220			    #vip地址</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>k8s-master-222配置文件<code>/etc/keepalived/keepalived.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_apiserver.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP					#高可用 从1</span><br><span class="line">    interface ens33					#网卡名称</span><br><span class="line">    mcast_src_ip 192.168.50.222	    #该节点 IP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 50				        #设置优先级</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.50.220			    #vip地址</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>k8s-master-222配置文件<code>/etc/keepalived/keepalived.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_apiserver.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP					#高可用从2</span><br><span class="line">    interface ens33					#网卡名称</span><br><span class="line">    mcast_src_ip 192.168.50.223		#该节点 IP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 49				        #设置优先级</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.50.220			    #vip地址</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>健康检查脚本 <code>/etc/keepalived/check_apiserver.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">err=0</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3);<span class="keyword">do</span></span><br><span class="line">    check_code=$(pgrep haproxy)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$check_code</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        err=$(<span class="built_in">expr</span> <span class="variable">$err</span> + 1)</span><br><span class="line">        <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        err=0</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$err</span> != <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;systemctl stop keepalived&quot;</span></span><br><span class="line">    /usr/bin/systemctl stop keepalived</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>给监测脚本添加执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/keepalived/check_apiserver.sh</span><br></pre></td></tr></table></figure>
<p>启动keepalive和haproxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动并设置开机启动</span></span><br><span class="line"><span class="comment"># systemctl enable --now haproxy</span></span><br><span class="line">systemctl start haproxy &amp;&amp; systemctl <span class="built_in">enable</span> haproxy</span><br><span class="line"><span class="comment"># systemctl enable --now keepalived</span></span><br><span class="line">systemctl start keepalived &amp;&amp; systemctl enbale keepalived</span><br></pre></td></tr></table></figure>
<h4 id="测试vip漂移"><a href="#测试vip漂移" class="headerlink" title="测试vip漂移"></a>测试vip漂移</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看ip与vip</span></span><br><span class="line">hostname -I</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试vip的16443端口是否通</span></span><br><span class="line">nc -v 192.168.50.220 16443</span><br></pre></td></tr></table></figure>

<h3 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看需要的镜像文件</span></span><br><span class="line">kubeadm config images list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kubeadm config images pull </span><br></pre></td></tr></table></figure>

<h4 id="master-节点初始化"><a href="#master-节点初始化" class="headerlink" title="master 节点初始化"></a>master 节点初始化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出默认初始化配置</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># token过期后生成信息token</span></span><br><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h4 id="master-节点加入集群"><a href="#master-节点加入集群" class="headerlink" title="master 节点加入集群"></a>master 节点加入集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master节点需要生成certificate-key</span></span><br><span class="line">kubeadm init --control-plane-endpoint=192.168.50.220:16443</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.50.220:16443 --token &#123;token&#125; \</span><br><span class="line">    --discovery-token-ca-cert-hash &#123;&#125; \</span><br><span class="line">    --control-plane --certificate-key &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="worker-节点加入集群"><a href="#worker-节点加入集群" class="headerlink" title="worker 节点加入集群"></a>worker 节点加入集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.50.220:16643 --token &#123;token&#125; \</span><br><span class="line">    --discovery-token-ca-cert-hash &#123;&#125; </span><br></pre></td></tr></table></figure>

<p>从集群种移除节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete node &#123;node-name&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置环境变量，用于访问集群"><a href="#配置环境变量，用于访问集群" class="headerlink" title="配置环境变量，用于访问集群"></a>配置环境变量，用于访问集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="string">export KUBECONFIG=/etc/kubernetes/admin/conf</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>查看集群节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统组件</span></span><br><span class="line">kubectl get all -n kube-system -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装网络组件-只在master-221节点操作"><a href="#安装网络组件-只在master-221节点操作" class="headerlink" title="安装网络组件(只在master-221节点操作)"></a>安装网络组件(只在master-221节点操作)</h4><p>Calico<br>Flannel</p>
<h4 id="去除-master节点污点"><a href="#去除-master节点污点" class="headerlink" title="去除 master节点污点"></a>去除 master节点污点</h4><p>如果你打算让Master节点也参与到平常的Pod调度(生产环境一般不会这样做，以保证master节点的稳定性)，那么你需要使用以下命令将Master节点上的 taint(污点标记)解除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>

<p>最后我们使用以下命令查看当前集群的状态，发现Scheduler和Controller Manager组件处理不健康状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure>
<p>解决上述问题需要将每个Master节点上的 &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-scheduler.yaml 和 &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-controller-manager.yaml 文件中的- –port&#x3D;0注释掉,然后重启一下各Master节点上的kubelet即可.</p>
<h4 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create deployment nginx --image nginx --replicas 2</span><br><span class="line">kubectl expose deployment nginx --name nginx --<span class="built_in">type</span> NodePort --port 80 --target-port 80 --node-port 8080</span><br><span class="line"></span><br><span class="line">curl http://192.168.50.220:8080</span><br></pre></td></tr></table></figure>


<p>参考<br><a href="https://zhuanlan.zhihu.com/p/587922250">如何用 Kubeadm 在 Debian 11 上安装 Kubernetes 集群 | Linux 中国 - 知乎 (zhihu.com)</a><br><a href="https://segmentfault.com/a/1190000040132460">Kubernetes多主多从高可用集群部署 - 个人文章 - SegmentFault 思否</a><br><a href="https://blog.csdn.net/weixin_53667818/article/details/132702544">搭建多主节点k8s高可用集群(三主两从一VIP）_kubernetes部署多主多从集群-CSDN博客</a><br><a href="https://segmentfault.com/a/1190000045271028">github - 基于Ubuntu22.04部署KubeEdge-v1.18.0环境 - 云原生_KubeEdge - SegmentFault 思否</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装Traefik</title>
    <url>/2024/09/26/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes%E9%83%A8%E7%BD%B2Traefik/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add traefik https://helm.traefik.io/traefik</span><br><span class="line">helm repo update </span><br><span class="line">helm upgrade traefik traefik/traefik \</span><br><span class="line">    --install --create-namespace \</span><br><span class="line">    --namespace=traefik </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出配置文件</span></span><br><span class="line">helm show values traefik/traefik &gt; traefik-values.yaml</span><br></pre></td></tr></table></figure>

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>traefik-values.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Default values for Traefik</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a YAML-formatted file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare variables to be passed into templates</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Traefik image host registry</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registry:</span> <span class="string">docker.io</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Traefik image repository</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">traefik</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- defaults to appVersion</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tag:</span>  <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Traefik image pull policy</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Add additional label to all resources</span></span><br><span class="line"></span><br><span class="line"><span class="attr">commonLabels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">deployment:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Enable deployment</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Deployment or DaemonSet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Number of pods of the deployment (only applies when kind == Deployment)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Number of old history to retain to allow rollback (If not set, default Kubernetes value is set to 10)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span>  <span class="comment"># @schema type:[integer, null];minimum:0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Amount of time (in seconds) before Kubernetes will send the SIGKILL signal if Traefik does not shut down</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The minimum number of seconds Traefik needs to be up and running before the DaemonSet/Deployment controller considers it available</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Override the liveness/readiness port. This is useful to integrate traefik</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## with an external Load Balancer that performs healthchecks.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Default: ports.traefik.port</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">healthchecksPort:</span>  <span class="comment"># @schema type:[integer, null];minimum:0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Override the liveness/readiness host. Useful for getting ping to respond on non-default entryPoint.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Default: ports.traefik.hostIP if set, otherwise Pod IP</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">healthchecksHost:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Override the liveness/readiness scheme. Useful for getting ping to</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## respond on websecure entryPoint.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">healthchecksScheme:</span>   <span class="comment"># @schema enum:[HTTP, HTTPS, null]; type:[string, null]; default: HTTP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Override the readiness path.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Default: /ping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">readinessPath:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Override the liveness path.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default: /ping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">livenessPath:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional deployment annotations (e.g. for jaeger-operator sidecar injection)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional deployment labels (e.g. for filtering deployment by custom labels)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional pod annotations (e.g. for mesh injection or prometheus scraping)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># It supports templating. One can set it with values like traefik/name: &#x27;&#123;&#123; template &quot;traefik.name&quot; . &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">podAnnotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional Pod labels (e.g. for filtering Pod by custom labels)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">podLabels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional containers (e.g. for metric offloading sidecars)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">additionalContainers:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># https://docs.datadoghq.com/developers/dogstatsd/unix_socket/?tab=host</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># - name: socat-proxy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   image: alpine/socat:1.0.5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   args: [&quot;-s&quot;, &quot;-u&quot;, &quot;udp-recv:8125&quot;, &quot;unix-sendto:/socket/socket&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   volumeMounts:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     - name: dsdsocket</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#       mountPath: /socket</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional volumes available for use with initContainers and additionalContainers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">additionalVolumes:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># - name: dsdsocket</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   hostPath:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     path: /var/run/statsd-exporter</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional initContainers (e.g. for setting file permission as shown below)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">initContainers:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The &quot;volume-permissions&quot; init container is required if you run into permission issues.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Related issue: https://github.com/traefik/traefik-helm-chart/issues/396</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># - name: volume-permissions</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   image: busybox:latest</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   command: [&quot;sh&quot;, &quot;-c&quot;, &quot;touch /data/acme.json; chmod -v 600 /data/acme.json&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   volumeMounts:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     - name: data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#       mountPath: /data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Use process namespace sharing</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">shareProcessNamespace:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Custom pod DNS policy. Apply if `hostNetwork: true`</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Custom pod [DNS config](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#poddnsconfig-v1-core)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dnsConfig:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Custom [host aliases](https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hostAliases:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Pull secret for fetching traefik container image</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">imagePullSecrets:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Pod lifecycle actions</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">lifecycle:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># preStop:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   exec:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     command: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;sleep 40&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># postStart:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   httpGet:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     path: /ping</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     port: 9000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     host: localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#     scheme: HTTP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Set a runtimeClassName on pod</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">runtimeClassName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- [Pod Disruption Budget](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">podDisruptionBudget:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">maxUnavailable:</span>  <span class="comment"># @schema type:[string, integer, null];minimum:0</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minAvailable:</span>    <span class="comment"># @schema type:[string, integer, null];minimum:0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Create a default IngressClass for Traefik</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingressClass:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">isDefaultClass:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">core:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Can be used to use globally v2 router syntax</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># See https://doc.traefik.io/traefik/v3.0/migration/v2-to-v3/#new-v3-syntax-notable-changes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">defaultRuleSyntax:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Traefik experimental features</span></span><br><span class="line"></span><br><span class="line"><span class="attr">experimental:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Enable traefik experimental plugins</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># demo:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   moduleName: github.com/traefik/plugindemo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   version: v0.2.1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kubernetesGateway:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enable traefik experimental GatewayClass CRD</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- When providers.kubernetesGateway.enabled, deploy a default gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Set a custom name to gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- By default, Gateway is created in the same `Namespace` than Traefik.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional gateway annotations (e.g. for cert-manager.io/issuer)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Define listeners</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">listeners:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># The port must match a port declared in ports section.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Optional hostname. See [Hostname](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Hostname)</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Specify expected protocol on this listener. See [ProtocolType](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.ProtocolType)</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Routes are restricted to namespace of the gateway [by default](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.FromNamespaces</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">namespacePolicy:</span>  <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># websecure listener is disabled by default because certificateRefs needs to be added,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># or you may specify TLS protocol with Passthrough mode and add &quot;--providers.kubernetesGateway.experimentalChannel=true&quot; in additionalArguments section.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># websecure:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # -- Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # The port must match a port declared in ports section.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   port: 8443</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # -- Optional hostname. See [Hostname](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Hostname)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   hostname:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # Specify expected protocol on this listener See [ProtocolType](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.ProtocolType)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   protocol: HTTPS</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # -- Routes are restricted to namespace of the gateway [by default](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.FromNamespaces)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   namespacePolicy:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # -- Add certificates for TLS or HTTPS protocols. See [GatewayTLSConfig](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io%2fv1.GatewayTLSConfig)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   certificateRefs:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   # -- TLS behavior for the TLS session initiated by the client. See [TLSModeType](https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.TLSModeType).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   mode:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">gatewayClass:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- When providers.kubernetesGateway.enabled and gateway.enabled, deploy a default gatewayClass</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Set a custom name to GatewayClass</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional gatewayClass labels (e.g. for filtering gateway objects by custom labels)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">ingressRoute:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Create an IngressRoute for the dashboard</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 修改此处，启用dashboard</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">annotations:</span> <span class="comment"># 修改此处,添加配置</span></span><br><span class="line">      <span class="attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">ingress.kubernetes.io/proxy-body-size:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;traefik&quot;</span></span><br><span class="line">      <span class="attr">traefik.ingress.kubernetes.io/router.tls:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="string">websecure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The router match rule used for the dashboard ingressRoute</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchRule:</span> <span class="string">PathPrefix(`/dashboard`)</span> <span class="string">||</span> <span class="string">PathPrefix(`/api`)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The internal service used for the dashboard ingressRoute</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">api@internal</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># By default, it&#x27;s using traefik entrypoint, which is not exposed.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># /!\ Do not expose your dashboard without any protection over the internet /!\</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entryPoints:</span> [<span class="string">&quot;traefik&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute middlewares (e.g. for authentication)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">middlewares:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- TLS options (e.g. secret containing certificate)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tls:</span> <span class="comment"># 修改此处，配置证书,需要cert-manager</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">certSource:</span> <span class="string">secret</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">&quot;traefik-tls-secret&quot;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">  <span class="attr">healthcheck:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Create an IngressRoute for the healthcheck probe</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The router match rule used for the healthcheck ingressRoute</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchRule:</span> <span class="string">PathPrefix(`/ping`)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The internal service used for the healthcheck ingressRoute</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ping@internal</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Specify the allowed entrypoints to use for the healthcheck ingress route, (e.g. traefik, web, websecure).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># By default, it&#x27;s using traefik entrypoint, which is not exposed.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entryPoints:</span> [<span class="string">&quot;traefik&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Additional ingressRoute middlewares (e.g. for authentication)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">middlewares:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- TLS options (e.g. secret containing certificate)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tls:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">updateStrategy:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Customize updateStrategy of Deployment or DaemonSet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rollingUpdate:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maxUnavailable:</span> <span class="number">0</span>  <span class="comment"># @schema type:[integer, string, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maxSurge:</span> <span class="number">1</span>        <span class="comment"># @schema type:[integer, string, null]</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">readinessProbe:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of consecutive failures allowed before considering the probe as failed.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait before starting the first probe.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait between consecutive probes.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The minimum consecutive successes required to consider the probe successful.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait for a probe response before considering it as failed.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">livenessProbe:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of consecutive failures allowed before considering the probe as failed.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait before starting the first probe.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait between consecutive probes.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The minimum consecutive successes required to consider the probe successful.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- The number of seconds to wait for a probe response before considering it as failed.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Define [Startup Probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">startupProbe:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">providers:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kubernetesCRD:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Load Kubernetes IngressRoute provider</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows IngressRoute to reference resources in namespace other than theirs</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowCrossNamespace:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows to reference ExternalName services in IngressRoute</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowExternalNameServices:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows to return 503 when there is no endpoints available</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowEmptyServices:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- When the parameter is set, only resources containing an annotation with the same value are processed. Otherwise, resources missing the annotation, having an empty value, or the value traefik are processed. It will also set required annotation on Dashboard and Healthcheck IngressRoute when enabled.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ingressClass:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># labelSelector: environment=production,method=traefik</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">namespaces:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Defines whether to use Native Kubernetes load-balancing mode by default.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nativeLBByDefault:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">kubernetesIngress:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Load Kubernetes Ingress provider</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows to reference ExternalName services in Ingress</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowExternalNameServices:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows to return 503 when there is no endpoints available</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowEmptyServices:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- When ingressClass is set, only Ingresses containing an annotation with the same value are processed. Otherwise, Ingresses missing the annotation, having an empty value, or the value traefik are processed.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ingressClass:</span>  <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># labelSelector: environment=production,method=traefik</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">namespaces:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IP used for Kubernetes Ingress endpoints</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">publishedService:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Published Kubernetes Service to copy status from. Format: namespace/servicename</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># By default this Traefik service</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># pathOverride: &quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Defines whether to use Native Kubernetes load-balancing mode by default.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nativeLBByDefault:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">kubernetesGateway:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enable Traefik Gateway provider for Gateway API</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Toggles support for the Experimental Channel resources (Gateway API release channels documentation).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This option currently enables support for TCPRoute and TLSRoute.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">experimentalChannel:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">namespaces:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- A label selector can be defined to filter on specific GatewayClass objects only.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">labelselector:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Create a file provider</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Allows Traefik to automatically watch for file changes</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">watch:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- File content (YAML format, go template supported) (see https://doc.traefik.io/traefik/providers/file/)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">content:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Add volumes to the traefik pod. The volume name will be passed to tpl.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This can be used to mount a cert pair or a configmap that holds a config.toml file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `additionalArguments:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - &quot;--providers.file.filename=/config/dynamic.toml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - &quot;--ping&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - &quot;--ping.entrypoint=web&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># - name: public-cert</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   mountPath: &quot;/certs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   type: secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - name: &#x27;&#123;&#123; printf &quot;%s-configs&quot; .Release.Name &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   mountPath: &quot;/config&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   type: configMap</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Additional volumeMounts to add to the Traefik container</span></span><br><span class="line"></span><br><span class="line"><span class="attr">additionalVolumeMounts:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- For instance when using a logshipper for access logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - name: traefik-logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   mountPath: /var/log/traefik</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">logs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">general:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set [logs format](https://doc.traefik.io/traefik/observability/logs/#format)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">format:</span>  <span class="comment"># @schema enum:[&quot;common&quot;, &quot;json&quot;, null]; type:[string, null]; default: &quot;common&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># By default, the level is set to INFO.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">level:</span> <span class="string">&quot;INFO&quot;</span>  <span class="comment"># @schema enum:[INFO,WARN,ERROR,FATAL,PANIC,DEBUG]; default: &quot;INFO&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- To write the logs into a log file, use the filePath option.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">filePath:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- When set to true and format is common, it disables the colorized output.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">noColor:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">access:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- To enable access logs</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set [access log format](https://doc.traefik.io/traefik/observability/access-logs/#format)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">format:</span>  <span class="comment"># @schema enum:[&quot;CLF&quot;, &quot;json&quot;, null]; type:[string, null]; default: &quot;CLF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># filePath: &quot;/var/log/traefik/access.log</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set [bufferingSize](https://doc.traefik.io/traefik/observability/access-logs/#bufferingsize)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">bufferingSize:</span>  <span class="comment"># @schema type:[integer, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set [filtering](https://docs.traefik.io/observability/access-logs/#filtering)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">filters:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">statuscodes:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">retryattempts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">minduration:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enables accessLogs for internal resources. Default: false.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addInternals:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">general:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Set default mode for fields.names</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">defaultmode:</span> <span class="string">keep</span>  <span class="comment"># @schema enum:[keep, drop, redact]; default: keep</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Names of the fields to limit.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">names:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- [Limit logged fields or headers](https://doc.traefik.io/traefik/observability/access-logs/#limiting-the-fieldsincluding-headers)</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">headers:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Set default mode for fields.headers</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">defaultmode:</span> <span class="string">drop</span>  <span class="comment"># @schema enum:[keep, drop, redact]; default: drop</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">names:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Enable metrics for internal resources. Default: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">addInternals:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Prometheus is enabled by default.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- It can be disabled by setting &quot;prometheus: null&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Entry point used to expose metrics.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entryPoint:</span> <span class="string">metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Enable metrics on entry points. Default: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addEntryPointsLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Enable metrics on routers. Default: false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addRoutersLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Enable metrics on services. Default: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addServicesLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Buckets for latency metrics. Default=&quot;0.1,0.3,1.2,5.0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">buckets:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## When manualRouting is true, it disables the default internal router in</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## order to allow creating a custom router for prometheus@internal service.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">manualRouting:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Create a dedicated metrics service to use with ServiceMonitor</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- When set to true, it won&#x27;t check if Prometheus Operator CRDs are deployed</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">disableAPICheck:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">serviceMonitor:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Enable optional CR for Prometheus Operator. See EXAMPLES.md for more details.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">metricRelabelings:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">relabelings:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">jobLabel:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">honorLabels:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">scrapeTimeout:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">honorTimestamps:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enableHttp2:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">followRedirects:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">additionalLabels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">namespaceSelector:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">prometheusRule:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Enable optional CR for Prometheus Operator. See EXAMPLES.md for more details.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">additionalLabels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">#  datadog:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Address instructs exporter to send metrics to datadog-agent at this address.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    address: &quot;127.0.0.1:8125&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## The interval used by the exporter to push metrics to datadog-agent. Default=10s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # pushInterval: 30s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## The prefix to use for metrics collection. Default=&quot;traefik&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # prefix: traefik</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on entry points. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addEntryPointsLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on routers. Default=false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addRoutersLabels: true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on services. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addServicesLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#  influxdb2:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Address instructs exporter to send metrics to influxdb v2 at this address.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    address: localhost:8086</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Token with which to connect to InfluxDB v2.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    token: xxx</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Organisation where metrics will be stored.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    org: &quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Bucket where metrics will be stored.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    bucket: &quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## The interval used by the exporter to push metrics to influxdb. Default=10s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # pushInterval: 30s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Additional labels (influxdb tags) on all metrics.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # additionalLabels:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    #   env: production</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    #   foo: bar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on entry points. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addEntryPointsLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on routers. Default=false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addRoutersLabels: true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on services. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addServicesLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#  statsd:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Address instructs exporter to send metrics to statsd at this address.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    address: localhost:8125</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## The interval used by the exporter to push metrics to influxdb. Default=10s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # pushInterval: 30s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## The prefix to use for metrics collection. Default=&quot;traefik&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # prefix: traefik</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on entry points. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addEntryPointsLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on routers. Default=false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addRoutersLabels: true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    ## Enable metrics on services. Default=true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#    # addServicesLabels: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">otlp:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set to true in order to enable the OpenTelemetry metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enable metrics on entry points. Default: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addEntryPointsLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enable metrics on routers. Default: false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addRoutersLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Enable metrics on services. Default: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">addServicesLabels:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Explicit boundaries for Histogram data points. Default: [.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">explicitBoundaries:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Interval at which metrics are sent to the OpenTelemetry Collector. Default: 10s</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pushInterval:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Format: &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;. Default: http://localhost:4318/v1/metrics</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">headers:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the certificate authority, it defaults to the system bundle.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ca:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the public certificate. When using this option, setting the key option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the private key. When using this option, setting the cert option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">grpc:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Format: &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;. Default: http://localhost:4318/v1/metrics</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the certificate authority, it defaults to the system bundle.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ca:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the public certificate. When using this option, setting the key option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the private key. When using this option, setting the cert option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">## Tracing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- https://doc.traefik.io/traefik/observability/tracing/overview/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tracing:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Enables tracing for internal resources. Default: false.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">addInternals:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">otlp:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See https://doc.traefik.io/traefik/v3.0/observability/tracing/opentelemetry/</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Format: &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;. Default: http://localhost:4318/v1/metrics</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">headers:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the certificate authority, it defaults to the system bundle.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ca:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the public certificate. When using this option, setting the key option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the private key. When using this option, setting the cert option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">grpc:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Format: &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;. Default: http://localhost:4318/v1/metrics</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the certificate authority, it defaults to the system bundle.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ca:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the public certificate. When using this option, setting the key option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- The path to the private key. When using this option, setting the cert option is required.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Global command arguments to be passed to all traefik&#x27;s pods</span></span><br><span class="line"></span><br><span class="line"><span class="attr">globalArguments:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;--global.checknewversion&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;--global.sendanonymoususage&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Additional arguments to be passed at Traefik&#x27;s binary</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See [CLI Reference](https://docs.traefik.io/reference/static-configuration/cli/)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use curly braces to pass values: `helm install --set=&quot;additionalArguments=&#123;--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG&#125;&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="attr">additionalArguments:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment">#  - &quot;--providers.kubernetesingress.ingressclass=traefik-internal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  - &quot;--log.level=DEBUG&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Environment variables to be passed to Traefik&#x27;s binary</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @default -- See _values.yaml_</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Environment variables to be passed to Traefik&#x27;s binary from configMaps or secrets</span></span><br><span class="line"></span><br><span class="line"><span class="attr">envFrom:</span> []</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span> <span class="comment"># 添加此部分，用于暴露Redis对外访问</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">expose:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">6379</span> <span class="comment"># 对外暴露端口</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">mysql:</span> <span class="comment">#添加此部分，用于暴露MySQL对外访问</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">expose:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">3306</span> <span class="comment"># 对外暴露端口</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Use hostPort if set.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">hostPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># means it&#x27;s listening on all your interfaces and all your IPs. You may want</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># to set this value if you need traefik to listen on specific interface</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># only.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">hostIP:</span>  <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Defines whether the port is exposed if service.type is LoadBalancer or</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># NodePort.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- You SHOULD NOT expose the traefik port on production deployments.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to access it from outside your cluster,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># use `kubectl port-forward` or create a secure ingress</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The exposed port for this service</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The port protocol (TCP/UDP)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## -- Enable this entrypoint as a default entrypoint. When a service doesn&#x27;t explicitly set an entrypoint it will only use this entrypoint.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># asDefault: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># hostPort: 8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># containerPort: 8000</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## -- Different target traefik port on the cluster, useful for IP type LB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">targetPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The port protocol (TCP/UDP)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See [upstream documentation](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nodePort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Port Redirections</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Added in 2.2, you can make permanent redirects via entrypoints.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://docs.traefik.io/routing/entrypoints/#redirection</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redirectTo:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">forwardedHeaders:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Trust forwarded headers information (X-Forwarded-*).</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">trustedIPs:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">proxyProtocol:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Enable the Proxy Protocol header parsing for the entry point</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">trustedIPs:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set transport settings for the entrypoint; see also</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://doc.traefik.io/traefik/routing/entrypoints/#transport</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">transport:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">respondingTimeouts:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">readTimeout:</span>   <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">writeTimeout:</span>  <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">idleTimeout:</span>   <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">lifeCycle:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">requestAcceptGraceTimeout:</span>  <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">graceTimeOut:</span>               <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">keepAliveMaxRequests:</span>         <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">keepAliveMaxTime:</span>             <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">websecure:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## -- Enable this entrypoint as a default entrypoint. When a service doesn&#x27;t explicitly set an entrypoint it will only use this entrypoint.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># asDefault: true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">hostPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">containerPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## -- Different target traefik port on the cluster, useful for IP type LB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">targetPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## -- The port protocol (TCP/UDP)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See [upstream documentation](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nodePort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See [upstream documentation](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">appProtocol:</span>  <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See [upstream documentation](https://doc.traefik.io/traefik/routing/entrypoints/#allowacmebypass)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">allowACMEByPass:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">http3:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## -- Enable HTTP/3 on the entrypoint</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Enabling it will also enable http3 experimental feature</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## https://doc.traefik.io/traefik/routing/entrypoints/#http3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## There are known limitations when trying to listen on same ports for</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## TCP &amp; UDP (Http3). There is a workaround in this chart using dual Service.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">advertisedPort:</span>  <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">forwardedHeaders:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Trust forwarded headers information (X-Forwarded-*).</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">trustedIPs:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">proxyProtocol:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Enable the Proxy Protocol header parsing for the entry point</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">trustedIPs:</span> []</span><br><span class="line"></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- See [upstream documentation](https://doc.traefik.io/traefik/routing/entrypoints/#transport)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">transport:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">respondingTimeouts:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">readTimeout:</span>   <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">writeTimeout:</span>  <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">idleTimeout:</span>   <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">lifeCycle:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">requestAcceptGraceTimeout:</span>  <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">graceTimeOut:</span>               <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">keepAliveMaxRequests:</span>         <span class="comment"># @schema type:[integer, null]; minimum:0</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">keepAliveMaxTime:</span>             <span class="comment"># @schema type:[string, integer, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --  See [upstream documentation](https://doc.traefik.io/traefik/routing/entrypoints/#tls)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">options:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">certResolver:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">domains:</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- One can apply Middlewares on an entrypoint</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://doc.traefik.io/traefik/middlewares/overview/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://doc.traefik.io/traefik/routing/entrypoints/#middlewares</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- /!\ It introduces here a link between your static configuration and your dynamic configuration /!\</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   - namespace-name1@kubernetescrd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   - namespace-name2@kubernetescrd</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">middlewares:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- When using hostNetwork, use another port to avoid conflict with node exporter:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://github.com/prometheus/prometheus/wiki/Default-port-allocations</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- You may not want to expose the metrics port on production deployments.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to access it from outside your cluster,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># use `kubectl port-forward` or create a secure ingress</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The exposed port for this service</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">exposedPort:</span> <span class="number">9100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- The port protocol (TCP/UDP)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- TLS Options are created as [TLSOption CRDs](https://doc.traefik.io/traefik/https/tls/#tls-options)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When using `labelSelector`, you&#x27;ll need to set labels on tlsOption accordingly.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See EXAMPLE.md for details.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tlsOptions:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- TLS Store are created as [TLSStore CRDs](https://doc.traefik.io/traefik/https/tls/#default-certificate). This is useful if you want to set a default certificate. See EXAMPLE.md for details.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tlsStore:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Single service is using `MixedProtocolLBService` feature gate.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- When set to false, it will create two Service, one for TCP and one for UDP.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">single:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional annotations for TCP service only</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotationsTCP:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional annotations for UDP service only</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotationsUDP:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional service labels (e.g. for filtering Service by custom labels)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Additional entries here will be added to the service spec.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Cannot contain type, selector or ports entries.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">spec:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># externalTrafficPolicy: Cluster</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># loadBalancerIP: &quot;1.2.3.4&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># clusterIP: &quot;2.3.4.5&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">loadBalancerSourceRanges:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># - 192.168.0.1/32</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># - 172.16.0.0/16</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- Class of the load balancer implementation</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># loadBalancerClass: service.k8s.aws/nlb</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">externalIPs:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># - 1.2.3.4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## One of SingleStack, PreferDualStack, or RequireDualStack.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ipFamilyPolicy: SingleStack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## List of IP families (e.g. IPv4 and/or IPv6).</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ipFamilies:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   - IPv4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   - IPv6</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">additionalServices:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">## -- An additional and optional internal Service.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Same parameters as external Service</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># internal:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   type: ClusterIP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # labels: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # annotations: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # spec: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # loadBalancerSourceRanges: []</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # externalIPs: []</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#   # ipFamilies: [ &quot;IPv4&quot;,&quot;IPv6&quot; ]</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">autoscaling:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Create HorizontalPodAutoscaler object.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># See EXAMPLES.md for more details.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">persistence:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Enable persistence using Persistent Volume Claims</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ref: http://kubernetes.io/docs/user-guide/persistent-volumes/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># It can be used to store TLS certificates, see `storage` in certResolvers</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">existingClaim:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">accessMode:</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">size:</span> <span class="string">128Mi</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumeName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Only mount a subpath of the Volume into the pod</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">subPath:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Certificates resolvers configuration.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ref: https://doc.traefik.io/traefik/https/acme/#certificate-resolvers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See EXAMPLES.md for more details.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">certResolvers:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- If hostNetwork is true, runs traefik in the host network namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To prevent unschedulabel pods due to port collisions, if hostNetwork=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and replicas&gt;1, a pod anti-affinity is recommended and will be set if the</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># affinity is left as default.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hostNetwork:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Whether Role Based Access Control objects like roles and rolebindings should be created</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rbac:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># When set to true:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 1. Use `Role` and `RoleBinding` instead of `ClusterRole` and `ClusterRoleBinding`.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 2. Set `disableIngressClassLookup` on Kubernetes Ingress providers with Traefik Proxy v3 until v3.1.1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3. Set `disableClusterScopeResources` on Kubernetes Ingress and CRD providers with Traefik Proxy v3.1.2+</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># **NOTE**: `IngressClass`, `NodePortLB` and **Gateway** provider cannot be used with namespaced RBAC.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># See [upstream documentation](https://doc.traefik.io/traefik/providers/kubernetes-ingress/#disableclusterscoperesources) for more details.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">namespaced:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable user-facing roles</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">aggregateTo:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># List of Kubernetes secrets that are accessible for Traefik. If empty, then access is granted to every secret.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">secretResourceNames:</span> []</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding</span></span><br><span class="line"></span><br><span class="line"><span class="attr">podSecurityPolicy:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- The service account the pods will use to interact with the Kubernetes API</span></span><br><span class="line"></span><br><span class="line"><span class="attr">serviceAccount:</span>  <span class="comment"># @schema additionalProperties: false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If set, an existing service account is used</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not set, a service account is created automatically using the fullname template</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Additional serviceAccount annotations (e.g. for oidc authentication)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">serviceAccountAnnotations:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- [Resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for `traefik` container.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- This example pod anti-affinity forces the scheduler to put traefik pods</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- on nodes where no other traefik pods are scheduled.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It should be used when hostNetwork: true to prevent port conflicts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">affinity:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  podAntiAffinity:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      - labelSelector:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#          matchLabels:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#            app.kubernetes.io/name: &#x27;&#123;&#123; template &quot;traefik.name&quot; . &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#            app.kubernetes.io/instance: &#x27;&#123;&#123; .Release.Name &#125;&#125;-&#123;&#123; .Release.Namespace &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        topologyKey: kubernetes.io/hostname</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- nodeSelector is the simplest recommended form of node selection constraint.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nodeSelector:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Tolerations allow the scheduler to schedule pods with matching taints.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tolerations:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- You can use topology spread constraints to control</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how Pods are spread across your cluster among failure-domains.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">topologySpreadConstraints:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># This example topologySpreadConstraints forces the scheduler to put traefik pods</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># on nodes where no other traefik pods are scheduled.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  - labelSelector:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      matchLabels:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        app: &#x27;&#123;&#123; template &quot;traefik.name&quot; . &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    maxSkew: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    topologyKey: kubernetes.io/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    whenUnsatisfiable: DoNotSchedule</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- [Pod Priority and Preemption](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">priorityClassName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- [SecurityContext](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @default -- See _values.yaml_</span></span><br><span class="line"></span><br><span class="line"><span class="attr">securityContext:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">capabilities:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">drop:</span> [<span class="string">ALL</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- [Pod Security Context](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @default -- See _values.yaml_</span></span><br><span class="line"></span><br><span class="line"><span class="attr">podSecurityContext:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">runAsGroup:</span> <span class="number">65532</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">runAsUser:</span> <span class="number">65532</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Extra objects to deploy (value evaluated as a template)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In some cases, it can avoid the need for additional, extended or adhoc deployments.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See #595 for more details and traefik/tests/values/extra.yaml for example.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">extraObjects:</span> []</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -- This field override the default Release Namespace for Helm.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It will not affect optional CRDs such as `ServiceMonitor` and `PrometheusRules`</span></span><br><span class="line"></span><br><span class="line"><span class="attr">namespaceOverride:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">## -- This field override the default app.kubernetes.io/instance label for all Objects.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">instanceLabelOverride:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Traefik Hub configuration. See https://doc.traefik.io/traefik-hub/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hub:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># -- Name of `Secret` with key &#x27;token&#x27; set to a valid license token.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># It enables API Gateway.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">token:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apimanagement:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -- Set to true in order to enable API Management. Requires a valid license token.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">admission:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- WebHook admission server listen address. Default: &quot;0.0.0.0:9943&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">listenAddr:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Certificate of the WebHook admission server. Default: &quot;hub-agent-cert&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">ratelimit:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Enable Redis Cluster. Default: true.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">cluster:</span>    <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Database used to store information. Default: &quot;0&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">database:</span>   <span class="comment"># @schema type:[string, null]</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Endpoints of the Redis instances to connect to. Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">endpoints:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- The username to use when connecting to Redis endpoints. Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- The password to use when connecting to Redis endpoints. Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">sentinel:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Name of the set of main nodes to use for main selection. Required when using Sentinel. Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">masterset:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Username to use for sentinel authentication (can be different from endpoint username). Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">username:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Password to use for sentinel authentication (can be different from endpoint password). Default: &quot;&quot;.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># -- Timeout applied on connection with redis. Default: &quot;0s&quot;.</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">tls:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Path to the certificate authority used for the secured connection.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ca:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Path to the public certificate used for the secure connection.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- Path to the private key used for the secure connection.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -- When insecureSkipVerify is set to true, the TLS connection accepts any certificate presented by the server. Default: false.</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable export of errors logs to the platform. Default: true.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sendlogs:</span>  <span class="comment"># @schema type:[boolean, null]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm upgrade traefik traefik/traefik \</span><br><span class="line">    --namespace traefik -f traefik-values.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="IngressRouteTCP示例"><a href="#IngressRouteTCP示例" class="headerlink" title="IngressRouteTCP示例"></a>IngressRouteTCP示例</h2><p>mysql-traefik-ingress.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql-tcp</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span> <span class="comment"># 定义Headless Service</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRouteTCP</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span> <span class="comment">#根据实际情况修改,或应用文件时指定</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">HostSNI(`*`)</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-svc</span></span><br><span class="line">          <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Ingress</tag>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>Podman配置代理</title>
    <url>/2025/08/01/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Podman%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h3 id="方法1-为当前用户设置环境变量"><a href="#方法1-为当前用户设置环境变量" class="headerlink" title="方法1: 为当前用户设置环境变量"></a>方法1: 为当前用户设置环境变量</h3><p>为当前用户设置 HTTP_PROXY 和 HTTPS_PROXY 环境变量,Podman 将自动读取这些环境变量并使用代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bash</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;http://代理地址:端口&quot;</span>  </span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;https://代理地址:端口&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 bash, 也可以在 ~/.bashrc 中添加上述命令使其永久有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fish</span></span><br><span class="line"><span class="built_in">set</span> -x HTTP_PROXY <span class="string">&quot;http://代理地址:端口&quot;</span></span><br><span class="line"><span class="built_in">set</span> -x HTTPS_PROXY <span class="string">&quot;https://代理地址:端口&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 fish,也可以在 ~/.config/fish/config.fish 中添加以上命令</span></span><br></pre></td></tr></table></figure>

<p>如果代理需要身份验证,可以在 URL 中添加用户名和密码。格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://用户名:密码@代理地址:端口</span><br></pre></td></tr></table></figure>

<h3 id="方法2：为-Podman-服务设置配置文件"><a href="#方法2：为-Podman-服务设置配置文件" class="headerlink" title="方法2：为 Podman 服务设置配置文件"></a>方法2：为 Podman 服务设置配置文件</h3><p>通过编辑 &#x2F;etc&#x2F;containers&#x2F;registries.conf 配置文件为 Podman 服务设置代理。在该文件中添加如下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[registries.search]</span><br><span class="line">registries = [<span class="string">&#x27;docker.io&#x27;</span>, <span class="string">&#x27;quay.io&#x27;</span>]</span><br><span class="line"></span><br><span class="line">[registries.insecure]</span><br><span class="line">registries = []</span><br><span class="line"></span><br><span class="line">[registries.block]</span><br><span class="line">registries = []</span><br><span class="line"></span><br><span class="line">[registries.unqualified-search-registries]</span><br><span class="line"></span><br><span class="line">[registry.mirrors]</span><br><span class="line"></span><br><span class="line">[registry.configs]</span><br><span class="line"></span><br><span class="line">[registry.configs.REGISTRY_NAME.HOSTNAME/HOSTPATH]  </span><br><span class="line">unqualified-search-registries = [<span class="string">&quot;registry.fedoraproject.org&quot;</span>, <span class="string">&quot;registry.access.redhat.com&quot;</span>, <span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">blocked=<span class="literal">false</span> </span><br><span class="line"></span><br><span class="line">[registry.configs.REGISTRY_NAME.HOSTNAME]</span><br><span class="line">http-proxy=<span class="string">&quot;http://代理地址:端口&quot;</span></span><br><span class="line">https-proxy=<span class="string">&quot;https://代理地址:端口&quot;</span></span><br></pre></td></tr></table></figure>

<p>替换 REGISTRY_NAME.HOSTNAME 为您要配置的注册表,如 docker.io。如果代理需要身份验证,则使用类似 <a href="https://so.csdn.net/so/search?q=http&spm=1001.2101.3001.7020">http</a>:&#x2F;&#x2F;user:<a href="mailto:&#x70;&#97;&#x73;&#115;&#x77;&#111;&#x72;&#100;&#x40;&#112;&#x72;&#111;&#x78;&#x79;&#x2e;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;">&#x70;&#97;&#x73;&#115;&#x77;&#111;&#x72;&#100;&#x40;&#112;&#x72;&#111;&#x78;&#x79;&#x2e;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;</a>:8080 的格式。</p>
<h3 id="方法3-为单个-Podman-命令设置代理"><a href="#方法3-为单个-Podman-命令设置代理" class="headerlink" title="方法3: 为单个 Podman 命令设置代理"></a>方法3: 为单个 Podman 命令设置代理</h3><p>为单个 Podman 命令临时设置代理,方法是在命令前添加 –build-arg 参数。例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">podman --build-arg HTTP_PROXY=<span class="string">&quot;http://代理地址:端口&quot;</span> --build-arg HTTPS_PROXY=<span class="string">&quot;https://代理地址:端口&quot;</span> pull nginx</span><br></pre></td></tr></table></figure>

<h3 id="方法四-配置-http-proxy-conf"><a href="#方法四-配置-http-proxy-conf" class="headerlink" title="方法四: 配置 http-proxy.conf"></a>方法四: 配置 http-proxy.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status podman</span><br><span class="line">● podman.service - Podman API Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/podman.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /etc/systemd/system/podman.service.d</span><br><span class="line">           └─http-proxy.conf</span><br><span class="line">   Active: inactive (dead) since Mon 2023-11-20 18:45:12 CST; 3 months 22 days ago</span><br><span class="line">     Docs: man:podman-system-service(1)</span><br><span class="line">  Process: 50669 ExecStart=/usr/bin/podman <span class="variable">$LOGGING</span> system service (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 50669 (code=exited, status=0/SUCCESS)</span><br><span class="line"></span><br><span class="line">Nov 20 18:45:07 downlaod systemd[1]: Starting Podman API Service...</span><br><span class="line">Nov 20 18:45:07 downlaod systemd[1]: Started Podman API Service.</span><br><span class="line">Nov 20 18:45:07 downlaod podman[50669]: <span class="keyword">time</span>=<span class="string">&quot;2023-11-20T18:45:07+08:00&quot;</span> level=info msg=<span class="string">&quot;/usr/bin/podman filtering at log level&gt;</span></span><br><span class="line"><span class="string">Nov 20 18:45:07 downlaod podman[50669]: time=&quot;</span>2023-11-20T18:45:07+08:00<span class="string">&quot; level=info msg=&quot;</span>Not using native diff <span class="keyword">for</span> overlay, thi&gt;</span><br><span class="line">Nov 20 18:45:07 downlaod podman[50669]: <span class="keyword">time</span>=<span class="string">&quot;2023-11-20T18:45:07+08:00&quot;</span> level=info msg=<span class="string">&quot;Setting parallel job count to 13&quot;</span></span><br><span class="line">Nov 20 18:45:07 downlaod podman[50669]: <span class="keyword">time</span>=<span class="string">&quot;2023-11-20T18:45:07+08:00&quot;</span> level=info msg=<span class="string">&quot;Using systemd socket activation to det&gt;</span></span><br><span class="line"><span class="string">Nov 20 18:45:07 downlaod podman[50669]: time=&quot;</span>2023-11-20T18:45:07+08:00<span class="string">&quot; level=info msg=&quot;</span>API service listening on \&quot;/run/podman&gt;</span><br><span class="line">Nov 20 18:45:12 downlaod systemd[1]: podman.service: Succeeded.</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /etc/systemd/system/podman.service.d/http-proxy.conf </span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://192.168.21.101:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://192.168.21.101:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.coding.net,.tencentyun.com,.myqcloud.com,harbor.bsgchina.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Podman</tag>
        <tag>Proxy</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>K3s证书管理</title>
    <url>/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/k3s%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="手动管理证书"><a href="#手动管理证书" class="headerlink" title="手动管理证书"></a>手动管理证书</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>参考<br>[[..&#x2F;杂项&#x2F;OpenSSL生成自签名证书|OpenSSL生成自签名证书]]</p>
<h3 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secrets tls example-io-tls --key example.io.key --cert example.io.crt</span><br></pre></td></tr></table></figure>

<p>手动管理证书可忽略下边的安装过程，跳转到<a href="#Traefik%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6">证书配置</a></p>
<h2 id="使用cert-manager管理证书"><a href="#使用cert-manager管理证书" class="headerlink" title="使用cert-manager管理证书"></a>使用cert-manager管理证书</h2><h3 id="部署cert-manager"><a href="#部署cert-manager" class="headerlink" title="部署cert-manager"></a>部署cert-manager</h3><p>方式一： 使用Helm部署(推荐)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加镜像源</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取配置文件</span></span><br><span class="line">helm show values jetstack/cert-manager &gt; cert-manager-values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署cert-mangaer</span></span><br><span class="line">helm upgrade cert-manager jetstack/cert-manager \</span><br><span class="line">	--namespace cert-manager \</span><br><span class="line">	--install --create-namespace \</span><br><span class="line">	--<span class="built_in">set</span> crds.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>方式二： 使用kubectl部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kubernetes 1.16+</span></span><br><span class="line">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml</span><br><span class="line"><span class="comment"># Kubernetes &lt;1.16</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager-legacy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes 1.15+</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://github.com/jetstack/cert-manager/releases/download/v0.16.1/cert-manager.yaml</span><br><span class="line"><span class="comment"># Kubernetes &lt;1.15</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://github.com/jetstack/cert-manager/releases/download/v0.16.1/cert-manager-legacy.yaml</span><br></pre></td></tr></table></figure>



<h3 id="创建ClusterIssuer-Issuer"><a href="#创建ClusterIssuer-Issuer" class="headerlink" title="创建ClusterIssuer&#x2F;Issuer"></a>创建ClusterIssuer&#x2F;Issuer</h3><h4 id="公网域名证书"><a href="#公网域名证书" class="headerlink" title="公网域名证书"></a>公网域名证书</h4><p>Issuer 与 ClusterIssuer 的区别是 ClusterIssuer 可跨命名空间使用，而 Issuer 需在每个命名空间下配置后才可使用。这里我们使用 ClusterIssuer，其类型选择 Let‘s Encrypt。</p>
<p>正式环境速率限制(<strong>每个注册域名可签发的证书数量</strong>（每周 50 份）)，使用测试环境测试一切正常后再切换正式环境。</p>
<p>letsencrypt-issuer-staging.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt-staging</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&lt;YOUR</span> <span class="string">EMAIL&gt;</span> <span class="comment"># replice this </span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-staging-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">letsencrypt-staging</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http01:</span></span><br><span class="line">        <span class="attr">ingress:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">traefik</span></span><br><span class="line">      <span class="attr">selector:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>letsencrypt-issuer-prod</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&lt;YOUR</span> <span class="string">EMAIL&gt;</span> <span class="comment"># replice this </span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http01:</span></span><br><span class="line">        <span class="attr">ingress:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">traefik</span></span><br><span class="line">      <span class="attr">selector:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>说明：</p>
<p>metadata.name 创建的签发机构的名称，创建证书的时候会引用<br>spec.acme.email 邮箱，证书快过期的时候会有邮件提醒，不过cert-manager会利用acme协议自动给我们重新颁发证书来续期<br>spec.acme.server acme 协议的服务端，由官方给出<br>spec.acme.privateKeySecretRef 指示此签发机构的私钥将要存储到哪个Secret对象中<br>spec.acme.solvers.http01 指示签发机构使用HTTP-01的方式进行acme协议 (还可以用DNS方式，acme协议的目的是证明这台机器和域名都是属于你的，然后才准许给你颁发证书)</p>
</blockquote>
<h4 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h4><p>selfsigned-issuer.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">selfsigned-cluster-issuer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selfSigned:</span> &#123;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Certificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">selfsigned-ca</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">isCA:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">commonName:</span> <span class="string">selfsigned-ca</span></span><br><span class="line">  <span class="attr">secretName:</span> <span class="string">root-secret</span></span><br><span class="line">  <span class="attr">privateKey:</span></span><br><span class="line">    <span class="attr">algorithm:</span> <span class="string">ECDSA</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">256</span></span><br><span class="line">  <span class="attr">subjects:</span></span><br><span class="line">    <span class="attr">organizations:</span></span><br><span class="line">    <span class="bullet">-</span> </span><br><span class="line">  <span class="attr">issuerRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">selfsigned-cluster-issuer</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">cert-manager.io</span></span><br><span class="line"><span class="comment">#---    </span></span><br><span class="line"><span class="comment">## 使用自定义根证书</span></span><br><span class="line"><span class="comment">## 导入根证书 kubectl create secret tls ca-secret --key root-ca.key --cert root-ca.crt</span></span><br><span class="line"><span class="comment">#apiVersion: cert-manager.io/v1</span></span><br><span class="line"><span class="comment">#kind: ClusterIssuer</span></span><br><span class="line"><span class="comment">#metadata:</span></span><br><span class="line"><span class="comment">#  name: selfsigned-cluster-issuer</span></span><br><span class="line"><span class="comment">#spec:</span></span><br><span class="line"><span class="comment">#  ca:</span></span><br><span class="line"><span class="comment">#    secretName: ca-secret</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>spec.subjects.organizations: </p>
</blockquote>
<h3 id="创建域名证书"><a href="#创建域名证书" class="headerlink" title="创建域名证书"></a>创建域名证书</h3><h4 id="公网域名证书-1"><a href="#公网域名证书-1" class="headerlink" title="公网域名证书"></a>公网域名证书</h4><p>example-io-tls.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Certificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-io-tls</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">secretName:</span> <span class="string">example-io-secret</span> <span class="comment"># </span></span><br><span class="line">  <span class="attr">issuerRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">letsencrypt-staging</span> <span class="comment"># 使用自签名证书时替换为 selfsigned-cluster-issuer</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="string">2160h</span></span><br><span class="line">  <span class="attr">renewBefore:</span> <span class="string">360h</span></span><br><span class="line">  <span class="attr">dnsNames:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example.io</span></span><br><span class="line">  <span class="attr">ipAddresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p><strong>生产环境使用建议</strong></p>
<p>实际生产环境中使用cert-manager可以考虑以下建议：</p>
<ol>
<li>将CA的<code>Secret</code>及<code>Issuer</code>放在某个独立的命名空间中，与其它业务的命名空间隔离起来。</li>
<li>如果是CA类型的<code>Issuer</code>，要记得定期更新根CA证书。</li>
<li>如果服务可被公网访问，同时又不想花钱买域名证书，可以采用<code>Letsencrypt</code>类型的<code>Issuer</code>，目前支持两种方式验证域名的所有权，基于<a href="https://cert-manager.io/docs/tutorials/acme/dns-validation/#issuing-an-acme-certificate-using-dns-validation">DNS记录的验证方案</a>和基于<a href="https://cert-manager.io/docs/tutorials/acme/http-validation/#issuing-an-acme-certificate-using-http-validation">文件的HTTP验证方案</a>。</li>
<li><code>cert-manager</code>还提供<code>ingress-shim</code>方式，自动为<code>Ingress</code>资源生成证书，只需要在<code>Ingress</code>资源上打上一些标签即可，详细可参考<a href="https://cert-manager.io/docs/usage/ingress/">这里</a>。</li>
</ol>
<blockquote>
<p>spec.secretName 指示证书最终存到哪个 Secret 中</p>
<p>spec.issuerRef.kind 值为 ClusterIssuer 说明签发机构不在本 namespace 下，而是在全局</p>
<p>spec.issuerRef.name 我们创建的签发机构的名称 (ClusterIssuer.metadata.name)</p>
<p>spec.duration 证书过期时间</p>
<p>spec.renewBefore 在过期前自动更新</p>
<p>spec.dnsNames 指示该证书的可以用于哪些域名</p>
<p>spec.acme.config.http01.domains 指示该证书的可以用于哪些域名</p>
</blockquote>
<h2 id="Traefik配置证书"><a href="#Traefik配置证书" class="headerlink" title="Traefik配置证书"></a>Traefik配置证书</h2><h2 id="终端安装证书"><a href="#终端安装证书" class="headerlink" title="终端安装证书"></a>终端安装证书</h2><p>获取CA证书，root-ca.crt,k3s导出证书 参考<a href="/2024/04/02/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/K3s%E5%AF%BC%E5%87%BA%E8%AF%81%E4%B9%A6/" title="K3s导出证书">K3s导出证书</a></p>
<hr>
<p><a href="https://cloud.tencent.com/developer/article/1402451">k8s中使用cert-manager玩转证书-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_42562106/article/details/135709872">k8s 使用cert-manager证书管理自签-CSDN博客</a></p>
<p> <a href="https://blog.csdn.net/weixin_44692256/article/details/108274385">k8s部署cert-manager实现证书自动化_cert-manager.yaml-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/610699597">Cert-Manager 实现 K8s 服务域名证书自动化续签 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/tencent-cloud-native/p/13883790.html">手把手教你使用 cert-manager 签发免费证书 - 腾讯云原生 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://bowser1704.github.io/notes/using-cert-manager-k3s/">在 k3s 内使用 cert-manager 管理证书 (bowser1704.github.io)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/129755160">用 k3s 轻松管理 SSL 证书 | Linux 中国 - 知乎</a></p>
<p><a href="https://blog.csdn.net/ai524719755/article/details/116712931">k8s中级篇-cert-manager+Let‘s Encrypt自动证书签发_cert-manager let’s encrypt-CSDN博客</a><br><a href="https://cloud.tencent.com/developer/article/2347486">k3s 使用 Letsencrypt 和 Traefik 完成 https 入口部署-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://cloud.tencent.com/document/product/457/49368#Certificate">容器服务 使用 cert-manager 签发免费证书-实践教程-文档中心-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.taoyouh.cn/archives/2495">使用cert-manager为Traefik IngressRoute自动签发Let’s Encrypt证书 – 桃又的技术笔记 (taoyouh.cn)</a></p>
<p>内网证书</p>
<p><a href="https://www.cnblogs.com/dandelion/p/14083023.html">cert-manager管理内网k8s开发环境证书 - hueidou163 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://k8s-docs.github.io/cert-manager-docs/configuration/selfsigned/">SelfSigned - cert-manager (k8s-docs.github.io)</a></p>
<p><a href="https://blog.csdn.net/weixin_42562106/article/details/135709872">k8s 使用cert-manager证书管理自签-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2344898">Kubernetes (K8S) 中Traefik自动申请证书-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://blog.csdn.net/hknaruto/article/details/107806644">k8s ingress配置自签名证书，并解决Kubernetes Ingress Controller Fake Certificate-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/vpc123/articles/14407062.html">K8s &amp; K3s 集群中应用自动签发 Https 证书 - 流雨声 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Https证书</tag>
        <tag>Kubernetes</tag>
        <tag>K3s</tag>
        <tag>TLS</tag>
        <tag>cert-manager</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Podman替代DockerDesktop</title>
    <url>/2025/06/25/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/%E4%BD%BF%E7%94%A8Podman%E6%9B%BF%E4%BB%A3DockerDesktop/</url>
    <content><![CDATA[<ol>
<li><p>安装依赖环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用虚拟化平台</span></span><br><span class="line">dism /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line"><span class="comment">#　启用linux子系统</span></span><br><span class="line">dism /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all</span><br><span class="line"></span><br><span class="line">wsl --install</span><br><span class="line">wsl --update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Podman </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装DockerCLI，用于兼容Docker命令</span></span><br><span class="line">winget install --<span class="built_in">id</span> Docker.DockerCLI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Podman</span></span><br><span class="line">winget install --<span class="built_in">id</span> RedHat.Podman</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Podman Desktop (可选)</span></span><br><span class="line">winget install --<span class="built_in">id</span> RedHat.Podman-Desktop </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Podman</span></span><br><span class="line">podman machine init </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置端口转发</span></span><br><span class="line">wsl <span class="built_in">sudo</span> sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置wsl虚拟机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改默认软件源</span><br><span class="line">sudo sed -e &#x27;s|^metalink=|#metalink=|g&#x27; \</span><br><span class="line">    -e &#x27;s|^#baseurl=http://download.example/pub/fedora/linux|baseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora|g&#x27; \</span><br><span class="line">    -i.bak \</span><br><span class="line">    /etc/yum.repos.d/fedora.repo \</span><br><span class="line">    /etc/yum.repos.d/fedora-updates.repo</span><br><span class="line">sudo dnf makecache</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -d -p 80:80 --name httpd docker.io/library/httpd:latest</span><br></pre></td></tr></table></figure></li>
<li><p>配置镜像加速<br>podman的配置文件在容器内 <code>/etc/containers/registries.conf</code>,配置格式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unqualified-search-regustrues = [&quot;docker.io&quot;]</span><br><span class="line"></span><br><span class="line">[[registry]]                      # 注意此处配置不需要加&#x27;https&#x27;</span><br><span class="line">prefix = &quot;docker.io&quot;              # 访问地址</span><br><span class="line">location = &quot;docker.m.daocloud.io&quot; # 加速地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置私有镜像库</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[registry]]</span><br><span class="line">location = &quot;harbor.example.io&quot;</span><br><span class="line">insecure = true</span><br></pre></td></tr></table></figure>
<p>如果访问地址为<code>https</code>需要配置信任证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /etc/containers/certs.d</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> &lt;path to cert&gt; /etc/containers/certs.d/ca.crt</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>配置文件翻译<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有关此配置文件的更多信息，请参阅 containers-registries.conf(5)。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 注意：使用未完全限定镜像名称的风险</span></span><br><span class="line"><span class="comment"># 我们建议始终使用包括注册表服务器（完整 DNS 名称）、命名空间、镜像名称和标签在内的完全限定镜像名称</span></span><br><span class="line"><span class="comment"># （例如，registry.redhat.io/ubi8/ubi:latest）。通过摘要（例如，</span></span><br><span class="line"><span class="comment"># quay.io/repository/name@digest）拉取镜像可以进一步消除标签的不确定性。</span></span><br><span class="line"><span class="comment"># 使用短名称时，始终存在镜像被伪造的风险。例如，用户想从某个注册表中拉取名为</span></span><br><span class="line"><span class="comment"># `foobar` 的镜像，并期望该镜像来自 myregistry.com。如果</span></span><br><span class="line"><span class="comment"># myregistry.com 不是搜索列表中的第一个，攻击者可能会在列表中靠前的位置</span></span><br><span class="line"><span class="comment"># 放置另一个名为 `foobar` 的镜像。用户可能会意外拉取并运行攻击者的镜像和代码，而不是</span></span><br><span class="line"><span class="comment"># 预期的内容。我们建议只添加完全可信的注册表（即，不允许未知或匿名用户</span></span><br><span class="line"><span class="comment"># 创建任意名称的账户的注册表）。这将防止镜像被伪造、抢占或以其他方式变得不安全。</span></span><br><span class="line"><span class="comment"># 如果有必要使用这些注册表，它应该添加到列表的末尾。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 一个主机[:端口]格式的注册表数组，当拉取未完全限定镜像时，按顺序尝试这些注册表。</span></span><br><span class="line"><span class="attr">unqualified-search-registries</span> = [<span class="string">&quot;registry.fedoraproject.org&quot;</span>, <span class="string">&quot;registry.access.redhat.com&quot;</span>, <span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># [[registry]]</span></span><br><span class="line"><span class="comment"># # &quot;prefix&quot; 字段用于选择相关的 [[registry]] TOML 表；</span></span><br><span class="line"><span class="comment"># # 使用输入镜像名称时，只有与该名称最长匹配的 TOML 表会被使用</span></span><br><span class="line"><span class="comment"># # （考虑到命名空间/库/标签/摘要分隔符）。</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # 如果缺少 prefix 字段，则默认与 &quot;location&quot; 字段相同。</span></span><br><span class="line"><span class="attr">prefix</span> = <span class="string">&quot;example.com/foo&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 如果为 true，则允许未加密的 HTTP 连接以及使用不受信任证书的 TLS 连接。</span></span><br><span class="line"><span class="attr">insecure</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 如果为 true，则禁止拉取匹配名称的镜像。</span></span><br><span class="line"><span class="attr">blocked</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # &quot;prefix&quot; 所在命名空间的物理位置。</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # 默认情况下，与 &quot;prefix&quot; 相同（在这种情况下，可以省略 &quot;prefix&quot;，并且 [[registry]] TOML 表只指定 &quot;location&quot;）。</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # 例如：假设</span></span><br><span class="line"><span class="comment"># #   prefix = &quot;example.com/foo&quot;</span></span><br><span class="line"><span class="comment"># #   location = &quot;internal-registry-for-example.net/bar&quot;</span></span><br><span class="line"><span class="comment"># # 那么对镜像 example.com/foo/myimage:latest 的请求实际上会与</span></span><br><span class="line"><span class="comment"># # internal-registry-for-example.net/bar/myimage:latest 镜像匹配。</span></span><br><span class="line"><span class="attr">location</span> = <span class="string">&quot;internal-registry-for-example.com/bar&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # &quot;prefix&quot; 所在命名空间的（可能部分的）镜像。</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # 将按指定顺序尝试这些镜像；第一个可以联系到并包含镜像的将被使用</span></span><br><span class="line"><span class="comment"># # （如果所有镜像都没有该镜像，则最后尝试 &quot;registry.location&quot; 字段指定的主位置，或者使用未修改的用户指定引用）。</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # &quot;mirror&quot; 数组中的每个 TOML 表可以包含以下字段，语义与直接在 [[registry]] TOML 表中指定的相同：</span></span><br><span class="line"><span class="comment"># # - location</span></span><br><span class="line"><span class="comment"># # - insecure</span></span><br><span class="line"><span class="section">[[registry.mirror]]</span></span><br><span class="line"><span class="attr">location</span> = <span class="string">&quot;example-mirror-0.local/mirror-for-foo&quot;</span></span><br><span class="line"><span class="section">[[registry.mirror]]</span></span><br><span class="line"><span class="attr">location</span> = <span class="string">&quot;example-mirror-1.local/mirrors/foo&quot;</span></span><br><span class="line"><span class="attr">insecure</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># # 根据上述配置，拉取 example.com/foo/image:latest 时将按顺序尝试：</span></span><br><span class="line"><span class="comment"># # 1. example-mirror-0.local/mirror-for-foo/image:latest</span></span><br><span class="line"><span class="comment"># # 2. example-mirror-1.local/mirrors/foo/image:latest</span></span><br><span class="line"><span class="comment"># # 3. internal-registry-for-example.net/bar/image:latest</span></span><br><span class="line"><span class="comment"># # 并使用第一个存在的镜像。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># short-name-mode=&quot;enforcing&quot;</span></span><br><span class="line"><span class="comment"># 强制使用完全限定镜像名称</span></span><br><span class="line">​</span><br><span class="line"><span class="section">[[registry]]</span></span><br><span class="line"><span class="attr">location</span>=<span class="string">&quot;localhost:5000&quot;</span></span><br><span class="line"><span class="attr">insecure</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许使用不安全的连接拉取本地镜像。</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Podman</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl管理多集群</title>
    <url>/2025/08/13/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubectl%E7%AE%A1%E7%90%86%E5%A4%9A%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="1-K3s指定集群管理IP"><a href="#1-K3s指定集群管理IP" class="headerlink" title="1. K3s指定集群管理IP"></a>1. K3s指定集群管理IP</h2><p>在k3s.service中添加启动参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--advertise-address=&lt;192.168.x.x&gt;</span><br></pre></td></tr></table></figure>
<p>详细参考<a href="https://docs.rancher.cn/docs/k3s/installation/install-options/server-config/_index/">官方文档</a>以及 <a href="K3S%E5%AE%89%E8%A3%85.md">K3S安装</a></p>
<p>查看当前Context</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br></pre></td></tr></table></figure>

<h2 id="2-配置集群信息"><a href="#2-配置集群信息" class="headerlink" title="2. 配置集群信息"></a>2. 配置集群信息</h2><p>查看context列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config get-contexts</span><br></pre></td></tr></table></figure>
<p>输出中带有*的<code>Context</code>表示当前活动的<code>Context</code></p>
<p>切换到指定<code>Context</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config use-context &lt;context_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：切换到dev-ctx</span></span><br><span class="line">kubectl config use-context dev-ctx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 在指定Context中执行命令，一般用于临时使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl  --context=&lt;context_name&gt; &lt;exec_cmd&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：在dev-ctx下执行get pods</span></span><br><span class="line">kubectl --context=dev-ctx get pods</span><br></pre></td></tr></table></figure>

<h2 id="3-合并配置文件"><a href="#3-合并配置文件" class="headerlink" title="3. 合并配置文件"></a>3. 合并配置文件</h2><p>在 Kubernetes 环境中，使用 <em>kubectl</em> 管理多个集群非常常见。通过配置 <em>kubeconfig</em> 文件，可以轻松切换和管理多个集群。以下是实现方法的详细步骤。</p>
<p>方法 1: 合并多个配置文件</p>
<ul>
<li><p><strong>准备配置文件</strong> 假设已有两个集群的配置文件：_<del>&#x2F;.kube&#x2F;config1_ 和 _</del>&#x2F;.kube&#x2F;config2_。</p>
</li>
<li><p><strong>合并配置文件</strong> 使用以下命令将多个配置文件合并为一个：</p>
</li>
</ul>
<p>KUBECONFIG&#x3D;<del>&#x2F;.kube&#x2F;config1:</del>&#x2F;.kube&#x2F;config2 kubectl config view –merge –flatten &gt; ~&#x2F;.kube&#x2F;config</p>
<ul>
<li><strong>验证合并结果</strong> 查看合并后的配置：</li>
</ul>
<p>kubectl config view</p>
<p>方法 2: 配置环境变量</p>
<ul>
<li><strong>设置环境变量</strong> 将多个配置文件路径添加到 <em>KUBECONFIG</em> 环境变量中：</li>
</ul>
<p>export KUBECONFIG&#x3D;<del>&#x2F;.kube&#x2F;config:</del>&#x2F;.kube&#x2F;test-config</p>
<ul>
<li><strong>验证配置</strong> 执行以下命令查看所有集群信息：</li>
</ul>
<p>kubectl config get-contexts</p>
<p>方法 3: 手动编辑配置文件</p>
<ul>
<li><p><strong>打开配置文件</strong> 编辑 <em>~&#x2F;.kube&#x2F;config</em> 文件，将其他集群的 <em>cluster_、_context</em> 和 <em>user</em> 信息粘贴到现有配置中。</p>
</li>
<li><p><strong>格式示例</strong>：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span> <span class="string">https://127.0.0.1:6443</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">cluster1</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span> <span class="string">https://192.168.0.1:6443</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">cluster2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster:</span> <span class="string">cluster1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span> <span class="string">user1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">context1</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster:</span> <span class="string">cluster2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span> <span class="string">user2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">context2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">context1</span></span><br></pre></td></tr></table></figure>
<p>切换集群上下文</p>
<ul>
<li><p>查看当前上下文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br></pre></td></tr></table></figure>

</li>
<li><p>切换到其他上下文：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">kubectl config use-context &lt;context_name&gt;</span><br></pre></td></tr></table></figure>
<p>最佳实践</p>
</li>
<li><p>使用合并或环境变量的方法更高效，避免手动编辑出错。</p>
</li>
<li><p>定期备份 <em>kubeconfig</em> 文件，防止误操作导致数据丢失。</p>
</li>
<li><p>确保每个集群的访问凭证和权限正确无误。</p>
</li>
</ul>
<p>通过以上方法，您可以轻松管理多个 Kubernetes 集群，提高运维效率。</p>
<p>大家好！在 <a href="https://so.csdn.net/so/search?q=%E4%BA%91%E5%8E%9F%E7%94%9F&spm=1001.2101.3001.7020">云原生</a> 的世界里，和 Kubernetes 打交道是家常便饭。如果我们像我一样，需要同时管理多个 Kubernetes 集群——比如一个用于严谨发布的 <strong>生产环境</strong> ，一个用于大胆实验的 <strong>测试环境</strong> ，甚至还有本地开发环境——那么高效、安全地在它们之间切换就成了必备技能。</p>
<p>很多朋友（包括我自己有时也会！）可能会因为一段时间没用而忘记 <code>kubectl</code> 中那些用于切换配置的命令。别担心，这很正常！今天，我们就来系统地回顾一下 <code>kubectl</code> 配置管理的核心概念—— <strong>上下文（Context）</strong> ，以及如何利用它在不同集群间自如切换。</p>
<h4 id="核心概念：kubeconfig-文件与上下文（Context）"><a href="#核心概念：kubeconfig-文件与上下文（Context）" class="headerlink" title="核心概念：kubeconfig 文件与上下文（Context）"></a>核心概念：kubeconfig 文件与上下文（Context）</h4><p><code>kubectl</code> 的所有配置信息都存储在一个或多个 YAML 文件中，默认情况下是 <code>$HOME/.kube/config</code> 。这个文件我们通常称为 <code>kubeconfig</code> 文件。把它想象成我们的 Kubernetes “护照”，里面记录了我们能访问哪些集群，用什么身份访问。</p>
<p>一个 <code>kubeconfig</code> 文件通常包含三个主要部分：</p>
<ol>
<li><strong>Clusters（集群）</strong> ：定义了我们要连接的 Kubernetes 集群的信息，比如 API Server 的地址和集群的 CA 证书。</li>
<li><strong>Users（用户）</strong> ：定义了访问集群所使用的凭证，可能是用户名&#x2F;密码、Token 或客户端证书。</li>
<li><strong>Contexts（上下文）</strong> ：这是连接 <strong>集群</strong> 和 <strong>用户</strong> 的桥梁。一个 Context 定义了使用哪个 User 凭证去访问哪个 Cluster。</li>
</ol>
<p><strong>关键点：</strong> 我们可以通过切换 <strong>Context</strong> 来改变 <code>kubectl</code> 当前操作的目标集群和使用的身份。</p>
<h4 id="管理-kubeconfig-的常用-kubectl-config-命令"><a href="#管理-kubeconfig-的常用-kubectl-config-命令" class="headerlink" title="管理 kubeconfig 的常用 kubectl config 命令"></a>管理 kubeconfig 的常用 kubectl config 命令</h4><p><code>kubectl</code> 提供了一套 <code>config</code> 子命令来帮助我们查看和管理 <code>kubeconfig</code> 文件。以下是几个最核心、最常用的命令：</p>
<h5 id="1-查看当前配置：kubectl-config-view"><a href="#1-查看当前配置：kubectl-config-view" class="headerlink" title="1. 查看当前配置：kubectl config view"></a>1. 查看当前配置：kubectl config view</h5><p>这个命令会显示我们当前的 <code>kubeconfig</code> 文件内容（或者合并后的内容，如果我们配置了多个文件）。它会隐藏敏感信息（如证书和 Token 的具体内容），非常适合快速检查配置概览。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config view</span><br><span class="line">bash1</span><br></pre></td></tr></table></figure>

<p>如果我们想看某个特定 Context 的详细信息，可以加上 <code>--context</code> 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看名为 &#x27;prod-cluster&#x27; 的 context 细节</span></span><br><span class="line">kubectl config view --context=prod-cluster</span><br><span class="line">bash12</span><br></pre></td></tr></table></figure>

<h5 id="2-列出所有可用的上下文：kubectl-config-get-contexts"><a href="#2-列出所有可用的上下文：kubectl-config-get-contexts" class="headerlink" title="2. 列出所有可用的上下文：kubectl config get-contexts"></a>2. 列出所有可用的上下文：kubectl config get-contexts</h5><p>这是 <strong>最常用</strong> 的命令之一，它会列出我们在 <code>kubeconfig</code> 文件中定义的所有 Context。当前正在使用的 Context 会在名称前用星号 <code>*</code> 标记。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config get-contexts</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># CURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE</span></span><br><span class="line"><span class="comment"># * test-cluster         kubernetes-test      user-test</span></span><br><span class="line"><span class="comment">#           prod-cluster         kubernetes-prod      user-prod            production</span></span><br><span class="line"><span class="comment">#           docker-desktop       docker-desktop       docker-desktop</span></span><br><span class="line">bash123456</span><br></pre></td></tr></table></figure>

<p>从上面的输出可以清晰地看到：</p>
<ul>
<li>当前激活的 Context 是 <code>test-cluster</code> 。</li>
<li>还有名为 <code>prod-cluster</code> 和 <code>docker-desktop</code> 的 Context 可供切换。</li>
</ul>
<h5 id="3-查看当前使用的上下文：kubectl-config-current-context"><a href="#3-查看当前使用的上下文：kubectl-config-current-context" class="headerlink" title="3. 查看当前使用的上下文：kubectl config current-context"></a>3. 查看当前使用的上下文：kubectl config current-context</h5><p>如果我们只想快速确认当前 <code>kubectl</code> 命令会作用于哪个 Context（哪个集群），这个命令最直接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># test-cluster</span></span><br><span class="line">bash123</span><br></pre></td></tr></table></figure>

<h5 id="4-切换上下文：kubectl-config-use-context"><a href="#4-切换上下文：kubectl-config-use-context" class="headerlink" title="4. 切换上下文：kubectl config use-context "></a>4. 切换上下文：kubectl config use-context <context-name></h5><p>这绝对是 <strong>核心中的核心</strong> ！当我们需要将 <code>kubectl</code> 的操作目标从一个集群切换到另一个集群时，就使用这个命令。</p>
<p>假设我们想从当前的 <code>test-cluster</code> 切换到 <code>prod-cluster</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config use-context prod-cluster</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># Switched to context &quot;prod-cluster&quot;.</span></span><br><span class="line">bash123</span><br></pre></td></tr></table></figure>

<p>切换成功后，我们可以再次使用 <code>kubectl config current-context</code> 或 <code>kubectl config get-contexts</code> 来验证当前上下文是否已更改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># prod-cluster</span></span><br><span class="line"></span><br><span class="line">kubectl config get-contexts</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># CURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE</span></span><br><span class="line"><span class="comment">#           test-cluster         kubernetes-test      user-test</span></span><br><span class="line"><span class="comment"># * prod-cluster         kubernetes-prod      user-prod            production</span></span><br><span class="line"><span class="comment">#           docker-desktop       docker-desktop       docker-desktop</span></span><br><span class="line">bash12345678910</span><br></pre></td></tr></table></figure>

<p>现在，所有后续的 <code>kubectl</code> 命令（如 <code>kubectl get pods</code>, <code>kubectl apply -f ...</code> 等）都会默认发送到 <code>prod-cluster</code> 所定义的集群，并使用 <code>user-prod</code> 的身份进行认证。</p>
<h4 id="实践场景：在生产和测试集群间切换"><a href="#实践场景：在生产和测试集群间切换" class="headerlink" title="实践场景：在生产和测试集群间切换"></a>实践场景：在生产和测试集群间切换</h4><p>假设我们的 <code>kubeconfig</code> 文件中已经配置好了代表生产环境和 <a href="https://so.csdn.net/so/search?q=%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83&spm=1001.2101.3001.7020">测试环境</a> 的 Context，可能分别命名为 <code>production</code> 和 <code>testing</code> 。</p>
<p>我们的日常操作流程可能是这样的：</p>
<ol>
<li><strong>检查当前在哪：</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br><span class="line">bash1</span><br></pre></td></tr></table></figure>
 或者看列表： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config get-contexts</span><br><span class="line">bash1</span><br></pre></td></tr></table></figure></li>
<li><strong>需要操作测试环境：</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config use-context testing</span><br><span class="line"><span class="comment"># 验证一下（可选但推荐）</span></span><br><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 现在可以对测试环境执行操作了</span></span><br><span class="line">kubectl get pods -n test-namespace</span><br><span class="line">bash12345</span><br></pre></td></tr></table></figure></li>
<li><strong>需要紧急处理生产环境问题：</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config use-context production</span><br><span class="line"><span class="comment"># 验证一下</span></span><br><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 操作生产环境（请务必小心！）</span></span><br><span class="line">kubectl get deployment -n critical-app</span><br><span class="line">bash12345</span><br></pre></td></tr></table></figure></li>
<li><strong>完成生产环境操作，切回测试环境继续工作：</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config use-context testing</span><br><span class="line">bash1</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="提升效率的小贴士"><a href="#提升效率的小贴士" class="headerlink" title="提升效率的小贴士"></a>提升效率的小贴士</h4><ol>
<li><strong>清晰命名 Context</strong> ：给我们的 Context 起一个能清晰表明环境和用途的名字，比如 <code>gke-prod-eu</code>, <code>eks-dev-us</code>, <code>local-minikube</code> 等。避免使用模糊不清的名字。</li>
<li><strong>使用 Shell 别名</strong> ：很多人喜欢为 <code>kubectl</code> 设置别名，比如 <code>alias k=kubectl</code> 。这样我们的命令可以更短： <code>k config get-contexts</code>, <code>k config use-context my-context</code> 。</li>
<li><strong>考虑使用辅助工具</strong> ：社区有一些流行的小工具可以让我们更方便地切换 Context 和 Namespace，例如：<ul>
<li><code>kubectx</code> (用于切换 Context)</li>
<li><code>kubens</code> (用于切换 Namespace)<br>  这些工具通常提供交互式选择或更简洁的命令，可以显著提高效率。可以通过包管理器（如 Homebrew, apt, yum）或直接下载二进制文件来安装它们。</li>
</ul>
</li>
<li><strong>注意 <code>kubeconfig</code> 文件的安全性</strong> ： <code>kubeconfig</code> 文件包含了访问集群的凭证，务必妥善保管，不要泄露给未授权的人员。</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>管理多个 Kubernetes 集群配置并不复杂，核心就在于理解和运用 <code>kubeconfig</code> 文件中的 <strong>Context</strong> 概念。通过掌握 <code>kubectl config</code> 的几个关键子命令：</p>
<ul>
<li><code>view</code>: 查看配置概览</li>
<li><code>get-contexts</code>: 列出所有可用上下文</li>
<li><code>current-context</code>: 显示当前激活的上下文</li>
<li><code>use-context &lt;context-name&gt;</code>: <strong>切换到指定的上下文</strong></li>
</ul>
<p>我们就能轻松地在不同的 Kubernetes 环境（如生产和测试）之间安全、高效地切换了。希望这篇回顾能帮我们重新找回操作 <code>kubectl</code> 多集群配置的熟悉感！</p>
<img src="/2025/08/13/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubectl%E7%AE%A1%E7%90%86%E5%A4%9A%E9%9B%86%E7%BE%A4/IMG-20250813105026288.png" class="">

<img src="/2025/08/13/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubectl%E7%AE%A1%E7%90%86%E5%A4%9A%E9%9B%86%E7%BE%A4/IMG-20250813105127343.png" class="">]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>制作Helm镜像</title>
    <url>/2024/07/22/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/%E5%88%B6%E4%BD%9CHelm%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_34556414/article/details/113248570">Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts-CSDN博客</a></p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>国内常用源镜像地址</title>
    <url>/2024/04/01/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/%E5%9B%BD%E5%86%85%E5%B8%B8%E7%94%A8%E6%BA%90%E9%95%9C%E5%83%8F%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h4 id="Linux-源"><a href="#Linux-源" class="headerlink" title="Linux 源"></a>Linux 源</h4><p>清华 <a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn</a></p>
<p>阿里 <a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com</a></p>
<p>腾讯 <a href="https://mirrors.tencent.com/">https://mirrors.tencent.com</a></p>
<p>华为 <a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com</a></p>
<p>中国科技大学 <a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn</a></p>
<p>华中科技大学 <a href="http://mirror.hust.edu.cn/">http://mirror.hust.edu.cn</a></p>
<h4 id="Docker-镜像仓库"><a href="#Docker-镜像仓库" class="headerlink" title="Docker 镜像仓库"></a>Docker 镜像仓库</h4><h5 id="DockerHub-docker-io"><a href="#DockerHub-docker-io" class="headerlink" title="DockerHub(docker.io)"></a>DockerHub(docker.io)</h5><p>网易 <a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p>
<p>中国科技大学 <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a>  (不可用)</p>
<p>道客 <a href="https://docker.m.daocloud.cn/">https://docker.m.daocloud.cn</a> (参考<a href="https://docs.daocloud.io/community/mirror/">官方文档</a>)</p>
<p>腾讯 <a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></p>
<p>华为 <a href="https://mirror.swr.myhuaweicloud.com/">https://mirror.swr.myhuaweicloud.com</a></p>
<p>阿里云 <a href="https://registry.cn-hangzhou.aliyuncs.com/">https://registry.cn-hangzhou.aliyuncs.com</a></p>
<p>[^注]: 阿里可申请私有加速，需<a href="https://cr.console.aliyun.com/">注册</a>账号,注册后地址修改为 https:&#x2F;&#x2F;{私有ID}.mirror.aliyuncs.com。详细信息参考<a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">官方文档</a></p>
<h5 id="谷歌镜像仓库-gcr-io-k8s-gcr-io"><a href="#谷歌镜像仓库-gcr-io-k8s-gcr-io" class="headerlink" title="谷歌镜像仓库(gcr.io k8s.gcr.io)"></a>谷歌镜像仓库(gcr.io k8s.gcr.io)</h5><p>阿里 <a href="https://registry.aliyuncs.com/google_containers">https://registry.aliyuncs.com/google_containers</a></p>
<p>中科大 <a href="https://gcr.mirrors.ustc.edu.cn/">https://gcr.mirrors.ustc.edu.cn</a> (2022.8之后不再更新镜像,校外访问返回403)</p>
<p>华为 <a href="https://mirror.swr.myhuaweicloud.com/">https://mirror.swr.myhuaweicloud.com</a></p>
<p>道客 <a href="https://m.daocloud.io/k8s.gcr.io">https://m.daocloud.io/k8s.gcr.io</a> <a href="https://docs.daocloud.io/community/mirror">文档</a></p>
<h5 id="CoreOS镜像仓库-quay-io"><a href="#CoreOS镜像仓库-quay-io" class="headerlink" title="CoreOS镜像仓库(quay.io )"></a>CoreOS镜像仓库(quay.io )</h5><p>道客 <a href="https://m.daocloud.io/quay.io">https://m.daocloud.io/quay.io</a> 参考支<a href="https://docs.daocloud.io/community/mirror.html#_3">持镜像列表</a></p>
<h5 id="Github镜像仓库-ghcr-io"><a href="#Github镜像仓库-ghcr-io" class="headerlink" title="Github镜像仓库(ghcr.io )"></a>Github镜像仓库(ghcr.io )</h5><p>道客 <a href="https://m.daocloud.io/ghcr.io">https://m.daocloud.io/ghcr.io</a> 参考支<a href="https://docs.daocloud.io/community/mirror.html#_3">持镜像列表</a></p>
<h5 id="Helm-源"><a href="#Helm-源" class="headerlink" title="Helm 源"></a>Helm 源</h5><p>ArtifactHub <a href="https://artifacthub.io/">https://artifacthub.io/</a></p>
<p>华为 <a href="https://mirrors.huaweicloud.com/helm/">https://mirrors.huaweicloud.com/helm/</a></p>
<p>bitnami <a href="https://charts.bitnami.com/bitnami">https://charts.bitnami.com/bitnami</a></p>
<p>Google <a href="https://gcr.io/kubernetes-helm">https://gcr.io/kubernetes-helm</a></p>
<h4 id="容器配置"><a href="#容器配置" class="headerlink" title="容器配置"></a>容器配置</h4><p>Docker(&#x2F;etc&#x2F;docker&#x2F;daemon.json )</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Containerd(&#x2F;etc&#x2F;containerd&#x2F;config.toml)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[plugins.cri.registry]</span><br><span class="line">[plugins.cri.registry.mirrors]</span><br><span class="line">[plugins.cri.registry.mirrors.&quot;quay.io&quot;]</span><br><span class="line">endpoint = [&quot;https://quay.tencentcloudcr.com&quot;]</span><br><span class="line">[plugins.cri.registry.mirrors.&quot;docker.io&quot;]</span><br><span class="line">endpoint = [&quot;https://mirror.ccs.tencentyun.com&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>K3s中Containerd容器(&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml)</p>
<p>K3s 默认的 containerd 配置文件目录为&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml，但直接操作 containerd 的配置文件去设置镜像仓库或加速器相比于操作 docker 要复杂许多。K3s 为了简化配置 containerd 镜像仓库的复杂度，K3s 会在启动时检查&#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;中是否存在  文件，如果存在该文件，就会根据 registries.yaml 的内容转换为 containerd 的配置并存储到&#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;etc&#x2F;containerd&#x2F;config.toml，从而降低了配置 containerd 镜像仓库的复杂度。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;172.31.6.200:5000&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;http://172.31.6.200:5000&quot;</span></span><br><span class="line">  <span class="attr">&quot;rancher.ksd.top:5000&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;http://172.31.6.200:5000&quot;</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://fogjl973.mirror.aliyuncs.com&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://registry-1.docker.io&quot;</span></span><br></pre></td></tr></table></figure>

<p>containerd 与 docker 都有默认仓库，并且都为 <code>docker.io</code>。如果配置中未指定 mirror 为 <code>docker.io</code>，重启 containerd 后会自动加载 <code>docker.io</code> 配置。与 docker 不同的是，containerd 可以修改 <code>docker.io</code> 对应的 endpoint（ 默认为 <a href="https://link.zhihu.com/?target=https://registry-1.docker.io/">https://registry-1.docker.io</a> ），而 docker 无法修改。</p>
<p>docker 中可以通过 <code>registry-mirrors</code> 设置镜像加速地址。如果 pull 的镜像不带仓库地址（<code>项目名+镜像名:tag</code>），则会从默认镜像仓库去拉取镜像。如果配置了镜像加速地址，会先访问镜像加速仓库，如果没有返回数据，再访问默认吧镜像仓库。</p>
<p>k3s完整配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;192.168.50.119&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;http://192.168.50.119&quot;</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://7bezldxe.mirror.aliyuncs.com&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://registry-1.docker.io&quot;</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">&quot;192.168.50.119&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># this is the registry password</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">cert_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the cert file used in the registry</span></span><br><span class="line">      <span class="attr">key_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the key file used in the registry</span></span><br><span class="line">      <span class="attr">ca_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the ca file used in the registry</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># this is the registry username</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># this is the registry password</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">cert_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the cert file used in the registry</span></span><br><span class="line">      <span class="attr">key_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the key file used in the registry</span></span><br><span class="line">      <span class="attr">ca_file:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># path to the ca file used in the registry</span></span><br></pre></td></tr></table></figure>





<p>镜像转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#gcr.io</span><br><span class="line">docker pull gcr.io/kubernetes-helm/tiller:v2.16.1</span><br><span class="line">docker pull gcr.mirrors.ustc.edu.cn/kubernetes-helm/tiller:v2.16.1</span><br><span class="line"></span><br><span class="line">#k8s.gcr.io</span><br><span class="line">#docker pull k8s.gcr.io/kube-proxy:v1.15.5</span><br><span class="line">docker pull gcr.mirrors.ustc.edu.cn/google-containers/kube-proxy:v1.15.5</span><br><span class="line"></span><br><span class="line">#quay.io</span><br><span class="line">docker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1</span><br><span class="line">docker pull quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>转换为gcr.io镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry.aliyuncs.com/google_containers/coredns:1.6.5</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/coredns:1.6.5</span><br></pre></td></tr></table></figure>
<p>K8S批量下载docker images</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config images list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(  <span class="comment"># 下面的镜像应该去除&quot;k8s.gcr.io/&quot;的前缀，版本换成上面获取到的版本</span></span><br><span class="line">    kube-apiserver:v1.12.1</span><br><span class="line">    kube-controller-manager:v1.12.1</span><br><span class="line">    kube-scheduler:v1.12.1</span><br><span class="line">    kube-proxy:v1.12.1</span><br><span class="line">    pause:3.1</span><br><span class="line">    etcd:3.2.24</span><br><span class="line">    coredns:1.2.2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    docker pull registry.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line">    docker tag registry.aliyuncs.com/google_containers/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">    docker rmi registry.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更新版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">url=registry.aliyuncs.com</span><br><span class="line">version=v1.16.4</span><br><span class="line">images=(`kubeadm config images list --kubernetes-version=<span class="variable">$version</span>|awk -F <span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`)</span><br><span class="line"><span class="keyword">for</span> imagename <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">  docker pull <span class="variable">$url</span>/<span class="variable">$imagename</span></span><br><span class="line">  docker tag <span class="variable">$url</span>/<span class="variable">$imagename</span> k8s.gcr.io/<span class="variable">$imagename</span></span><br><span class="line">  docker rmi -f <span class="variable">$url</span>/<span class="variable">$imagename</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>或(V1.3以上)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.13.0 --pod-network-cidr 192.168.1.100/24</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Linux软件源</tag>
        <tag>DockerHub镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>KubeEdge设备孪生设计</title>
    <url>/2024/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/KubeEdge%E8%AE%BE%E5%A4%87%E5%AD%AA%E7%94%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>KubeEdge中的数据结构设计</p>
<p>Device</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>string</td>
<td>设备唯一编码</td>
</tr>
<tr>
<td>Name</td>
<td>string</td>
<td>设备名称</td>
</tr>
<tr>
<td>Description</td>
<td>string</td>
<td>设别描述</td>
</tr>
<tr>
<td>State</td>
<td>string</td>
<td>设备状态</td>
</tr>
<tr>
<td>LastOnline</td>
<td>DateTime</td>
<td>最后在线时间</td>
</tr>
<tr>
<td>Attributes</td>
<td>Map&lt;string,MsgAttr&gt;</td>
<td>设备属性(上报属性)</td>
</tr>
<tr>
<td>Twin</td>
<td>Map&lt;string,MsgTwin&gt;</td>
<td>设备孪生属性(可控制属性)</td>
</tr>
</tbody></table>
<p>MsgAttr</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Value</td>
<td>string</td>
<td>属性名称</td>
</tr>
<tr>
<td>Optional</td>
<td>bool</td>
<td>是否可为空</td>
</tr>
<tr>
<td>Metadata</td>
<td>TypeMetadata</td>
<td>属性类型元数据</td>
</tr>
</tbody></table>
<p>MsgTwin</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Expected</td>
<td>TwinValue</td>
<td>期望值</td>
</tr>
<tr>
<td>Actual</td>
<td>TwinValue</td>
<td>实际值</td>
</tr>
<tr>
<td>Optional</td>
<td>bool</td>
<td>是否可为空</td>
</tr>
<tr>
<td>Metadata</td>
<td>TypeMetadata</td>
<td>属性类型元数据</td>
</tr>
<tr>
<td>ExpectedVersion</td>
<td>TwinVersion</td>
<td>期望值版本</td>
</tr>
<tr>
<td>ActualVersion</td>
<td>TwinVersion</td>
<td>实际值版本</td>
</tr>
</tbody></table>
<hr>
<p>数据库表设计</p>
<p>Device</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td></td>
<td>设备实例唯一ID</td>
</tr>
<tr>
<td>Name</td>
<td></td>
<td>设备实例名称</td>
</tr>
<tr>
<td>Description</td>
<td></td>
<td>设备描述</td>
</tr>
<tr>
<td>State</td>
<td></td>
<td>设备状态</td>
</tr>
<tr>
<td>LastOnline</td>
<td></td>
<td>最后在线时间</td>
</tr>
</tbody></table>
<p>DeviceAttr</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td></td>
<td>属性实例唯一ID</td>
</tr>
<tr>
<td>DeviceId</td>
<td></td>
<td>设备实例唯一ID</td>
</tr>
<tr>
<td>Name</td>
<td></td>
<td>设备名称</td>
</tr>
<tr>
<td>Description</td>
<td></td>
<td>设备描述</td>
</tr>
<tr>
<td>Value</td>
<td></td>
<td>设备属性值</td>
</tr>
<tr>
<td>Optional</td>
<td>bool</td>
<td>是否可空</td>
</tr>
<tr>
<td>AttrType</td>
<td></td>
<td>属性类型</td>
</tr>
<tr>
<td>Metadata</td>
<td></td>
<td>属性元数据</td>
</tr>
</tbody></table>
<p>DeviceTwin</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DeviceID</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Name</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Description</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Expected</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Actual</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ExpectedMeta</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ActualMeta</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ExpectedVersion</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ActualVersion</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Optional</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AttrType</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Metadata</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数字孪生</tag>
        <tag>KubeEdge</tag>
      </tags>
  </entry>
  <entry>
    <title>设备孪生表结构设计</title>
    <url>/2024/07/04/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BE%E5%A4%87%E5%AD%AA%E7%94%9F%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>DEVICE</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>int</td>
<td>自增ID</td>
</tr>
<tr>
<td>SN</td>
<td>varchar(20)</td>
<td>设备唯一编码</td>
</tr>
<tr>
<td>NAME</td>
<td>varchar(20)</td>
<td>设备名称</td>
</tr>
<tr>
<td>MARKED</td>
<td>BOOL</td>
<td>设备是否标记</td>
</tr>
<tr>
<td>IP</td>
<td>varchar(15)</td>
<td>设备IP地址</td>
</tr>
<tr>
<td>LOCATION</td>
<td>varchar(200)</td>
<td>设备安装位置</td>
</tr>
</tbody></table>
<p>DEVICE_ATTR</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>int</td>
<td>自增ID</td>
</tr>
<tr>
<td>KEY</td>
<td>varchar(20)</td>
<td>属性名</td>
</tr>
<tr>
<td>CHANNEL</td>
<td></td>
<td></td>
</tr>
<tr>
<td>VALUE</td>
<td>int</td>
<td>属性值</td>
</tr>
<tr>
<td>DEVICE_ID</td>
<td>int</td>
<td>属性所属设备ID</td>
</tr>
<tr>
<td>SCALE</td>
<td>int</td>
<td>缩放倍率，当数值有小数时可用倍率缩放</td>
</tr>
<tr>
<td>UNIT</td>
<td>varchar(20)</td>
<td>数值单位</td>
</tr>
</tbody></table>
<p>DEVICE_STATE</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>int</td>
<td>自增ID</td>
</tr>
<tr>
<td>DEVICE_ID</td>
<td>int</td>
<td>属性所属设备ID</td>
</tr>
<tr>
<td>PORT</td>
<td>int</td>
<td>设备接收端口</td>
</tr>
<tr>
<td>VALUE</td>
<td>int</td>
<td>数值</td>
</tr>
<tr>
<td>UNIT</td>
<td>varchar(20)</td>
<td>数值单位</td>
</tr>
</tbody></table>
<p>DEVICE_LINKAGE</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>int</td>
<td>自增ID</td>
</tr>
<tr>
<td>CAT</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DEVICE_ID</td>
<td>int</td>
<td>属性所属设备ID</td>
</tr>
<tr>
<td>PORT</td>
<td>int</td>
<td>设备接收端口</td>
</tr>
<tr>
<td>TARGET</td>
<td></td>
<td>联动目标</td>
</tr>
<tr>
<td>TRIGGER</td>
<td></td>
<td>联动触发器</td>
</tr>
<tr>
<td>TRIGGER_ALARM</td>
<td></td>
<td>联动触发告警</td>
</tr>
<tr>
<td>ACTION</td>
<td></td>
<td>联动动作</td>
</tr>
<tr>
<td>PARAM</td>
<td></td>
<td>参数</td>
</tr>
</tbody></table>
<p>DEVICE_ALARM</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td></td>
<td>自增ID</td>
</tr>
<tr>
<td>APP_ID</td>
<td></td>
<td>固件ID</td>
</tr>
<tr>
<td>CAT</td>
<td></td>
<td></td>
</tr>
<tr>
<td>REPORTER</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PORT</td>
<td></td>
<td>端口</td>
</tr>
<tr>
<td>CODE</td>
<td></td>
<td>编码</td>
</tr>
<tr>
<td>MSG</td>
<td></td>
<td>消息</td>
</tr>
<tr>
<td>ALARM_TYPE</td>
<td></td>
<td>告警类型</td>
</tr>
<tr>
<td>SEVERITY</td>
<td></td>
<td></td>
</tr>
<tr>
<td>STATUS</td>
<td></td>
<td>状态</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数字孪生</tag>
      </tags>
  </entry>
  <entry>
    <title>FRP配置</title>
    <url>/2023/07/07/%E6%9D%82%E9%A1%B9/FRP%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># TCP通信端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#UDP通信端口</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仪表板界面配置</span></span><br><span class="line"><span class="attr">dashboard_port</span>=<span class="number">7500</span></span><br><span class="line"><span class="attr">dashboard_user</span>=admin</span><br><span class="line"><span class="attr">dashboard_pwd</span>=admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许使用的端口号,可以指定范围也可以用‘，’分割</span></span><br><span class="line"><span class="attr">allow_ports</span> = <span class="number">18081</span>-<span class="number">18090</span>,<span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="服务端开机自启配置"><a href="#服务端开机自启配置" class="headerlink" title="服务端开机自启配置"></a>服务端开机自启配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/frps.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> frps.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl start frps.service</span><br></pre></td></tr></table></figure>

<p>启动文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span> = Frp Server Service</span><br><span class="line"><span class="attr">After</span> = network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span> = simple</span><br><span class="line"><span class="attr">User</span> = nobody</span><br><span class="line"><span class="attr">Restart</span> = <span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span> = <span class="number">5</span>s</span><br><span class="line"><span class="attr">ExecStart</span> = /usr/local/bin/frps -c /usr/local/etc/frp/frps.ini</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span> = multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment">#替换IP地址为服务端IP</span></span><br><span class="line"><span class="attr">server_addr</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server_port</span>=<span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows远程桌面</span></span><br><span class="line"><span class="section">[rdp]</span></span><br><span class="line"><span class="attr">type</span>=tcp</span><br><span class="line"><span class="comment"># 映射IP</span></span><br><span class="line"><span class="attr">local_ip</span>=<span class="number">127.0</span>.<span class="number">0.1</span> </span><br><span class="line"><span class="comment"># 映射端口（本地）</span></span><br><span class="line"><span class="attr">local_port</span>=<span class="number">3389</span></span><br><span class="line"><span class="comment"># 远程端口（服务器）注意端口要在允许端口内切未被占用</span></span><br><span class="line"><span class="attr">remote_port</span>=<span class="number">18087</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>公司常见后缀的含义</title>
    <url>/2025/05/30/%E6%9D%82%E9%A1%B9/%E5%85%AC%E5%8F%B8%E5%B8%B8%E8%A7%81%E5%90%8E%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<h3 id="1-Co-Ltd"><a href="#1-Co-Ltd" class="headerlink" title="1. Co., Ltd."></a>1. Co., Ltd.</h3><ul>
<li>全称：Company Limited</li>
<li>含义：有限责任公司，常见于英国、中国及亚洲地区</li>
<li>特点：”Co.“为Company缩写，”.“表示缩写符号，”,”用于分隔前后词</li>
</ul>
<h3 id="2-Inc"><a href="#2-Inc" class="headerlink" title="2. Inc."></a>2. Inc.</h3><ul>
<li>全称：Incorporated</li>
<li>含义：股份有限公司，多用于美国、加拿大</li>
<li>示例：Apple Inc.，强调股东责任限于股份投资</li>
</ul>
<h3 id="3-LLC"><a href="#3-LLC" class="headerlink" title="3. LLC"></a>3. LLC</h3><ul>
<li>全称：Limited Liability Company</li>
<li>含义：有限责任公司（美国特有形式）</li>
<li>特点：兼具合伙制灵活性与股份制有限责任，如Google LLC</li>
</ul>
<h3 id="4-GmbH"><a href="#4-GmbH" class="headerlink" title="4. GmbH"></a>4. GmbH</h3><ul>
<li>全称：Gesellschaft mit beschränkter Haftung</li>
<li>含义：有限责任公司，德国及德语区专用</li>
<li>示例：Bosch GmbH1</li>
</ul>
<h3 id="5-AG"><a href="#5-AG" class="headerlink" title="5. AG"></a>5. AG</h3><ul>
<li>全称：Aktiengesellschaft</li>
<li>含义：股份有限公司，德国及瑞士常见</li>
<li>示例：BMW AG</li>
</ul>
<h3 id="6-S-A"><a href="#6-S-A" class="headerlink" title="6. S.A."></a>6. S.A.</h3><pre><code>- 全称：Société Anonyme（法）/Sociedad Anónima（西）
- 含义：股份有限公司，流行于法国、西班牙等拉丁语系国家
- 示例：L’Oréal S.A.1
</code></pre>
<h3 id="7-Plc"><a href="#7-Plc" class="headerlink" title="7. Plc"></a>7. Plc</h3><ul>
<li>全称：Public Limited Company</li>
<li>含义：公众有限公司（英国上市企业专用）</li>
<li>示例：HSBC Holdings plc1</li>
</ul>
<h3 id="8-株式会社（Kabushiki-Kaisha）"><a href="#8-株式会社（Kabushiki-Kaisha）" class="headerlink" title="8. 株式会社（Kabushiki Kaisha）"></a>8. 株式会社（Kabushiki Kaisha）</h3><ul>
<li>缩写：KK</li>
<li>含义：日本股份有限公司</li>
<li>示例：Toyota Motor Corporation KK</li>
</ul>
<p><strong>地域差异提示</strong>：</p>
<ul>
<li>英国”Ltd.”与美国”LLC”虽均表有限责任，但法律结构不同</li>
<li>荷兰用”BV”（私人有限公司），意大利用”S.p.A.”（股份公司）</li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>FFmpeg mp3转pcm</title>
    <url>/2022/06/24/%E6%9D%82%E9%A1%B9/ffmpeg-mp3%E8%BD%ACpcm/</url>
    <content><![CDATA[<p>大端数据格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ffmpeg</span> <span class="string">-i</span> <span class="string">test.mp3</span> <span class="string">-f</span> <span class="string">s16be</span> <span class="string">-ar</span> <span class="number">16000</span> <span class="string">-ac</span> <span class="number">1</span> <span class="string">-acodec</span> <span class="string">pcm_s16be</span> <span class="string">pcm16k.pcm</span></span><br></pre></td></tr></table></figure>

<p>小端数据格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ffmpeg</span> <span class="string">-i</span> <span class="string">test.mp3</span> <span class="string">-f</span> <span class="string">s16le</span> <span class="string">-ar</span> <span class="number">16000</span> <span class="string">-ac</span> <span class="number">1</span> <span class="string">-acodec</span> <span class="string">pcm_s16le</span> <span class="string">pcm16k.pcm</span></span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ol>
<li>-acodec pcm_s16be：输出pcm格式，采用signed 16编码，字节序为大尾端（小尾端为le)；</li>
<li>-ar 16000: 采样率为16000</li>
<li>-ac 1: 声道数为1</li>
</ol>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>FFmp</tag>
      </tags>
  </entry>
  <entry>
    <title>在CMD命令行中切换到管理员权限模式</title>
    <url>/2018/06/10/%E6%9D%82%E9%A1%B9/%E5%9C%A8CMD%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E5%88%87%E6%8D%A2%E5%88%B0%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>方式1：</p>
<p>搜索CMD Ctrl+Shift+Enter</p>
<p>方式2：</p>
<p>打开CMD，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runas /noprofile /user:Administrator cmd</span><br></pre></td></tr></table></figure>

<p>输入Administrator账户的密码</p>
<blockquote>
<p>runas 允许用户用其他权限运行指定的工具和程序</p>
<p>&#x2F;noprofile 指定不加载用户的配置文件</p>
<p>&#x2F;user:UserAccountName 指定在其下运行程序的账户</p>
</blockquote>
<p>常见问题</p>
<p>运行runas 指令输入密码报错“无法启动服务，原因可能是已被禁用或与其关联的设备没有启动。”</p>
<p>这是因为“Secondary Logo”服务没有启动，这个服务是”在不同凭据下启用启动过程“。直接在cmd中输入services.msc,将服务从禁用改为手动就好了，之后再次输入runas命令就可以使用administrator账户运行。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>物联网国标</title>
    <url>/2022/11/01/%E6%9D%82%E9%A1%B9/%E7%89%A9%E8%81%94%E7%BD%91%E5%9B%BD%E6%A0%87/</url>
    <content><![CDATA[<p>GB&#x2F;T 35134-2017  物联网智能家居 设备描述方法</p>
<p>GB&#x2F;T 35143-2017  物联网智能家居 数据和设备编码</p>
<p>GB&#x2F;T 35317-2017 公安物联网系统信息安全等级保护要求</p>
<p>GB&#x2F;T 35318-2017 公安物联网感知终端安全防护技术要求</p>
<p>GB&#x2F;T 35319-2017  物联网 系统接口要求</p>
<p>GB&#x2F;T 35419-2017  物联网标识体系 Ecode在一维条码中的存储</p>
<p>GB&#x2F;T 35420-2017  物联网标识体系 Ecode在二维码中的存储</p>
<p>GB&#x2F;T 35421-2017  物联网标识体系 Ecode在射频标签中的存储</p>
<p>GB&#x2F;T 35422-2017  物联网标识体系 Ecode的注册与管理</p>
<p>GB&#x2F;T 35423-2017  物联网标识体系 Ecode在NFC标签中的存储</p>
<p>GB&#x2F;T 35592-2017  公安物联网感知终端接入安全技术要求</p>
<p>GB&#x2F;T 35136-2017  智能家居自动控制设备通用技术要求</p>
<p>GB&#x2F;T 35255-2017  LED公共照明智能系统接口应用层通信协议</p>
<p>GB&#x2F;T 35291-2017  信息安全技术 智能密码钥匙应用接口规范</p>
<p>GB&#x2F;T 30269.502-2017  信息技术 传感器网络 第502部分：标识：传感节点标识符解析</p>
<p>GB&#x2F;T 30269.602-2017  信息技术 传感器网络 第602部分：信息安全：低速率无线传感器网络网络层和应用支持子层安全规范</p>
<p>GB&#x2F;T 30269.801-2017  信息技术 传感器网络 第801部分：测试：通用要求</p>
<p>GB&#x2F;T 30269.803-2017  信息技术 传感器网络 第803部分：测试：低速无线传感器网络网络层和应用支持子层</p>
<p>GB&#x2F;T 35129-2017  面向食品制造业的射频识别系统 环境适应性要求</p>
<p>GB&#x2F;T 35130-2017  面向食品制造业的射频识别系统 射频标签信息与编码规范</p>
<p>GB&#x2F;T 35135-2017  面向食品制造业的射频识别系统 应用要求</p>
<p>GB&#x2F;T 17626.6-2017  电磁兼容 试验和测量技术 射频场感应的传导骚扰抗扰度</p>
<p>GB&#x2F;T 35290-2017  信息安全技术 射频识别（RFID）系统通用安全技术要求</p>
<p>GB&#x2F;T 35120-2017  制造过程物联的数字化模型信息交换规范</p>
<p>GB&#x2F;T 35122-2017  制造过程物联的数字化模型信息表达规范</p>
<p>GB&#x2F;T 35128-2017  集团企业经营管理信息化核心构件</p>
<p>GB&#x2F;T 34966.1-2017  卫星导航增强信息互联网传输 第1部分：播发体制</p>
<p>GB&#x2F;T 34966.2-2017  卫星导航增强信息互联网传输 第2部分：接口要求</p>
<p>GB&#x2F;T 34966.3-2017  卫星导航增强信息互联网传输 第3部分：数据传输格式</p>
<p>GB&#x2F;T 35403.1-2017  国家物品编码与基础信息通用规范 第1部分：总体框架</p>
<p>GB&#x2F;T 35589-2017  信息技术 大数据 技术参考模型</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>国标</tag>
      </tags>
  </entry>
  <entry>
    <title>解决SuperMicro主板风扇转速过低告警</title>
    <url>/2023/07/10/%E6%9D%82%E9%A1%B9/%E8%A7%A3%E5%86%B3SuperMicro%E4%B8%BB%E6%9D%BF%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E8%BF%87%E4%BD%8E%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<h1 id="解决SuperMicro主板风扇转速过低告警"><a href="#解决SuperMicro主板风扇转速过低告警" class="headerlink" title="解决SuperMicro主板风扇转速过低告警"></a>解决SuperMicro主板风扇转速过低告警</h1><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p> 系统启动后风扇忽高忽低，进入IPMI后台可以看到，看到传感器日志里大量的告警</p>
 <img src="/2023/07/10/%E6%9D%82%E9%A1%B9/%E8%A7%A3%E5%86%B3SuperMicro%E4%B8%BB%E6%9D%BF%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E8%BF%87%E4%BD%8E%E5%91%8A%E8%AD%A6/IMG-20250804110128732.png" class="" title="告警">

<p> 造成此问题的原因是风扇转速过低，触发了超微的风扇转速允许的下限，从而强制满速运转，而在满速后主板又很快发现没有问题，且此时温度较低，风扇开始降速，直到降速到下限以下，重复此过程。</p>
<p>在进入IPMI后台管理界面后风扇速度有四种智能模式可调</p>
<ul>
<li><p>Standard: zone0和zone1 风速为50%</p>
</li>
<li><p>Optimal: 风速为30%</p>
</li>
<li><p>Full: 风速为100%</p>
</li>
<li><p>Heavy IO: zone0 为50%，zone1 为75%</p>
</li>
</ul>
<img src="/2023/07/10/%E6%9D%82%E9%A1%B9/%E8%A7%A3%E5%86%B3SuperMicro%E4%B8%BB%E6%9D%BF%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E8%BF%87%E4%BD%8E%E5%91%8A%E8%AD%A6/IMG-20250804110128774.png" class="">



<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-在服务器上安装IPMItool"><a href="#1-在服务器上安装IPMItool" class="headerlink" title="1. 在服务器上安装IPMItool"></a>1. 在服务器上安装IPMItool</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ipmitool <span class="comment"># Ubuntu/Debian指令</span></span><br><span class="line">yum install ipmitool <span class="comment"># CentOS指令</span></span><br></pre></td></tr></table></figure>



<h4 id="2-设置风扇转速"><a href="#2-设置风扇转速" class="headerlink" title="2. 设置风扇转速"></a>2. 设置风扇转速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 风扇名可以看告警里边的对应风扇名</span></span><br><span class="line">ipmitool sensor thresh FAN1 lower 100 125 125</span><br><span class="line">ipmitool sensor thresh FANA lower 100 125 125</span><br></pre></td></tr></table></figure>

<h4 id="3-Windows-下远程操作IPMI"><a href="#3-Windows-下远程操作IPMI" class="headerlink" title="3. Windows 下远程操作IPMI"></a>3. Windows 下远程操作IPMI</h4><p>ipmitool windows 版 <a href="http://www.4008600011.com/wp-content/uploads/2019/08/IPMIToolWin.zip">下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipmitool -H [IPMI网口IP地址] -U [IMPI账户] -P [IPMI密码] sensor thresh FAN1 lower 100 125 125</span><br><span class="line">ipmitool -H [IPMI网口IP地址] -U [IMPI账户] -P [IPMI密码] sensor thresh FANA lower 100 125 125</span><br></pre></td></tr></table></figure>



<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果你运行上面的命令后，风扇转速回落后马上又返回原样，这表明服务器的自动调速覆盖了你手动设置的转速。你需要切换服务器风扇策略为全速（Full Speed），在这个策略下服务器不会使用自动调节转速，因此也不会覆盖你手动设置的转速。</p>
<p>运行下面的命令切换到全速模式（也可以进入IPMI界面调整）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipmitool -H [IPMI网口IP地址] -U [IMPI账户] -P [IPMI密码] 0x30 0x45 0x01 0x01</span><br><span class="line"><span class="comment"># 最后一个0x01表示全速模式。如果为0x00则表示标准（Standard）；0x02表示最优（Optimal）</span></span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.bilibili.com/read/cv22752140/">1.解决超微 SuperMicro 主板风扇反复高低转速问题 - 哔哩哔哩 (bilibili.com)</a></p>
<p><a href="https://www.licc.tech/article?id=33">超微服务器Supermicro X9&#x2F;X10&#x2F;X11设置风扇转速 - 辰宸的备忘录 (licc.tech)</a></p>
<p><a href="https://blog.csdn.net/owlcity123/article/details/106620113">ipmitool常用命令详解_ipmitool lan set_owlcity123的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>超微</tag>
        <tag>SuperMicro</tag>
        <tag>转速过低告警</tag>
      </tags>
  </entry>
  <entry>
    <title>阵列卡接口型号</title>
    <url>/2024/09/23/%E6%9D%82%E9%A1%B9/%E9%98%B5%E5%88%97%E5%8D%A1%E6%8E%A5%E5%8F%A3%E5%9E%8B%E5%8F%B7/</url>
    <content><![CDATA[<h4 id="接口型号"><a href="#接口型号" class="headerlink" title="接口型号"></a>接口型号</h4><p><a href="https://blog.csdn.net/dany_zj_cn/article/details/112966388">SFF SAS接口_8087接口-CSDN博客</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>阵列卡</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记-1</title>
    <url>/2023/09/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>GoLang学习笔记</title>
    <url>/2025/03/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Golang/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习笔记-1</title>
    <url>/2025/03/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt学习笔记-1</title>
    <url>/2025/03/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Qt/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>8种主要排序算法的CSharp实现</title>
    <url>/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="8种主要排序算法的C-实现"><a href="#8种主要排序算法的C-实现" class="headerlink" title="8种主要排序算法的C#实现"></a>8种主要排序算法的C#实现</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>8种主要排序算法的实现及优化，包含选择排序，冒泡排序，插入排序，快速排序，归并排序，堆排序，希尔排序，基数排序。文末实际测试并比较。</p>
</blockquote>
<hr>
<p>新的一年到了，很多园友都辞职要去追求更好的工作环境，我也是其中一个，呵呵！</p>
<p>最近闲暇的时候我开始重温一些常用的算法。老早就买了《算法导论》，一直都没啃下去。</p>
<p>这本书确实很好，只是太难读了，总是读了几章就又读不下去了！工作上也几乎用不到。</p>
<p>我这段时间发现看这些排序算法比以前容易了很多，就借此机会将它们整理总结起来。</p>
<p>一是方便以后重温，二是可以应对笔试面试。同时也希望这篇博文可以帮助各位刚辞职和正在学习排序算法的园友。</p>
<p>PS：有可能实现的代码并不是最优的，如果有什么错误或者值得改进的地方，还请大家帮忙指出。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>排序算法是我们编程中遇到的最多的算法。目前主流的算法有8种。</p>
<p>  平均时间复杂度从高到低依次是：</p>
<p>     冒泡排序（o(n<sup>2</sup>)），选择排序（o(n<sup>2</sup>)），插入排序（o(n<sup>2</sup>)），堆排序（o(nlogn)），</p>
<p>     归并排序（o(nlogn)），快速排序（o(nlogn)）， 希尔排序（o(n<sup>1.25</sup>)），基数排序（o(n)）</p>
<p>这些平均时间复杂度是参照维基百科<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F">排序算法</a>罗列的。</p>
<p>是计算的理论平均值，并不意味着你的代码实现能达到这样的程度。</p>
<p>例如希尔排序，时间复杂度是由选择的步长决定的。基数排序时间复杂度最小，</p>
<p>但我实现的基数排序的速度并不是最快的，后面的结果测试图可以看到。</p>
<p><a href="http://www.cnblogs.com/fatbird/p/SortAlgorithm.html">本文</a>代码实现使用的数据源类型为IList<int>，这样可以兼容int[]和List<int>(虽然int[]有ToList()，</p>
<p>List<int>有ToArray()，哈哈！)。</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序是我觉得最简单暴力的排序方式了。</p>
<p>以前刚接触排序算法的时候，感觉算法太多搞不清，唯独记得选择排序的做法及实现。</p>
<p>原理：找出参与排序的数组最大值，放到末尾（或找到最小值放到开头） <a href="http://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SelectSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.Count - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; min =&lt;span&gt; i;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt;; j &amp;lt; data.Count; j++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data[j] &amp;lt;&lt;span&gt; temp)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         min =&lt;span&gt; j;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                         temp =&lt;span&gt; data[j];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (min !=&lt;span&gt; i)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    Swap(data, min, i);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：将剩余数组的最小数交换到开头。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是笔试面试经常考的内容，虽然它是这些算法里排序速度最慢的（汗），后面有测试为证。</p>
<p>原理：从头开始，每一个元素和它的下一个元素比较，如果它大，就将它与比较的元素交换，否则不动。</p>
<p>这意味着，大的元素总是在向后慢慢移动直到遇到比它更大的元素。所以每一轮交换完成都能将最大值</p>
<p>冒到最后。  <a href="http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F#.E5.8A.A9.E8.AE.B0.E7.A0.81">维基入口</a></p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BubbleSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.Count - &lt;span&gt;1&lt;/span&gt;; i &amp;gt; &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; i; j++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt; data[j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                         Swap(data, j, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：中需要注意的是j&lt;i，每轮冒完泡必然会将最大值排到数组末尾，所以需要排序的数应该是在减少的。</p>
<p>很多网上版本每轮冒完泡后依然还是将所有的数进行第二轮冒泡即j&lt;data.Count-1，这样会增加比较次数。</p>
<h4 id="通过标识提升冒泡排序"><a href="#通过标识提升冒泡排序" class="headerlink" title="通过标识提升冒泡排序"></a>通过标识提升冒泡排序</h4><p>在维基上看到，可以通过添加标识来分辨剩余的数是否已经有序来减少比较次数。感觉很有意思，可以试试。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BubbleSortImprovedWithFlag(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; flag;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.Count - &lt;span&gt;1&lt;/span&gt;; i &amp;gt; &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; i; j++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt; data[j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         Swap(data, j, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                         flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (flag) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：发现某轮冒泡没有任何数进行交换（即已经有序），就跳出排序。</p>
<p>我起初也以为这个方法是应该有不错效果的，可是实际测试结果并不如想的那样。和未优化耗费时间一样（对于随机数列）。</p>
<p>由果推因，那么应该是冒泡排序对于随机数列，当剩余数列有序的时候，也没几个数要排列了！？</p>
<p>不过如果已经是有序数列或者部分有序的话，这个冒泡方法将会提升很大速度。</p>
<h3 id="鸡尾酒排序（来回排序）"><a href="#鸡尾酒排序（来回排序）" class="headerlink" title="鸡尾酒排序（来回排序）"></a>鸡尾酒排序（来回排序）</h3><h4 id="对冒泡排序进行更大的优化"><a href="#对冒泡排序进行更大的优化" class="headerlink" title="对冒泡排序进行更大的优化"></a>对冒泡排序进行更大的优化</h4><p>冒泡排序只是单向冒泡，而鸡尾酒来回反复双向冒泡。</p>
<p>原理：自左向右将大数冒到末尾，然后将剩余数列再自右向左将小数冒到开头，如此循环往复。<a href="http://zh.wikipedia.org/wiki/%E5%BE%80%E8%BF%94%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BubbleCocktailSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; flag;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;0&lt;/span&gt;, n = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.Count - &lt;span&gt;1&lt;/span&gt;; i &amp;gt; &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = n; j &amp;lt; data.Count - &lt;span&gt;1&lt;/span&gt; - m; j++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt; data[j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             Swap(data, j, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                             flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (flag) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     m++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = data.Count - &lt;span&gt;1&lt;/span&gt; - m; k &amp;gt; n; k--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (data[k] &amp;lt; data[k - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                             Swap(data, k, k - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                             flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (flag) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     n++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：分析第i轮冒泡，i是偶数则将剩余数列最大值向右冒泡至末尾，是奇数则将剩余数列最小值</p>
<p>向左冒泡至开头。对于剩余数列，n为始，data.Count-1-m为末。</p>
<p>来回冒泡比单向冒泡：对于随机数列，更容易得到有序的剩余数列。因此这里使用标识将会提升的更加明显。</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序是一种对于有序数列高效的排序。非常聪明的排序。只是对于随机数列，效率一般，交换的频率高。</p>
<p>原理：通过构建有序数列，将未排序的数从后向前比较，找到合适位置并插入。<a href="http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>第一个数当作有序数列。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InsertSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; data.Count; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 temp =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i - &lt;span&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt;&lt;span&gt; temp)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         data[j + &lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; data[j];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (j == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             data[&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         data[j + &lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：将要排序的数（索引为i）存储起来，向前查找合适位置j+1，将i-1到j+1的元素依次向后</p>
<p>移动一位，空出j+1，然后将之前存储的值放在这个位置。</p>
<p>这个方法写的不如维基上的简洁清晰，由于合适位置是j+1所以多出了对j&#x3D;&#x3D;0的判断，但实际效率影响无差别。</p>
<p>建议比照维基和我写的排序，自行选择。</p>
<h4 id="二分查找法优化插入排序"><a href="#二分查找法优化插入排序" class="headerlink" title="二分查找法优化插入排序"></a>二分查找法优化插入排序</h4><p>插入排序主要工作是在有序的数列中对要排序的数查找合适的位置，而查找里面经典的二分查找法正可以适用。</p>
<p>原理：通过二分查找法的方式找到一个位置索引。当要排序的数插入这个位置时，大于前一个数，小于后一个数。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InsertSortImprovedWithBinarySearch(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; tempIndex;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; data.Count; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 temp =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 tempIndex = BinarySearchForInsertSort(data, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, i, i);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i - &lt;span&gt;1&lt;/span&gt;; j &amp;gt;= tempIndex; j--&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     data[j + &lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; data[j];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 data[tempIndex] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; </span><br><span class="line">&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BinarySearchForInsertSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; high, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; key)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low &amp;gt;= data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (high &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; mid = (low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (mid == key) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mid;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (data[key] &amp;gt;&lt;span&gt; data[mid])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[key] &amp;lt; data[mid + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; mid + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; BinarySearchForInsertSort(data, mid + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high, key);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;else  &lt;span&gt;// data[key] &amp;lt;= data[mid]&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (mid - &lt;span&gt;1&lt;/span&gt; &amp;lt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[key] &amp;gt; data[mid - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mid;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; BinarySearchForInsertSort(data, low, mid - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, key);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p> 过程解析：需要注意的是二分查找方法实现中high-low&#x3D;&#x3D;1的时候mid&#x3D;&#x3D;low，所以需要33行</p>
<p>mid-1&lt;0即mid&#x3D;&#x3D;0的判断，否则下行会索引越界。</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是一种有效比较较多的高效排序。它包含了“分而治之”以及“哨兵”的思想。</p>
<p>原理：从数列中挑选一个数作为“哨兵”，使比它小的放在它的左侧，比它大的放在它的右侧。将要排序是数列递归地分割到</p>
<p>最小数列，每次都让分割出的数列符合“哨兵”的规则，自然就将数列变得有序。 <a href="http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#.E5.8E.9F.E5.9C.B0.28in-place.29.E5.88.86.E5.89.B2.E7.9A.84.E7.89.88.E6.9C.AC">维基入口</a></p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortStrict(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             QuickSortStrict(data, &lt;span&gt;0&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; </span><br><span class="line">&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortStrict(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low &amp;gt;= high) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; data[low];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = low + &lt;span&gt;1&lt;/span&gt;, j =&lt;span&gt; high;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[j] &amp;gt; temp) j--&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[i] &amp;lt; temp &amp;amp;&amp;amp; i &amp;lt; j) i++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i &amp;gt;= j) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                Swap(data, i, j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 i++; j--&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (j !=&lt;span&gt; low)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                Swap(data, low, j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             QuickSortStrict(data, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             QuickSortStrict(data, low, j - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：取的哨兵是数列的第一个值，然后从第二个和末尾同时查找，左侧要显示的是小于哨兵的值，</p>
<p>所以要找到不小于的i，右侧要显示的是大于哨兵的值，所以要找到不大于的j。将找到的i和j的数交换，</p>
<p>这样可以减少交换次数。i&gt;&#x3D;j时，数列全部查找了一遍，而不符合条件j必然是在小的那一边，而哨兵</p>
<p>是第一个数，位置本应是小于自己的数。所以将哨兵与j交换，使符合“哨兵”的规则。</p>
<p>这个版本的缺点在于如果是有序数列排序的话，递归次数会很可怕的。</p>
<h4 id="另一个版本"><a href="#另一个版本" class="headerlink" title="另一个版本"></a>另一个版本</h4><p>这是维基上的一个C#版本，我觉得很有意思。这个版本并没有严格符合“哨兵”的规则。但却将“分而治之”</p>
<p>以及“哨兵”思想融入其中，代码简洁。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortRelax(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             QuickSortRelax(data, &lt;span&gt;0&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; </span><br><span class="line">&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortRelax(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low &amp;gt;= high) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp = data[(low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = low - &lt;span&gt;1&lt;/span&gt;, j = high + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[++i] &amp;lt;&lt;span&gt; temp) ;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[--j] &amp;gt;&lt;span&gt; temp) ;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i &amp;gt;= j) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                Swap(data, i, j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             QuickSortRelax(data, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             QuickSortRelax(data, low, i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：取的哨兵是数列中间的数。将数列分成两波，左侧小于等于哨兵，右侧大于等于哨兵。</p>
<p>也就是说，哨兵不一定处于两波数的中间。虽然哨兵不在中间，但不妨碍“哨兵”的思想的实现。所以</p>
<p>这个实现也可以达到快速排序的效果。但却造成了每次递归完成，要排序的数列数总和没有减少（除非i&#x3D;&#x3D;j）。</p>
<h4 id="针对这个版本的缺点，我进行了优化"><a href="#针对这个版本的缺点，我进行了优化" class="headerlink" title="针对这个版本的缺点，我进行了优化"></a>针对这个版本的缺点，我进行了优化</h4><p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortRelaxImproved(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             QuickSortRelaxImproved(data, &lt;span&gt;0&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; </span><br><span class="line">&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QuickSortRelaxImproved(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low &amp;gt;= high) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; temp = data[(low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = low - &lt;span&gt;1&lt;/span&gt;, j = high + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; index = (low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[++i] &amp;lt;&lt;span&gt; temp) ;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (data[--j] &amp;gt;&lt;span&gt; temp) ;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i &amp;gt;= j) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                Swap(data, i, j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i == index) index =&lt;span&gt; j;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (j == index) index =&lt;span&gt; i;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (j ==&lt;span&gt; i)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 QuickSortRelaxImproved(data, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 QuickSortRelaxImproved(data, low, i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;i-j==1&lt;/span&gt;</span><br><span class="line">&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (index &amp;gt;=&lt;span&gt; i)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (index !=&lt;span&gt; i)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                        Swap(data, index, i);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     QuickSortRelaxImproved(data, i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     QuickSortRelaxImproved(data, low, i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;else &lt;span&gt;//&lt;/span&gt;&lt;span&gt;index &amp;lt; i&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (index !=&lt;span&gt; j)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                        Swap(data, index, j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                     QuickSortRelaxImproved(data, j + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     QuickSortRelaxImproved(data, low, j - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：定义了一个变量Index，来跟踪哨兵的位置。发现哨兵最后在小于自己的那堆，</p>
<p>那就与j交换，否则与i交换。达到每次递归都能减少要排序的数列数总和的目的。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序也是采用“分而治之”的方式。刚发现<a href="http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95">分治法</a>是一种算法范式，我还一直以为是一种需要意会的思想呢。</p>
<p>不好意思了，孤陋寡闻了，哈哈！</p>
<p>原理：将两个有序的数列，通过比较，合并为一个有序数列。 <a href="http://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>为方便理解，此处实现用了List<int>的一些方法，随后有IList<int>版本。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; MergeSortOnlyList(List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low ==&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; &#123; data[low] &#125;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; mergeData = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; mid = (low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; leftData =&lt;span&gt; MergeSortOnlyList(data, low, mid);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; rightData = MergeSortOnlyList(data, mid + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (leftData[i] &amp;lt;&lt;span&gt; rightData[j])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    mergeData.Add(leftData[i]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (++i ==&lt;span&gt; leftData.Count)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         mergeData.AddRange(rightData.GetRange(j, rightData.Count -&lt;span&gt; j));</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    mergeData.Add(rightData[j]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (++j ==&lt;span&gt; rightData.Count)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         mergeData.AddRange(leftData.GetRange(i, leftData.Count -&lt;span&gt; i));</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mergeData;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; </span><br><span class="line">&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; MergeSortOnlyList(List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             data = MergeSortOnlyList(data, &lt;span&gt;0&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  &lt;span&gt;//不会改变外部引用 参照&lt;a href=&quot;http://www.cnblogs.com/fatbird/p/parametersInCsharp.html&quot; target=&quot;_blank&quot;&gt;C#参数传递</span><br><span class="line">&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：将数列分为两部分，分别得到两部分数列的有序版本，然后逐个比较，将比较出的小数逐个放进</p>
<p>新的空数列中。当一个数列放完后，将另一个数列剩余数全部放进去。</p>
<h4 id="IList版本"><a href="#IList版本" class="headerlink" title="IList版本"></a>IList<int>版本</h4><p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; MergeSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             data = MergeSort(data, &lt;span&gt;0&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; </span><br><span class="line">&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; MergeSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; length = high - low + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; mergeData =&lt;span&gt; NewInstance(data, length);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (low ==&lt;span&gt; high)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 mergeData[&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; data[low];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mergeData;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; mid = (low + high) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; leftData =&lt;span&gt; MergeSort(data, low, mid);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; rightData = MergeSort(data, mid + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, high);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (leftData[i] &amp;lt;&lt;span&gt; rightData[j])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     mergeData[i + j] = leftData[i++]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不能使用Add,Array Length不可变&lt;/span&gt;</span><br><span class="line">&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (i ==&lt;span&gt; leftData.Count)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; rightLeft = rightData.Count -&lt;span&gt; j;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;0&lt;/span&gt;; m &amp;lt; rightLeft; m++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                             mergeData[i + j] = rightData[j++&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     mergeData[i + j] = rightData[j++&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (j ==&lt;span&gt; rightData.Count)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; leftleft = leftData.Count -&lt;span&gt; i;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n = &lt;span&gt;0&lt;/span&gt;; n &amp;lt; leftleft; n++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                             mergeData[i + j] = leftData[i++&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mergeData;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; </span><br><span class="line">&lt;span&gt;51&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程原理与上个一样，此处就不赘述了。</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是根据堆这种数据结构设计的一种算法。堆的特性：父节点的值总是小于（或大于）它的子节点。近似二叉树。</p>
<p>原理：将数列构建为最大堆数列（即父节点总是最大值），将最大值（即根节点）交换到数列末尾。这样要排序的数列数总和减少，</p>
<p>同时根节点不再是最大值，调整最大堆数列。如此重复，最后得到有序数列。 <a href="http://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F">维基入口</a>   <a href="http://www.cs.usfca.edu/~galles/visualization/HeapSort.html">有趣的演示</a></p>
<p>实现准备：如何将数列构造为堆——父节点i的左子节点为2i+1，右子节点为2i+2。节点i的父节点为floor((i-1)&#x2F;2)。</p>
<p>实现如下（这个实现判断和临时变量使用太多，导致效率低，评论中@小城故事提出了更好的实现）：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; HeapSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;            BuildMaxHeapify(data);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; j =&lt;span&gt; data.Count;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;&lt;span&gt; j; )</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 Swap(data, i, --&lt;span&gt;j);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (j - &lt;span&gt;2&lt;/span&gt; &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)  &lt;span&gt;//只剩下1个数 j代表余下要排列的数的个数</span><br><span class="line">&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (k &amp;gt; (j - &lt;span&gt;2&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;  &lt;span&gt;//即：k &amp;gt; ((j-1)-1)/2&lt;/span&gt; &lt;span&gt;超出最后一个父节点的位置  </span><br><span class="line">&lt;/span&gt;&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; k;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         k = ReSortMaxBranch(data, k, &lt;span&gt;2&lt;/span&gt; * k + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; * k + &lt;span&gt;2&lt;/span&gt;, j - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (temp == k) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; </span><br><span class="line">&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BuildMaxHeapify(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = data.Count / &lt;span&gt;2&lt;/span&gt; - &lt;span&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;)  &lt;span&gt;//(data.Count-1)-1)/2为数列最大父节点索引</span><br><span class="line">&lt;/span&gt;&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; i;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 temp = ReSortMaxBranch(data, i, &lt;span&gt;2&lt;/span&gt; * i + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; * i + &lt;span&gt;2&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (temp !=&lt;span&gt; i)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; k =&lt;span&gt; i;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt; (k != temp &amp;amp;&amp;amp; temp &amp;lt;= data.Count / &lt;span&gt;2&lt;/span&gt; - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                         k =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                         temp = ReSortMaxBranch(data, temp, &lt;span&gt;2&lt;/span&gt; * temp + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; * temp + &lt;span&gt;2&lt;/span&gt;, data.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; </span><br><span class="line">&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ReSortMaxBranch(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; data, &lt;span&gt;int&lt;/span&gt; maxIndex, &lt;span&gt;int&lt;/span&gt; left, &lt;span&gt;int&lt;/span&gt; right, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; lastIndex)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (right &amp;gt;&lt;span&gt; lastIndex)  &lt;span&gt;//父节点只有一个子节点</span><br><span class="line">&lt;/span&gt;&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 temp =&lt;span&gt; left;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[left] &amp;gt;&lt;span&gt; data[right])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     temp =&lt;span&gt; left;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; temp =&lt;span&gt; right;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; </span><br><span class="line">&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (data[maxIndex] &amp;lt;&lt;span&gt; data[temp])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                Swap(data, maxIndex, temp);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; temp =&lt;span&gt; maxIndex;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：BuildMaxHeapify为排序前构建的最大堆数列方法，主要内容为从最后一个父节点开始往前将每个三角组合</p>
<p>（即父节点与它的两个子节点）符合父节点值最大的规则。ReSortMaxBranch为将三角调整为父节点值最大，</p>
<p>并返回该值之前的索引，用来判断是否进行了交换，以及原来的父节点值交换到了什么位置。在HeapSort里首先</p>
<p>构建了最大堆数列，然后将根节点交换到末尾，根节点不是最大值了，在while语句中对最大堆数列进行调整。</p>
<p>插曲：自从看了Martin Fowler大师《重构》第三版，我发现我更不喜欢写注释了。每次都想着尽量让方法的名字更贴切，</p>
<p>即使会造成方法的名字很长很丑。这算不算曲解了大师的意思啊！？上面的代码注释都是写博客的时候现加的（源代码很干净的。汗!）。</p>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是插入排序的一种更高效的改进版本。</p>
<p>在前面介绍的插入排序，我们知道1.它对有序数列排序的效率是非常高的 2.要排序的数向前移动是一步步进行的导致插入排序效率低。</p>
<p>希尔排序正是利用第一点，改善第二点，达到更理想的效果。</p>
<p>原理：通过奇妙的步长，插入排序间隔步长的元素，随后逐渐缩短步长至1，实现数列的插入排序。 <a href="http://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>疑问：可以想象到排序间隔步长的数，会逐渐让数列变得有序，提升最后步长为1时标准插入排序的效率。在维基上看到这么</p>
<p>一句话“可能<strong>希尔排序</strong>最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的”注意用词是‘可能’。我的疑问是</p>
<p>这是个正确的命题吗？如何证明呢？看维基上也是由果推因，说是如果不是这样，就不会排序那么快了。可这我感觉还是太牵强了，</p>
<p>哪位大哥发现相关资料，希望能分享出来，不胜感激。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ShellSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; gap = data.Count / &lt;span&gt;2&lt;/span&gt;; gap &amp;gt; &lt;span&gt;0&lt;/span&gt;; gap /= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = gap; i &amp;lt; data.Count; i +=&lt;span&gt; gap)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     temp =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i - gap; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j -=&lt;span&gt; gap)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt;&lt;span&gt; temp)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                             data[j + gap] =&lt;span&gt; data[j];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (j == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                                 data[j] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                             data[j + gap] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：采用的步长是N&#x2F;2，每次取半，直至1。循环内部就是标准的插入排序。</p>
<p>——————</p>
<p>修正：修正后希尔排序才是真正牛叉的希尔啊！感谢@390218462的提出  </p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ShellSortCorrect(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; gap = data.Count / &lt;span&gt;2&lt;/span&gt;; gap &amp;gt; &lt;span&gt;0&lt;/span&gt;; gap /= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = gap; i &amp;lt; data.Count; &lt;span&gt;i++&lt;/span&gt;&lt;span&gt;)      // &lt;span&gt;i+ = gap 改为了 i++</span><br><span class="line">&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     temp =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i - gap; j &amp;gt;= &lt;span&gt;0&lt;/span&gt;; j -=&lt;span&gt; gap)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (data[j] &amp;gt;&lt;span&gt; temp)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                             data[j + gap] =&lt;span&gt; data[j];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (j == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                                 data[j] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;</span><br><span class="line">&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                             data[j + gap] =&lt;span&gt; temp;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625206.jpg" class=""><img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625286.jpg" class="">

<p>——————</p>
<p>这里实现的貌似是最差的希尔排序。主要源于步长的选择。维基上有各种牛叉的“凌波微步”，极限在哪里，</p>
<p>喜欢挑战的同学可以去学习学习。看维基<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>里六种排序的测试，希尔最快，比快速排序还快！！我没实现啊！</p>
<p>只是对于神奇的步长更充满了敬畏。</p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是一种非比较型整数排序。</p>
<p>“非比较型”是什么意思呢？因为它内部使用的是桶排序，而桶排序是非比较型排序。</p>
<p>这里就要说说桶排序了。一个非常有意思的排序。</p>
<h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><p>原理：取一定数量（数列中的最大值）的编好序号的桶，将数列每个数放进编号为它的桶里，然后将不是空的桶依次倒出来，</p>
<p>就组成有序数列了。  <a href="http://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F">维基入口</a></p>
<p>好吧！聪明的人一眼就看出桶排序的破绽了。假设只有两个数1,10000，岂不是要一万个桶！？这确实是个问题啊！我也</p>
<p>没想出解决办法。我起初也以为桶排序就是一个通过牺牲空间来换取时间的排序算法，它不需要比较，所以是非比较型算法。</p>
<p>但看了<a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html">有趣的演示</a>的<a href="http://www.cs.usfca.edu/~galles/visualization/BucketSort.html">桶排序</a>后，发现世界之大，你没有解决，不代表别人没解决，睿智的人总是很多。</p>
<p>1，9999的桶排序实现：new Int[2];总共有两个数，得出最大数9999的位数4，取10的4次幂即10000作为分母，</p>
<p>要排序的数（1或9999）作为分子，并乘以数列总数2，即1*2&#x2F;10000,9999*2&#x2F;10000得到各自的位置0,1，完成排序。</p>
<p>如果是1,10000进行排序的话，上面的做法就需要稍微加一些处理——发现最大数是10的n次幂，就将它作为分母，并</p>
<p>放在数列末尾就好了。</p>
<p>如果是9999,10000进行排序的话，那就需要二维数组了，两个都在位置1，位置0没数。这个时候就需要在放</p>
<p>入每个位置时采用其它排序（比如插入排序）办法对这个位置的多个数排序了。</p>
<h4 id="为基数排序做个过渡，我这里实现了一个个位数桶排序"><a href="#为基数排序做个过渡，我这里实现了一个个位数桶排序" class="headerlink" title="为基数排序做个过渡，我这里实现了一个个位数桶排序"></a>为基数排序做个过渡，我这里实现了一个个位数桶排序</h4><p>涉及到了当重复的数出现的处理。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BucketSortOnlyUnitDigit(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] indexCounter = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.Count; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 indexCounter[data[i]]++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] indexBegin = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 indexBegin[i] = indexBegin[i-1]+&lt;span&gt; indexCounter[i-1];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; tempList =&lt;span&gt; NewInstance(data, data.Count);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.Count; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; number =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 tempList[indexBegin[number]++] =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             data =&lt;span&gt; tempList;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：indexCounter进行对每个数出现的频率的统计。indexBegin存储每个数的起始索引。</p>
<p>比如 1 1 2，indexCounter统计到0个0,2个1,1个2。indexBegin计算出0,1,2的起始索引分别为</p>
<p>0,0,2。当1个1已取出排序，那索引将+1,变为0,1,2。这样就通过提前给重复的数空出位置，解决了</p>
<p>重复的数出现的问题。当然，你也可以考虑用二维数组来解决重复。</p>
<p>下面继续基数排序。</p>
<p>基数排序原理：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p>
<p>取得最大数的位数，从低位开始，每个位上进行桶排序。</p>
<p>实现如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; RadixSort(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; max = data[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; data.Count; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[i] &amp;gt;&lt;span&gt; max)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                     max =&lt;span&gt; data[i];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; digit = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (max / &lt;span&gt;10&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 digit++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 max /= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; digit; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;[] indexCounter = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; tempList =&lt;span&gt; NewInstance(data, data.Count);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; data.Count; j++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; number = (data[j] % Convert.ToInt32(Math.Pow(&lt;span&gt;10&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;))) / Convert.ToInt32(Math.Pow(&lt;span&gt;10&lt;/span&gt;, i));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得出i+1位上的数&lt;/span&gt;</span><br><span class="line">&lt;span&gt;22&lt;/span&gt;                     indexCounter[number]++&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;[] indexBegin = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;1&lt;/span&gt;; k &amp;lt; &lt;span&gt;10&lt;/span&gt;; k++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     indexBegin[k] = indexBegin[k - &lt;span&gt;1&lt;/span&gt;] + indexCounter[k - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; data.Count; k++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; number = (data[k] % Convert.ToInt32(Math.Pow(&lt;span&gt;10&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;))) / Convert.ToInt32(Math.Pow(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;, i));</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     tempList[indexBegin[number]++] =&lt;span&gt; data[k];</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 data =&lt;span&gt; tempList;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>过程解析：得出最大数的位数，从低位开始桶排序。我写的这个实现代码并不简洁，但逻辑更清晰。</p>
<p>后面测试的时候我们就会发现，按理来说这个实现也还行吧！ 但并不如想象的那么快！</p>
<p>循环的次数太多？（统计频率n次+9次计算+n次放到新的数组）*位数。</p>
<p>创建的新实例太多？(new int[10]两次+NewInstance is反射判断创建实例+new int[n])*位数</p>
<h2 id="测试比较"><a href="#测试比较" class="headerlink" title="测试比较"></a>测试比较</h2><p>添加随机数组，数组有序校验，微软Linq排序</p>
<p>代码如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] RandomSet(&lt;span&gt;int&lt;/span&gt; length, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] result = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[length];</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             Random rand = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; result.Length; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 result[i] =&lt;span&gt; rand.Next(max);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; </span><br><span class="line">&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsAscOrdered(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;bool&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data.Count - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (data[i] &amp;gt; data[i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;])</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; </span><br><span class="line">&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; TestMicrosoft(IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             Stopwatch stopwatch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            stopwatch.Start();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; result = data.OrderBy(a =&amp;gt;&lt;span&gt; a).ToList();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            stopwatch.Stop();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; methodName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TestMicrosoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; length =&lt;span&gt; methodName.Length;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;40&lt;/span&gt; - length; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 methodName += &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             Console.WriteLine(methodName +</span><br><span class="line">&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  IsAscOrdered:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + IsAscOrdered(result) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Time:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; stopwatch.Elapsed.TotalSeconds);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; </span><br><span class="line">&lt;span&gt;38&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>测试主体如下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] aa = RandomSet(&lt;span&gt;50000&lt;/span&gt;, &lt;span&gt;99999&lt;/span&gt;&lt;span&gt;);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int[] aa = OrderedSet(5000);&lt;/span&gt;</span><br><span class="line">&lt;span&gt; 5&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Array Length:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; aa.Length);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)SelectSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)BubbleSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)BubbleSortImprovedWithFlag, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)BubbleCocktailSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)InsertSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)InsertSortImprovedWithBinarySearch, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)QuickSortStrict, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)QuickSortRelax, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)QuickSortRelaxImproved, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             RunTheMethod((Func&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;, IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)MergeSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)ShellSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             RunTheMethod((Func&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;, IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)RadixSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             RunTheMethod((Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt;)HeapSort, aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             TestMicrosoft(aa.Clone() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[]);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            Console.Read();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; </span><br><span class="line">&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RunTheMethod(Func&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;, IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt; method, IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             Stopwatch stopwatch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            stopwatch.Start();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; result =&lt;span&gt; method(data);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            stopwatch.Stop();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; methodName =&lt;span&gt; method.Method.Name;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; length =&lt;span&gt; methodName.Length;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;40&lt;/span&gt; - length; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 methodName += &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             Console.WriteLine(methodName +</span><br><span class="line">&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  IsAscOrdered:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + IsAscOrdered(result) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Time:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; stopwatch.Elapsed.TotalSeconds);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; </span><br><span class="line">&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RunTheMethod(Action&amp;lt;IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;gt; method, IList&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; data)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             Stopwatch stopwatch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            stopwatch.Start();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            method(data);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            stopwatch.Stop();</span><br><span class="line">&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; methodName =&lt;span&gt; method.Method.Name;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; length =&lt;span&gt; methodName.Length;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;40&lt;/span&gt; - length; i++&lt;span&gt;)</span><br><span class="line">&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            &#123;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 methodName += &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            &#125;</span><br><span class="line">&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             Console.WriteLine(methodName +</span><br><span class="line">&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  IsAscOrdered:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + IsAscOrdered(data) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Time:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; stopwatch.Elapsed.TotalSeconds);</span><br><span class="line">&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625066.gif" class="" title="复制代码">

<p>剩余代码折叠在此处</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625323.gif" class=""> View Code

<p>测试设备：win8(64位)，i7-3630QM,8G内存，vs2012</p>
<p>测试结果：</p>
<p>100000,50000,10000,5000,1000,100依次是：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625384.jpg" class="">

<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625426.jpg" class=""><img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625487.jpg" class=""><img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625541.jpg" class=""><img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625607.jpg" class=""><img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625659.jpg" class="">

<p>结果分析：可以看出在大数组的时候，微软自带排序更接近快速排序。而当数组变小时，速度却没有明显提升，甚至变得更慢，</p>
<p>比如1000和100。可以推断出在数组足够小的时候，比较已经不是影响这个方法主要因素。而根据它对大数组的表现。我们可以</p>
<p>推断出它应该用的是快速排序。反编译验证下：</p>
<img src="/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8%E7%A7%8D%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84C%E5%AE%9E%E7%8E%B0/IMG-20250704185625705.jpg" class="">

<p>在System.Linq.EnumerableSorter下。有兴趣的同学可以去看下详细实现。</p>
<p>维基上也有个测试。硬件没我的好。时间是我测试结果时间的几百倍。有兴趣的同学可以比较下。</p>
<p>在上面的测试中，我们可以看到快速最快，归并其次，冒泡最慢（维基上是希尔最快，估计使用的是某种神奇的步长）。</p>
<p>在我这里，以前实现的希尔还不如二分查找优化版的快，修正后希尔快了相当多，上面测试的希尔排序是以前错误的实现。</p>
<p>修正后的实现测试效果请点击右侧导航到希尔排序查看。希尔排序是一种神奇又有潜力的算法。步长不好会很挫！</p>
<p>而基数排序却是比平均时间复杂度为o(nlogn)的堆排序，归并排序，快速排序还要慢的，虽然它的平均时间复杂度为o(n)。</p>
<p>冒泡标识优化版对随机数列结果优化不明显，鸡尾酒版优化可以看到，但也不是很厉害。</p>
<p>插入排序二分查找优化版优化比较明显。我优化的快速排序QuickSortRelaxImproved优化也不明显。</p>
<p>以上是随机数列的测试结果，最大值为99999。</p>
<p>而对于有序数列，这些方法表现又会如何呢？</p>
<p>我这里就不演示了。<a href="http://www.cnblogs.com/fatbird/p/SortAlgorithm.html">本文</a>末尾会附上demo，大家可以自行测试。</p>
<p>有意思的是:</p>
<p>我在测试有序数列的时候，QuickSortStrict方法栈溢出了（stack overflow exception）。这个异常</p>
<p>是让我去stackoverflow搜寻答案吗？哈哈！我确信我的方法不是无限循环。跳过一堆链接。。。我是</p>
<p>在测试10000个数排序的时候发生的错误。我跟踪后发现大约在9400多次递归的时候，栈溢出。找啊找</p>
<p>终于找见了一个类似的<a href="http://stackoverflow.com/questions/4106708/runtime-exception-recursion-too-deep">问题</a>。上面说如果一个递归9000多次而没有返回值，也会报栈溢出的。而这个方法</p>
<p>对于10000个有序数列，确实每次减少一个数地递归，次数会超过限制。</p>
<p>我的算法理论不怎么好，对于时间复杂度和空间复杂度，还有稳定度，搞得也不怎么清楚，只知道个大致的  </p>
<p>意思。各位要笔试面试的朋友可以去<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.AE.80.E8.A6.81.E6.AF.94.E8.BE.83">维基百科这个表</a>来了解学习。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我觉得使用IList<int>更贴近数列，更能展现基本的操作。所以我的实现中都没有将它强制转化为List<int></p>
<p>或者int[]来调用微软封装的方法。这样说来，题目说C#实现倒快有点名不副实了。不过这样却也方便了其它语言</p>
<p>朋友。比如将我这篇博文里的实现随便改改，就可以说是另一个语言版本的8种排序算法了。哈哈！在这里，</p>
<p>我想说下这次学习排序对我的意义：老久不怎么动脑了，突然动起来，磨磨唧唧地得出结果，最后倒也有点成就感！</p>
<p>在学习过程中，经常会脑子转不过弯，想不通的，只是走在路上或者睡觉前突然灵感一现，有点小惊喜的感觉！</p>
<p>这大概就是进步的特征吧！哈哈！这次写demo+写博客花费了不少时间，倒也收获颇多，尤其在我将8种</p>
<p>排序都实现之前，没进行过一次测试，全部实现完成后，测试时各种索引越界+无限循环+各种问题，没几个</p>
<p>能跑通的，到后来的几乎都没有问题，也算是锻炼了思维，找出错原因的能力。本篇是自我学习的一个总结，</p>
<p>要学习及锻炼的园友，还望一定自己实现一下，可以和我的比较一下，解除疑惑或者提出改进。</p>
<h4 id="主要参考：维基百科，有趣的演示"><a href="#主要参考：维基百科，有趣的演示" class="headerlink" title="主要参考：维基百科，有趣的演示"></a>主要参考：<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">维基百科</a>，<a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html">有趣的演示</a></h4><h4 id="Demo源码"><a href="#Demo源码" class="headerlink" title="Demo源码"></a><a href="https://files.cnblogs.com/fatbird/SortAlgorithmDemo.zip">Demo源码</a></h4><p>PS:我打算三月份去广州发展，主要会Asp.net mvc+jquery（不介意学习新的技术[除了webform]及语言[除了java]）。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp排序算法小结</title>
    <url>/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/CSharp%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>算法这个东西其实在开发中很少用到，特别是web开发中，但是算法也很重要，因为任何的程序，任何的软件，都是由很多的算法和数据结构组成的。但是这不意味着算法对于每个软件设计人员的实际工作都是很重要的。每个项目特点和需求特殊也导致算法运用场景上不同。但是个人觉得算法运用的好的话会给自己在程序设计的时候提供比较好的思路。下面就对一些排序算法小结一下，就当做自己的一个笔记吧。</p>
<p><strong>插入排序</strong></p>
<p> <strong>1.简介</strong></p>
<p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<p><strong>2.算法描述</strong></p>
<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：<br>1.从第一个元素开始，该元素可以认为已经被排序<br>2.取出下一个元素，在已经排序的元素序列中从后向前扫描<br>3.如果该元素（已排序）大于新元素，将该元素移到下一位置<br>4.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置<br>5.将新元素插入到该位置后<br>6.重复步骤2~5<br>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找排序。</p>
<p><strong>3.使用插入排序为一列数字进行排序的过程</strong> </p>
<p><img src="https://images0.cnblogs.com/blog/373130/201402/181030498429191.gif"></p>
<p><img src="https://images0.cnblogs.com/blog/373130/201402/181031003601771.gif"></p>
<p><strong>最差时间复杂度 <img src="http://upload.wikimedia.org/math/c/d/6/cd641c6cabc83e0f7ff510bf812feca1.png" alt="O(n^{2})"></strong> </p>
<p>最优时间复杂度 <img src="http://upload.wikimedia.org/math/7/b/a/7ba55e7c64a9405a0b39a1107e90ca94.png" alt="O(n)"></p>
<p>平均时间复杂度<img src="http://upload.wikimedia.org/math/c/d/6/cd641c6cabc83e0f7ff510bf812feca1.png" alt="O(n^{2})"></p>
<p><strong>4.C#实现</strong></p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<pre><code>    /// &lt;summary&gt;
    /// 插入排序 /// &lt;/summary&gt;
    public class InsertionSorter
    &#123; public void Sort(int\[\] list)
        &#123; for (int i = 1; i &lt; list.Length; ++i)
            &#123; int t = list\[i\]; int j = i; while ((j &gt; 0) &amp;&amp; (list\[j - 1\] &gt; t))
                &#123;
                    list\[j\] \= list\[j - 1\]; \--j;
                &#125;
                list\[j\] \= t;
            &#125;

        &#125;
    &#125;
</code></pre>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>数组</p>
<p>int[] iArrary &#x3D; new int[] { 1, 5, 3, 6, 10, 55, 9, 2, 87, 12, 34, 75, 33, 47 };</p>
<p><strong>希尔排序</strong></p>
<p> <strong>1.简介</strong></p>
<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
<p><strong>2.算法实现</strong></p>
<p>原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。V. Pratt的书[1] 对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。<br>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。<br>假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。<br>一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用i +&#x3D; step_size而不是i++）。</p>
<p><strong>3.排序过程</strong></p>
<p><img src="https://images0.cnblogs.com/blog/373130/201402/181058308243697.gif"></p>
<p>最差时间复杂度 根据步长串行的不同而不同。<img src="http://upload.wikimedia.org/math/2/0/0/20062c989c6b1067c07dfdeb30efbfb7.png" alt="O(n\log^2 n)"></p>
<p>最优时间复杂度 O(<em>n</em>)</p>
<p>平均时间复杂度  根据步长串行的不同而不同。</p>
<p><strong>4.C#实现</strong></p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<pre><code>    /// &lt;summary&gt;
    /// 希尔排序 /// &lt;/summary&gt;
    public class ShellSorter
    &#123; public void Sort(int\[\] list)
        &#123; int inc; for (inc = 1; inc &lt;= list.Length / 9; inc = 3 \* inc + 1) ; for (; inc &gt; 0; inc /= 3)
            &#123; for (int i = inc + 1; i &lt;= list.Length; i += inc)
                &#123; int t = list\[i - 1\]; int j = i; while ((j &gt; inc) &amp;&amp; (list\[j - inc - 1\] &gt; t))
                    &#123;
                        list\[j \- 1\] = list\[j - inc - 1\];
                        j \-= inc;
                    &#125;
                    list\[j \- 1\] = t;
                &#125;
            &#125;
        &#125;
    &#125;
</code></pre>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p><strong>选择排序</strong></p>
<p> 1.简介</p>
<p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>
<p>2.实现过程</p>
<p><img src="https://images0.cnblogs.com/blog/373130/201402/181110130383862.gif"></p>
<p>最差时间复杂度 <em>О(n²)</em></p>
<p><em>最优时间复杂度 <em>О(n²)</em></em></p>
<p>平均时间复杂度 <em>О(n²)</em></p>
<p><strong>3.C#实现</strong></p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<pre><code>    /// &lt;summary&gt;
    /// 选择排序 /// &lt;/summary&gt;
    public class SelectionSorter
    &#123; // public enum comp &#123;COMP\_LESS,COMP\_EQUAL,COMP\_GRTR&#125;;
        private int min; // private int m=0;
        public void Sort(int\[\] list)
        &#123; for (int i = 0; i &lt; list.Length - 1; ++i)
            &#123;
                min \= i; for (int j = i + 1; j &lt; list.Length; ++j)
                &#123; if (list\[j\] &lt; list\[min\])
                        min \= j;
                &#125; int t = list\[min\];
                list\[min\] \= list\[i\];
                list\[i\] \= t; // Console.WriteLine(&quot;&#123;0&#125;&quot;,list\[i\]);
</code></pre>
<p> }</p>
<pre><code>        &#125;
    &#125;
</code></pre>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p><strong>冒泡排序</strong></p>
<p> <strong>1.简介</strong></p>
<p>冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>冒泡排序对n个项目需要O(n^{2})的比较次数，且可以原地排序。尽管这个算法是最简单了解和实作的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。<br>冒泡排序是与插入排序拥有相等的执行时间，但是两种法在需要的交换次数却很大地不同。在最坏的情况，冒泡排序需要O(n^{2})次交换，而插入排序只要最多O(n)交换。冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地执行（O(n^{2})），而插入排序在这个例子只需要O(n)个运算。因此很多现代的算法教科书避免使用冒泡排序，而用插入排序取代之。冒泡排序如果能在内部循环第一次执行时，使用一个旗标来表示有无需要交换的可能，也有可能把最好的复杂度降低到O(n)。在这个情况，在已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序和比较大小反过来，也可以稍微地改进效率。有时候称为往返排序，因为算法会从数列的一端到另一端之间穿梭往返。</p>
<p><strong>2.算法实现</strong><br>1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </p>
<p><strong>3.实现过程</strong></p>
<p><img src="https://images0.cnblogs.com/blog/373130/201402/181136161673239.gif"></p>
<p>最差时间复杂度 <img src="http://upload.wikimedia.org/math/c/d/6/cd641c6cabc83e0f7ff510bf812feca1.png" alt="O(n^{2})"></p>
<p>最优时间复杂度 <img src="http://upload.wikimedia.org/math/7/b/a/7ba55e7c64a9405a0b39a1107e90ca94.png" alt="O(n)"></p>
<p>平均时间复杂度 <img src="http://upload.wikimedia.org/math/c/d/6/cd641c6cabc83e0f7ff510bf812feca1.png" alt="O(n^{2})"></p>
<p><strong>4.C#实现</strong></p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<pre><code>   /// &lt;summary&gt;
    /// 冒泡排序 /// &lt;/summary&gt;
    public class bubblesort
    &#123; public void BubbleSort(int\[\] R)
        &#123; int i, j, temp; //交换标志 
            bool exchange; for (i = 0; i &lt; R.Length; i++) //最多做R.Length-1趟排序 
</code></pre>
<p> {<br>                    exchange = false; &#x2F;&#x2F;本趟排序开始前，交换标志应为假<br>                    for (j &#x3D; R.Length - 2; j &gt;&#x3D; i; j–)<br>                    { if (R[j + 1] &lt; R[j])　&#x2F;&#x2F;交换条件<br> {<br>                            temp = R[j + 1];<br>                            R[j + 1] &#x3D; R[j];<br>                            R[j] = temp;<br>                            exchange = true; &#x2F;&#x2F;发生了交换，故将交换标志置为真<br> }<br>                    } if (!exchange) &#x2F;&#x2F;本趟排序未发生交换，提前终止算法<br> { break;<br>                    }<br>                }<br>            }<br>        }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C#排序算法的比较</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/CSharp%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h1 id="C-排序算法的比较"><a href="#C-排序算法的比较" class="headerlink" title="C#排序算法的比较"></a>C#排序算法的比较</h1><p><strong>首先通过图表比较不同排序算法的时间复杂度和稳定性。</strong></p>
<table><tbody><tr><td><p><strong>排序方法</strong></p></td><td><p><strong>平均时间</strong></p></td><td><p><strong>最坏情况</strong></p></td><td><p><strong>最好情况</strong></p></td><td><p><strong>辅助空间</strong></p></td><td><p><strong>稳定性</strong></p></td></tr><tr><td>直接插入排序</td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n)</p></td><td><p>O(1)</p></td><td>是</td></tr><tr><td>冒泡排序</td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n)</p></td><td><p>O(1)</p></td><td>是</td></tr><tr><td>简单选择排序</td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(1)</p></td><td>是</td></tr><tr><td>希尔排序</td><td>-</td><td><p>O(nlog<sub>2</sub>n)~O(n<sup>2</sup>)</p></td><td><p>O(nlog<sub>2</sub>n)~O(n<sup>2</sup>)</p></td><td><p>O(1)</p></td><td>否</td></tr><tr><td>快速排序</td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(n<sup>2</sup>)</p></td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(log<sub>2</sub>n)</p></td><td>否</td></tr><tr><td>堆排序</td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(1)</p></td><td>否</td></tr><tr><td>2-路归并排序</td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(nlog<sub>2</sub>n)</p></td><td><p>O(n)</p></td><td>是</td></tr><tr><td>基数排序</td><td>O(d(n + rd))</td><td>O(d(n + rd))</td><td>O(d(n + rd))</td><td>O(rd)</td><td>是</td></tr></tbody></table>

<p>注：1. 算法的时间复杂度一般情况下指最坏情况下的渐近时间复杂度。</p>
<p>        2. 排序算法的稳定性会对多关键字排序产生影响。</p>
<p><strong>下面通过C#代码说明不同的排序算法</strong></p>
<p><strong>插入排序</strong></p>
<p><strong>时间复杂度：平均情况—O(n<sup><span>2</span></sup>) 最坏情况—O(n<sup><span>2</span></sup>) 辅助空间：O(1) 稳定性：稳定</strong></p>
<p>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>
<p><strong>希尔排序(shell)</strong></p>
<p><strong>时间复杂度：理想情况—O(nlog<sub><span>2</span></sub>n) 最坏情况—O(n<sup><span>2</span></sup>) 稳定性：不稳定</strong></p>
<p>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<p><strong>冒泡排序</strong></p>
<p><strong>时间复杂度：平均情况—O(n<sup><span>2</span></sup>) 最坏情况—O(n<sup><span>2</span></sup>) 辅助空间：O(1) 稳定性：稳定</strong></p>
<p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>
<p><strong>快速排序</strong></p>
<p><strong>时间复杂度：平均情况—O(nlog<sub><span>2</span></sub>n) 最坏情况—O(n<sup><span>2</span></sup>) 辅助空间：O(log<sub><span>2</span></sub>n) 稳定性：不稳定</strong></p>
<p>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;&#x3D; a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;&#x3D; j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11， 现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。</p>
<p><strong>选择排序</strong></p>
<p><strong>时间复杂度：平均情况—O(n<sup><span>2</span></sup>) 最坏情况—O(n<sup><span>2</span></sup>) 辅助空间：O(1) 稳定性：不稳定</strong></p>
<p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>
<p><strong>堆排序</strong></p>
<p><strong>时间复杂度：平均情况—O(nlog<sub><span>2</span></sub>n) 最坏情况—O(nlog<sub><span>2</span></sub>n) 辅助空间：O(1) 稳定性：不稳定</strong></p>
<p>我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n的序列，堆排序的过程是从第n&#x2F;2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n&#x2F;2-1, n&#x2F;2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n&#x2F;2个父节点交换把后面一个元素交换过去了，而第n&#x2F;2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法</p>
<p><strong>归并排序</strong></p>
<p><strong>时间复杂度：平均情况—O(nlog<sub><span>2</span></sub>n) 最坏情况—O(nlog<sub><span>2</span></sub>n) 辅助空间：O(n) 稳定性：稳定</strong></p>
<p>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C#经典排序算法大全</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/CSharp%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="C-经典排序算法大全"><a href="#C-经典排序算法大全" class="headerlink" title="C# 经典排序算法大全"></a>C# 经典排序算法大全</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>文章浏览阅读84次。C# 经典排序算法大全选择排序using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace sorter{    public class SelectionSorter    {        private int min;       …_c# case复杂排序</p>
</blockquote>
<hr>
<h2 id="C-经典排序算法大全-1"><a href="#C-经典排序算法大全-1" class="headerlink" title="C# 经典排序算法大全"></a>C# 经典排序算法大全</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">sorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectionSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> min;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length - <span class="number">1</span>; ++i)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">min = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; arr.Length; ++j)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">min = j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> t = arr[min];</span><br><span class="line"></span><br><span class="line">arr[min] = arr[i];</span><br><span class="line"></span><br><span class="line">arr[i] = t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arrInt = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">SelectionSorter selSor = <span class="keyword">new</span> SelectionSorter();</span><br><span class="line"></span><br><span class="line">selSor.Sort(arrInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arrInt)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">sorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EbullitionSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i, j, temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((j &lt; arr.Length) &amp;&amp; (!done))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.Length - j; i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">temp = arr[i];</span><br><span class="line"></span><br><span class="line">arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr[i + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">j++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arrInt = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">EbullitionSorter selSor = <span class="keyword">new</span> EbullitionSorter();</span><br><span class="line"></span><br><span class="line">selSor.Sort(arrInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arrInt)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高速排序"><a href="#高速排序" class="headerlink" title="高速排序"></a>高速排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">sorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QuickSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> l, <span class="keyword">ref</span> <span class="built_in">int</span> r</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> temp;</span><br><span class="line"></span><br><span class="line">temp = l;</span><br><span class="line"></span><br><span class="line">l = r;</span><br><span class="line"></span><br><span class="line">r = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">int</span>[] list, <span class="built_in">int</span> low, <span class="built_in">int</span> high</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> pivot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> l, r;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (high &lt;= low)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (high == low + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (list[low] &gt; list[high])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">swap(<span class="keyword">ref</span> list[low], <span class="keyword">ref</span> list[high]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">pivot = list[mid];</span><br><span class="line"></span><br><span class="line">swap(<span class="keyword">ref</span> list[low], <span class="keyword">ref</span> list[mid]);</span><br><span class="line"></span><br><span class="line">l = low + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">r = high;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; list[l] &lt; pivot)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">l++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (list[r] &gt;= pivot)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">r--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &lt; r)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">swap(<span class="keyword">ref</span> list[l], <span class="keyword">ref</span> list[r]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (l &lt; r);</span><br><span class="line"></span><br><span class="line">list[low] = list[r];</span><br><span class="line"></span><br><span class="line">list[r] = pivot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (low + <span class="number">1</span> &lt; r)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Sort(list, low, r - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r + <span class="number">1</span> &lt; high)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Sort(list, r + <span class="number">1</span>, high);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arrInt = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">QuickSorter selSor = <span class="keyword">new</span> QuickSorter();</span><br><span class="line"></span><br><span class="line">selSor.Sort(arrInt, <span class="number">0</span>, arrInt.Length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arrInt)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">sorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InsertionSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; arr.Length; i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> t = arr[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> j = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((j &gt; <span class="number">0</span>) &amp;&amp; (arr[j - <span class="number">1</span>] &gt; t))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">--j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[j] = t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arrInt = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">InsertionSorter selSor = <span class="keyword">new</span> InsertionSorter();</span><br><span class="line"></span><br><span class="line">selSor.Sort(arrInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arrInt)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">sorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShellSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> inc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (inc = <span class="number">1</span>; inc &lt;= arr.Length / <span class="number">9</span>; inc = <span class="number">3</span> * inc + <span class="number">1</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; inc &gt; <span class="number">0</span>; inc /= <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = inc + <span class="number">1</span>; i &lt;= arr.Length; i += inc)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> t = arr[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> j = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((j &gt; inc) &amp;&amp; (arr[j - inc - <span class="number">1</span>] &gt; t))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">arr[j - <span class="number">1</span>] = arr[j - inc - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">j -= inc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[j - <span class="number">1</span>] = t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arrInt = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">ShellSorter selSor = <span class="keyword">new</span> ShellSorter();</span><br><span class="line"></span><br><span class="line">selSor.Sort(arrInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arrInt)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Merge</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Function</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> Groups;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> CopyGroups;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> mergerows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] Array27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Function</span>(<span class="params"><span class="built_in">int</span> length</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Array27 = <span class="keyword">new</span> <span class="built_in">int</span>[length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line"></span><br><span class="line">Array27[i] = ran.Next(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToMergeSort</span>()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">MergeSort(Array27);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToRecursiveMergeSort</span>()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">RecursiveMergeSort(Array27, <span class="number">0</span>, Array27.Length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToNaturalMergeSort</span>()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">NaturalMergeSort(Array27);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RecursiveMergeSort</span>(<span class="params"><span class="built_in">int</span>[] Array, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">RecursiveMergeSort(Array, left, middle);</span><br><span class="line"></span><br><span class="line">RecursiveMergeSort(Array, middle + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">MergeOne(Array, left, middle, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeOne</span>(<span class="params"><span class="built_in">int</span>[] Array, <span class="built_in">int</span> left, <span class="built_in">int</span> middle, <span class="built_in">int</span> right</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> leftindex = left;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> rightindex = middle + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] merge = <span class="keyword">new</span> <span class="built_in">int</span>[right + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (leftindex &lt;= middle &amp;&amp; rightindex &lt;= right)</span><br><span class="line"></span><br><span class="line">merge[index++] = (Array[leftindex] - Array[rightindex]) &gt;= <span class="number">0</span> ? Array[rightindex++] : Array[leftindex++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (leftindex &lt;= middle)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = leftindex; i &lt;= middle; i++)</span><br><span class="line"></span><br><span class="line">merge[index++] = Array[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rightindex &lt;= right)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = rightindex; i &lt;= right; i++)</span><br><span class="line"></span><br><span class="line">merge[index++] = Array[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = left; i &lt;= right; i++)</span><br><span class="line"></span><br><span class="line">Array[i] = merge[index++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeSort</span>(<span class="params"><span class="built_in">int</span>[] Array</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] merge = <span class="keyword">new</span> <span class="built_in">int</span>[Array.Length];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> P = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> ENumb = (<span class="built_in">int</span>)Math.Pow(<span class="number">2</span>, P);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ENumb &lt; Array.Length)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> TorFAndrightindex = index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TorFAndrightindex &lt;= Array.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">MergeTwo(Array, merge, index, ENumb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">index += <span class="number">2</span> * ENumb;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">P++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeTwo</span>(<span class="params"><span class="built_in">int</span>[] Array, <span class="built_in">int</span>[] merge, <span class="built_in">int</span> index, <span class="built_in">int</span> ENumb</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> left = index;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> middle = left + ENumb - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (middle &gt;= Array.Length)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">middle = index;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> mergeindex = index;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> right;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> middleTwo = (index + ENumb - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">right = index + ENumb + ENumb - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right &gt;= Array.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">right = Array.Length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= middle &amp;&amp; middleTwo &lt;= right)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">merge[mergeindex++] = Array[left] &gt;= Array[middleTwo] ? Array[middleTwo++] : Array[left++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left &lt;= middle)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= middle &amp;&amp; mergeindex &lt; merge.Length)</span><br><span class="line"></span><br><span class="line">merge[mergeindex++] = Array[left++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (middleTwo &lt;= right)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (middleTwo &lt;= right)</span><br><span class="line"></span><br><span class="line">merge[mergeindex++] = Array[middleTwo++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right + <span class="number">1</span> &gt;= Array.Length)</span><br><span class="line"></span><br><span class="line">Copy(Array, merge);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NaturalMergeSort</span>(<span class="params"><span class="built_in">int</span>[] Array</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[,] PointsSymbol = LinearPoints(Array);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PointsSymbol[<span class="number">0</span>, <span class="number">1</span>] == Array.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">NaturalMerge(Array, PointsSymbol);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NaturalMerge</span>(<span class="params"><span class="built_in">int</span>[] Array, <span class="built_in">int</span>[,] PointsSymbol</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> left;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> right;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> leftend;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> rightend;</span><br><span class="line"></span><br><span class="line">mergerows = GNumberTwo(Groups);</span><br><span class="line"></span><br><span class="line">CopyGroups = Groups;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] TempArray = <span class="keyword">new</span> <span class="built_in">int</span>[Array.Length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[,] TempPointsSymbol = <span class="keyword">new</span> <span class="built_in">int</span>[mergerows, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> row = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (row != CopyGroups - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">left = PointsSymbol[row, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">leftend = PointsSymbol[row, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">right = PointsSymbol[row + <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">rightend = PointsSymbol[row + <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">MergeThree(Array, TempArray, left, leftend, right, rightend);</span><br><span class="line"></span><br><span class="line">MergePointSymbol(PointsSymbol, TempPointsSymbol, row);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">默认剩下的单独一个子数组已经虚拟合并。然后Copy进TempArray。</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> TempRow = PointsSymbol[row, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> TempCol = PointsSymbol[row, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (TempRow &lt;= TempCol)</span><br><span class="line"></span><br><span class="line">TempArray[TempRow] = Array[TempRow++];</span><br><span class="line"></span><br><span class="line">TempPointsSymbol[row / <span class="number">2</span>, <span class="number">0</span>] = PointsSymbol[row, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">TempPointsSymbol[row / <span class="number">2</span>, <span class="number">1</span>] = PointsSymbol[row, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">row += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TempPointsSymbol[<span class="number">0</span>, <span class="number">1</span>] == Array.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (row &lt;= CopyGroups - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Copy(Array, TempArray);</span><br><span class="line"></span><br><span class="line">UpdatePointSymbol(PointsSymbol, TempPointsSymbol, row);</span><br><span class="line"></span><br><span class="line">mergerows = GNumber(mergerows);</span><br><span class="line"></span><br><span class="line">CopyGroups = GNumberTwo(CopyGroups);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PointsSymbol[<span class="number">0</span>, <span class="number">1</span>] == Array.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GNumber</span>(<span class="params"><span class="built_in">int</span> Value</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Value % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Value /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">Value -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GNumberTwo</span>(<span class="params"><span class="built_in">int</span> Value</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Value % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">mergerows = Value / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">mergerows = Value / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mergerows;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeThree</span>(<span class="params"><span class="built_in">int</span>[] Array, <span class="built_in">int</span>[] Temp, <span class="built_in">int</span> left, <span class="built_in">int</span> leftend, <span class="built_in">int</span> right, <span class="built_in">int</span> rightend</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> index = left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= leftend &amp;&amp; right &lt;= rightend)</span><br><span class="line"></span><br><span class="line">Temp[index++] = Array[left] &gt;= Array[right] ? Array[right++] : Array[left++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= leftend)</span><br><span class="line"></span><br><span class="line">Temp[index++] = Array[left++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (right &lt;= rightend)</span><br><span class="line"></span><br><span class="line">Temp[index++] = Array[right++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergePointSymbol</span>(<span class="params"><span class="built_in">int</span>[,] PointsSymbol, <span class="built_in">int</span>[,] TempPointsSymbol, <span class="built_in">int</span> row</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> rowindex = row / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">TempPointsSymbol[rowindex, <span class="number">0</span>] = PointsSymbol[row, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">TempPointsSymbol[rowindex, <span class="number">1</span>] = PointsSymbol[row + <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdatePointSymbol</span>(<span class="params"><span class="built_in">int</span>[,] PointsSymbol, <span class="built_in">int</span>[,] TempPointsSymbol, <span class="built_in">int</span> rows</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> row = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; row &lt; TempPointsSymbol.GetLength(<span class="number">0</span>); row++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; <span class="number">2</span>; col++)</span><br><span class="line"></span><br><span class="line">PointsSymbol[row, col] = TempPointsSymbol[row, col];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; row &lt; PointsSymbol.GetLength(<span class="number">0</span>); row++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> col2 = <span class="number">0</span>; col2 &lt; <span class="number">2</span>; col2++)</span><br><span class="line"></span><br><span class="line">PointsSymbol[row, col2] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">补剩下的index组，</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; int row3 &#x3D; TempPointsSymbol.GetLength(0); &#x2F;&#x2F; PointsSymbol[row3, 0] &#x3D; PointsSymbol[rows, 0]; &#x2F;&#x2F; PointsSymbol[row3, 1] &#x3D; PointsSymbol[rows, 1]; &#x2F;&#x2F; &#x2F;&#x2F;后面的清零 &#x2F;&#x2F; for (int row4 &#x3D; row3 + 1; row4 &lt; PointsSymbol.GetLength(0); row4++) &#x2F;&#x2F; { &#x2F;&#x2F; for (int col4 &#x3D; 0; col4 &lt; 2; col4++) &#x2F;&#x2F; PointsSymbol[row4, col4] &#x3D; 0; &#x2F;&#x2F; } &#x2F;&#x2F;} } public int[,] LinearPoints(int[] Array) { Groups &#x3D; 1; int StartPoint &#x3D; 0; int row &#x3D; 0; int col &#x3D; 0; &#x2F;&#x2F;最糟糕的情况就是有Array.Length行。 int[,] PointsSet &#x3D; new int[Array.Length, 2]; &#x2F;&#x2F;线性扫描Array，划分数组 &#x2F;&#x2F;初始前index&#x3D;0 PointsSet[row, col] &#x3D; 0; do { &#x2F;&#x2F;推断升序子数组终于的index开关 bool Judge &#x3D; false; &#x2F;&#x2F;从Array第二个数推断是否要结束或者是否是升序子数组. while (++StartPoint &lt; Array.Length &amp;&amp; Array[StartPoint] &lt; Array[StartPoint - 1]) { &#x2F;&#x2F;打开第一个升序子数组结束的index开关 Judge &#x3D; true; &#x2F;&#x2F;又一次開始第二个升序子数组的前index PointsSet[row, col + 1] &#x3D; StartPoint - 1; &#x2F;&#x2F;计算子数组个数 Groups++; &#x2F;&#x2F;换行记录自然子数组的index row++; break; &#x2F;&#x2F;–StartPoint; } &#x2F;&#x2F;升序子数组结束index if (Judge) PointsSet[row, col] &#x3D; StartPoint; &#x2F;&#x2F;else &#x2F;&#x2F; –StartPoint; } while (StartPoint &lt; Array.Length); &#x2F;&#x2F;终于index&#x3D;StartPoint - 1，可是糟糕情况下还有剩余若干行为： 0,0 … PointsSet[row, col + 1] &#x3D; StartPoint - 1; &#x2F;&#x2F;调用展示方法 DisplaySubarray(Array, PointsSet, Groups); return PointsSet; } public void DisplaySubarray(int[] Array, int[,] PointsSet, int Groups) { Console.WriteLine(“Subarray is {0}:”, Groups); &#x2F;&#x2F;展示子数组的前后index for (int r &#x3D; 0; r &lt; Groups; r++) { for (int c &#x3D; 0; c &lt; PointsSet.GetLength(1); c++) { Console.Write(PointsSet[r, c]); if (c &lt; PointsSet.GetLength(1) - 1) Console.Write(“,”); } Console.Write(“\t\t”); } Console.WriteLine(); &#x2F;&#x2F;展示分出的子数组 for (int v &#x3D; 0; v &lt; Groups; v++) { int i &#x3D; 1; for (int r &#x3D; PointsSet[v, 0]; r &lt;&#x3D; PointsSet[v, 1]; r++) { Console.Write(Array[r] + “ “); i++; } if (i &lt;&#x3D; 3) Console.Write(“\t\t”); else Console.Write(“\t”); if (PointsSet[v, 1] &#x3D;&#x3D; Array.Length) break; } } public void Copy(int[] Array, int[] merge) { &#x2F;&#x2F;一部分排好序的元素替换掉原来Array中的元素 for (int i &#x3D; 0; i &lt; Array.Length; i++) { Array[i] &#x3D; merge[i]; } } &#x2F;&#x2F;输出 public override string ToString() { string temporary &#x3D; string.Empty; foreach (var element in Array27) temporary +&#x3D; element + “ “; temporary +&#x3D; “\n”; return temporary; } } class Program { static void Main(string[] args) { while (true) { Console.WriteLine(“请选择：”); Console.WriteLine(“1.归并排序（非递归）”); Console.WriteLine(“2.归并排序（递归）”); Console.WriteLine(“3.归并排序（自然合并）”); Console.WriteLine(“4.退出”); int Arraynum &#x3D; Convert.ToInt32(Console.ReadLine()); switch (Arraynum) { case 4: Environment.Exit(0); break; case 1: Console.WriteLine(“Please Input Array Length”); int Leng271 &#x3D; Convert.ToInt32(Console.ReadLine()); Function obj1 &#x3D; new Function(Leng271); Console.WriteLine(“The original sequence:”); Console.WriteLine(obj1); Console.WriteLine(“‘MergeSort’ Finaly Sorting Result:”); obj1.ToMergeSort(); Console.WriteLine(obj1); break; case 2: Console.WriteLine(“Please Input Array Length”); int Leng272 &#x3D; Convert.ToInt32(Console.ReadLine()); Function obj2 &#x3D; new Function(Leng272); Console.WriteLine(“The original sequence:”); Console.WriteLine(obj2); Console.WriteLine(“‘RecursiveMergeSort’ Finaly Sorting Result:”); obj2.ToRecursiveMergeSort(); Console.WriteLine(obj2); break; case 3: Console.WriteLine(“Please Input Array Length”); int Leng273 &#x3D; Convert.ToInt32(Console.ReadLine()); Function obj3 &#x3D; new Function(Leng273); Console.WriteLine(“The original sequence:”); Console.WriteLine(obj3); obj3.ToNaturalMergeSort(); Console.WriteLine(); Console.WriteLine(); Console.WriteLine(“‘NaturalMergeSort’ Finaly Sorting Result:”); Console.WriteLine(obj3); break; } } } } }</p>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Merge</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RadixSorter</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">RadixSort</span>(<span class="params"><span class="built_in">int</span>[] ArrayToSort, <span class="built_in">int</span> digit</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">1</span>; k &lt;= digit; k++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] tmpArray = <span class="keyword">new</span> <span class="built_in">int</span>[ArrayToSort.Length];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] tmpCountingSortArray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ArrayToSort.Length; i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> tmpSplitDigit = ArrayToSort[i] / (<span class="built_in">int</span>)Math.Pow(<span class="number">10</span>, k - <span class="number">1</span>) - (ArrayToSort[i] / (<span class="built_in">int</span>)Math.Pow(<span class="number">10</span>, k)) * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">tmpCountingSortArray[tmpSplitDigit] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> m = <span class="number">1</span>; m &lt; <span class="number">10</span>; m++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">tmpCountingSortArray[m] += tmpCountingSortArray[m -</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> n = ArrayToSort.Length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> tmpSplitDigit = ArrayToSort[n] / (<span class="built_in">int</span>)Math.Pow(<span class="number">10</span>, k - <span class="number">1</span>) -</span><br><span class="line"></span><br><span class="line">(ArrayToSort[n] / (<span class="built_in">int</span>)Math.Pow(<span class="number">10</span>, k)) * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">tmpArray[tmpCountingSortArray[tmpSplitDigit] - <span class="number">1</span>] = ArrayToSort</span><br><span class="line"></span><br><span class="line">[<span class="meta">n</span>];</span><br><span class="line"></span><br><span class="line">tmpCountingSortArray[tmpSplitDigit] -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> p = <span class="number">0</span>; p &lt; ArrayToSort.Length; p++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ArrayToSort[p] = tmpArray[p];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ArrayToSort;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] newIntArray = intArray;</span><br><span class="line"></span><br><span class="line">RadixSorter rS=<span class="keyword">new</span> RadixSorter();</span><br><span class="line"></span><br><span class="line">newIntArray = rS.RadixSort(intArray, intArray.Length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> intArray)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Merge</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;&#x2F; 要求: &#x2F;&#x2F;&#x2F; arrayToSort的元素必须大于等于0。或者经过一定的转换使其元素在 &#x2F;&#x2F;&#x2F; 大于等于0范围内。比如有例如以下序列(-1,-8,10,11),那么依据最小值8, &#x2F;&#x2F;&#x2F; 将各个数字加8转化为(7,0,18,19),然后进行计数排序。结果为(0,7,18,19), &#x2F;&#x2F;&#x2F; 然后再将结果个数字减8即为(-8,-1,10,11) &#x2F;&#x2F;&#x2F; </summary> &#x2F;&#x2F;&#x2F; <param name="arrayToSort">要排序的数组</param> &#x2F;&#x2F;&#x2F; <param name="maxValue">数组的最大值加一</param> &#x2F;&#x2F;&#x2F; <returns>计数排序后的结果</returns> public static int[] CountingSort(int[] arrayToSort, int k) { &#x2F;&#x2F; 排序后的结果存储 int[] sortedArray &#x3D; new int[arrayToSort.Length]; &#x2F;&#x2F; 计数数组 int[] countingArray &#x3D; new int[k]; &#x2F;&#x2F; 计数数组初始化 for (int i &#x3D; 0; i &lt; countingArray.Length; i++) { countingArray[i] &#x3D; 0; } &#x2F;&#x2F; 单个元素计数(经过该步骤countingArray[i]的含义为数字i的个数为countingArray[i]) for (int i &#x3D; 0; i &lt; arrayToSort.Length; i++) { countingArray[arrayToSort[i]] &#x3D; countingArray[arrayToSort[i]] + 1; } &#x2F;&#x2F; 计算小于等于某数的个数(经过该步骤countingArray[i]的含义为小于等于数字i的元素个数为countingArray[i]) for (int i &#x3D; 1; i &lt; countingArray.Length; i++) { countingArray[i] +&#x3D; countingArray[i - 1]; } &#x2F;&#x2F; 得到排序后的结果 for (int i &#x3D; 0; i &lt; sortedArray.Length; i++) { int numIndex &#x3D; countingArray[arrayToSort[i]] - 1; sortedArray[numIndex] &#x3D; arrayToSort[i]; countingArray[arrayToSort[i]] &#x3D; countingArray[arrayToSort[i]] - 1; } return sortedArray; } static void Main(string[] args) { int[] intArray &#x3D; new int[] { 5, 3, 7, 4, 8, 2, 9, 1, 0, 6 }; int[] intNewArray &#x3D; intArray; intNewArray &#x3D; CountingSort(intArray, intArray.Length); foreach (int i in intNewArray) { Console.Write(i + “ “); } Console.ReadKey(); } } }</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Merge</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSortFunction</span>(<span class="params"><span class="built_in">int</span>[] array</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">BuildMaxHeap(array);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = array.Length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Swap(<span class="keyword">ref</span> array[<span class="number">0</span>], <span class="keyword">ref</span> array[i]);</span><br><span class="line"></span><br><span class="line">MaxHeapify(array, <span class="number">0</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.Write(ex.Message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BuildMaxHeap</span>(<span class="params"><span class="built_in">int</span>[] array</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = array.Length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">MaxHeapify(array, i, array.Length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.Write(ex.Message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MaxHeapify</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> currentIndex, <span class="built_in">int</span> heapSize</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> left = <span class="number">2</span> * currentIndex + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> right = <span class="number">2</span> * currentIndex + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> large = currentIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left &lt; heapSize &amp;&amp; array[left] &gt; array[large])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">large = left;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right &lt; heapSize &amp;&amp; array[right] &gt; array[large])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">large = right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentIndex != large)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Swap(<span class="keyword">ref</span> array[currentIndex], <span class="keyword">ref</span> array[large]);</span><br><span class="line"></span><br><span class="line">MaxHeapify(array, large, heapSize);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.Write(ex.Message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a, <span class="keyword">ref</span> <span class="built_in">int</span> b</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">temp = a;</span><br><span class="line"></span><br><span class="line">a = b;</span><br><span class="line"></span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">HeapSortFunction(intArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> intArray)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序的分类-稳定性-时间复杂度和空间复杂度总结"><a href="#排序的分类-稳定性-时间复杂度和空间复杂度总结" class="headerlink" title="排序的分类&#x2F;稳定性&#x2F;时间复杂度和空间复杂度总结"></a>排序的分类&#x2F;稳定性&#x2F;时间复杂度和空间复杂度总结</h3><img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/CSharp%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/IMG-20250704185625088.png" class="">  

<p>版权声明：本文博客原创文章。博客，未经同意，不得转载。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序算法CSharp实现</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="堆排序算法（C-实现）"><a href="#堆排序算法（C-实现）" class="headerlink" title="堆排序算法（C#实现）"></a>堆排序算法（C#实现）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>在软件设计相关领域，“堆（Heap）”的概念主要涉及到两个方面：一种是数据结构，逻辑上是一颗完全二叉树，存储上是一个数组对象（二叉堆）。另一种是垃圾收集存储区，是软件系统可以编程的内存区域。本文所说的堆指的是前者，另外，这篇文章中堆中元素的值均以整形为例堆排序的时间复杂度是O(nlog2n),与快速</p>
</blockquote>
<hr>
<p>在软件设计相关领域，“堆（Heap）”的概念主要涉及到两个方面：</p>
<p>一种是数据结构，逻辑上是一颗完全二叉树，存储上是一个数组对象（二叉堆）。</p>
<p>另一种是垃圾收集存储区，是软件系统可以编程的内存区域。</p>
<p>本文所说的堆指的是前者，另外，这篇文章中堆中元素的值均以整形为例</p>
<p>堆排序的时间复杂度是O(nlog2n),与快速排序达到相同的时间复杂度. 但是在实际应用中,我们往往采用快速排序而不是堆排序. 这是因为快速排序的一个好的实现,往往比堆排序具有更好的表现. 堆排序的主要用途,是在形成和处理优先级队列方面. 另外, 如果计算要求是类优先级队列(比如, 只要返回最大或者最小元素, 只有有限的插入要求等), 堆同样是很适合的数据结构.</p>
<p>**堆排序<br>**堆排序是一种选择排序。是不稳定的排序方法。时间复杂度为O(nlog2n)。<br>堆排序的特点是：在排序过程中，将排序数组看成是一棵完全二叉树的顺序存储结构，利用完全二叉树中双亲节点和孩子节点之间的内在关系，在当前无序区中选择关键字最大(或最小)的记录。</p>
<p><strong>基本思想</strong><br>1.将要排序的数组创建为一个大根堆。大根堆的堆顶元素就是这个堆中最大的元素。<br>2.将大根堆的堆顶元素和无序区最后一个元素交换，并将无序区最后一个位置例入有序区，然后将新的无序区调整为大根堆。<br>重复操作，无序区在递减，有序区在递增。<br>初始时，整个数组为无序区，第一次交换后无序区减一，有序区增一。<br>每一次交换，都是大根堆的堆顶元素插入有序区，所以有序区保持是有序的。</p>
<p><strong>大根堆和小根堆</strong><br>堆：是一颗完全二叉树。<br>大根堆：所有节点的子节点比其自身小的堆<br>小根堆：所有节点的子节点比其自身大的堆</p>
<p><strong>堆与数组的关系</strong></p>
<p>堆是一种逻辑结构（形象的表示数据的存储格式），数组则是数据的实际存储结构（对应数据的存储地址），堆中的根节点与左右子节点在存储数组中的位置关系如下：假设根节点在数组中的位置（数组下标）为 i ，那么左节点在数组中的位置（数组下标）为 i * 2 + 1 ， 右节点在数组中的位置（数组下标）为 i * 2 + 2 。</p>
<p>以上是基本的知识点，具体代码如下所示：</p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625091.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;        //&lt;/span&gt;&lt;span&gt;堆排序算法（传递待排数组名，即：数组的地址。故形参数组的各种操作反应到实参数组上）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　 private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; HeapSortFunction(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                BuildMaxHeap(array);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建大顶推（初始状态看做：整体无序）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array.Length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;)&lt;br&gt;                &#123;&lt;br&gt;                    Swap(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; array[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;], &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; array[i]); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将堆顶元素依次与无序区的最后一位交换（使堆顶元素进入有序区）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    MaxHeapify(array, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, i); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新将无序区调整为大顶堆&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;br&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 创建大顶推（根节点大于左右子节点）&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;array&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;待排数组&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　 private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; BuildMaxHeap(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据大顶堆的性质可知：数组的前半段的元素为根节点，其余元素都为叶节点&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array.Length &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从最底层的最后一个根节点开始进行大顶推的调整&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    MaxHeapify(array, i, array.Length); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调整大顶堆&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;br&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 大顶推的调整过程&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;array&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;待调整的数组&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;currentIndex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;待调整元素在数组中的位置（即：根节点）&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;heapSize&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;堆中所有元素的个数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　 private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; MaxHeapify(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array, &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; currentIndex, &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; heapSize)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; left &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; currentIndex &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左子节点在数组中的位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　int&lt;/span&gt;&lt;span&gt; right &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; currentIndex &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右子节点在数组中的位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　int&lt;/span&gt;&lt;span&gt; large &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; currentIndex;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录此根节点、左子节点、右子节点 三者中最大值的位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (left &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; heapSize &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; array[left] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; array[large])  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;与左子节点进行比较&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    large &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; left;&lt;br&gt;                &#125;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (right &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; heapSize &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; array[right] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; array[large])    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;与右子节点进行比较&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    large &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; right;&lt;br&gt;                &#125;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (currentIndex &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; large)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果 currentIndex != large 则表明 large 发生变化（即：左右子节点中有大于根节点的情况）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    Swap(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; array[currentIndex], &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt; array[large]);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将左右节点中的大者与根节点进行交换（即：实现局部大顶堆）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    MaxHeapify(array, large, heapSize); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以上次调整动作的large位置（为此次调整的根节点位置），进行递归调整&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;br&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 交换函数&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;a&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;元素a&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;b&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;元素b&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Swap(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; a, &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;br&gt;            temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; a;&lt;br&gt;            a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; b;&lt;br&gt;            b &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temp;&lt;br&gt;        &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625091.gif" class="" title="复制代码">
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序算法CSharp实现</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="归并排序算法（C-实现）"><a href="#归并排序算法（C-实现）" class="headerlink" title="归并排序算法（C#实现）"></a>归并排序算法（C#实现）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>自顶向下的归并排序：是利用递归和分而治之的技术将数据序列划分成为越来越小的半子表，再对半子表排序，最后再用递归步骤将排好序的半子表合并成为越来越大的有序序列，归并排序包括两个步骤，分别为：1）划分子表  2）合并半子表</p>
</blockquote>
<hr>
<p>     归并排序(Merge Sort)是利用”归并”技术来进行排序。归并是指将若干个已排序的子文件合并成一个有序的文件。归并排序有两种方式：1): <strong>自底向上的方法</strong> 2):<strong>自顶向下的方法</strong></p>
<p> <strong>1、 自底向上的方法</strong><br>（1） 自底向上的基本思想<br>     自底向上的基本思想是：第1趟归并排序时，将待排序的文件R[1..n]看作是n个长度为1的有序子文件，将这些子文件两两归并，若n为偶数，则得到n&#x2F;2个长度为2的有序子文件；若n为奇数，则最后一个子文件轮空(不参与归并)。故本趟归并完成后，前n&#x2F;2 - 1个有序子文件长度为2，但最后一个子文件长度仍为1；第2趟归并则是将第1趟归并所得到的n&#x2F;2个有序的子文件两两归并，如此反复，直到最后得到一个长度为n的有序文件为止。<br>     上述的每次归并操作，均是将两个有序的子文件合并成一个有序的子文件，故称其为”二路归并排序”。类似地有k(k&gt;2)路归并排序。   </p>
<p><strong>2、自顶向下的方法(本文主要介绍此种方法，下面的文字都是对此种方法的解读)</strong></p>
<p>（1） 自顶向下的基本思想<br>     采用分治法进行自顶向下的算法设计，形式更为简洁。<br>     自顶向下的归并排序：是利用递归和分而治之的技术将数据序列划分成为越来越小的半子表，再对半子表排序，最后再用递归步骤将排好序的半子表合并成为越来越大的有序序列，归并排序包括两个步骤，分别为：</p>
<p>      1）划分子表</p>
<p>      2）合并半子表</p>
<p>（1）分治法的三个步骤<br>     设归并排序的当前区间是R[low..high]，分治法的三个步骤是：<br>①分解：将当前区间一分为二，即求分裂点<br>②求解：递归地对两个子区间R[low..mid]和R[mid+1..high]进行归并排序；<br>③组合：将已排序的两个子区间R[low..mid]和R[mid+1..high]归并为一个有序的区间R[low..high]。<br>  递归的终结条件：子区间长度为1（一个记录自然有序）。</p>
<p><strong>如下演示递归的整个过程：</strong></p>
<p>递归便是深度遍历（如下由左至右进行遍历）：假设有这样的一列数组{9,8,7,6,5,4,3,2,1}进行划分的顺序如下：</p>
<p>{9,8,7,6,5,4,3,2,1} –&gt; {9,8,7,6,5}，{4,3,2,1}</p>
<p>{9,8,7,6,5} –&gt; {9,8,7}，{6,5}</p>
<p>                        {9,8,7} –&gt; {9,8}，{7}</p>
<p>                                          {9,8} –&gt; {9}，{8}</p>
<p>                        {6,5} –&gt;{6}，{5}</p>
<p>{4,3,2,1} –&gt; {4,3}，{2,1}</p>
<p>                      {4,3} –&gt;{4}，{3}</p>
<p>                      {2,1} –&gt;{2}，{1}</p>
<p>当深度划分到左右数组都只剩1个元素的时候，进行上述逆序的合并：</p>
<p>{9}，{8} –&gt; {8,9} 然后和 {7} –&gt; {7,8,9}</p>
<p>                                {6}，{5} –&gt; {5,6}    然后 {7,8,9}和{5,6} –&gt; {5,6,7,8,9}</p>
<p>                                     {2}，{1} –&gt; {1,2}</p>
<p>                                     {4}，{3} –&gt; {3,4}   然后 {1,2}和 {3,4} –&gt; {1,2,3,4}</p>
<p>                                                                                                                         最终{5,6,7,8,9}和{1,2,3,4} –&gt; {1,2,3,4,5,6,7,8,9}</p>
<p><strong>具体实现代码如下所示：</strong></p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625092.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;//&lt;/span&gt;&lt;span&gt;归并排序（目标数组，子表的起始位置，子表的终止位置）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MergeSortFunction(&lt;span&gt;int&lt;/span&gt;[] array, &lt;span&gt;int&lt;/span&gt; first, &lt;span&gt;int&lt;/span&gt; last)&lt;br&gt;        &#123;&lt;br&gt;            &lt;span&gt;try&lt;/span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;span&gt;if&lt;/span&gt; (first &amp;lt; last)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子表的长度大于1，则进入下面的递归处理&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &#123;&lt;br&gt;                    &lt;span&gt;int&lt;/span&gt; mid = (first + last) / &lt;span&gt;2&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;子表划分的位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    MergeSortFunction(array, first, mid);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对划分出来的左侧子表进行递归划分&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    MergeSortFunction(array, mid + &lt;span&gt;1&lt;/span&gt;, last);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对划分出来的右侧子表进行递归划分&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    MergeSortCore(array, first, mid, last); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对左右子表进行有序的整合（归并排序的核心部分）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;span&gt;catch&lt;/span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;br&gt;&lt;br&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;归并排序的核心部分：将两个有序的左右子表（以mid区分），合并成一个有序的表&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MergeSortCore(&lt;span&gt;int&lt;/span&gt;[] array, &lt;span&gt;int&lt;/span&gt; first, &lt;span&gt;int&lt;/span&gt; mid, &lt;span&gt;int&lt;/span&gt; last)&lt;br&gt;        &#123;&lt;br&gt;            &lt;span&gt;try&lt;/span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;span&gt;int&lt;/span&gt; indexA = first; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;左侧子表的起始位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &lt;span&gt;int&lt;/span&gt; indexB = mid + &lt;span&gt;1&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;右侧子表的起始位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &lt;span&gt;int&lt;/span&gt;[] temp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[last + &lt;span&gt;1&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明数组（暂存左右子表的所有有序数列）：长度等于左右子表的长度之和。&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &lt;span&gt;int&lt;/span&gt; tempIndex = &lt;span&gt;0&lt;/span&gt;;&lt;br&gt;                &lt;span&gt;while&lt;/span&gt; (indexA &amp;lt;= mid &amp;amp;&amp;amp; indexB &amp;lt;= last) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行左右子表的遍历，如果其中有一个子表遍历完，则跳出循环&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &#123;&lt;br&gt;                    &lt;span&gt;if&lt;/span&gt; (array[indexA] &amp;lt;= array[indexB]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时左子表的数 &amp;lt;= 右子表的数&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    &#123;&lt;br&gt;                        temp[tempIndex++] = array[indexA++];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将左子表的数放入暂存数组中，遍历左子表下标++&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    &#125;&lt;br&gt;                    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时左子表的数 &amp;gt; 右子表的数&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    &#123;&lt;br&gt;                        temp[tempIndex++] = array[indexB++];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将右子表的数放入暂存数组中，遍历右子表下标++&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                    &#125;&lt;br&gt;                &#125;&lt;br&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有一侧子表遍历完后，跳出循环，将另外一侧子表剩下的数一次放入暂存数组中（有序）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                &lt;span&gt;while&lt;/span&gt; (indexA &amp;lt;= mid)&lt;br&gt;                &#123;&lt;br&gt;                    temp[tempIndex++] = array[indexA++];&lt;br&gt;                &#125;&lt;br&gt;                &lt;span&gt;while&lt;/span&gt; (indexB &amp;lt;= last)&lt;br&gt;                &#123;&lt;br&gt;                    temp[tempIndex++] = array[indexB++];&lt;br&gt;                &#125;&lt;br&gt;&lt;br&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将暂存数组中有序的数列写入目标数组的制定位置，使进行归并的数组段有序&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;                tempIndex = &lt;span&gt;0&lt;/span&gt;;&lt;br&gt;                &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = first; i &amp;lt;= last; i++)&lt;br&gt;                &#123;&lt;br&gt;                    array[i] = temp[tempIndex++];&lt;br&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;span&gt;catch&lt;/span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625092.gif" class="" title="复制代码">

<p>       对于N个元素的数组来说, 如此划分需要的层数是以2为底N的对数, 每一层中, 每一个元素都要复制到结果数组中, 并复制回来, 所以复制2N次, 那么对于归并排序,它的时间复杂度为O(N*logN), 而比较次数会少得多, 最少需要N&#x2F;2次,最多为N-1次, 所以平均比较次数在两者之间. 它的主要问题还是在于在内存中需要双倍的空间.</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序算法CSharp实现</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="插入排序算法C-实现"><a href="#插入排序算法C-实现" class="headerlink" title="插入排序算法C#实现"></a>插入排序算法C#实现</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>插入排序算法主要分为：直接插入算法，折半排序算法（二分插入算法），希尔排序算法，后两种是直接插入算法的改良。因此直接插入算法是基础，这里先进行直接插入算法的分析与编码。直接插入算法的排序思想：假设有序数组从小到大为array[0],array[1],array[2],….,array[n-2],</p>
</blockquote>
<hr>
<p>插入排序算法主要分为：直接插入算法，折半排序算法（二分插入算法），希尔排序算法，后两种是直接插入算法的改良。因此直接插入算法是基础，这里先进行直接插入算法的分析与编码。</p>
<p>直接插入算法的排序思想：假设有序数组从小到大为array[0],array[1],array[2],….,array[n-2],array[n-1]，那么将待排数值array[n]与前面的有序数组从后向前依次比较，直到在有序数组中找到小于待排数值array[n]的位置，将array[n]插入到此位置，并入组合成新的有序数组。</p>
<p><strong>直接插入算法</strong>--代码如下所示：</p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;　　　　　//&lt;/span&gt;&lt;span&gt;直接插入排序算法（传递待排数组名，即：数组的地址。故形参数组的各种操作反应到实参数组上）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; InsertSortionFunction(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时变量，存储待排的数值&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; array.Length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将无序的所有数值依次插入到有序数组中，注：下标从1开始，因为操作的是同一个数组&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[i];    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录待插入前面有序数组的数值&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　　　 int&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录前方有序数组的末尾位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　　　 while&lt;/span&gt;&lt;span&gt; (index &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; array[index] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; temp)   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环遍历前面的有序数组，并且从大到小依次与待排数值进行比较&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#123;&lt;br&gt;                        array[index &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[index];    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果index&amp;gt;=0并且此时的值大于待排数值，将此处的值向后移动一位&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        index&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;index--向前遍历有序数组&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#125;&lt;br&gt;                    array[index &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temp;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于前面的index--，所以temp插入的位置是index+1&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<p>折半排序算法是对直接插入算法的一种优化，优化的核心是：通过折半查看有序数组中间位置的数值（a）与待插入的数值（temp）的大小，如果a&gt;&#x3D;temp，则转向折半的左区间继续折半查找； 如果a&lt;temp，则转向折半后的右区间继续折半查找。直到左右下标相同时，此时折半的下标也指向相同的位置，再做最后一次循环，最终的结果是：左右下标相差1，并且原来左侧的下标指向大于temp的位置，原来右侧的下标指向了小于temp的位置，即：array[biggerIndex] &lt; temp &lt; array[smallerIndex]。</p>
<p><strong>折半排序算法</strong>--代码如下：</p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;  &amp;nbsp;　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;折半排序算法（传递待排数组名，即：数组的地址。故形参数组的各种操作反应到实参数组上）&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;        private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; BinaryInsertionSortFunction(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; smallerIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录有序数组的起始位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　 int&lt;/span&gt;&lt;span&gt; biggerIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录有序数组的终止位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　 int&lt;/span&gt;&lt;span&gt; midIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录获取有序数组的中间位置（折半法的关键：折半的位置）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　 int&lt;/span&gt;&lt;span&gt; temp;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录带排的数值&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　 for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; array.Length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环向有序数组中插入数值（i从1开始，因为操作的是同一个数组）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[i];   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录待插入有序数组的数值&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    biggerIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;br&gt;                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当smallerIndex==biggerIndex时，进入最后一次循环：smallerIndex指向大于temp的数组位置，biggerIndex指向小于temp的数组位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　　　 while&lt;/span&gt;&lt;span&gt; (smallerIndex &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; biggerIndex)   &lt;br&gt;                    &#123;&lt;br&gt;                        midIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (smallerIndex &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; biggerIndex) &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确定折半的位置&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　　　　　　if&lt;/span&gt;&lt;span&gt;(array[midIndex] &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt; temp)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;折半位置的数值 &amp;gt;= temp&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#123;&lt;br&gt;                            biggerIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; midIndex &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;biggerIndex以midIndex为基础向前移动一位&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#125;&lt;br&gt;                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;&lt;br&gt;                        &#123;&lt;br&gt;                            smallerIndex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; midIndex &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;smallerIndex以midIndex为基础向后移动一位&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#125;&lt;br&gt;                    &#125;&lt;br&gt;                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; j &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;biggerIndex; j&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将有序数组中大于temp的数值分别向后移动一位&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#123;&lt;br&gt;                        array[j &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[j];  &lt;/span&gt;&lt;span&gt;//&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#125;&lt;br&gt;                    array[biggerIndex &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temp;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将temp插入biggerIndex + 1，因为此时array[biggerIndex]&amp;lt;temp&amp;lt;array[smallerIndex]&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<p>希尔排序同样是直接插入排序算法的一种改进，基本思想是：将无序的数列划分为若干小的子序列，然后对子序列进行直接插入排序。<br>时间性能优于直接插入排序算法，但是一种不稳定的排序，时间复杂度为O(nlogn)。<br>希尔排序算法主要分为3重循环：<br>第一重循环–&gt;按照gap的大小进行分组，初始化从array.Length&#x2F;2开始，依次递减到1<br>第二重循环–&gt;对所有分组进行排序<br>第三重循环–&gt;组内进行直接插入排序</p>
<p><strong>希尔排序算法</strong>--代码如下：</p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;　　　　  private &lt;/span&gt;&lt;span&gt;static &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; ShellSortFunction(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array.Length;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; gap &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; length &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;; gap &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; gap&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一重循环，按照gap的大小进行分组&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; gap; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二重循环，对所有分组进行排序&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#123;&lt;br&gt;                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i; j &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; length; j &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; j &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; gap)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三重循环，组内进行直接插入排序&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#123;&lt;br&gt;                            temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[j];&lt;br&gt;                            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; j &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; gap;&lt;br&gt;                            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (index &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; array[index] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; temp)&lt;br&gt;                            &#123;&lt;br&gt;                                array[index &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; gap] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[index];&lt;br&gt;                                index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; gap;&lt;br&gt;                            &#125;&lt;br&gt;                            array[index &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; gap] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temp;&lt;br&gt;                        &#125;&lt;br&gt;                    &#125;&lt;br&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625093.gif" class="" title="复制代码">

<p>。。。。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序算法CSharp实现</title>
    <url>/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="冒泡排序算法（C-实现）-Eric-Sun-博客园"><a href="#冒泡排序算法（C-实现）-Eric-Sun-博客园" class="headerlink" title="冒泡排序算法（C#实现） - Eric Sun - 博客园"></a>冒泡排序算法（C#实现） - Eric Sun - 博客园</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>简单的冒泡排序算法，代码如下：&#x2F;&#x2F;冒泡排序（从数组的起始位置开始遍历，以大数为基准：大的数向下沉一位）privatestaticvoid BubbleSortFunction(int[] array) { try { int length &#x3D; array.Length; int temp; bool</p>
</blockquote>
<hr>
<p>简单的冒泡排序算法，代码如下：</p>
<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625090.gif" class="" title="复制代码">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;//&lt;/span&gt;&lt;span&gt;冒泡排序（从数组的起始位置开始遍历，以大数为基准：大的数向下沉一位）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; BubbleSortFunction(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] array)&lt;br&gt;        &#123;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;&lt;br&gt;            &#123;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array.Length;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; temp;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; hasExchangeAction; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录此次大循环中相邻的两个数是否发生过互换（如果没有互换，则数组已经是有序的）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组有N个数，那么用N-1次大循环就可以排完&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                &#123;&lt;br&gt;                    hasExchangeAction &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次大循环都假设数组有序&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; j &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; j&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从数组下标0处开始遍历，（length - i - 1 是刨除已经排好的大数）&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#123;&lt;br&gt;                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (array[j] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; array[j &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相邻两个数进行比较，如果前面的数大于后面的数，则将这相邻的两个数进行互换&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#123;&lt;br&gt;                            temp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[j];&lt;br&gt;                            array[j] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; array[j &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];&lt;br&gt;                            array[j &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temp;&lt;br&gt;                            hasExchangeAction &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生过互换&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                        &#125;&lt;br&gt;                    &#125;&lt;br&gt;&lt;br&gt;                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;hasExchangeAction) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有发生过互换，则数组已经是有序的了，跳出循环&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;                    &#123;&lt;br&gt;                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;br&gt;                    &#125;&lt;br&gt;                &#125;&lt;br&gt;            &#125;&lt;br&gt;            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)&lt;br&gt;            &#123; &#125;&lt;br&gt;        &#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95CSharp%E5%AE%9E%E7%8E%B0/IMG-20250704185625090.gif" class="" title="复制代码">

<p>。。。。。</p>
<p>posted @ 2011-08-17 16:02  <a href="https://www.cnblogs.com/mingmingruyuedlut">Eric Sun</a>  阅读(7637)  评论()  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=2143231">编辑</a>  收藏  举报</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/2019/11/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>中介者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2019/11/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>享元模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2019/11/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2015/11/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在软件开发中，<strong>单例模式（Singleton Pattern）</strong> 是一种常见的设计模式，用于确保一个类只有一个实例，并提供一个全局访问点。它适用于需要严格控制资源访问的场景，例如数据库连接池、配置管理器或任务调度器等。本文将详细介绍单例模式的核心思想，并展示其在 <strong>C#、Python、Golang、C 和 C++</strong> 中的实现方式。</p>
<p>单例模式的主要特点包括：</p>
<ul>
<li><strong>唯一性</strong>：类只有一个实例对象</li>
<li><strong>自创建</strong>：类自行创建自己的实例</li>
<li><strong>全局访问</strong>：提供一个全局访问点来获取该实例</li>
</ul>
<p>特点</p>
<ul>
<li><strong>唯一性</strong>：类自身负责创建和管理实例。</li>
<li><strong>延迟加载</strong>：实例通常在第一次使用时创建（懒汉式）。</li>
<li><strong>线程安全</strong>：在多线程环境中需确保实例的唯一性。</li>
<li><strong>不可克隆&#x2F;序列化</strong>：避免通过克隆或反序列化创建新实例。</li>
</ul>
<h2 id="单例模式的实现方式"><a href="#单例模式的实现方式" class="headerlink" title="单例模式的实现方式"></a>单例模式的实现方式</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C# 实现"></a>C# 实现</h3><p>C# 中的单例模式通常通过 <strong>双重检查锁定（Double-Check Locking）</strong> 实现，以确保线程安全和延迟加载。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 volatile 保证多线程下的可见性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton _instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">	    <span class="comment">// 第一次检查，避免不必要的锁定</span></span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">			 <span class="comment">// 锁定操作</span></span><br><span class="line">            <span class="keyword">lock</span> (_lock)</span><br><span class="line">            &#123;</span><br><span class="line">				<span class="comment">// 第二次检查，确保多线程安全</span></span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="饿汉式（立即加载）"><a href="#饿汉式（立即加载）" class="headerlink" title="饿汉式（立即加载）"></a>饿汉式（立即加载）</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 静态初始化，CLR保证线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Singleton _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><p>Python 的模块天然支持单例，但也可以通过类实现。以下是一个线程安全的懒汉式实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    _instance_lock = threading.Lock()  <span class="comment"># 线程锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化逻辑</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            <span class="keyword">with</span> cls._instance_lock:  <span class="comment"># 确保线程安全</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(Singleton, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                    Singleton._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">s1 = Singleton()</span><br><span class="line">s2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)  <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure>

<h4 id="饿汉式（模块级单例）"><a href="#饿汉式（模块级单例）" class="headerlink" title="饿汉式（模块级单例）"></a>饿汉式（模块级单例）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># singleton.py</span><br><span class="line">class Singleton:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">instance = Singleton()</span><br><span class="line"></span><br><span class="line"># 使用示例</span><br><span class="line">from singleton import instance</span><br></pre></td></tr></table></figure>

<h4 id="装饰器实现"><a href="#装饰器实现" class="headerlink" title="装饰器实现"></a>装饰器实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>): </span><br><span class="line">	instances = &#123;&#125; </span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>): </span><br><span class="line">		<span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances: </span><br><span class="line">			instances[cls] = cls(*args, **kwargs) </span><br><span class="line">			<span class="keyword">return</span> instances[cls]</span><br><span class="line">		<span class="keyword">return</span> wrapper </span><br><span class="line">		</span><br><span class="line"><span class="meta">@singleton </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySingleton</span>: </span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="Golang-实现"><a href="#Golang-实现" class="headerlink" title="Golang 实现"></a>Golang 实现</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Singleton <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	instance *Singleton</span><br><span class="line">	once     sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *Singleton &#123;</span><br><span class="line">	<span class="comment">// sync.Once 确保代码只执行一次，线程安全</span></span><br><span class="line">	once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		instance = &amp;Singleton&#123;&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := GetInstance()</span><br><span class="line">	s2 := GetInstance()</span><br><span class="line">	<span class="built_in">println</span>(s1 == s2) <span class="comment">// 输出: true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">type Singleton struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">var instance = &amp;Singleton&#123;&#125;</span><br><span class="line"></span><br><span class="line">func GetInstance() *Singleton &#123;</span><br><span class="line">	return instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>控制实例数量</strong>：确保全局唯一性，避免资源浪费。</li>
<li><strong>灵活扩展</strong>：可通过子类化或组合模式扩展功能。</li>
<li><strong>全局访问</strong>：简化了对共享资源的访问。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><strong>违反单一职责原则</strong>：类负责管理自己的实例，增加了耦合。</li>
<li><strong>测试困难</strong>：全局状态可能导致单元测试难以隔离。</li>
<li><strong>生命周期管理</strong>：实例与程序生命周期一致，可能占用过多内存。.</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><strong>资源管理器</strong>：如文件系统、数据库连接池。</li>
<li><strong>配置中心</strong>：全局配置对象，避免重复加载配置。</li>
<li><strong>缓存服务</strong>：单点缓存，减少内存开销。</li>
<li><strong>日志记录器</strong>：统一日志输出，避免多线程冲突。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式是一种简单但强大的设计模式，适用于需要严格控制实例数量的场景。不同编程语言的实现方式各有特色：</p>
<ul>
<li><strong>C#</strong> 通过 <code>lock</code> 和 <code>volatile</code> 保证线程安全。</li>
<li><strong>Python</strong> 可利用模块的天然单例特性。</li>
<li><strong>Golang</strong> 使用 <code>sync.Once</code> 实现原子初始化。</li>
<li><strong>C&#x2F;C++</strong> 通过静态局部变量或互斥锁实现线程安全。</li>
</ul>
<p><strong>实现要点总结</strong>：</p>
<ol>
<li><strong>私有构造函数</strong>：防止外部直接实例化</li>
<li><strong>静态实例变量</strong>：保存唯一的实例</li>
<li><strong>全局访问点</strong>：提供获取实例的静态方法</li>
<li><strong>线程安全</strong>：在多线程环境下需要考虑线程安全问题</li>
</ol>
<p><strong>选择建议</strong>：</p>
<ul>
<li><strong>懒汉式</strong>：适用于实例创建开销较大，且可能不被使用的场景</li>
<li><strong>饿汉式</strong>：适用于实例创建开销小，且一定会被使用的场景</li>
<li><strong>双重检查锁定</strong>：适用于需要兼顾性能和线程安全的场景</li>
</ul>
<p>在实际开发中，需根据语言特性和具体需求选择合适的实现方式，同时注意避免过度使用单例模式，以免引入全局状态带来的复杂性。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2019/11/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>原型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2019/11/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>备忘录模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2019/11/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>命令模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2019/11/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>外观模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/2019/11/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂方法</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2019/11/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>建造者</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2019/11/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>抽象工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2019/11/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>桥接模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法</title>
    <url>/2019/11/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>模板方法</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2019/11/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>状态模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2019/11/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2019/11/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>组合模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰模式</title>
    <url>/2019/11/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>装饰模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/2019/11/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>解释器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2019/11/17/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式系列导航</title>
    <url>/2019/11/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<a href="/2019/11/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/" title="面向对象的设计原则">面向对象的设计原则</a>
<h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><p>创建型模式抽象了实例化的过程。创建性模式隐藏了这些类的实例是如何被创建和放在一起，整个系统关于这些对象所知道的是由抽象类所定义的接口。这样，创建性模式在创建了什么、谁创建它、她是怎么被创建的、以及何时创建方面提供了灵活性。创建相应数目的原型并克隆她们通常比每次用适合的状态手工实例化该类更方便。</p>
<a href="/2015/11/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" title="单例模式">单例模式</a> (Singleton) 保证一个类仅有一个实例，并提供一个访问它的全局访问点。

<p><strong>优点</strong>：对唯一实例的受控访问。</p>
<p><strong>缺点</strong>：饿汉式&#x2F;懒汉式  多线程同时访问时可能造成多个实例。</p>
<a href="/2019/11/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/" title="工厂方法模式">工厂方法模式</a> (Factory Method) 定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。

<p><strong>优点</strong>：是简单工厂模式的进一步抽象和推广，既保持了简单工厂模式的优点（工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类。对于客户端来说，去除了与具体产品的依赖），而且克服了简单工厂的缺点（违背了开放封闭原则）。</p>
<p><strong>缺点</strong>：每增加一个产品，就需要增加一个产品工厂的类，增加了额外的开发。（用反射可以解决）。</p>
<a href="/2019/11/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/" title="抽象工厂模式">抽象工厂模式</a> (Abstract Factory) 提供一个创建一系列相关或互相依赖对象的接口，而无需指定它们具体的类。

<p><strong>优点</strong>：</p>
<p>a)   改变具体工厂即可使用不同的产品配置，使改变一个应用的具体工厂变得很容易。</p>
<p>b)   让具体的创建实例过程与客户端分离，客户端通过抽象接口操作实例，产品的具体类名也被具体工厂的实现分离。</p>
<p><strong>缺点</strong>：如果要新增方法，改动极大。</p>
<a href="/2019/11/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/" title="建造者模式">建造者模式</a> (Builder) 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

<p><strong>优点</strong>：使得建造代码与表示代码分离。</p>
<p><strong>缺点</strong>：1、增加代码量；2、Builder只是一个替代构造器的选择，不能直接用于降低非构造函数方法的参数数量。</p>
<a href="/2019/11/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/" title="原型模式">原型模式</a> (Prototype) 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

<p><strong>优点</strong>：隐藏了对象创建的细节，大大提升了性能。不用重新初始化对象，而是动态的获得对象运行时的状态。</p>
<p><strong>缺点</strong>：深复制 or 浅复制 。</p>
<h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><a href="/2019/11/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/" title="适配器模式">适配器模式</a> (Adapter) 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

<p>在GoF的设计模式中，适配器有两种类型，类适配器模式和对象适配器模式。</p>
<p>a)   类适配器模式：通过多重继承对一个接口与另一个接口进行匹配，而C#，Java等语言都不支持多重继承，也就是一个类只有一个父类。</p>
<p>b)   一般都指的是 对象适配器模式</p>
<p><strong>优点</strong>：能够复用现存的类，客户端统一调用同一接口，更简单、直接、紧凑。</p>
<p><strong>缺点</strong>：适配器模式有点儿“亡羊补牢”的感觉，设计阶段要避免使用。</p>
<a href="/2019/11/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/" title="桥接模式">桥接模式</a> (Bridge) 将抽象部分与它的实现部分分离，使它们都可以独立的变化。

<p><strong>优点</strong>：减少各部分的耦合。 分离抽象和实现部分，更好的扩展性，可动态地切换实现、可减少子类的个数。</p>
<p><strong>缺点</strong>：1、<a href="https://so.csdn.net/so/search?q=%E6%A1%A5%E6%8E%A5&spm=1001.2101.3001.7020">桥接</a>模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。 2、桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</p>
<a href="/2019/11/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/" title="装饰模式">装饰模式</a> (Decorator) 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。

<p><strong>优点</strong>：把类中的装饰功能从类中搬移出去，简化原有的类。有效的把类的核心职责和装饰功能区分开，去除相关类中重复的装饰逻辑。</p>
<p><strong>缺点</strong>：利用装饰器模式,常常造成设计中有大量的小类,数量实在太多,可能会造成使用此API程序员的困扰。</p>
<a href="/2019/11/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/" title="组合模式">组合模式</a> (Composite) 将对象组合成树形结构以表示“部分-整体”的层次结构。

<p><strong>优点</strong>：组合模式让客户可以一致的使用组合结构和单个对象。</p>
<p><strong>缺点</strong>：使设计变得更加抽象，对象的业务规则如果很复杂，则实现组合模式具有很大挑战性，而且不是所有的方法都与叶子对象子类都有关联。</p>
<a href="/2019/11/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/" title="外观模式">外观模式</a> (Facade) 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

<p><strong>优点</strong>：1、客户对子系统的使用变得简单了，减少了与子系统的关联对象，实现了子系统与客户之间的松耦合关系。 2、只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类 3、降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程。</p>
<p><strong>缺点</strong>：1、不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性   2、在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</p>
<a href="/2019/11/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/" title="享元模式">享元模式</a> (Flyweight) 运用共享技术有效的支持大量细粒度的对象。

<p><strong>优点</strong>：享元模式可以避免大量非常相似类的开销。程序中，大量细粒度的类实例来表示数据，如果它们除了几个参数外基本相同，那么把它们转移到类实例的外面，在方法调用时将它们传递进来，就可以通过共享大幅度减少单个实例的数目。</p>
<p><strong>缺点</strong>：1、由于享元模式需要区分外部状态和内部状态，使得应用程序在某种程度上来说更加复杂化了。2、为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</p>
<a href="/2019/11/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" title="代理模式">代理模式</a> (Proxy) 为其他对象提供一种代理以控制对这个对象的访问。

<p><strong>优点</strong>：1）代理模式能将代理对象与真正被调用的对象分离，在一定程度上降低了系统的耦合度。2）代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用。代理对象也可以对目标对象调用之前进行其他操作。</p>
<p><strong>缺点</strong>：1）在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。2）增加了系统的复杂度。</p>
<h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><a href="/2019/11/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/" title="模板方法">模板方法</a> (Template Method)  定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。

<p><strong>优点</strong>：模板方法模式是通过把不变行为搬移到超类，去除子类中重复代码来实现它的优势，提供了一个代码复用平台，帮助子类摆脱重复的不变行为的纠缠。</p>
<p><strong>缺点</strong>：如果父类中可变的基本方法太多,将会导致类的个数增加,系统更加庞大。</p>
<a href="/2019/11/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/" title="命令模式">命令模式</a> (Command) 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。
<p><strong>优点</strong>：</p>
<p>a)      命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。</p>
<p>b)      它能较容易的设计一个命令队列。</p>
<p>c)       在需要的情况下，可以较容易的将命令记入日志。</p>
<p>d)      允许接收请求的一方决定是否要否决请求。</p>
<p>e)      可以容易的实现对请求的撤销和重做。</p>
<p>f)        由于加进新的具体命令类不影响其他类，因此增加新的具体命令类很容易。</p>
<p><strong>缺点</strong>：会增加系统的复杂性，这里的复杂性应该主要指的是类的数量。</p>
<a href="/2019/11/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/" title="迭代器模式">迭代器模式</a> (Iterator) 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。

<p><strong>优点</strong>：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，又可以让外部代码透明的访问集合内部的数据。</p>
<p><strong>缺点</strong>：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>
<a href="/2019/11/17/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/" title="观察者模式">观察者模式</a> (Publish/Subscribe) 定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，让它们能够自动更新自己。

<p><strong>优点</strong>：解耦。</p>
<p><strong>缺点</strong>：如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。在使用观察者模式是要特别注意这一点。</p>
<a href="/2019/11/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/" title="中介者模式">中介者模式</a> (mediator) 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示的相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互。

<p><strong>优点</strong>：</p>
<p>a)   抽象中介者类（Mediator）减少了抽象同事类（colleague）之间的耦合，是的可以独立的改变和复用各个类。</p>
<p>b)   由于把对象如何协作进行了抽象，将中介作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身的行为转移到它们之间的交互上来，也就是站在一个更宏观的角度去看待系统。</p>
<p><strong>缺点</strong>：控制集中化导致了中介者的复杂化。</p>
<a href="/2019/11/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/" title="状态模式">状态模式</a> (State)  当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。

<p><strong>优点</strong>：状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。【消除庞大的条件分支语句】。</p>
<p><strong>缺点</strong>：违背开放-封闭原则</p>
<a href="/2019/11/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/" title="策略模式">策略模式</a> (strategy) 它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的用户。

<p><strong>优点</strong>：策略模式的策略类为上下文定义了一系列可供重用的算法或行为，继承有助于析取出这些算法中的公共功能。另外，策略模式简化了单元测试，因为每一个算法都有自己的类，可以通过自己的接口单独测试。当不同的行为堆砌在一个类中，很难避免使用switch语句。但是将这些行为封装在一个一个独立的策略类中，可以在使用这些行为的类中消除条件语句</p>
<p><strong>缺点</strong>：基本的策略模式，选择权在客户端，具体实现转给策略模式的上下文对象。这并不好。使用策略模式和工厂类结合，可以减轻客户端的职责。但是还是不够完美，使用反射才能真正快乐。</p>
<a href="/2019/11/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/" title="责任链模式">责任链模式</a> (chain of responsibility) 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。

<p><strong>优点</strong>：使得接收者和发送者都没有对方的明确信息，且链中对象自己也不知道链结构，结果是职责链可以简化对象的相互连接，它们只需要保持一个指向其后继者的引用，而不需要保持它所有的候选接收者的引用。<strong>开发者可以随时的增加或者修改处理一个请求的结构，增强了给对象指派职责的灵活性</strong>。</p>
<p><strong>缺点</strong>：一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</p>
<a href="/2019/11/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/" title="访问者模式">访问者模式</a> (Vistor) 表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。

<p><strong>优点</strong>：增加新的操作很容易。新的操作就是新的访问者。</p>
<p><strong>缺点</strong>：很难增加新的数据结构。</p>
<a href="/2019/11/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/" title="备忘录模式">备忘录模式</a> (Memento) 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可将该对象恢复到原先保存的状态。

<p><strong>优点</strong>：使用备忘录模式可以把复杂的发起人内部信息对其他的对象屏蔽起来，从而可以恰当地保持封装的边界。</p>
<p><strong>缺点</strong>：如果发起人角色的状态需要完整地存储到备忘录对象中，那么在资源消耗上面备忘录对象会很昂贵。</p>
<a href="/2019/11/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/" title="解释器模式">解释器模式</a> (interpreter) 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。

<p><strong>优点</strong>：解释器很容易改变和扩展文法，因为该模式使用类来表示文法规则，可以使用继承来改变或扩展文法，也比较容易实现文法。因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。</p>
<p><strong>缺点</strong>：解释器模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和维护，建议当文法非常复杂时，使用其他技术（语法分析程序、编译器生成器）。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/2019/11/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>访问者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2019/11/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>责任链模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2019/11/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>迭代器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2019/11/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的设计原则</title>
    <url>/2019/11/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h3 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h3><p>写代码也是有原则的，我们之所以使用设计模式，主要是为了适应变化，提高代码复用率，使软件更具有可维护性和可扩展性。如果我们能更好的理解这些设计原则，对我们理解面向对象的设计模式也是有帮助的，因为这些模式的产生是基于这些原则的。这些规则是：单一职责原则（SRP）、开放封闭原则（OCP）、里氏代替原则（LSP）、依赖倒置原则（DIP）、接口隔离原则（ISP）、合成复用原则（CRP）和迪米特原则（LoD）。下面我们就分别介绍这几种设计原则。</p>
<ol>
<li><p><strong>单一职责原则(SRP)：</strong></p>
<ol>
<li>SRP(Single Responsibilities Principle)的定义：就一个类而言，应该仅有一个引起它变化的原因。简而言之，就是功能要单一。</li>
<li>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其它职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。(敏捷软件开发)</li>
<li>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。</li>
</ol>
<p>  小结：单一职责原则（SRP）可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。责任过多，引起它变化的原因就越多，这样就会导致职责依赖，大大损伤其内聚性和耦合度。</p>
</li>
<li><p><strong>开放关闭原则(OCP)</strong></p>
<ol>
<li>OCP(Open-Close Principle)的定义：就是说软件实体(类，方法等等)应该可以扩展（扩展可以理解为增加），但是不能在原来的方法或者类上修改，也可以这样说，对增加代码开放，对修改代码关闭。</li>
<li>OCP的两个特征： 对于扩展（增加）是开放的，因为它不影响原来的，这是新增加的。对于修改是封闭的，如果总是修改，逻辑会越来越复杂。</li>
</ol>
<p>  小结：开放封闭原则（OCP）是面向对象设计的核心思想。遵循这个原则可以为我们面向对象的设计带来巨大的好处：可维护（维护成本小，做管理简单，影响最小）、可扩展（有新需求，增加就好）、可复用（不耦合，可以使用以前代码）、灵活性好（维护方便、简单）。开发人员应该仅对程序中出现频繁变化的那些部分做出抽象，但是不能过激，对应用程序中的每个部分都刻意地进行抽象同样也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</p>
</li>
<li><p><strong>里氏代替原则(LSP)</strong></p>
<ol>
<li>LSP(Liskov Substitution Principle)的定义：子类型必须能够替换掉它们的父类型。更直白的说，LSP是实现面向接口编程的基础。</li>
</ol>
<p>  小结：任何基类可以出现的地方，子类一定可以出现，所以我们可以实现面向接口编程。 LSP是继承复用的基石，只有当子类可以替换掉基类，软件的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
</li>
<li><p><strong>依赖倒置原则（DIP）</strong></p>
<ol>
<li>DIP(Dependence Inversion Principle)的定义：抽象不应该依赖细节，细节应该依赖于抽象。简单说就是，我们要针对接口编程，而不要针对实现编程。</li>
<li>高层模块不应该依赖低层模块，两个都应该依赖抽象，因为抽象是稳定的。抽象不应该依赖具体（细节），具体（细节）应该依赖抽象。</li>
</ol>
<p>  小结：依赖倒置原则其实可以说是面向对象设计的标志，如果在我们编码的时候考虑的是面向接口编程，而不是简单的功能实现，体现了抽象的稳定性，只有这样才符合面向对象的设计。</p>
</li>
<li><p><strong>接口隔离原则（ISP）</strong></p>
<ol>
<li>接口隔离原则（Interface Segregation Principle, ISP）指的是使用多个专门的接口比使用单一的总接口要好。也就是说不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。过于臃肿的接口是对接口的一种污染。</li>
<li>使用多个专门的接口比使用单一的总接口要好。</li>
<li>一个类对另外一个类的依赖性应当是建立在最小的接口上的。</li>
<li>一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。</li>
<li>“不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构。”这个说得很明白了，再通俗点说，不要强迫客户使用它们不用的方法，如果强迫用户使用它们不使用的方法，那么这些客户就会面临由于这些不使用的方法的改变所带来的改变。</li>
</ol>
<p>  小结：接口隔离原则（ISP）告诉我们，在做接口设计的时候，要尽量设计的接口功能单一，功能单一，使它变化的因素就少，这样就更稳定，其实这体现了高内聚，低耦合的原则，这样做也避免接口的污染。</p>
</li>
<li><p><strong>组合复用原则（CRP）</strong></p>
<ol>
<li>组合复用原则（Composite Reuse Principle, CRP）就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分。新对象通过向这些对象的委派达到复用已用功能的目的。简单地说，就是要尽量使用合成&#x2F;聚合，尽量不要使用继承。</li>
<li>要使用好组合复用原则，首先需要区分”Has—A”和“Is—A”的关系。 “Is—A”是指一个类是另一个类的“一种”，是属于的关系，而“Has—A”则不同，它表示某一个角色具有某一项责任。导致错误的使用继承而不是聚合的常见的原因是错误地把“Has—A”当成“Is—A”.例如：鸡是动物，这就是“Is-A”的表现，某人有一个手枪，People类型里面包含一个Gun类型，这就是“Has-A”的表现。</li>
</ol>
<p>  小结：组合&#x2F;聚合复用原则可以使系统更加灵活，类与类之间的耦合度降低，一个类的变化对其他类造成的影响相对较少，因此一般首选使用组合&#x2F;聚合来实现复用；其次才考虑继承，在使用继承时，需要严格遵循里氏替换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
</li>
<li><p><strong>迪米特法则（Law of Demeter）</strong></p>
<ol>
<li>迪米特法则（Law of Demeter，LoD）又叫最少知识原则（Least Knowledge Principle，LKP），指的是一个对象应当对其他对象有尽可能少的了解。也就是说，一个模块或对象应尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立，这样当一个模块修改时，影响的模块就会越少，扩展起来更加容易。</li>
<li>关于迪米特法则其他的一些表述有：只与你直接的朋友们通信；不要跟“陌生人”说话。</li>
<li>外观模式（Facade Pattern)和中介者模式（Mediator Pattern）就使用了迪米特法则。</li>
</ol>
<p>  小结：迪米特法则的初衷是降低类之间的耦合，实现类型之间的高内聚，低耦合，这样可以解耦。但是凡事都有度，过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows InfluxDB 安装与配置</title>
    <url>/2019/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93/InfluxDB/InfluxDB%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>一、下载链接<a href="https://portal.influxdata.com/downloads">https://portal.influxdata.com/downloads</a>，选windows版</p>
<p>二、解压到安装盘，目录如下</p>
<img src="/2019/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93/InfluxDB/InfluxDB%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/IMG-20250704185714467.png" class="">

<p>三、修改conf文件，代码如下，直接复制粘贴（1.4.2版本），注意修改路径，带D盘的改为你的安装路径就好，一共三个，注意网上有配置admin进行web管理，但新版本配置文件里没有admin因为官方给删除了，需下载Chronograf，后文会介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Welcome to the InfluxDB configuration file.</span><br><span class="line"></span><br><span class="line"># The values in this file override the default values used by the system if</span><br><span class="line"># a config option is not specified. The commented out lines are the configuration</span><br><span class="line"># field and the default value used. Uncommenting a line and changing the value</span><br><span class="line"># will change the value used at runtime when the process is restarted.</span><br><span class="line"></span><br><span class="line"># Once every 24 hours InfluxDB will report usage data to usage.influxdata.com</span><br><span class="line"># The data includes a random ID, os, arch, version, the number of series and other</span><br><span class="line"># usage data. No data from user databases is ever transmitted.</span><br><span class="line"># Change this option to true to disable reporting.</span><br><span class="line"># reporting-disabled = false</span><br><span class="line"></span><br><span class="line"># Bind address to use for the RPC service for backup and restore.</span><br><span class="line"># bind-address = &quot;127.0.0.1:8088&quot;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [meta]</span><br><span class="line">###</span><br><span class="line">### Controls the parameters for the Raft consensus group that stores metadata</span><br><span class="line">### about the InfluxDB cluster.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[meta]</span><br><span class="line">  # Where the metadata/raft database is stored</span><br><span class="line">  dir = &quot;D:/influxdb-1.4.2-1/meta&quot;</span><br><span class="line"></span><br><span class="line">  # Automatically create a default retention policy when creating a database.</span><br><span class="line">    retention-autocreate = true</span><br><span class="line"></span><br><span class="line">  # If log messages are printed for the meta service</span><br><span class="line">    logging-enabled = true</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [data]</span><br><span class="line">###</span><br><span class="line">### Controls where the actual shard data for InfluxDB lives and how it is</span><br><span class="line">### flushed from the WAL. &quot;dir&quot; may need to be changed to a suitable place</span><br><span class="line">### for your system, but the WAL settings are an advanced configuration. The</span><br><span class="line">### defaults should work for most systems.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[data]</span><br><span class="line">  # The directory where the TSM storage engine stores TSM files.</span><br><span class="line">  dir = &quot;D:/influxdb-1.4.2-1/data&quot;</span><br><span class="line"></span><br><span class="line">  # The directory where the TSM storage engine stores WAL files.</span><br><span class="line">  wal-dir = &quot;D:/influxdb-1.4.2-1/wal&quot;</span><br><span class="line"></span><br><span class="line">  # The amount of time that a write will wait before fsyncing.  A duration</span><br><span class="line">  # greater than 0 can be used to batch up multiple fsync calls.  This is useful for slower</span><br><span class="line">  # disks or when WAL write contention is seen.  A value of 0s fsyncs every write to the WAL.</span><br><span class="line">  # Values in the range of 0-100ms are recommended for non-SSD disks.</span><br><span class="line">  # wal-fsync-delay = &quot;0s&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # The type of shard index to use for new shards.  The default is an in-memory index that is</span><br><span class="line">  # recreated at startup.  A value of &quot;tsi1&quot; will use a disk based index that supports higher</span><br><span class="line">  # cardinality datasets.</span><br><span class="line">  # index-version = &quot;inmem&quot;</span><br><span class="line"></span><br><span class="line">  # Trace logging provides more verbose output around the tsm engine. Turning</span><br><span class="line">  # this on can provide more useful output for debugging tsm engine issues.</span><br><span class="line">  # trace-logging-enabled = false</span><br><span class="line"></span><br><span class="line">  # Whether queries should be logged before execution. Very useful for troubleshooting, but will</span><br><span class="line">  # log any sensitive data contained within a query.</span><br><span class="line">    query-log-enabled = true</span><br><span class="line"></span><br><span class="line">  # Settings for the TSM engine</span><br><span class="line"></span><br><span class="line">  # CacheMaxMemorySize is the maximum size a shard&#x27;s cache can</span><br><span class="line">  # reach before it starts rejecting writes.</span><br><span class="line">  # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).</span><br><span class="line">  # Vaues without a size suffix are in bytes.</span><br><span class="line">  # cache-max-memory-size = &quot;1g&quot;</span><br><span class="line"></span><br><span class="line">  # CacheSnapshotMemorySize is the size at which the engine will</span><br><span class="line">  # snapshot the cache and write it to a TSM file, freeing up memory</span><br><span class="line">  # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).</span><br><span class="line">  # Values without a size suffix are in bytes.</span><br><span class="line">  # cache-snapshot-memory-size = &quot;25m&quot;</span><br><span class="line"></span><br><span class="line">  # CacheSnapshotWriteColdDuration is the length of time at</span><br><span class="line">  # which the engine will snapshot the cache and write it to</span><br><span class="line">  # a new TSM file if the shard hasn&#x27;t received writes or deletes</span><br><span class="line">  # cache-snapshot-write-cold-duration = &quot;10m&quot;</span><br><span class="line"></span><br><span class="line">  # CompactFullWriteColdDuration is the duration at which the engine</span><br><span class="line">  # will compact all TSM files in a shard if it hasn&#x27;t received a</span><br><span class="line">  # write or delete</span><br><span class="line">  # compact-full-write-cold-duration = &quot;4h&quot;</span><br><span class="line"></span><br><span class="line">  # The maximum number of concurrent full and level compactions that can run at one time.  A</span><br><span class="line">  # value of 0 results in 50% of runtime.GOMAXPROCS(0) used at runtime.  Any number greater</span><br><span class="line">  # than 0 limits compactions to that value.  This setting does not apply</span><br><span class="line">  # to cache snapshotting.</span><br><span class="line">  # max-concurrent-compactions = 0</span><br><span class="line"></span><br><span class="line">  # The maximum series allowed per database before writes are dropped.  This limit can prevent</span><br><span class="line">  # high cardinality issues at the database level.  This limit can be disabled by setting it to</span><br><span class="line">  # 0.</span><br><span class="line">  # max-series-per-database = 1000000</span><br><span class="line"></span><br><span class="line">  # The maximum number of tag values per tag that are allowed before writes are dropped.  This limit</span><br><span class="line">  # can prevent high cardinality tag values from being written to a measurement.  This limit can be</span><br><span class="line">  # disabled by setting it to 0.</span><br><span class="line">  # max-values-per-tag = 100000</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [coordinator]</span><br><span class="line">###</span><br><span class="line">### Controls the clustering service configuration.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[coordinator]</span><br><span class="line">  # The default time a write request will wait until a &quot;timeout&quot; error is returned to the caller.</span><br><span class="line">  # write-timeout = &quot;10s&quot;</span><br><span class="line"></span><br><span class="line">  # The maximum number of concurrent queries allowed to be executing at one time.  If a query is</span><br><span class="line">  # executed and exceeds this limit, an error is returned to the caller.  This limit can be disabled</span><br><span class="line">  # by setting it to 0.</span><br><span class="line">  # max-concurrent-queries = 0</span><br><span class="line"></span><br><span class="line">  # The maximum time a query will is allowed to execute before being killed by the system.  This limit</span><br><span class="line">  # can help prevent run away queries.  Setting the value to 0 disables the limit.</span><br><span class="line">  # query-timeout = &quot;0s&quot;</span><br><span class="line"></span><br><span class="line">  # The time threshold when a query will be logged as a slow query.  This limit can be set to help</span><br><span class="line">  # discover slow or resource intensive queries.  Setting the value to 0 disables the slow query logging.</span><br><span class="line">  # log-queries-after = &quot;0s&quot;</span><br><span class="line"></span><br><span class="line">  # The maximum number of points a SELECT can process.  A value of 0 will make</span><br><span class="line">  # the maximum point count unlimited.  This will only be checked every second so queries will not</span><br><span class="line">  # be aborted immediately when hitting the limit.</span><br><span class="line">  # max-select-point = 0</span><br><span class="line"></span><br><span class="line">  # The maximum number of series a SELECT can run.  A value of 0 will make the maximum series</span><br><span class="line">  # count unlimited.</span><br><span class="line">  # max-select-series = 0</span><br><span class="line"></span><br><span class="line">  # The maxium number of group by time bucket a SELECT can create.  A value of zero will max the maximum</span><br><span class="line">  # number of buckets unlimited.</span><br><span class="line">  # max-select-buckets = 0</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [retention]</span><br><span class="line">###</span><br><span class="line">### Controls the enforcement of retention policies for evicting old data.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[retention]</span><br><span class="line">  # Determines whether retention policy enforcement enabled.</span><br><span class="line">    enabled = true</span><br><span class="line"></span><br><span class="line">  # The interval of time when retention policy enforcement checks run.</span><br><span class="line">    check-interval = &quot;30m&quot;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [shard-precreation]</span><br><span class="line">###</span><br><span class="line">### Controls the precreation of shards, so they are available before data arrives.</span><br><span class="line">### Only shards that, after creation, will have both a start- and end-time in the</span><br><span class="line">### future, will ever be created. Shards are never precreated that would be wholly</span><br><span class="line">### or partially in the past.</span><br><span class="line"></span><br><span class="line">[shard-precreation]</span><br><span class="line">  # Determines whether shard pre-creation service is enabled.</span><br><span class="line">    enabled = true</span><br><span class="line"></span><br><span class="line">  # The interval of time when the check to pre-create new shards runs.</span><br><span class="line">    check-interval = &quot;10m&quot;</span><br><span class="line"></span><br><span class="line">  # The default period ahead of the endtime of a shard group that its successor</span><br><span class="line">  # group is created.</span><br><span class="line">    advance-period = &quot;30m&quot;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### Controls the system self-monitoring, statistics and diagnostics.</span><br><span class="line">###</span><br><span class="line">### The internal database for monitoring data is created automatically if</span><br><span class="line">### if it does not already exist. The target retention within this database</span><br><span class="line">### is called &#x27;monitor&#x27; and is also created with a retention period of 7 days</span><br><span class="line">### and a replication factor of 1, if it does not exist. In all cases the</span><br><span class="line">### this retention policy is configured as the default for the database.</span><br><span class="line"></span><br><span class="line">[monitor]</span><br><span class="line">  # Whether to record statistics internally.</span><br><span class="line">    store-enabled = true</span><br><span class="line"></span><br><span class="line">  # The destination database for recorded statistics</span><br><span class="line">    store-database = &quot;_internal&quot;</span><br><span class="line"></span><br><span class="line">  # The interval at which to record statistics</span><br><span class="line">    store-interval = &quot;10s&quot;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [http]</span><br><span class="line">###</span><br><span class="line">### Controls how the HTTP endpoints are configured. These are the primary</span><br><span class="line">### mechanism for getting data into and out of InfluxDB.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">  # Determines whether HTTP endpoint is enabled.</span><br><span class="line">    enabled = true</span><br><span class="line"></span><br><span class="line">  # The bind address used by the HTTP service.</span><br><span class="line">    bind-address = &quot;:8086&quot;</span><br><span class="line"></span><br><span class="line">  # Determines whether user authentication is enabled over HTTP/HTTPS.</span><br><span class="line">  # auth-enabled = false</span><br><span class="line"></span><br><span class="line">  # The default realm sent back when issuing a basic auth challenge.</span><br><span class="line">  # realm = &quot;InfluxDB&quot;</span><br><span class="line"></span><br><span class="line">  # Determines whether HTTP request logging is enabled.</span><br><span class="line">  # log-enabled = true</span><br><span class="line"></span><br><span class="line">  # Determines whether detailed write logging is enabled.</span><br><span class="line">  # write-tracing = false</span><br><span class="line"></span><br><span class="line">  # Determines whether the pprof endpoint is enabled.  This endpoint is used for</span><br><span class="line">  # troubleshooting and monitoring.</span><br><span class="line">  # pprof-enabled = true</span><br><span class="line"></span><br><span class="line">  # Determines whether HTTPS is enabled.</span><br><span class="line">  # https-enabled = false</span><br><span class="line"></span><br><span class="line">  # The SSL certificate to use when HTTPS is enabled.</span><br><span class="line">  # https-certificate = &quot;/etc/ssl/influxdb.pem&quot;</span><br><span class="line"></span><br><span class="line">  # Use a separate private key location.</span><br><span class="line">  # https-private-key = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  # The JWT auth shared secret to validate requests using JSON web tokens.</span><br><span class="line">  # shared-secret = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  # The default chunk size for result sets that should be chunked.</span><br><span class="line">  # max-row-limit = 0</span><br><span class="line"></span><br><span class="line">  # The maximum number of HTTP connections that may be open at once.  New connections that</span><br><span class="line">  # would exceed this limit are dropped.  Setting this value to 0 disables the limit.</span><br><span class="line">  # max-connection-limit = 0</span><br><span class="line"></span><br><span class="line">  # Enable http service over unix domain socket</span><br><span class="line">  # unix-socket-enabled = false</span><br><span class="line"></span><br><span class="line">  # The path of the unix domain socket.</span><br><span class="line">  # bind-socket = &quot;/var/run/influxdb.sock&quot;</span><br><span class="line"></span><br><span class="line">  # The maximum size of a client request body, in bytes. Setting this value to 0 disables the limit.</span><br><span class="line">  # max-body-size = 25000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [ifql]</span><br><span class="line">###</span><br><span class="line">### Configures the ifql RPC API.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[ifql]</span><br><span class="line">  # Determines whether the RPC service is enabled.</span><br><span class="line">  # enabled = true</span><br><span class="line"></span><br><span class="line">  # Determines whether additional logging is enabled.</span><br><span class="line">  # log-enabled = true</span><br><span class="line"></span><br><span class="line">  # The bind address used by the ifql RPC service.</span><br><span class="line">  # bind-address = &quot;:8082&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [subscriber]</span><br><span class="line">###</span><br><span class="line">### Controls the subscriptions, which can be used to fork a copy of all data</span><br><span class="line">### received by the InfluxDB host.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[subscriber]</span><br><span class="line">  # Determines whether the subscriber service is enabled.</span><br><span class="line">  # enabled = true</span><br><span class="line"></span><br><span class="line">  # The default timeout for HTTP writes to subscribers.</span><br><span class="line">  # http-timeout = &quot;30s&quot;</span><br><span class="line"></span><br><span class="line">  # Allows insecure HTTPS connections to subscribers.  This is useful when testing with self-</span><br><span class="line">  # signed certificates.</span><br><span class="line">  # insecure-skip-verify = false</span><br><span class="line"></span><br><span class="line">  # The path to the PEM encoded CA certs file. If the empty string, the default system certs will be used</span><br><span class="line">  # ca-certs = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  # The number of writer goroutines processing the write channel.</span><br><span class="line">  # write-concurrency = 40</span><br><span class="line"></span><br><span class="line">  # The number of in-flight writes buffered in the write channel.</span><br><span class="line">  # write-buffer-size = 1000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [[graphite]]</span><br><span class="line">###</span><br><span class="line">### Controls one or many listeners for Graphite data.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[[graphite]]</span><br><span class="line">  # Determines whether the graphite endpoint is enabled.</span><br><span class="line">  # enabled = false</span><br><span class="line">  # database = &quot;graphite&quot;</span><br><span class="line">  # retention-policy = &quot;&quot;</span><br><span class="line">  # bind-address = &quot;:2003&quot;</span><br><span class="line">  # protocol = &quot;tcp&quot;</span><br><span class="line">  # consistency-level = &quot;one&quot;</span><br><span class="line"></span><br><span class="line">  # These next lines control how batching works. You should have this enabled</span><br><span class="line">  # otherwise you could get dropped metrics or poor performance. Batching</span><br><span class="line">  # will buffer points in memory if you have many coming in.</span><br><span class="line"></span><br><span class="line">  # Flush if this many points get buffered</span><br><span class="line">  # batch-size = 5000</span><br><span class="line"></span><br><span class="line">  # number of batches that may be pending in memory</span><br><span class="line">  # batch-pending = 10</span><br><span class="line"></span><br><span class="line">  # Flush at least this often even if we haven&#x27;t hit buffer limit</span><br><span class="line">  # batch-timeout = &quot;1s&quot;</span><br><span class="line"></span><br><span class="line">  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.</span><br><span class="line">  # udp-read-buffer = 0</span><br><span class="line"></span><br><span class="line">  ### This string joins multiple matching &#x27;measurement&#x27; values providing more control over the final measurement name.</span><br><span class="line">  # separator = &quot;.&quot;</span><br><span class="line"></span><br><span class="line">  ### Default tags that will be added to all metrics.  These can be overridden at the template level</span><br><span class="line">  ### or by tags extracted from metric</span><br><span class="line">  # tags = [&quot;region=us-east&quot;, &quot;zone=1c&quot;]</span><br><span class="line"></span><br><span class="line">  ### Each template line requires a template pattern.  It can have an optional</span><br><span class="line">  ### filter before the template and separated by spaces.  It can also have optional extra</span><br><span class="line">  ### tags following the template.  Multiple tags should be separated by commas and no spaces</span><br><span class="line">  ### similar to the line protocol format.  There can be only one default template.</span><br><span class="line">  # templates = [</span><br><span class="line">  #   &quot;*.app env.service.resource.measurement&quot;,</span><br><span class="line">  #   # Default template</span><br><span class="line">  #   &quot;server.*&quot;,</span><br><span class="line">  # ]</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [collectd]</span><br><span class="line">###</span><br><span class="line">### Controls one or many listeners for collectd data.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[[collectd]]</span><br><span class="line">  # enabled = false</span><br><span class="line">  # bind-address = &quot;:25826&quot;</span><br><span class="line">  # database = &quot;collectd&quot;</span><br><span class="line">  # retention-policy = &quot;&quot;</span><br><span class="line">  #</span><br><span class="line">  # The collectd service supports either scanning a directory for multiple types</span><br><span class="line">  # db files, or specifying a single db file.</span><br><span class="line">  # typesdb = &quot;/usr/local/share/collectd&quot;</span><br><span class="line">  #</span><br><span class="line">  # security-level = &quot;none&quot;</span><br><span class="line">  # auth-file = &quot;/etc/collectd/auth_file&quot;</span><br><span class="line"></span><br><span class="line">  # These next lines control how batching works. You should have this enabled</span><br><span class="line">  # otherwise you could get dropped metrics or poor performance. Batching</span><br><span class="line">  # will buffer points in memory if you have many coming in.</span><br><span class="line"></span><br><span class="line">  # Flush if this many points get buffered</span><br><span class="line">  # batch-size = 5000</span><br><span class="line"></span><br><span class="line">  # Number of batches that may be pending in memory</span><br><span class="line">  # batch-pending = 10</span><br><span class="line"></span><br><span class="line">  # Flush at least this often even if we haven&#x27;t hit buffer limit</span><br><span class="line">  # batch-timeout = &quot;10s&quot;</span><br><span class="line"></span><br><span class="line">  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.</span><br><span class="line">  # read-buffer = 0</span><br><span class="line"></span><br><span class="line">  # Multi-value plugins can be handled two ways.</span><br><span class="line">  # &quot;split&quot; will parse and store the multi-value plugin data into separate measurements</span><br><span class="line">  # &quot;join&quot; will parse and store the multi-value plugin as a single multi-value measurement.</span><br><span class="line">  # &quot;split&quot; is the default behavior for backward compatability with previous versions of influxdb.</span><br><span class="line">  # parse-multivalue-plugin = &quot;split&quot;</span><br><span class="line">###</span><br><span class="line">### [opentsdb]</span><br><span class="line">###</span><br><span class="line">### Controls one or many listeners for OpenTSDB data.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[[opentsdb]]</span><br><span class="line">  # enabled = false</span><br><span class="line">  # bind-address = &quot;:4242&quot;</span><br><span class="line">  # database = &quot;opentsdb&quot;</span><br><span class="line">  # retention-policy = &quot;&quot;</span><br><span class="line">  # consistency-level = &quot;one&quot;</span><br><span class="line">  # tls-enabled = false</span><br><span class="line">  # certificate= &quot;/etc/ssl/influxdb.pem&quot;</span><br><span class="line"></span><br><span class="line">  # Log an error for every malformed point.</span><br><span class="line">  # log-point-errors = true</span><br><span class="line"></span><br><span class="line">  # These next lines control how batching works. You should have this enabled</span><br><span class="line">  # otherwise you could get dropped metrics or poor performance. Only points</span><br><span class="line">  # metrics received over the telnet protocol undergo batching.</span><br><span class="line"></span><br><span class="line">  # Flush if this many points get buffered</span><br><span class="line">  # batch-size = 1000</span><br><span class="line"></span><br><span class="line">  # Number of batches that may be pending in memory</span><br><span class="line">  # batch-pending = 5</span><br><span class="line"></span><br><span class="line">  # Flush at least this often even if we haven&#x27;t hit buffer limit</span><br><span class="line">  # batch-timeout = &quot;1s&quot;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [[udp]]</span><br><span class="line">###</span><br><span class="line">### Controls the listeners for InfluxDB line protocol data via UDP.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[[udp]]</span><br><span class="line">  # enabled = false</span><br><span class="line">  # bind-address = &quot;:8089&quot;</span><br><span class="line">  # database = &quot;udp&quot;</span><br><span class="line">  # retention-policy = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  # These next lines control how batching works. You should have this enabled</span><br><span class="line">  # otherwise you could get dropped metrics or poor performance. Batching</span><br><span class="line">  # will buffer points in memory if you have many coming in.</span><br><span class="line"></span><br><span class="line">  # Flush if this many points get buffered</span><br><span class="line">  # batch-size = 5000</span><br><span class="line"></span><br><span class="line">  # Number of batches that may be pending in memory</span><br><span class="line">  # batch-pending = 10</span><br><span class="line"></span><br><span class="line">  # Will flush at least this often even if we haven&#x27;t hit buffer limit</span><br><span class="line">  # batch-timeout = &quot;1s&quot;</span><br><span class="line"></span><br><span class="line">  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.</span><br><span class="line">  # read-buffer = 0</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">### [continuous_queries]</span><br><span class="line">###</span><br><span class="line">### Controls how continuous queries are run within InfluxDB.</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">[continuous_queries]</span><br><span class="line">  # Determines whether the continuous query service is enabled.</span><br><span class="line">  # enabled = true</span><br><span class="line"></span><br><span class="line">  # Controls whether queries are logged when executed by the CQ service.</span><br><span class="line">  # log-enabled = true</span><br><span class="line"></span><br><span class="line">  # Controls whether queries are logged to the self-monitoring data store.</span><br><span class="line">  # query-stats-enabled = false</span><br><span class="line"></span><br><span class="line">  # interval for how often continuous queries will be checked if they need to run</span><br><span class="line">  # run-interval = &quot;1s&quot;</span><br></pre></td></tr></table></figure>

<p>四、使配置生效并打开数据库连接，双击influxd.exe就好，然后双击influx.exe进行操作，网上有操作教程，注意操作数据库时不能关闭influxd.exe，我不知道为什么总有这么个提示：There was an error writing history file: open : The system cannot find the file specified.不过好像没啥影响</p>
<p>五、要使用web管理需要下载Chronograf，<a href="https://portal.influxdata.com/downloads">https://portal.influxdata.com/downloads</a>第三个就是，下载完直接解压，双击exe程序，在浏览器输入<a href="http://localhost:8888/">http://localhost:8888/</a>，一开始登录要账户密码，我都用admin就进去了</p>
<p>这个是查看建立的数据库  </p>
<img src="/2019/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93/InfluxDB/InfluxDB%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/IMG-20250704185714467.png" class="">

<p>这个是查看数据库的数据  </p>
<img src="/2019/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93/InfluxDB/InfluxDB%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/IMG-20250704185714467.png" class="">

<p>没了</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>InfluxDB</category>
      </categories>
      <tags>
        <tag>时序数据库</tag>
        <tag>InfluxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>时序数据库InfluxDB使用详解</title>
    <url>/2019/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93/InfluxDB/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93InfluxDB%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://link.jianshu.com/?t=https://docs.influxdata.com/influxdb/v1.3/">InfluxDB</a>是一个开源的时序数据库，使用GO语言开发，特别适合用于处理和分析资源监控数据这种时序相关数据。而InfluxDB自带的各种特殊函数如求标准差，随机取样数据，统计数据变化比等，使数据统计和实时分析变得十分方便。在我们的容器资源监控系统中，就采用了InfluxDB存储cadvisor的监控数据。本文对InfluxDB的基本概念和一些特色功能做一个详细介绍，内容主要是翻译整理自官网文档，如有错漏，请指正。</p>
</blockquote>
<p>这里说一下使用docker容器运行influxdb的步骤，物理机安装请参照<a href="https://link.jianshu.com/?t=https://docs.influxdata.com/influxdb/v1.3/introduction/installation/">官方文档</a>。拉取镜像文件后运行即可，当前最新版本是1.3.5。启动容器时设置挂载的数据目录和开放端口。InfluxDB的操作语法InfluxQL与SQL基本一致，也提供了一个类似mysql-client的名为influx的CLI。InfluxDB本身是支持分布式部署多副本存储的，本文介绍都是针对的单节点单副本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">f216e9be15bff545befecb30d1d275552026216a939cc20c042b17419e3bde31</span><br><span class="line"></span><br><span class="line">root@f216e9be15bf:/</span><br><span class="line">Connected to http:</span><br><span class="line">InfluxDB shell version: 1.3.5</span><br><span class="line">&gt; create database cadvisor  </span><br><span class="line">&gt; show databases           </span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">cadvisor</span><br><span class="line">&gt; CREATE USER testuser WITH PASSWORD &#x27;testpwd&#x27; </span><br><span class="line">&gt; GRANT ALL PRIVILEGES ON cadvisor TO testuser </span><br><span class="line">&gt; CREATE RETENTION POLICY &quot;cadvisor_retention&quot; ON &quot;cadvisor&quot; DURATION 30d REPLICATION 1 DEFAULT </span><br></pre></td></tr></table></figure>

<p>influxdb里面有一些重要概念：database，timestamp，field key， field value， field set，tag key，tag value，tag set，measurement， retention policy ，series，point。结合下面的例子数据来说明这几个概念：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: census</span><br><span class="line">-————————————</span><br><span class="line">time                     butterflies     honeybees     location   scientist</span><br><span class="line">2015-08-18T00:00:00Z      12                23           1         langstroth</span><br><span class="line">2015-08-18T00:00:00Z      1                 30           1         perpetua</span><br><span class="line">2015-08-18T00:06:00Z      11                28           1         langstroth</span><br><span class="line">2015-08-18T00:06:00Z      3                 28           1         perpetua</span><br><span class="line">2015-08-18T05:54:00Z      2                 11           2         langstroth</span><br><span class="line">2015-08-18T06:00:00Z      1                 10           2         langstroth</span><br><span class="line">2015-08-18T06:06:00Z      8                 23           2         perpetua</span><br><span class="line">2015-08-18T06:12:00Z      7                 22           2         perpetua</span><br></pre></td></tr></table></figure>

<h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><p>既然是时间序列数据库，influxdb的数据都有一列名为time的列，里面存储UTC时间戳。</p>
<h3 id="field-key，field-value，field-set"><a href="#field-key，field-value，field-set" class="headerlink" title="field key，field value，field set"></a>field key，field value，field set</h3><p>butterflies和honeybees两列数据称为字段(fields)，influxdb的字段由field key和field value组成。其中butterflies和honeybees为field key，它们为string类型，用于存储元数据。</p>
<p>而butterflies这一列的数据12-7为butterflies的field value，同理，honeybees这一列的23-22为honeybees的field value。field value可以为string，float，integer或boolean类型。field value通常都是与时间关联的。</p>
<p>field key和field value对组成的集合称之为field set。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">butterflies = 12 honeybees = 23</span><br><span class="line">butterflies = 1 honeybees = 30</span><br><span class="line">butterflies = 11 honeybees = 28</span><br><span class="line">butterflies = 3 honeybees = 28</span><br><span class="line">butterflies = 2 honeybees = 11</span><br><span class="line">butterflies = 1 honeybees = 10</span><br><span class="line">butterflies = 8 honeybees = 23</span><br><span class="line">butterflies = 7 honeybees = 22</span><br></pre></td></tr></table></figure>

<p><strong>在influxdb中，字段必须存在。注意，字段是没有索引的。如果使用字段作为查询条件，会扫描符合查询条件的所有字段值，性能不及tag。类比一下，fields相当于SQL的没有索引的列。</strong></p>
<h3 id="tag-key，tag-value，tag-set"><a href="#tag-key，tag-value，tag-set" class="headerlink" title="tag key，tag value，tag set"></a>tag key，tag value，tag set</h3><p>location和scientist这两列称为标签(tags)，标签由tag key和tag value组成。location这个tag key有两个tag value：1和2，scientist有两个tag value：langstroth和perpetua。tag key和tag value对组成了tag set，示例中的tag set如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location = 1, scientist = langstroth</span><br><span class="line">location = 2, scientist = langstroth</span><br><span class="line">location = 1, scientist = perpetua</span><br><span class="line">location = 2, scientist = perpetua</span><br></pre></td></tr></table></figure>

<p><strong>tags是可选的，但是强烈建议你用上它，因为tag是有索引的，tags相当于SQL中的有索引的列。tag value只能是string类型</strong> 如果你的常用场景是根据butterflies和honeybees来查询，那么你可以将这两个列设置为tag，而其他两列设置为field，tag和field依据具体查询需求来定。</p>
<h3 id="measurement"><a href="#measurement" class="headerlink" title="measurement"></a>measurement</h3><p>measurement是fields，tags以及time列的容器，measurement的名字用于描述存储在其中的字段数据，类似mysql的表名。如上面例子中的measurement为census。measurement相当于SQL中的表，本文中我在部分地方会用表来指代measurement。</p>
<h3 id="retention-policy"><a href="#retention-policy" class="headerlink" title="retention policy"></a>retention policy</h3><p>retention policy指数据保留策略，示例数据中的retention policy为默认的autogen。它表示数据一直保留永不过期，副本数量为1。你也可以指定数据的保留时间，如30天。</p>
<h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><p>series是共享同一个retention policy，measurement以及tag set的数据集合。示例中数据有4个series，如下:</p>
<p>Arbitrary series number</p>
<p>Retention policy</p>
<p>Measurement</p>
<p>Tag set</p>
<p>series 1</p>
<p>autogen</p>
<p>census</p>
<p>location &#x3D; 1,scientist &#x3D; langstroth</p>
<p>series 2</p>
<p>autogen</p>
<p>census</p>
<p>location &#x3D; 2,scientist &#x3D; langstroth</p>
<p>series 3</p>
<p>autogen</p>
<p>census</p>
<p>location &#x3D; 1,scientist &#x3D; perpetua</p>
<p>series 4</p>
<p>autogen</p>
<p>census</p>
<p>location &#x3D; 2,scientist &#x3D; perpetua</p>
<h3 id="point"><a href="#point" class="headerlink" title="point"></a>point</h3><p>point则是同一个series中具有相同时间的field set，points相当于SQL中的数据行。如下面就是一个point：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: census</span><br><span class="line">-----------------</span><br><span class="line">time                  butterflies    honeybees   location    scientist</span><br><span class="line">2015-08-18T00:00:00Z       1            30           1        perpetua</span><br></pre></td></tr></table></figure>

<h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><p>上面提到的结构都存储在数据库中，示例的数据库为my_database。一个数据库可以有多个measurement，retention policy， continuous queries以及user。influxdb是一个无模式的数据库，可以很容易的添加新的measurement，tags，fields等。而它的操作却和传统的数据库一样，可以使用类SQL语言查询和修改数据。</p>
<p>influxdb不是一个完整的CRUD数据库，它更像是一个CR-ud数据库。它优先考虑的是增加和读取数据而不是更新和删除数据的性能，而且它阻止了某些更新和删除行为使得创建和读取数据更加高效。</p>
<p>influxdb函数分为聚合函数，选择函数，转换函数，预测函数等。除了与普通数据库一样提供了基本操作函数外，还提供了一些特色函数以方便数据统计计算，下面会一一介绍其中一些常用的特色函数。</p>
<ul>
<li>聚合函数：<code>FILL()</code>, <code>INTEGRAL()</code>，<code>SPREAD()</code>， <code>STDDEV()</code>，<code>MEAN()</code>, <code>MEDIAN()</code>等。</li>
<li>选择函数: <code>SAMPLE()</code>, <code>PERCENTILE()</code>, <code>FIRST()</code>, <code>LAST()</code>, <code>TOP()</code>, <code>BOTTOM()</code>等。</li>
<li>转换函数: <code>DERIVATIVE()</code>, <code>DIFFERENCE()</code>等。</li>
<li>预测函数：<code>HOLT_WINTERS()</code>。</li>
</ul>
<p>先从官网导入测试数据（注：这里测试用的版本是1.3.1，最新版本是1.3.5）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt</span><br><span class="line">$ influx -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database</span><br><span class="line">$ influx -precision rfc3339 -database NOAA_water_database</span><br><span class="line">Connected to http://localhost:8086 version 1.3.1</span><br><span class="line">InfluxDB shell 1.3.1</span><br><span class="line">&gt; show measurements</span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">average_temperature</span><br><span class="line">distincts</span><br><span class="line">h2o_feet</span><br><span class="line">h2o_pH</span><br><span class="line">h2o_quality</span><br><span class="line">h2o_temperature</span><br><span class="line"></span><br><span class="line">&gt; show series from h2o_feet;</span><br><span class="line">key</span><br><span class="line">---</span><br><span class="line">h2o_feet,location=coyote_creek</span><br><span class="line">h2o_feet,location=santa_monica</span><br></pre></td></tr></table></figure>

<p>下面的例子都以官方示例数据库来测试，这里只用部分数据以方便观察。measurement为<code>h2o_feet</code>，tag key为<code>location</code>，field key有<code>level description</code>和<code>water_level</code>两个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 level description    location     water_level</span><br><span class="line">----                 -----------------    --------     -----------</span><br><span class="line">2015-08-18T00:00:00Z between 6 and 9 feet coyote_creek 8.12</span><br><span class="line">2015-08-18T00:00:00Z below 3 feet         santa_monica 2.064</span><br><span class="line">2015-08-18T00:06:00Z between 6 and 9 feet coyote_creek 8.005</span><br><span class="line">2015-08-18T00:06:00Z below 3 feet         santa_monica 2.116</span><br><span class="line">2015-08-18T00:12:00Z between 6 and 9 feet coyote_creek 7.887</span><br><span class="line">2015-08-18T00:12:00Z below 3 feet         santa_monica 2.028</span><br><span class="line">2015-08-18T00:18:00Z between 6 and 9 feet coyote_creek 7.762</span><br><span class="line">2015-08-18T00:18:00Z below 3 feet         santa_monica 2.126</span><br><span class="line">2015-08-18T00:24:00Z between 6 and 9 feet coyote_creek 7.635</span><br><span class="line">2015-08-18T00:24:00Z below 3 feet         santa_monica 2.041</span><br><span class="line">2015-08-18T00:30:00Z between 6 and 9 feet coyote_creek 7.5</span><br><span class="line">2015-08-18T00:30:00Z below 3 feet         santa_monica 2.051</span><br></pre></td></tr></table></figure>

<h3 id="GROUP-BY，FILL"><a href="#GROUP-BY，FILL" class="headerlink" title="GROUP BY，FILL()"></a>GROUP BY，FILL()</h3><p>如下语句中<code>GROUP BY time(12m),*</code> 表示以每12分钟和tag(location)分组(如果是<code>GROUP BY time(12m)</code>则表示仅每12分钟分组，<strong>GROUP BY 参数只能是time和tag</strong>)。然后fill(200)表示如果这个时间段没有数据，以200填充，mean(field_key)求该范围内数据的平均值(注意：这是依据series来计算。其他还有SUM求和，MEDIAN求中位数)。LIMIT 7表示限制返回的point(记录数)最多为7条，而SLIMIT 1则是限制返回的series为1个。</p>
<p>注意这里的时间区间，起始时间为整点前包含这个区间第一个12m的时间，比如这里为 <code>2015-08-17T:23:48:00Z</code>，第一条为 <code>2015-08-17T23:48:00Z &lt;= t &lt; 2015-08-18T00:00:00Z</code>这个区间的<code>location=coyote_creek</code>的<code>water_level</code>的平均值，这里没有数据，于是填充的200。第二条为 <code>2015-08-18T00:00:00Z &lt;= t &lt; 2015-08-18T00:12:00Z</code>区间的<code>location=coyote_creek</code>的<code>water_level</code>平均值，这里为 <code>（8.12+8.005）/ 2 = 8.0625</code>，其他以此类推。</p>
<p>而<code>GROUP BY time(10m)</code>则表示以10分钟分组，起始时间为包含这个区间的第一个10m的时间，即 <code>2015-08-17T23:40:00Z</code>。默认返回的是第一个series，如果要计算另外那个series，可以在SQL语句后面加上 <code>SOFFSET 1</code>。</p>
<p>那如果时间小于数据本身采集的时间间隔呢，比如<code>GROUP BY time(10s)</code>呢？这样的话，就会按10s取一个点，没有数值的为空或者FILL填充，对应时间点有数据则保持不变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## GROUP BY time(12m)</span><br><span class="line">&gt; SELECT mean(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m),* fill(200) LIMIT 7 SLIMIT 1</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=coyote_creek</span><br><span class="line">time                 mean</span><br><span class="line">----                 ----</span><br><span class="line">2015-08-17T23:48:00Z 200</span><br><span class="line">2015-08-18T00:00:00Z 8.0625</span><br><span class="line">2015-08-18T00:12:00Z 7.8245</span><br><span class="line">2015-08-18T00:24:00Z 7.5675</span><br><span class="line"></span><br><span class="line">## GROUP BY time(10m)，SOFFSET设置为1</span><br><span class="line">&gt; SELECT mean(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(10m),* fill(200) LIMIT 7 SLIMIT 1 SOFFSET 1</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 mean</span><br><span class="line">----                 ----</span><br><span class="line">2015-08-17T23:40:00Z 200</span><br><span class="line">2015-08-17T23:50:00Z 200</span><br><span class="line">2015-08-18T00:00:00Z 2.09</span><br><span class="line">2015-08-18T00:10:00Z 2.077</span><br><span class="line">2015-08-18T00:20:00Z 2.041</span><br><span class="line">2015-08-18T00:30:00Z 2.051</span><br></pre></td></tr></table></figure>

<h3 id="INTEGRAL-field-key-unit"><a href="#INTEGRAL-field-key-unit" class="headerlink" title="INTEGRAL(field_key, unit)"></a>INTEGRAL(field_key, unit)</h3><p>计算数值字段值覆盖的曲面的面积值并得到面积之和。测试数据如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT &quot;water_level&quot; FROM &quot;h2o_feet&quot; WHERE &quot;location&quot; = &#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line"></span><br><span class="line">name: h2o_feet</span><br><span class="line">time                   water_level</span><br><span class="line">----                   -----------</span><br><span class="line">2015-08-18T00:00:00Z   2.064</span><br><span class="line">2015-08-18T00:06:00Z   2.116</span><br><span class="line">2015-08-18T00:12:00Z   2.028</span><br><span class="line">2015-08-18T00:18:00Z   2.126</span><br><span class="line">2015-08-18T00:24:00Z   2.041</span><br><span class="line">2015-08-18T00:30:00Z   2.051</span><br></pre></td></tr></table></figure>

<p>使用INTERGRAL计算面积。注意，这个面积就是这些点连接起来后与时间围成的不规则图形的面积，注意unit默认是以1秒计算，所以下面语句计算结果为<code>3732.66=2.028*1800+分割出来的梯形和三角形面积</code>。如果unit改为1分，则结果为<code>3732.66/60 = 62.211</code>。unit为2分，则结果为<code>3732.66/120 = 31.1055</code>。以此类推。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># unit为默认的1秒</span><br><span class="line">&gt; SELECT INTEGRAL(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE &quot;location&quot; = &#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 integral</span><br><span class="line">----                 --------</span><br><span class="line">1970-01-01T00:00:00Z 3732.66</span><br><span class="line"></span><br><span class="line"># unit为1分</span><br><span class="line">&gt; SELECT INTEGRAL(&quot;water_level&quot;, 1m) FROM &quot;h2o_feet&quot; WHERE &quot;location&quot; = &#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 integral</span><br><span class="line">----                 --------</span><br><span class="line">1970-01-01T00:00:00Z 62.211</span><br></pre></td></tr></table></figure>

<h3 id="SPREAD-field-key"><a href="#SPREAD-field-key" class="headerlink" title="SPREAD(field_key)"></a>SPREAD(field_key)</h3><p>计算数值字段的最大值和最小值的差值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT SPREAD(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m),* fill(18) LIMIT 3 SLIMIT 1 SOFFSET 1</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 spread</span><br><span class="line">----                 ------</span><br><span class="line">2015-08-17T23:48:00Z 18</span><br><span class="line">2015-08-18T00:00:00Z 0.052000000000000046</span><br><span class="line">2015-08-18T00:12:00Z 0.09799999999999986</span><br></pre></td></tr></table></figure>

<h3 id="STDDEV-field-key"><a href="#STDDEV-field-key" class="headerlink" title="STDDEV(field_key)"></a>STDDEV(field_key)</h3><p>计算字段的标准差。influxdb用的是贝塞尔修正的标准差计算公式 ，如下：</p>
<ul>
<li>mean&#x3D;(v1+v2+…+vn)&#x2F;n;</li>
<li>stddev &#x3D; math.sqrt(<br>((v1-mean)2 + (v2-mean)2 + …+(vn-mean)2)&#x2F;(n-1)<br>)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT STDDEV(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m),* fill(18) SLIMIT 1;</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=coyote_creek</span><br><span class="line">time                 stddev</span><br><span class="line">----                 ------</span><br><span class="line">2015-08-17T23:48:00Z 18</span><br><span class="line">2015-08-18T00:00:00Z 0.08131727983645186</span><br><span class="line">2015-08-18T00:12:00Z 0.08838834764831845</span><br><span class="line">2015-08-18T00:24:00Z 0.09545941546018377</span><br></pre></td></tr></table></figure>

<h3 id="PERCENTILE-field-key-N"><a href="#PERCENTILE-field-key-N" class="headerlink" title="PERCENTILE(field_key, N)"></a>PERCENTILE(field_key, N)</h3><p>选取某个字段中大于N%的这个字段值。</p>
<p>如果一共有4条记录，N为10，则10%*4&#x3D;0.4，四舍五入为0，则查询结果为空。N为20，则 20% * 4 &#x3D; 0.8，四舍五入为1，选取的是4个数中最小的数。如果N为40，40% * 4 &#x3D; 1.6，四舍五入为2，则选取的是4个数中第二小的数。由此可以看出N&#x3D;100时，就跟<code>MAX(field_key)</code>是一样的，而当N&#x3D;50时，与<code>MEDIAN(field_key)</code>在字段值为奇数个时是一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT PERCENTILE(&quot;water_level&quot;,20) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m)</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 percentile</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-17T23:48:00Z </span><br><span class="line">2015-08-18T00:00:00Z 2.064</span><br><span class="line">2015-08-18T00:12:00Z 2.028</span><br><span class="line">2015-08-18T00:24:00Z 2.041</span><br><span class="line"></span><br><span class="line">&gt; SELECT PERCENTILE(&quot;water_level&quot;,40) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m)</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 percentile</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-17T23:48:00Z </span><br><span class="line">2015-08-18T00:00:00Z 2.116</span><br><span class="line">2015-08-18T00:12:00Z 2.126</span><br><span class="line">2015-08-18T00:24:00Z 2.051</span><br></pre></td></tr></table></figure>

<h3 id="SAMPLE-field-key-N"><a href="#SAMPLE-field-key-N" class="headerlink" title="SAMPLE(field_key, N)"></a>SAMPLE(field_key, N)</h3><p>随机返回field key的N个值。如果语句中有<code>GROUP BY time()</code>，则每组数据随机返回N个值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT SAMPLE(&quot;water_level&quot;,2) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 sample</span><br><span class="line">----                 ------</span><br><span class="line">2015-08-18T00:00:00Z 2.064</span><br><span class="line">2015-08-18T00:12:00Z 2.028</span><br><span class="line"></span><br><span class="line">&gt; SELECT SAMPLE(&quot;water_level&quot;,2) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; GROUP BY time(12m);</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 sample</span><br><span class="line">----                 ------</span><br><span class="line">2015-08-18T00:06:00Z 2.116</span><br><span class="line">2015-08-18T00:06:00Z 8.005</span><br><span class="line">2015-08-18T00:12:00Z 7.887</span><br><span class="line">2015-08-18T00:18:00Z 7.762</span><br><span class="line">2015-08-18T00:24:00Z 7.635</span><br><span class="line">2015-08-18T00:30:00Z 2.051</span><br></pre></td></tr></table></figure>

<h3 id="CUMULATIVE-SUM-field-key"><a href="#CUMULATIVE-SUM-field-key" class="headerlink" title="CUMULATIVE_SUM(field_key)"></a>CUMULATIVE_SUM(field_key)</h3><p>计算字段值的递增和。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT CUMULATIVE_SUM(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-17T23:48:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 cumulative_sum</span><br><span class="line">----                 --------------</span><br><span class="line">2015-08-18T00:00:00Z 8.12</span><br><span class="line">2015-08-18T00:00:00Z 10.184</span><br><span class="line">2015-08-18T00:06:00Z 18.189</span><br><span class="line">2015-08-18T00:06:00Z 20.305</span><br><span class="line">2015-08-18T00:12:00Z 28.192</span><br><span class="line">2015-08-18T00:12:00Z 30.22</span><br><span class="line">2015-08-18T00:18:00Z 37.982</span><br><span class="line">2015-08-18T00:18:00Z 40.108</span><br><span class="line">2015-08-18T00:24:00Z 47.742999999999995</span><br><span class="line">2015-08-18T00:24:00Z 49.78399999999999</span><br><span class="line">2015-08-18T00:30:00Z 57.28399999999999</span><br><span class="line">2015-08-18T00:30:00Z 59.334999999999994</span><br></pre></td></tr></table></figure>

<h3 id="DERIVATIVE-field-key-unit-和-NON-NEGATIVE-DERIVATIVE-field-key-unit"><a href="#DERIVATIVE-field-key-unit-和-NON-NEGATIVE-DERIVATIVE-field-key-unit" class="headerlink" title="DERIVATIVE(field_key, unit) 和 NON_NEGATIVE_DERIVATIVE(field_key, unit)"></a>DERIVATIVE(field_key, unit) 和 NON_NEGATIVE_DERIVATIVE(field_key, unit)</h3><p>计算字段值的变化比。unit默认为1s，即计算的是1秒内的变化比。</p>
<p>如下面的第一个数据计算方法是 <code>(2.116-2.064)/(6*60) = 0.00014..</code>，其他计算方式同理。虽然原始数据是6m收集一次，但是这里的变化比默认是按秒来计算的。如果要按6m计算，则设置unit为6m即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT DERIVATIVE(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE &quot;location&quot; = &#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 derivative</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-18T00:06:00Z 0.00014444444444444457</span><br><span class="line">2015-08-18T00:12:00Z -0.00024444444444444465</span><br><span class="line">2015-08-18T00:18:00Z 0.0002722222222222218</span><br><span class="line">2015-08-18T00:24:00Z -0.000236111111111111</span><br><span class="line">2015-08-18T00:30:00Z 0.00002777777777777842</span><br><span class="line"></span><br><span class="line">&gt; SELECT DERIVATIVE(&quot;water_level&quot;, 6m) FROM &quot;h2o_feet&quot; WHERE &quot;location&quot; = &#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27;</span><br><span class="line">name: h2o_feet</span><br><span class="line">time                 derivative</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-18T00:06:00Z 0.052000000000000046</span><br><span class="line">2015-08-18T00:12:00Z -0.08800000000000008</span><br><span class="line">2015-08-18T00:18:00Z 0.09799999999999986</span><br><span class="line">2015-08-18T00:24:00Z -0.08499999999999996</span><br><span class="line">2015-08-18T00:30:00Z 0.010000000000000231</span><br></pre></td></tr></table></figure>

<p>而DERIVATIVE结合GROUP BY time，以及mean可以构造更加复杂的查询，如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT DERIVATIVE(mean(&quot;water_level&quot;), 6m) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; group by time(12m), *</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=coyote_creek</span><br><span class="line">time                 derivative</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-18T00:12:00Z -0.11900000000000022</span><br><span class="line">2015-08-18T00:24:00Z -0.12849999999999984</span><br><span class="line"></span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 derivative</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-18T00:12:00Z -0.00649999999999995</span><br><span class="line">2015-08-18T00:24:00Z -0.015499999999999847</span><br></pre></td></tr></table></figure>

<p>这个计算其实是先根据GROUP BY time求平均值，然后对这个平均值再做变化比的计算。因为数据是按12分钟分组的，而变化比的unit是6分钟，所以差值除以2(12&#x2F;6)才得到变化比。如第一个值是 <code>(7.8245-8.0625)/2 = -0.1190</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT mean(&quot;water_level&quot;) FROM &quot;h2o_feet&quot; WHERE time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; group by time(12m), *</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=coyote_creek</span><br><span class="line">time                 mean</span><br><span class="line">----                 ----</span><br><span class="line">2015-08-18T00:00:00Z 8.0625</span><br><span class="line">2015-08-18T00:12:00Z 7.8245</span><br><span class="line">2015-08-18T00:24:00Z 7.5675</span><br><span class="line"></span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 mean</span><br><span class="line">----                 ----</span><br><span class="line">2015-08-18T00:00:00Z 2.09</span><br><span class="line">2015-08-18T00:12:00Z 2.077</span><br><span class="line">2015-08-18T00:24:00Z 2.0460000000000003</span><br></pre></td></tr></table></figure>

<p><code>NON_NEGATIVE_DERIVATIVE</code>与<code>DERIVATIVE</code>不同的是它只返回的是非负的变化比:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT DERIVATIVE(mean(&quot;water_level&quot;), 6m) FROM &quot;h2o_feet&quot; WHERE location=&#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; group by time(6m), *</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 derivative</span><br><span class="line">----                 ----------</span><br><span class="line">2015-08-18T00:06:00Z 0.052000000000000046</span><br><span class="line">2015-08-18T00:12:00Z -0.08800000000000008</span><br><span class="line">2015-08-18T00:18:00Z 0.09799999999999986</span><br><span class="line">2015-08-18T00:24:00Z -0.08499999999999996</span><br><span class="line">2015-08-18T00:30:00Z 0.010000000000000231</span><br><span class="line"></span><br><span class="line">&gt; SELECT NON_NEGATIVE_DERIVATIVE(mean(&quot;water_level&quot;), 6m) FROM &quot;h2o_feet&quot; WHERE location=&#x27;santa_monica&#x27; AND time &gt;= &#x27;2015-08-18T00:00:00Z&#x27; AND time &lt;= &#x27;2015-08-18T00:30:00Z&#x27; group by time(6m), *</span><br><span class="line">name: h2o_feet</span><br><span class="line">tags: location=santa_monica</span><br><span class="line">time                 non_negative_derivative</span><br><span class="line">----                 -----------------------</span><br><span class="line">2015-08-18T00:06:00Z 0.052000000000000046</span><br><span class="line">2015-08-18T00:18:00Z 0.09799999999999986</span><br><span class="line">2015-08-18T00:30:00Z 0.010000000000000231</span><br></pre></td></tr></table></figure>

<h2 id="4-1-基本语法"><a href="#4-1-基本语法" class="headerlink" title="4.1 基本语法"></a>4.1 基本语法</h2><p>连续查询(CONTINUOUS QUERY，简写为CQ)是指定时自动在实时数据上进行的InfluxQL查询，查询结果可以存储到指定的measurement中。基本语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br><span class="line">BEGIN</span><br><span class="line">  &lt;cq_query&gt;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">cq_query格式：</span><br><span class="line">SELECT &lt;function[s]&gt; INTO &lt;destination_measurement&gt; FROM &lt;measurement&gt; [WHERE &lt;stuff&gt;] GROUP BY time(&lt;interval&gt;)[,&lt;tag_key[s]&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CQ操作的是实时数据，它使用本地服务器的时间戳、GROUP BY time()时间间隔以及InfluxDB预先设置好的时间范围来确定什么时候开始查询以及查询覆盖的时间范围。注意CQ语句里面的WHERE条件是没有时间范围的，因为CQ会根据<code>GROUP BY time()</code>自动确定时间范围。</p>
<p>CQ执行的时间间隔和<code>GROUP BY time()</code>的时间间隔一样，它在InfluxDB预先设置的时间范围的起始时刻执行。如果<code>GROUP BY time(1h)</code>，则单次查询的时间范围为 <code>now()-GROUP BY time(1h)</code>到 <code>now()</code>，也就是说，如果当前时间为17点，这次查询的时间范围为 16:00到16:59.99999。</p>
<p>下面看几个示例，示例数据如下，这是数据库<code>transportation</code>中名为<code>bus_data</code>的measurement，每15分钟统计一次乘客数和投诉数。数据文件<code>bus_data.txt</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DDL</span><br><span class="line">CREATE DATABASE transportation</span><br><span class="line"></span><br><span class="line"># DML</span><br><span class="line"># CONTEXT-DATABASE: transportation </span><br><span class="line"></span><br><span class="line">bus_data,complaints=9 passengers=5 1472367600</span><br><span class="line">bus_data,complaints=9 passengers=8 1472368500</span><br><span class="line">bus_data,complaints=9 passengers=8 1472369400</span><br><span class="line">bus_data,complaints=9 passengers=7 1472370300</span><br><span class="line">bus_data,complaints=9 passengers=8 1472371200</span><br><span class="line">bus_data,complaints=7 passengers=15 1472372100</span><br><span class="line">bus_data,complaints=7 passengers=15 1472373000</span><br><span class="line">bus_data,complaints=7 passengers=17 1472373900</span><br><span class="line">bus_data,complaints=7 passengers=20 1472374800</span><br></pre></td></tr></table></figure>

<p>导入数据，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@f216e9be15bf:/# influx -import -path=bus_data.txt -precision=s</span><br><span class="line">root@f216e9be15bf:/# influx -precision=rfc3339 -database=transportation</span><br><span class="line">Connected to http://localhost:8086 version 1.3.5</span><br><span class="line">InfluxDB shell version: 1.3.5</span><br><span class="line">&gt; select * from bus_data</span><br><span class="line">name: bus_data</span><br><span class="line">time                 complaints passengers</span><br><span class="line">----                 ---------- ----------</span><br><span class="line">2016-08-28T07:00:00Z 9          5</span><br><span class="line">2016-08-28T07:15:00Z 9          8</span><br><span class="line">2016-08-28T07:30:00Z 9          8</span><br><span class="line">2016-08-28T07:45:00Z 9          7</span><br><span class="line">2016-08-28T08:00:00Z 9          8</span><br><span class="line">2016-08-28T08:15:00Z 7          15</span><br><span class="line">2016-08-28T08:30:00Z 7          15</span><br><span class="line">2016-08-28T08:45:00Z 7          17</span><br><span class="line">2016-08-28T09:00:00Z 7          20</span><br></pre></td></tr></table></figure>

<h3 id="示例1-自动缩小取样存储到新的measurement中"><a href="#示例1-自动缩小取样存储到新的measurement中" class="headerlink" title="示例1 自动缩小取样存储到新的measurement中"></a>示例1 自动缩小取样存储到新的measurement中</h3><p>对单个字段自动缩小取样并存储到新的measurement中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_basic&quot; ON &quot;transportation&quot;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(1h)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>这个CQ的意思就是对<code>bus_data</code>每小时自动计算取样数据的平均乘客数并存储到 <code>average_passengers</code>中。那么在2016-08-28这天早上会执行如下流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 8:00 cq_basic 执行查询，查询时间范围 time &gt;= &#x27;7:00&#x27; AND time &lt; &#x27;08:00&#x27;.</span><br><span class="line">cq_basic写入一条记录到 average_passengers:</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">At 9:00 cq_basic 执行查询，查询时间范围 time &gt;= &#x27;8:00&#x27; AND time &lt; &#x27;9:00&#x27;.</span><br><span class="line">cq_basic写入一条记录到 average_passengers:</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br><span class="line"></span><br><span class="line"># Results</span><br><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br></pre></td></tr></table></figure>

<h3 id="示例2-自动缩小取样并存储到新的保留策略（Retention-Policy）中"><a href="#示例2-自动缩小取样并存储到新的保留策略（Retention-Policy）中" class="headerlink" title="示例2 自动缩小取样并存储到新的保留策略（Retention Policy）中"></a>示例2 自动缩小取样并存储到新的保留策略（Retention Policy）中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_basic_rp&quot; ON &quot;transportation&quot;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;transportation&quot;.&quot;three_weeks&quot;.&quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(1h)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>与示例1类似，不同的是保留的策略不是<code>autogen</code>，而是改成了<code>three_weeks</code>(创建保留策略语法 <code>CREATE RETENTION POLICY &quot;three_weeks&quot; ON &quot;transportation&quot; DURATION 3w REPLICATION 1</code>)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;transportation&quot;.&quot;three_weeks&quot;.&quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br></pre></td></tr></table></figure>

<h3 id="示例3-使用后向引用-backreferencing-自动缩小取样并存储到新的数据库中"><a href="#示例3-使用后向引用-backreferencing-自动缩小取样并存储到新的数据库中" class="headerlink" title="示例3 使用后向引用(backreferencing)自动缩小取样并存储到新的数据库中"></a>示例3 使用后向引用(backreferencing)自动缩小取样并存储到新的数据库中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_basic_br&quot; ON &quot;transportation&quot;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(*) INTO &quot;downsampled_transportation&quot;.&quot;autogen&quot;.:MEASUREMENT FROM /.*/ GROUP BY time(30m),*</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>使用后向引用语法自动缩小取样并存储到新的数据库中。语法 <code>:MEASUREMENT</code> 用来指代后面的表，而 <code>/.*/</code>则是分别查询所有的表。这句CQ的含义就是每30分钟自动查询<code>transportation</code>的所有表(这里只有bus_data一个表)，并将30分钟内数字字段(passengers和complaints)求平均值存储到新的数据库 <code>downsampled_transportation</code>中。</p>
<p>最终结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;downsampled_transportation.&quot;autogen&quot;.&quot;bus_data&quot;</span><br><span class="line">name: bus_data</span><br><span class="line">--------------</span><br><span class="line">time                   mean_complaints   mean_passengers</span><br><span class="line">2016-08-28T07:00:00Z   9                 6.5</span><br><span class="line">2016-08-28T07:30:00Z   9                 7.5</span><br><span class="line">2016-08-28T08:00:00Z   8                 11.5</span><br><span class="line">2016-08-28T08:30:00Z   7                 16</span><br></pre></td></tr></table></figure>

<h3 id="示例4-自动缩小取样以及配置CQ的时间范围"><a href="#示例4-自动缩小取样以及配置CQ的时间范围" class="headerlink" title="示例4 自动缩小取样以及配置CQ的时间范围"></a>示例4 自动缩小取样以及配置CQ的时间范围</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_basic_offset&quot; ON &quot;transportation&quot;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(1h,15m)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>与前面几个示例不同的是，这里的<code>GROUP BY time(1h, 15m)</code>指定了一个时间偏移，也就是说 <code>cq_basic_offset</code>执行的时间不再是整点，而是往后偏移15分钟。执行流程如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 8:15 cq_basic_offset 执行查询的时间范围 time &gt;= &#x27;7:15&#x27; AND time &lt; &#x27;8:15&#x27;.</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:15:00Z   7.75</span><br><span class="line">At 9:15 cq_basic_offset 执行查询的时间范围 time &gt;= &#x27;8:15&#x27; AND time &lt; &#x27;9:15&#x27;.</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T08:15:00Z   16.75</span><br></pre></td></tr></table></figure>

<p>最终结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:15:00Z   7.75</span><br><span class="line">2016-08-28T08:15:00Z   16.75</span><br></pre></td></tr></table></figure>

<h2 id="4-2-高级语法"><a href="#4-2-高级语法" class="headerlink" title="4.2 高级语法"></a>4.2 高级语法</h2><p>InfluxDB连续查询的高级语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br><span class="line">RESAMPLE EVERY &lt;interval&gt; FOR &lt;interval&gt;</span><br><span class="line">BEGIN</span><br><span class="line">  &lt;cq_query&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>与基本语法不同的是，多了<code>RESAMPLE</code>关键字。高级语法里CQ的执行时间和查询时间范围则与RESAMPLE里面的两个interval有关系。</p>
<p>高级语法中CQ以EVERY interval的时间间隔执行，执行时查询的时间范围则是FOR interval来确定。如果FOR interval为2h，当前时间为17:00，则查询的时间范围为<code>15:00-16:59.999999</code>。<strong>RESAMPLE的EVERY和FOR两个关键字可以只有一个</strong>。</p>
<p>示例的数据表如下，比之前的多了几条记录为了示例3和示例4的测试:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: bus_data</span><br><span class="line">--------------</span><br><span class="line">time                   passengers</span><br><span class="line">2016-08-28T06:30:00Z   2</span><br><span class="line">2016-08-28T06:45:00Z   4</span><br><span class="line">2016-08-28T07:00:00Z   5</span><br><span class="line">2016-08-28T07:15:00Z   8</span><br><span class="line">2016-08-28T07:30:00Z   8</span><br><span class="line">2016-08-28T07:45:00Z   7</span><br><span class="line">2016-08-28T08:00:00Z   8</span><br><span class="line">2016-08-28T08:15:00Z   15</span><br><span class="line">2016-08-28T08:30:00Z   15</span><br><span class="line">2016-08-28T08:45:00Z   17</span><br><span class="line">2016-08-28T09:00:00Z   20</span><br></pre></td></tr></table></figure>

<h3 id="示例1-只配置执行时间间隔"><a href="#示例1-只配置执行时间间隔" class="headerlink" title="示例1 只配置执行时间间隔"></a>示例1 只配置执行时间间隔</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_advanced_every&quot; ON &quot;transportation&quot;</span><br><span class="line">RESAMPLE EVERY 30m</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(1h)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>这里配置了30分钟执行一次CQ，没有指定FOR interval，于是查询的时间范围还是<code>GROUP BY time(1h)</code>指定的一个小时，执行流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 8:00, cq_advanced_every 执行时间范围 time &gt;= &#x27;7:00&#x27; AND time &lt; &#x27;8:00&#x27;.</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">At 8:30, cq_advanced_every 执行时间范围 time &gt;= &#x27;8:00&#x27; AND time &lt; &#x27;9:00&#x27;.</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T08:00:00Z   12.6667</span><br><span class="line">At 9:00, cq_advanced_every 执行时间范围 time &gt;= &#x27;8:00&#x27; AND time &lt; &#x27;9:00&#x27;.</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这里的 8点到9点这个区间执行了两次，第一次执行时时8:30，平均值是 <code>(8+15+15）/ 3 = 12.6667</code>，而第二次执行时间是9:00，平均值是 <code>(8+15+15+17) / 4=13.75</code>，而且最后第二个结果覆盖了第一个结果。<a href="https://link.jianshu.com/?t=https://docs.influxdata.com/influxdb/v1.3/troubleshooting/frequently-asked-questions/%23how-does-influxdb-handle-duplicate-points">InfluxDB如何处理重复的记录可以参见这个文档</a>。</p>
<p>最终结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br></pre></td></tr></table></figure>

<h3 id="示例2-只配置查询时间范围"><a href="#示例2-只配置查询时间范围" class="headerlink" title="示例2 只配置查询时间范围"></a>示例2 只配置查询时间范围</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_advanced_for&quot; ON &quot;transportation&quot;</span><br><span class="line">RESAMPLE FOR 1h</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(30m)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>只配置了时间范围，而没有配置EVERY interval。这样，执行的时间间隔与<code>GROUP BY time(30m)</code>一样为30分钟，而查询的时间范围为1小时，由于是按30分钟分组，所以每次会写入两条记录。执行流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 8:00 cq_advanced_for 查询时间范围：time &gt;= &#x27;7:00&#x27; AND time &lt; &#x27;8:00&#x27;.</span><br><span class="line">写入两条记录。</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   6.5</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">At 8:30 cq_advanced_for 查询时间范围：time &gt;= &#x27;7:30&#x27; AND time &lt; &#x27;8:30&#x27;.</span><br><span class="line">写入两条记录。</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">2016-08-28T08:00:00Z   11.5</span><br><span class="line">At 9:00 cq_advanced_for 查询时间范围：time &gt;= &#x27;8:00&#x27; AND time &lt; &#x27;9:00&#x27;.</span><br><span class="line">写入两条记录。</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T08:00:00Z   11.5</span><br><span class="line">2016-08-28T08:30:00Z   16</span><br></pre></td></tr></table></figure>

<p>需要注意的是，<code>cq_advanced_for</code>每次写入了两条记录，重复的记录会被覆盖。</p>
<p>最终结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:00:00Z   6.5</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">2016-08-28T08:00:00Z   11.5</span><br><span class="line">2016-08-28T08:30:00Z   16</span><br></pre></td></tr></table></figure>

<h3 id="示例3-同时配置执行时间间隔和查询时间范围"><a href="#示例3-同时配置执行时间间隔和查询时间范围" class="headerlink" title="示例3 同时配置执行时间间隔和查询时间范围"></a>示例3 同时配置执行时间间隔和查询时间范围</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_advanced_every_for&quot; ON &quot;transportation&quot;</span><br><span class="line">RESAMPLE EVERY 1h FOR 90m</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(30m)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>这里配置了执行间隔为1小时，而查询范围90分钟，最后分组是30分钟，每次插入了三条记录。执行流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 8:00 cq_advanced_every_for 查询时间范围 time &gt;= &#x27;6:30&#x27; AND time &lt; &#x27;8:00&#x27;.</span><br><span class="line">插入三条记录</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T06:30:00Z   3</span><br><span class="line">2016-08-28T07:00:00Z   6.5</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">At 9:00 cq_advanced_every_for 查询时间范围 time &gt;= &#x27;7:30&#x27; AND time &lt; &#x27;9:00&#x27;.</span><br><span class="line">插入三条记录</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">2016-08-28T08:00:00Z   11.5</span><br><span class="line">2016-08-28T08:30:00Z   16</span><br></pre></td></tr></table></figure>

<p>最终结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T06:30:00Z   3</span><br><span class="line">2016-08-28T07:00:00Z   6.5</span><br><span class="line">2016-08-28T07:30:00Z   7.5</span><br><span class="line">2016-08-28T08:00:00Z   11.5</span><br><span class="line">2016-08-28T08:30:00Z   16</span><br></pre></td></tr></table></figure>

<h3 id="示例4-配置查询时间范围和FILL填充"><a href="#示例4-配置查询时间范围和FILL填充" class="headerlink" title="示例4 配置查询时间范围和FILL填充"></a>示例4 配置查询时间范围和FILL填充</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &quot;cq_advanced_for_fill&quot; ON &quot;transportation&quot;</span><br><span class="line">RESAMPLE FOR 2h</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT mean(&quot;passengers&quot;) INTO &quot;average_passengers&quot; FROM &quot;bus_data&quot; GROUP BY time(1h) fill(1000)</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>在前面值配置查询时间范围的基础上，加上FILL填充空的记录。执行流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">At 6:00, cq_advanced_for_fill 查询时间范围：time &gt;= &#x27;4:00&#x27; AND time &lt; &#x27;6:00&#x27;，没有数据，不填充。</span><br><span class="line"></span><br><span class="line">At 7:00, cq_advanced_for_fill 查询时间范围：time &gt;= &#x27;5:00&#x27; AND time &lt; &#x27;7:00&#x27;. 写入两条记录，没有数据的时间点填充1000。</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T05:00:00Z   1000          &lt;------ fill(1000)</span><br><span class="line">2016-08-28T06:00:00Z   3             &lt;------ average of 2 and 4</span><br><span class="line"></span><br><span class="line">[…] At 11:00, cq_advanced_for_fill 查询时间范围：time &gt;= &#x27;9:00&#x27; AND time &lt; &#x27;11:00&#x27;.写入两条记录，没有数据的点填充1000。</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">2016-08-28T09:00:00Z   20            &lt;------ average of 20</span><br><span class="line">2016-08-28T10:00:00Z   1000          &lt;------ fill(1000)     </span><br><span class="line"></span><br><span class="line">At 12:00, cq_advanced_for_fill 查询时间范围：time &gt;= &#x27;10:00&#x27; AND time &lt; &#x27;12:00&#x27;。没有数据，不填充。</span><br></pre></td></tr></table></figure>

<p>最终结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SELECT * FROM &quot;average_passengers&quot;</span><br><span class="line">name: average_passengers</span><br><span class="line">------------------------</span><br><span class="line">time                   mean</span><br><span class="line">2016-08-28T05:00:00Z   1000</span><br><span class="line">2016-08-28T06:00:00Z   3</span><br><span class="line">2016-08-28T07:00:00Z   7</span><br><span class="line">2016-08-28T08:00:00Z   13.75</span><br><span class="line">2016-08-28T09:00:00Z   20</span><br><span class="line">2016-08-28T10:00:00Z   1000</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://link.jianshu.com/?t=https://docs.influxdata.com/influxdb/v1.3/">https://docs.influxdata.com/influxdb/v1.3/</a></li>
<li><a href="https://link.jianshu.com/?t=https://zh.wikipedia.org/wiki/%25E6%25A8%2599%25E6%25BA%2596%25E5%25B7%25AE">https://zh.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E5%B7%AE</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>InfluxDB</category>
      </categories>
      <tags>
        <tag>时序数据库</tag>
        <tag>InfluxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL权限管理</title>
    <url>/2015/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><a href="http://c.biancheng.net/view/7252.html">MySQL root修改普通用户密码</a></p>
<p><a href="http://c.biancheng.net/view/7502.html">MySQL GRANT：用户授权</a></p>
<p><a href="http://c.biancheng.net/view/7498.html">MySQL查看用户权限</a></p>
<p><a href="http://c.biancheng.net/view/2611.html">MySQL修改用户（RENAME USER）</a></p>
<p><a href="http://c.biancheng.net/view/7490.html">MySQL创建用户（3种方式）</a></p>
<p><a href="https://blog.csdn.net/zhazhagu/article/details/81064406">MySQL允许root远程登录_小gu的博客-CSDN博客_mysql允许root远程连接</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server设置开启远程连接（sa配置）</title>
    <url>/2018/02/10/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%20Server/SQL%20Server%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%88sa%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    <content><![CDATA[<p>本文方案适用于Microsoft Sql Server 2008&#x2F;2012&#x2F;2012 r2&#x2F;2014版本，以下简称MSSQLSERVER。</p>
<p>MSSQL默认是不允许远程连接，并且禁用sa账户的。如果想要在本地用SSMS连接远程服务器上的MSSQLSERVER，需要做两个部分的配置：</p>
<p>1. SQL SERVER MANAGEMENT STUDIO(SSMS)</p>
<p>2. SQL SERVER配置管理器（SQL SERVER CONFIGURATION MANAGER - SSCM）</p>
<p>并且需要注意的是，有些地方如果没有生效，请重启一下sql server（可以从SSCM里，也可以从系统服务中找），下面是详细的步骤：</p>
<p>STEP1. 打开SSMS，使用Windows身份连接数据库，登录后，右键选择“属性”</p>


<p>STEP 2. 选择“安全性”，选中SQL SERVER和Windows身份验证模式</p>


<p>STEP 3. 再选择“连接”，勾选“允许远程连接此服务器”，然后点击“确定”按钮。</p>




<p>STEP 4. 展开“安全性” -》登录名 -》sa，右键选择“属性”</p>


<p>STEP 5. 在“常规”中，改好你自己的密码，这是你sa登录的密码。</p>


<p>STEP 6. 在“状态”中，启用sa登录，点击“确定”按钮</p>


<p>STEP 7. 右键数据库server，选择“方面”</p>


<p>STEP 8. 选择“服务器配置”，找到RemoteAccessEnabled，设置为“True”</p>


<p>STEP 9. 重新启动SQL SERVER服务，退出当前的连接，这时候应该可以用sa进行登录了。</p>




<p>STEP 10. 配置SSCM，选中左侧的“SQL SERVER服务”，确保右侧的“SQL SERVER”以及“SQL SERVER BROWER”正在运行，选择“网络配置”，双击TCP&#x2F;IP，确保状态为“启用”</p>


<p>STEP 11. 在Client里也确保TCP&#x2F;IP是启用的，默认的端口都是1433，可以自己修改，非默认端口需要在连接字符串里显式指明。</p>


<p>STEP 12. 到这里再次重启SQL SERVER服务，应该就可以用了。不过还不能用，确认防火墙端口设置，并把SQL SERVER安装目录下，C:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\Binn\sqlservr.exe添加到允许的列表中。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>SQL Server</category>
      </categories>
  </entry>
  <entry>
    <title>C#使用EmguCV实现视频读取和播放，及多个视频一起播放的问题</title>
    <url>/2015/10/24/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/C#%E4%BD%BF%E7%94%A8EmguCV%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%AF%BB%E5%8F%96%E5%92%8C%E6%92%AD%E6%94%BE%EF%BC%8C%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%A7%86%E9%A2%91%E4%B8%80%E8%B5%B7%E6%92%AD%E6%94%BE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>WinForm程序</li>
</ol>
<p>1）第一种方法，使用委托：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">SetTextCallback</span>(<span class="params"><span class="built_in">string</span> text</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetText</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// InvokeRequired需要比较调用线程ID和创建线程ID</span></span><br><span class="line">    <span class="comment">// 如果它们不相同则返回true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.txt_Name.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        SetTextCallback d = <span class="keyword">new</span> SetTextCallback(SetText);</span><br><span class="line">        <span class="keyword">this</span>.Invoke(d, <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; text &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.txt_Name.Text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2）第二种方法，使用匿名委托</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetText</span>(<span class="params">Object obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.txt_Name.Text = obj;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.txt_Name.Text = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里说一下BeginInvoke和Invoke和区别：BeginInvoke会立即返回，Invoke会等执行完后再返回。</p>
<ol start="2">
<li>WPF程序</li>
</ol>
<p>1）可以使用Dispatcher线程模型来修改</p>
<p>如果是窗体本身可使用类似如下的代码：</p>
<p>this.lblState.Dispatcher.Invoke(new Action(delegate<br>{<br>     this.lblState.Content &#x3D; “状态：” + this._statusText;<br>}));</p>
<p>那么假如是在一个公共类中弹出一个窗口、播放声音等呢？这里我们可以使用：System.Windows.Application.Current.Dispatcher，如下所示</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> System.Windows.Application.Current.Dispatcher.Invoke(new Action(() &#x3D;&gt;<br> {<br>     if (path.EndsWith(“.mp3”) || path.EndsWith(“.wma”) || path.EndsWith(“.wav”))<br>     {<br>        _player.Open(new Uri(path));<br>        _player.Play();<br>    }<br> }));</p>
<p><strong>关键问题：多个视频同时播放，以上几种方法不足以解决，多个视频播放中主界面卡死和播放显示刷新不了的问题。</strong></p>
<p>目前笔者的解决方法是</p>
<p> pinturebox.CreateGraphics().DrawImage(imgSrc.Bitmap, new System.Drawing.Rectangle(0, 0, pinturebox.Width, pinturebox.Height));</p>
<p>EmguCV中的Capture类可以完成视频文件的读取，并捕捉每一帧，可以利用Capture类完成实现WinForm中视频检测跟踪环境的搭建。本文只实现最简陋的WinForm + EmguCV上的avi文件读取和播放框架，复杂的检测和跟踪算法在之后添加进去。</p>
<p>        这里使用WinForm实现视频的播放，主要是PictureBox类，它是支持基于事件的异步模式的典型组件，不使用EmguCV自带的UI控件等。</p>
<p><img src="/%22%22" alt="效果图"></p>
<p>图1.效果图</p>
<p>        直接在UI线程中完成视频的播放的话整个程序只有一个线程，由于程序只能同步执行，播放视频的时候UI将停止响应用户的输入，造成界面的假死。所以视频的播放需要实现异步模式。主要有三种方法：第一是使用异步委托；第二种是使用BackgroundWorker组件；最后一种就是使用多线程（不使用CheckForIllegalCrossThreadCalls &#x3D;false的危险做法）。</p>
<p>        Windows窗体控件，唯一可以从创建它的线程之外的线程中调用的是Invoke()、BegionInvoke()、EndInvoke()方法和InvokeRequired属性。其中BegionInvoke()、EndInvoke()方法是Invoke()方法的异步版本。这些方法会切换到创建控件的线程上，以调用赋予一个委托参数的方法，该委托参数可以传递给这些方法。</p>
<p>        （一）   使用多线程<br>        首先定义监控的类及其对应的事件参数类和异常类：<br>        判断是否继续执行的布尔型成员会被调用线程改变，因此声名为volatile，不进行优化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 红外检测子。</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ThermalSurveillant</span><br><span class="line">&#123;</span><br><span class="line">    #region Private Fields</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 是否停止线程，此变量供多个线程访问。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private volatile bool shouldStop = false;</span><br><span class="line"> </span><br><span class="line">    #endregion</span><br><span class="line">    #region Public Properties</span><br><span class="line"> </span><br><span class="line">    #endregion</span><br><span class="line">    #region Public Events</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 帧刷新事件。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public EventHandler&lt;FrameRefreshEventArgs&gt; FrameRefresh;</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 播放完成。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public EventHandler&lt;CompletedEventArgs&gt; Completed;</span><br><span class="line"> </span><br><span class="line">    #endregion</span><br><span class="line">    #region Protected Methods</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 处理帧刷新事件。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">    protected virtual void OnFrameRefresh(FrameRefreshEventArgs e)</span><br><span class="line">    &#123;</span><br><span class="line">        if (this.FrameRefresh != null)</span><br><span class="line">        &#123;</span><br><span class="line">            this.FrameRefresh(this, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 处理视频读完事件。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;</span><br><span class="line">    protected virtual void OnCompleted(CompletedEventArgs e)</span><br><span class="line">    &#123;</span><br><span class="line">        if (this.Completed != null)</span><br><span class="line">        &#123;</span><br><span class="line">            this.Completed(this, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    #endregion</span><br><span class="line">    #region Public Methods</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 视频监控。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;capture&quot;&gt;捕捉。&lt;/param&gt;</span><br><span class="line">    public void DoSurveillance(Object oCapture)</span><br><span class="line">    &#123;</span><br><span class="line">        Capture capture = oCapture as Capture;</span><br><span class="line">        int id = 1;</span><br><span class="line">        if (capture == null)</span><br><span class="line">        &#123;</span><br><span class="line">            throw new InvalidCaptureObjectException(&quot;传递的Capture类型无效。&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        while (!shouldStop)</span><br><span class="line">        &#123;</span><br><span class="line">            Image&lt;Bgr, byte&gt; frame = capture.QueryFrame();</span><br><span class="line">            if (frame != null)</span><br><span class="line">            &#123;</span><br><span class="line">                FrameRefreshEventArgs e = new FrameRefreshEventArgs(frame.ToBitmap(), id++);</span><br><span class="line">                // 触发刷新事件</span><br><span class="line">                this.OnFrameRefresh(e);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 触发完成事件</span><br><span class="line">        this.OnCompleted(new CompletedEventArgs(id));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 请求停止线程。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public void Cancel()</span><br><span class="line">    &#123;</span><br><span class="line">        this.shouldStop = true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    #endregion</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>        UI线程中启动播放线程：</p>
<p>声明：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 监控线程。 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> Thread threadSurveillance = <span class="literal">null</span>; </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 捕获视频帧。 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> Capture captureSurveillance; </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 监控子。 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> ThermalSurveillant surveillant = <span class="keyword">new</span> ThermalSurveillant();</span><br></pre></td></tr></table></figure>







<p>读入视频文件：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">captureSurveillance = <span class="keyword">new</span> Capture(<span class="keyword">this</span>.videoFilePath);</span><br><span class="line">captureSurveillance.SetCaptureProperty(CAP_PROP.CV_CAP_PROP_FRAME_WIDTH, <span class="keyword">this</span>.width);</span><br><span class="line">captureSurveillance.SetCaptureProperty(CAP_PROP.CV_CAP_PROP_FRAME_HEIGHT, <span class="keyword">this</span>.height);</span><br><span class="line">Image&lt;Bgr, <span class="built_in">byte</span>&gt; frame = captureSurveillance.QueryFrame();</span><br><span class="line"><span class="keyword">this</span>.pictureBox.Image = frame.ToBitmap();</span><br></pre></td></tr></table></figure>

<p>播放视频文件：</p>
<p>        UI线程中响应监控类的事件：</p>
<p>定义异步调用的委托：</p>
<p>添加事件委托：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.surveillant.FrameRefresh += OnRefreshFrame;</span><br><span class="line"><span class="keyword">this</span>.surveillant.Completed += OnCompleted;</span><br></pre></td></tr></table></figure>





<p>        以下方法中都是由监控线程中的事件委托方法，应该使用BeginInvoke方法，这样可以优雅的结束线程，如果使用Invoke方法，则调用方式为同步调用，此时如果使用Thread.Join()方法终止线程将引发死锁（正常播放没有问题），Thread.Join()方法的使用使调用线程阻塞等待当前线程完成，在这里即UI线程阻塞等待监控线程完成，而监控线程中又触发UI线程中pictureBox的刷新，使用Invoke方法就造成了监控线程等待UI线程刷新结果，而UI线程已经阻塞，形成了死锁。死锁时只能用Thread.Abort()方法才能结束线程。或者直接强制结束应用程序。</p>
<p>        使用BeginInvoke方法时为异步调用，监控线程不等待刷新结果直接继续执行，可以正常结束。结束后UI才进行刷新，不会造成死锁。</p>
<p><img src="/%22%22"></p>
<p>图2.线程关系</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 刷新UI线程的pixtureBox的方法。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;frame&quot;&gt;</span>要刷新的帧。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RefreshFrame</span>(<span class="params">Bitmap frame</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.pictureBox.Image = frame;</span><br><span class="line">    <span class="comment">// 这里一定不能刷新！2012年8月2日1:50:16</span></span><br><span class="line">    <span class="comment">//this.pictureBox.Refresh();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 响应pictureBox刷新。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRefreshFrame</span>(<span class="params"><span class="built_in">object</span> sender, FrameRefreshEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否需要跨线程调用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pictureBox.InvokeRequired == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FrameRefreshDelegate fresh = <span class="keyword">this</span>.RefreshFrame;</span><br><span class="line">        <span class="keyword">this</span>.BeginInvoke(fresh, e.Frame);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.RefreshFrame(e.Frame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 响应Label刷新信息。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params"><span class="built_in">object</span> sender, CompletedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否需要跨线程调用</span></span><br><span class="line">    CompletedDelegate fresh = <span class="keyword">this</span>.RefreshStatus;</span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">&quot;视频结束，共 &quot;</span> + e.FrameCount + <span class="string">&quot; 帧。&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>.BeginInvoke(fresh, message);</span><br><span class="line">&#125;</span><br><span class="line">　　</span><br><span class="line"></span><br><span class="line">        关闭时需要中止播放线程之后再退出：</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭窗体时发生。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnFormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 检测子算法请求终止</span></span><br><span class="line">    surveillant.Cancel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞调用线程直到检测子线程终止</span></span><br><span class="line">    <span class="keyword">if</span> (threadSurveillance != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (threadSurveillance.IsAlive == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            threadSurveillance.Join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>        （二）   使用异步委托</p>
<p>        创建线程的一个更简单的方法是定义一个委托，并异步调用它。委托是方法的类型安全的引用。Delegate类还支持异步地调用方法。在后台，Delegate类会创建一个执行任务的线程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// asynchronous by using a delegate</span><br><span class="line">PlayVideoDelegate play = this.PlayVideoFile;</span><br><span class="line">IAsyncResult status = play.BeginInvoke(null, null);</span><br><span class="line"> </span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 播放视频文件。</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">private void PlayVideoFile()</span><br><span class="line">&#123;</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        Image&lt;Bgr, byte&gt; frame = capture.QueryFrame();</span><br><span class="line">        if (frame != null)</span><br><span class="line">        &#123;</span><br><span class="line">            Image&lt;Gray, byte&gt; grayFrame = frame.Convert&lt;Gray, byte&gt;();</span><br><span class="line">            grayFrame.Resize(this.width, this.height, INTER.CV_INTER_CUBIC);</span><br><span class="line">            RefreshPictureBoxDelegate fresh = this.RefreshPictureBox;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                this.BeginInvoke(fresh, grayFrame.ToBitmap());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (ObjectDisposedException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.CurrentThread.Abort();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 刷新UI线程的pixtureBox的方法。</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;frame&quot;&gt;要刷新的帧。&lt;/param&gt;</span><br><span class="line">private void RefreshPictureBox(Bitmap frame)</span><br><span class="line">&#123;</span><br><span class="line">    this.pictureBox.Image = frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>        （三）   使用BackgroundWorker组件</p>
<p>        BackgroundWorker类是异步事件的一种实现方案，异步组件可以选择性的支持取消操作，并提供进度信息。RunWorkerAsync()方法启动异步调用。CancelAsync()方法取消。</p>
<p><img src="/%22%22"></p>
<p>图3.BackgroundWorker组件</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 播放视频文件。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">detectItemPlay_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.videoFilePath != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// run async</span></span><br><span class="line">        <span class="keyword">this</span>.backgroundWorker.RunWorkerAsync(capture);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 异步调用。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDoWork</span>(<span class="params"><span class="built_in">object</span> sender, DoWorkEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Emgu.CV.Capture capture = e.Argument <span class="keyword">as</span> Emgu.CV.Capture;</span><br><span class="line">    <span class="keyword">while</span> (!e.Cancel)</span><br><span class="line">    &#123;</span><br><span class="line">        Image&lt;Bgr, <span class="built_in">byte</span>&gt; frame = capture.QueryFrame();</span><br><span class="line">        <span class="keyword">if</span> (frame != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Image&lt;Gray, <span class="built_in">byte</span>&gt; grayFrame = frame.Convert&lt;Gray, <span class="built_in">byte</span>&gt;();</span><br><span class="line">            grayFrame.Resize(<span class="keyword">this</span>.width, <span class="keyword">this</span>.height, INTER.CV_INTER_CUBIC);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.backgroundWorker.CancellationPending == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                e.Cancel = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.pictureBox.InvokeRequired == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    RefreshPictureBoxDelegate fresh = <span class="keyword">this</span>.RefreshPictureBox;</span><br><span class="line">                    <span class="keyword">this</span>.BeginInvoke(fresh, grayFrame.ToBitmap());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.RefreshPictureBox(grayFrame.ToBitmap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭窗体时发生。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.backgroundWorker.IsBusy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.backgroundWorker.CancelAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>EmguCV</tag>
      </tags>
  </entry>
  <entry>
    <title>C#时间戳</title>
    <url>/2020/04/28/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/C#%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<blockquote>
<p>来源：<a href="https://links.jianshu.com/go?to=https://blog.guoqianfan.com/2019/11/24/timestamp-in-csharp/">https://blog.guoqianfan.com/2019/11/24/timestamp-in-csharp/</a></p>
</blockquote>
<h2 id="什么是时间戳"><a href="#什么是时间戳" class="headerlink" title="什么是时间戳"></a>什么是时间戳</h2><blockquote>
<p>时间戳默认是<strong>Unix时间戳</strong>。</p>
</blockquote>
<p>首先要清楚JavaScript与Unix的时间戳的区别：</p>
<p>JavaScript时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的<strong>总毫秒数</strong>。</p>
<p>Unix时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的<strong>总秒数</strong>。</p>
<p>可以看出JavaScript时间戳是<strong>总毫秒数</strong>，Unix时间戳是<strong>总秒数</strong>。</p>
<p>比如同样是的 2016&#x2F;11&#x2F;03 12:30:00 ，转换为JavaScript时间戳为 1478147400000；转换为Unix时间戳为 1478147400。</p>
<p>从上面也可以看出<strong>时间戳与时区无关</strong>。</p>
<h2 id="Unix时间戳相互转换"><a href="#Unix时间戳相互转换" class="headerlink" title="Unix时间戳相互转换"></a>Unix时间戳相互转换</h2><h3 id="C-DateTime转换为Unix时间戳"><a href="#C-DateTime转换为Unix时间戳" class="headerlink" title="C# DateTime转换为Unix时间戳"></a>C# DateTime转换为Unix时间戳</h3><h4 id="NET-4-6新方法"><a href="#NET-4-6新方法" class="headerlink" title=".NET 4.6新方法"></a>.NET 4.6新方法</h4><p>只能在 .NET 4.6及更高版本里才能使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long timeStamp = DateTimeOffset.Now.ToUnixTimeSeconds(); </span><br><span class="line">Console.WriteLine(timeStamp);</span><br></pre></td></tr></table></figure>

<h4 id="通用的老方法"><a href="#通用的老方法" class="headerlink" title="通用的老方法"></a>通用的老方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1)); </span><br><span class="line">long timeStamp = (long)(DateTime.Now - startTime).TotalSeconds; </span><br><span class="line">System.Console.WriteLine(timeStamp);</span><br></pre></td></tr></table></figure>

<h3 id="Unix时间戳转换为C-DateTime"><a href="#Unix时间戳转换为C-DateTime" class="headerlink" title="Unix时间戳转换为C# DateTime"></a>Unix时间戳转换为C# DateTime</h3><h4 id="NET-4-6新方法-1"><a href="#NET-4-6新方法-1" class="headerlink" title=".NET 4.6新方法"></a>.NET 4.6新方法</h4><p>由时间戳转换的<code>DateTimeOffset</code>的时区默认是<code>+00:00</code>，此时我们需要<strong>转为本地时区</strong>，否则后续使用可能会有问题。</p>
<p>转为本地时区：<code>DateTimeOffset.LocalDateTime</code>。</p>
<p>示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DateTimeOffset dto = DateTimeOffset.FromUnixTimeMilliseconds(1573696406184);</span><br><span class="line"></span><br><span class="line">DateTime dt01 = dto.DateTime;</span><br><span class="line"></span><br><span class="line">DateTime dt02 = dto.LocalDateTime;</span><br></pre></td></tr></table></figure>

<h4 id="通用的老方法-1"><a href="#通用的老方法-1" class="headerlink" title="通用的老方法"></a>通用的老方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long unixTimeStamp = 1478162177;</span><br><span class="line">System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1)); </span><br><span class="line">DateTime dt = startTime.AddSeconds(unixTimeStamp);</span><br><span class="line">System.Console.WriteLine(dt.ToString(&quot;yyyy/MM/dd HH:mm:ss:ffff&quot;));</span><br></pre></td></tr></table></figure>

<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="DateTimeOffset使用Now还是UtcNow"><a href="#DateTimeOffset使用Now还是UtcNow" class="headerlink" title="DateTimeOffset使用Now还是UtcNow"></a>DateTimeOffset使用Now还是UtcNow</h3><p>对于<code>DateTimeOffset</code>，发现有2个获取当前时间的属性：<code>DateTimeOffset.Now</code>和<code>DateTimeOffset.UtcNow</code>。</p>
<p>如果只是<strong>获取时间戳</strong>，这2个使用哪个都可以，得到的值是一样的。</p>
<p>因为<code>DateTimeOffset</code>里面有时区信息，获取时间戳时会使用时区进行转换的，所以获得的时间戳一样。</p>
<p>而也是因为时区的原因，<code>DateTimeOffset</code>的其他操作可能会不一样。例如<code>DateTimeOffset.DateTime</code>就不一样，此时推荐使用<code>DateTimeOffset.LocalDateTime</code>来获得本地时区的时间。</p>
<p>测试代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Console.WriteLine(&quot;none：&#123;0&#125;&quot;, DateTimeOffset.Now);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;utc：&#123;0&#125;&quot;, DateTimeOffset.UtcNow);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;none：&#123;0&#125;&quot;, DateTimeOffset.Now.ToUnixTimeSeconds());</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;utc：&#123;0&#125;&quot;, DateTimeOffset.UtcNow.ToUnixTimeSeconds());</span><br></pre></td></tr></table></figure>

<h3 id="DateTime转换为DateTimeOffset"><a href="#DateTime转换为DateTimeOffset" class="headerlink" title="DateTime转换为DateTimeOffset"></a>DateTime转换为DateTimeOffset</h3><p>可以直接把<code>DateTime</code>赋值给<code>DateTimeOffset</code>，内部会自动进行隐式转换。这里涉及到时区，请往下看。</p>
<h4 id="DateTime的时区信息-Kind属性"><a href="#DateTime的时区信息-Kind属性" class="headerlink" title="DateTime的时区信息(Kind属性)"></a>DateTime的时区信息(Kind属性)</h4><p><code>DateTime</code>的<strong>时区信息</strong>存放在<code>Kind</code>属性里。<code>Kind</code>属性的数据类型是<code>DateTimeKind</code>枚举，只有3个值：</p>
<ul>
<li><code>Unspecified</code>：未指定&#x2F;未规定</li>
<li><code>Utc</code>：<code>UTC</code>时间</li>
<li><code>Local</code>：本地时区</li>
</ul>
<p>不同情况下得到的<code>DateTime</code>的<code>Kind</code>是不同的，具体如下：</p>
<ul>
<li><p><code>DateTime.Now</code>：<code>DateTime.Kind</code>是 **<code>Local</code>(本地时区)**。</p>
</li>
<li><p><code>DateTime.UtcNow</code>：<code>DateTime.Kind</code>是 **<code>Utc</code>**。</p>
</li>
<li><p><code>DateTime.Parse()</code>：</p>
<ul>
<li><p>【<strong>默认</strong>】在<strong>未指定时区</strong>时，<code>DateTime.Kind</code>是 <strong><code>Unspecified</code></strong></p>
</li>
<li><p>指定时区：指定时区后<code>DateTime.Kind</code>就是相对应的值。</p>
<p>指定时区有2种方式：</p>
<ul>
<li>【<strong>默认+优先</strong>】<strong>待转换的字符串</strong>里有时区信息。例如：<code>2019/11/24 17:40:32 +08:00</code></li>
<li>使用<code>DateTimeStyles</code>参数来指定时区。<code>DateTimeStyles</code>是枚举类型，更多信息自己查看定义，这里不再多说。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>Local</code>和<code>Utc</code>都会把相应的时区传递过去。对于 <strong><code>Unspecified</code>(未指定)<strong>，会被当做</strong>本地时区</strong>来处理（结果已验证，<a href="https://links.jianshu.com/go?to=https://source.dot.net/%23System.Private.CoreLib/DateTimeOffset.cs">源码</a>没看懂）。</p>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DateTime dtNow = DateTime.Now;</span><br><span class="line"></span><br><span class="line">DateTime dtUtcNow = DateTime.UtcNow;</span><br><span class="line"></span><br><span class="line">DateTime dtParse = DateTime.Parse(&quot;2019-11-24 17:40:13&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DateTimeOffset dtoNow = dtNow;</span><br><span class="line"></span><br><span class="line">DateTimeOffset dtoUtcNow = dtUtcNow;</span><br><span class="line"></span><br><span class="line">DateTimeOffset dtoParse = dtParse;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;DateTime：&quot;);</span><br><span class="line">Console.WriteLine(&quot;dtNow：&#123;0&#125;(Kind：&#123;1&#125;)&quot;, dtNow, dtNow.Kind);</span><br><span class="line">Console.WriteLine(&quot;dtUtcNow：&#123;0&#125;(Kind：&#123;1&#125;)&quot;, dtUtcNow, dtUtcNow.Kind);</span><br><span class="line">Console.WriteLine(&quot;dtParse：&#123;0&#125;(Kind：&#123;1&#125;)&quot;, dtParse, dtParse.Kind);</span><br><span class="line"></span><br><span class="line">Console.WriteLine();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;DateTimeOffset：&quot;);</span><br><span class="line">Console.WriteLine(&quot;dtoNow：&#123;0&#125;&quot;, dtoNow);</span><br><span class="line">Console.WriteLine(&quot;dtoUtcNow：&#123;0&#125;&quot;, dtoUtcNow);</span><br><span class="line">Console.WriteLine(&quot;dtoParse：&#123;0&#125;&quot;, dtoParse);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DateTime：</span><br><span class="line">dtNow：2019/11/24 17:40:32(Kind：Local)</span><br><span class="line">dtUtcNow：2019/11/24 9:40:32(Kind：Utc)</span><br><span class="line">dtParse：2019/11/24 17:40:13(Kind：Unspecified)</span><br><span class="line"></span><br><span class="line">DateTimeOffset：</span><br><span class="line">dtoNow：2019/11/24 17:40:32 +08:00</span><br><span class="line">dtoUtcNow：2019/11/24 9:40:32 +00:00</span><br><span class="line">dtoParse：2019/11/24 17:40:13 +08:00</span><br></pre></td></tr></table></figure>

<h3 id="DateTimeOffset-Parse的默认时区"><a href="#DateTimeOffset-Parse的默认时区" class="headerlink" title="DateTimeOffset.Parse的默认时区"></a>DateTimeOffset.Parse的默认时区</h3><p><code>DateTimeOffset.Parse</code>的默认时区是<strong>当前时区</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Console.WriteLine(&quot;parse：&#123;0&#125;&quot;, DateTimeOffset.Parse(&quot;2019-6-14 15:38:49&quot;));</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>C# DateTime与时间戳转换：<a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/polk6/p/6024892.html">https://www.cnblogs.com/polk6/p/6024892.html</a></li>
<li>如何将Unix时间戳转换为DateTime，反之亦然？：<a href="https://links.jianshu.com/go?to=https://stackoverflow.com/questions/249760/how-can-i-convert-a-unix-timestamp-to-datetime-and-vice-versa">https://stackoverflow.com/questions/249760/how-can-i-convert-a-unix-timestamp-to-datetime-and-vice-versa</a></li>
<li>DateTimeOffset源码：<a href="https://links.jianshu.com/go?to=https://source.dot.net/%23System.Private.CoreLib/DateTimeOffset.cs">https://source.dot.net/#System.Private.CoreLib/DateTimeOffset.cs</a></li>
</ol>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
  </entry>
  <entry>
    <title>.NET 6.0使用Identity实现JWT身份认证与授权</title>
    <url>/2024/08/21/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/NET-6-0%E4%BD%BF%E7%94%A8Identity%E5%AE%9E%E7%8E%B0JWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="使用-Visual-Studio-2022-创建-ASP-NET-Core-Web-API"><a href="#使用-Visual-Studio-2022-创建-ASP-NET-Core-Web-API" class="headerlink" title="使用 Visual Studio 2022 创建 ASP.NET Core Web API"></a>使用 Visual Studio 2022 创建 ASP.NET Core Web API</h2><p>可以从 Visual Studio 2022 中选择 ASP.NET Core Web API 或 ASP.NET Core gRPC模板</p>
<p>安装依赖库,可以使用NuGet安装或使用DotNet CLI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.33</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Tools --version 6.0.33</span><br><span class="line">dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 6.0.33</span><br><span class="line">dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 6.0.33</span><br></pre></td></tr></table></figure>

<p>在<code>appsettings.json</code>中添加配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Microsoft.AspNetCore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SqlServer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span> <span class="number">6543</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DbName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SAMPLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgres&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Jwt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Audience&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>准备Model</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Samples.Identity.Model</span></span><br><span class="line"></span><br><span class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">Role</span> : <span class="title">IdentityRole</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleClaim</span> : <span class="title">IdentityRoleClaim</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span> : <span class="title">IdentityUser</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserClaim</span> : <span class="title">IdentityUserClaim</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserLogin</span> : <span class="title">IdentityUserLogin</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserRole</span> : <span class="title">IdentityUserRole</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserToken</span> : <span class="title">IdentityUserToken</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Fluent API重定义数据库表名，字段</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Sample.Identity.Model;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Metadata.Builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Samples.Identity.Configurations</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleClaimConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">RoleClaim</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;RoleClaim&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_ROLE_CLAIM&quot;</span>).HasKey(x =&gt; x.Id);</span><br><span class="line">        builder.Property(x =&gt; x.Id).HasColumnName(<span class="string">&quot;ID&quot;</span>).ValueGeneratedOnAdd();</span><br><span class="line">        builder.Property(x =&gt; x.RoleId).HasColumnName(<span class="string">&quot;ROLE_ID&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ClaimType).HasColumnName(<span class="string">&quot;CLAIM_TYPE&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ClaimType).HasColumnName(<span class="string">&quot;CLAIM_VALUE&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Role</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Role&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_ROLE&quot;</span>).HasKey(x =&gt; x.Id);</span><br><span class="line">        builder.Property(x =&gt; x.Id).HasColumnName(<span class="string">&quot;ID&quot;</span>).ValueGeneratedOnAdd();</span><br><span class="line">        builder.Property(x =&gt; x.Name).HasColumnName(<span class="string">&quot;NAME&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.NormalizedName).HasColumnName(<span class="string">&quot;NORMALIZED_NAME&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ConcurrencyStamp).HasColumnName(<span class="string">&quot;CONCURRENCY_STAMP&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        builder.HasData(<span class="keyword">new</span> Role &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;SuperAdmin&quot;</span>, NormalizedName = <span class="string">&quot;超级管理员&quot;</span> &#125;);</span><br><span class="line">        builder.HasData(<span class="keyword">new</span> Role &#123; Id = <span class="number">2</span>, Name = <span class="string">&quot;Admin&quot;</span>, NormalizedName = <span class="string">&quot;管理员&quot;</span> &#125;);</span><br><span class="line">        builder.HasData(<span class="keyword">new</span> Role &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;Operator&quot;</span>, NormalizedName = <span class="string">&quot;操作员&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserClaimConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">UserClaim</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;UserClaim&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_USER_CLAIM&quot;</span>).HasKey(x =&gt; x.Id);</span><br><span class="line">        builder.Property(x =&gt; x.Id).HasColumnName(<span class="string">&quot;ID&quot;</span>).ValueGeneratedOnAdd();</span><br><span class="line">        builder.Property(x =&gt; x.UserId).HasColumnName(<span class="string">&quot;USER_ID&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ClaimType).HasColumnName(<span class="string">&quot;CLAIM_TYPE&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ClaimValue).HasColumnName(<span class="string">&quot;CLAIM_VALUE&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">User</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;User&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_USER&quot;</span>).HasKey(x =&gt; x.Id);</span><br><span class="line">        builder.Property(x =&gt; x.Id).HasColumnName(<span class="string">&quot;ID&quot;</span>).ValueGeneratedOnAdd();</span><br><span class="line">        builder.Property(x =&gt; x.UserName).HasColumnName(<span class="string">&quot;USERNAME&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.NormalizedUserName).HasColumnName(<span class="string">&quot;NORMALIZED_USERNAME&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.Email).HasColumnName(<span class="string">&quot;EMAIL&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.NormalizedEmail).HasColumnName(<span class="string">&quot;NORMALIZED_EMAIL&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.EmailConfirmed).HasColumnName(<span class="string">&quot;EMAIL_CONFIRMED&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.PasswordHash).HasColumnName(<span class="string">&quot;PASSWORD_HASH&quot;</span>).HasMaxLength(<span class="number">256</span>);</span><br><span class="line">        builder.Property(x =&gt; x.SecurityStamp).HasColumnName(<span class="string">&quot;SECURITY_STAMP&quot;</span>).HasMaxLength(<span class="number">256</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ConcurrencyStamp).HasColumnName(<span class="string">&quot;CONCURRENCY_STAMP&quot;</span>).HasMaxLength(<span class="number">256</span>);</span><br><span class="line">        builder.Property(x =&gt; x.PhoneNumber).HasColumnName(<span class="string">&quot;PHONE_NUMBER&quot;</span>).HasMaxLength(<span class="number">15</span>);</span><br><span class="line">        builder.Property(x =&gt; x.PhoneNumberConfirmed).HasColumnName(<span class="string">&quot;PHONE_NUMBER_CONFIRMED&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.TwoFactorEnabled).HasColumnName(<span class="string">&quot;TWO_FACTOR_ENABLED&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.LockoutEnd).HasColumnName(<span class="string">&quot;LOCKOUT_END&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.LockoutEnabled).HasColumnName(<span class="string">&quot;LOCKOUT_ENABLED&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.AccessFailedCount).HasColumnName(<span class="string">&quot;ACCESS_FAILED_COUNT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        builder.HasData(<span class="keyword">new</span> User</span><br><span class="line">        &#123;</span><br><span class="line">            Id = <span class="number">1</span>,</span><br><span class="line">            UserName = <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            NormalizedUserName = <span class="string">&quot;ADMIN&quot;</span>,</span><br><span class="line">            PasswordHash = <span class="string">&quot;AQAAAAEAACcQAAAAELR93lThWhjLUaJtEMPGJXUR88rGK9RjjZytUhr0Jfy3J7JaObJCZAcu5MhPl39erg==&quot;</span>,</span><br><span class="line">            SecurityStamp = <span class="string">&quot;LA4OVIYIUDB7CB44WR4CTS6FCY4VRWSO&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserLoginConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">UserLogin</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;UserLogin&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_USER_LOGIN&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.LoginProvider).HasColumnName(<span class="string">&quot;LOGIN_PROVIDER&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ProviderKey).HasColumnName(<span class="string">&quot;PROVIDER_KEY&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.ProviderDisplayName).HasColumnName(<span class="string">&quot;PROVIDER_DISPLAY_NAME&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.UserId).HasColumnName(<span class="string">&quot;USER_ID&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserRoleConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">UserRole</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;UserRole&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_USER_ROLE&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.UserId).HasColumnName(<span class="string">&quot;USER_ID&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.RoleId).HasColumnName(<span class="string">&quot;ROLE_ID&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserTokenConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">UserToken</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;UserToken&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="string">&quot;SYS_USER_TOKEN&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.UserId).HasColumnName(<span class="string">&quot;USER_ID&quot;</span>);</span><br><span class="line">        builder.Property(x =&gt; x.LoginProvider).HasColumnName(<span class="string">&quot;LOGIN_PROVIDER&quot;</span>).HasMaxLength(<span class="number">20</span>);</span><br><span class="line">        builder.Property(x =&gt; x.Name).HasColumnName(<span class="string">&quot;NAME&quot;</span>).HasMaxLength(<span class="number">50</span>);</span><br><span class="line">        builder.Property(x =&gt; x.Value).HasColumnName(<span class="string">&quot;VALUE&quot;</span>).HasMaxLength(<span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>新建DataContext</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Samples.Identity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataContext</span>: <span class="title">IdentityDbContext</span>&lt;<span class="title">User</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataContext</span>(<span class="params">DbContextOptions&lt;DataContext&gt; options</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnModelCreating(builder);</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> UserConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> RoleConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> UserClaimConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> UserRoleConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> UserLoginConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> RoleClaimConfiguration());</span><br><span class="line">        builder.ApplyConfiguration(<span class="keyword">new</span> UserTokenConfiguration());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加ViewModel</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Sample.Identity.ViewModels</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Required(ErrorMessage = <span class="string">&quot;用户名不能为空&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Required(ErrorMessage = <span class="string">&quot;密码不能为空&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加Controller</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Sample.Identity.ViewModels;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Tokens;</span><br><span class="line"><span class="keyword">using</span> System.IdentityModel.Tokens.Jwt;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Sample.Identity.Controllers</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthenticateController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> UserManager&lt;User&gt; m_userManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RoleManager&lt;Role&gt; m_roleManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration m_configuration;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> JwtOption m_jwtOptions;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthenticateController</span>(<span class="params">UserManager&lt;User&gt; userManager,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 RoleManager&lt;Role&gt; roleManager,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    	m_userManager = userManager;</span><br><span class="line">        m_roleManager = roleManager;</span><br><span class="line">        m_configuration = configuration;</span><br><span class="line">        </span><br><span class="line">        m_jwtOptions = m_configuration.GetSection(<span class="string">&quot;&quot;</span>).Get&lt;JwtOption&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;login&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Login</span>(<span class="params">[FromBody] LoginViewModel model</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">await</span> m_userManager.FindByNameAsync(model.Username);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="literal">null</span> &amp;&amp; <span class="keyword">await</span> m_userManager.CheckPasswordAsync(user, model.Password))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> roles = <span class="keyword">await</span> m_userManager.GetRolesAsync(user);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> claims = <span class="keyword">new</span> List&lt;Claim&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Claim(ClaimTypes.Name, user.Username);</span><br><span class="line">                <span class="keyword">new</span> Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> role <span class="keyword">in</span> roles)</span><br><span class="line">            &#123;</span><br><span class="line">                claims.Add(<span class="keyword">new</span> Claim(ClaimTypes.Role, role));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> token = GenerateToken(claims);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Ok(<span class="keyword">new</span> &#123;</span><br><span class="line">               token = <span class="keyword">new</span> JwtSecurityTokenHandler().WriteToken(token),</span><br><span class="line">                expiration = token.ValidTo</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Unauthorized();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> JwtSecurityToken <span class="title">GetToken</span>(<span class="params">List&lt;Claim&gt; authClaims</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> authSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(m_jwtOptions.Secret));</span><br><span class="line">        <span class="keyword">var</span> token = <span class="keyword">new</span> JwtSecurityToken(</span><br><span class="line">                issuer: _configuration[<span class="string">&quot;JWT:ValidIssuer&quot;</span>],</span><br><span class="line">                audience: _configuration[<span class="string">&quot;JWT:ValidAudience&quot;</span>],</span><br><span class="line">                expires: DateTime.Now.AddHours(<span class="number">3</span>),</span><br><span class="line">                claims: authClaims,</span><br><span class="line">                signingCredentials: <span class="keyword">new</span> SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)</span><br><span class="line">            );</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改Program中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Sample.Identity;</span><br><span class="line">using Microsoft.AspNetCore.Authentication.JwtBearer;</span><br><span class="line">using Microsoft.AspNetCore.Identity;</span><br><span class="line">using Microsoft.EntityFrameworkCore;</span><br><span class="line">using Microsoft.IdentityModel.Tokens;</span><br><span class="line">using System.Text;</span><br><span class="line"> </span><br><span class="line">var builder = WebApplication.CreateBuilder(args);</span><br><span class="line">ConfigurationManager configuration = builder.Configuration;</span><br><span class="line"> </span><br><span class="line">// Add services to the container.</span><br><span class="line"> </span><br><span class="line">// For Entity Framework</span><br><span class="line">builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt; options.UseSqlServer(configuration.GetConnectionString(&quot;ConnStr&quot;)));</span><br><span class="line"> </span><br><span class="line">// For Identity</span><br><span class="line">builder.Services.AddIdentity&lt;User, Role&gt;() </span><br><span class="line">//optinos =&gt; &#123;</span><br><span class="line">//options.Password.RequireDigit = false;</span><br><span class="line">//options.Password.RequireLowercase = false;</span><br><span class="line">//options.Password.RequireUppercase = false;</span><br><span class="line">//options.Password.RequireNonAlphanumeric = false;</span><br><span class="line">//options.Password.RequiredLength = 8;</span><br><span class="line">//options.Password.RequiredUniqueChars = 1;</span><br><span class="line"></span><br><span class="line">//options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(10);</span><br><span class="line">//options.Lockout.MaxFailedAccessAttempts = 5;</span><br><span class="line">//options.Lockout.AllowedForNewUsers = true;</span><br><span class="line">//&#125;</span><br><span class="line">    .AddEntityFrameworkStores&lt;DataContext&gt;()</span><br><span class="line">    .AddDefaultTokenProviders();</span><br><span class="line"> </span><br><span class="line"> var jwtOptions = builder.Configuration.GetSection(&quot;JWT&quot;).Get&lt;JwtOption&gt;();</span><br><span class="line"> </span><br><span class="line">// Adding Authentication</span><br><span class="line">builder.Services.AddAuthentication(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">// Adding Jwt Bearer</span><br><span class="line">.AddJwtBearer(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.SaveToken = true;</span><br><span class="line">    options.RequireHttpsMetadata = false;</span><br><span class="line">    options.TokenValidationParameters = new TokenValidationParameters()</span><br><span class="line">    &#123;</span><br><span class="line">        ValidateIssuer = true,</span><br><span class="line">        ValidateAudience = true,</span><br><span class="line">        ValidAudience = jwtOptions.Audience,</span><br><span class="line">        ValidIssuer = jwtOptions.Issuer,</span><br><span class="line">        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtOptions.Secret))</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"> </span><br><span class="line">var app = builder.Build();</span><br><span class="line"> </span><br><span class="line">// Configure the HTTP request pipeline.</span><br><span class="line">if (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.UseHttpsRedirection();</span><br><span class="line"> </span><br><span class="line">// Authentication &amp; Authorization</span><br><span class="line">app.UseAuthentication();</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"> </span><br><span class="line">app.MapControllers();</span><br><span class="line"> </span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>

<p>执行数据迁移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add-migration L0</span><br><span class="line">update-database</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Identity</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Net作业调度(一) -Quartz.Net入门</title>
    <url>/2015/09/12/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%B8%80)%20-Quartz.Net%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很多时候，项目需要在不同时刻，执行一个或很多个不同的作业。</p>
<p>Windows执行计划这时并不能很好的满足需求了，迫切需要一个更为强大，方便管理，集群部署的作业调度框架。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Quartz 一个开源的作业调度框架，OpenSymphony的开源项目。Quartz.Net 是Quartz的C#移植版本。</p>
<p>它一些很好的特性：</p>
<p>1：支持集群，作业分组，作业远程管理。 </p>
<p>2：自定义精细的时间触发器，使用简单，作业和触发分离。</p>
<p>3：数据库支持，可以寄宿Windows服务，WebSite，winform等。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>Quartz框架的一些基础概念解释：</p>
<p> 　　Scheduler     作业调度器。</p>
<p> 　　IJob             作业接口，继承并实现Execute， 编写执行的具体作业逻辑。</p>
<p>　　JobBuilder       根据设置，生成一个详细作业信息(JobDetail)。</p>
<p>　　TriggerBuilder   根据规则，生产对应的Trigger</p>
<p>Nuget安装 </p>
<p> PM&gt; Install-Package Quartz </p>
<p>下面是简单使用例子，附带详细的注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line"> IScheduler scheduler = StdSchedulerFactory.GetDefaultScheduler();</span><br><span class="line"> scheduler.Start(); </span><br><span class="line"></span><br><span class="line"> IJobDetail job1 = JobBuilder.Create&lt;HelloJob&gt;()</span><br><span class="line"> .WithIdentity(&quot;作业名称&quot;, &quot;作业组&quot;)</span><br><span class="line"> .Build();</span><br><span class="line"></span><br><span class="line"> ITrigger trigger1 = TriggerBuilder.Create()</span><br><span class="line"> .WithIdentity(&quot;触发器名称&quot;, &quot;触发器组&quot;)</span><br><span class="line"> .StartNow() </span><br><span class="line"> .WithSimpleSchedule(x =&gt; x </span><br><span class="line"> .WithIntervalInSeconds(5)</span><br><span class="line"> .RepeatForever()) </span><br><span class="line"> .Build();</span><br><span class="line"></span><br><span class="line"> scheduler.ScheduleJob(job1, trigger1); </span><br><span class="line"></span><br><span class="line"> IJobDetail job2= JobBuilder.Create&lt;DumbJob&gt;()</span><br><span class="line"> .WithIdentity(&quot;myJob&quot;, &quot;group1&quot;)</span><br><span class="line"> .UsingJobData(&quot;jobSays&quot;, &quot;Hello World!&quot;)</span><br><span class="line"> .Build();</span><br><span class="line"></span><br><span class="line"> ITrigger trigger2 = TriggerBuilder.Create()</span><br><span class="line"> .WithIdentity(&quot;mytrigger&quot;, &quot;group1&quot;)</span><br><span class="line"> .StartNow()</span><br><span class="line"> .WithCronSchedule(&quot;/5 * * ? * *&quot;) </span><br><span class="line"> .Build();</span><br><span class="line"> scheduler.ScheduleJob(job2, trigger2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明要执行的作业，HelloJob：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 作业</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class HelloJob : IJob</span><br><span class="line">&#123;</span><br><span class="line"> public void Execute(IJobExecutionContext context)</span><br><span class="line"> &#123;</span><br><span class="line"> Console.WriteLine(&quot;作业执行!&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>声明要执行的作业，DumbJob：</p>
<p><code>public</code> <code>class</code> <code>DumbJob : IJob</code></p>
<p> <code>&#123;</code></p>
<p> <code>/// &lt;summary&gt;</code></p>
<p> <code>///  context 可以获取当前Job的各种状态。</code></p>
<p> <code>/// &lt;/summary&gt;</code></p>
<p> <code>/// &lt;param name=&quot;context&quot;&gt;&lt;/param&gt;</code></p>
<p> <code>public</code> <code>void</code> <code>Execute(IJobExecutionContext context)</code></p>
<p> <code>&#123;</code></p>
<p> <code>JobDataMap dataMap = context.JobDetail.JobDataMap;</code></p>
<p> <code>string</code> <code>content = dataMap.GetString(``&quot;jobSays&quot;``);</code></p>
<p> <code>Console.WriteLine(``&quot;作业执行，jobSays:&quot;</code> <code>+ content);</code></p>
<p> <code>&#125;</code></p>
<p> <code>&#125;</code></p>
<p>其WithCronSchedule(“”) 拥有强大的Cron时间表达式，正常情况下_WithSimpleSchedule(x)_ 已经满足大部分对日期设置的要求了。</p>
<p>Quartz.Net官方2.X教程  <a href="http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/index.html">http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/index.html</a></p>
<p>Quartz.Net开源地址   <a href="https://github.com/quartznet/quartznet">https://github.com/quartznet/quartznet</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Quartz.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Net作业调度(三) — Quartz.Net进阶</title>
    <url>/2015/09/26/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%B8%89)%20%E2%80%94%20Quartz.Net%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前面介绍Quartz.Net的基本用法，但在实际应用中，往往有更多的特性需求，比如记录job执行的执行历史，发邮件等。</p>
<h4 id="阅读目录"><a href="#阅读目录" class="headerlink" title="阅读目录"></a>阅读目录</h4><ol>
<li>Quartz.Net插件</li>
<li>TriggerListener,JobListener</li>
<li>Cron表达式</li>
<li>Quartz.Net线程池</li>
<li>总结</li>
</ol>
<h2 id="Quartz-Net插件"><a href="#Quartz-Net插件" class="headerlink" title="Quartz.Net插件"></a>Quartz.Net插件</h2><p>     Quartz.net 自身提供了一个插件接口(ISchedulerPlugin)用来增加附加功能，看下官方定义：</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p><code>public</code> <code>interface</code> <code>ISchedulerPlugin</code></p>
<p> <code>&#123;</code></p>
<p> <code>void</code> <code>Initialize(``string</code> <code>pluginName, IScheduler sched);</code></p>
<p> <code>void</code> <code>Shutdown();</code></p>
<p> <code>void</code> <code>Start();</code></p>
<p> <code>&#125;</code></p>
<p>　继承接口，实现自己的插件。</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p><code>public</code> <code>class</code> <code>MyPlugin : ISchedulerPlugin</code></p>
<p> <code>&#123;</code></p>
<p> <code>public</code> <code>void</code>  <code>Initialize(``string</code> <code>pluginName, IScheduler sched)</code></p>
<p> <code>&#123;</code></p>
<p> <code>Console.WriteLine(``&quot;实例化&quot;``);</code></p>
<p> <code>&#125;</code></p>
<p> <code>public</code>  <code>void</code> <code>Start()</code></p>
<p> <code>&#123;</code></p>
<p> <code>Console.WriteLine(``&quot;启动&quot;``);</code></p>
<p> <code>&#125;</code></p>
<p> <code>public</code>  <code>void</code> <code>Shutdown()</code></p>
<p> <code>&#123;</code></p>
<p> <code>Console.WriteLine(``&quot;关闭&quot;``);</code></p>
<p> <code>&#125;</code></p>
<p> <code>&#125;</code></p>
<p>　　主函数里面配置要实现的插件，注释部分，一句话搞定。</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p>16</p>
<p>17</p>
<p>18</p>
<p>19</p>
<p>20</p>
<p>21</p>
<p>22</p>
<p>23</p>
<p>24</p>
<p>25</p>
<p><code>static</code> <code>void</code> <code>Main(``string``[] args)</code></p>
<p> <code>&#123;</code></p>
<p> <code>var</code> <code>properties =</code> <code>new</code> <code>NameValueCollection();</code></p>
<p> <code>properties[``&quot;quartz.plugin.MyPlugin.type&quot;``] =</code> <code>&quot;QuartzDemo3.MyPlugin,QuartzDemo3&quot;``;</code></p>
<p> <code>var</code> <code>schedulerFactory =</code> <code>new</code> <code>StdSchedulerFactory(properties);</code></p>
<p> <code>var</code> <code>scheduler = schedulerFactory.GetScheduler();</code></p>
<p> <code>var</code> <code>job = JobBuilder.Create&lt;HelloJob&gt;()</code></p>
<p> <code>.WithIdentity(``&quot;myJob&quot;``,</code> <code>&quot;group1&quot;``)</code></p>
<p> <code>.Build();</code></p>
<p> <code>var</code> <code>trigger = TriggerBuilder.Create()</code></p>
<p> <code>.WithIdentity(``&quot;mytrigger&quot;``,</code> <code>&quot;group1&quot;``)</code></p>
<p> <code>.WithCronSchedule(``&quot;/2 * * ? * *&quot;``)</code></p>
<p> <code>.Build();</code></p>
<p> <code>scheduler.ScheduleJob(job, trigger);</code></p>
<p> <code>scheduler.Start();</code></p>
<p> <code>Thread.Sleep(6000);</code></p>
<p> <code>scheduler.Shutdown(``true``);</code></p>
<p> <code>Console.ReadLine();</code></p>
<p> <code>&#125;</code></p>
<p>运行结果如下：</p>
<p> <img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%B8%89"> — Quartz.Net进阶&#x2F;172151135196757.png)</p>
<h2 id="TriggerListener，JobListener"><a href="#TriggerListener，JobListener" class="headerlink" title="TriggerListener，JobListener"></a>TriggerListener，JobListener</h2><p>这2个是对触发器和job本身的行为监听器，这样更好方便跟踪Job的状态及运行情况。  </p>
<p>ITriggerListener是官方定义的接口，这里我们直接继承实现。 </p>
<p>public class MyTriggerListener : ITriggerListener<br>    { private string name; public void TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode)<br>        {<br>            Console.WriteLine(“job完成时调用”);<br>        } public void TriggerFired(ITrigger trigger, IJobExecutionContext context)<br>        {<br>            Console.WriteLine(“job执行时调用”);<br>        } public void TriggerMisfired(ITrigger trigger)<br>        {<br>            Console.WriteLine(“错过触发时调用(例：线程不够用的情况下)”);<br>        } public bool VetoJobExecution(ITrigger trigger, IJobExecutionContext context)<br>        { &#x2F;&#x2F;Trigger触发后，job执行时调用本方法。true即否决，job后面不执行。<br>            return false;<br>        } public string Name { get { return name; } set { name &#x3D; value; } }<br>    }</p>
<p>主函数添加：</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p>16</p>
<p> <code>scheduler.ListenerManager.AddTriggerListener(myJobListener, KeyMatcher&lt;TriggerKey&gt;.KeyEquals(``new</code> <code>TriggerKey(``&quot;mytrigger&quot;``,</code> <code>&quot;group1&quot;``)));</code></p>
<p> <code>////添加监听器到指定分类的所有监听器。</code></p>
<p> <code>////添加监听器到指定分类的所有监听器。</code></p>
<p><code>////添加监听器到指定的2个分组。</code></p>
<p> <code>////添加监听器到所有的触发器上。</code></p>
<p> <code>scheduler.Start();</code></p>
<p><strong>JobListener同理，这里不多做描述。</strong></p>
<h2 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h2><p>quartz中的cron表达式和Linux下的很类似，比如 “&#x2F;5 * * ? * * *“ 这样的7位表达式，最后一位年非必选。</p>
<p>表达式从左到右，依此是秒、分、时、月第几天、月、周几、年。下面表格是要遵守的规范：</p>
<p><strong>字段名</strong></p>
<p>允许的值</p>
<p>允许的特殊字符</p>
<p>Seconds</p>
<p>0-59</p>
<p>, - * &#x2F;</p>
<p>Minutes</p>
<p>0-59</p>
<p>, - * &#x2F;</p>
<p>Hours</p>
<p>0-23</p>
<p>, - * &#x2F;</p>
<p>Day of month</p>
<p>1-31</p>
<p>, - * ? &#x2F; L W</p>
<p>Month</p>
<p>1-12 or JAN-DEC</p>
<p>, - * &#x2F;</p>
<p>Day of week</p>
<p>1-7 or SUN-SAT</p>
<p>, - * ? &#x2F; L #</p>
<p>Year</p>
<p>空, 1970-2099</p>
<p>, - * &#x2F;</p>
<p>特殊字符</p>
<p>解释</p>
<p>,</p>
<p>或的意思。例：分钟位 5,10  即第5分钟或10分都触发。 </p>
<p>&#x2F;</p>
<p>a&#x2F;b。 a：代表起始时间，b频率时间。 例； 分钟位  3&#x2F;5，  从第三分钟开始，每5分钟执行一次。</p>
<p>*</p>
<p>频率。 即每一次波动。    例；分钟位 *  即表示每分钟 </p>
<p>-</p>
<p>区间。  例： 分钟位   5-10 即5到10分期间。 </p>
<p>?</p>
<p>任意值 。   即每一次波动。只能用在DayofMonth和DayofWeek，二者冲突。指定一个另一个一个要用?</p>
<p>L</p>
<p>表示最后。 只能用在DayofMonth和DayofWeek，4L即最后一个星期三</p>
<p>W</p>
<p>工作日。  表示最后。 只能用在DayofWeek</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>4#2。 只能用DayofMonth。 某月的第二个星期三  </p>
<h4 id="实例介绍"><a href="#实例介绍" class="headerlink" title="实例介绍"></a>实例介绍</h4><p>”0 0 10,14,16 * * ?”    每天10点，14点，16点 触发。</p>
<p>“0 0&#x2F;5 14,18 * * ?”    每天14点或18点中，每5分钟触发 。</p>
<p>“0 4&#x2F;15 14-18 * * ?”       每天14点到18点期间,  从第四分钟触发，每15分钟一次。</p>
<p>“0 15 10 ? * 6L”        每月的最后一个星期五上午10:15触发。</p>
<h3 id="Quartz-Net线程池"><a href="#Quartz-Net线程池" class="headerlink" title="Quartz.Net线程池"></a>Quartz.Net线程池</h3><p>线程池数量设置：</p>
<p>properties[“quartz.threadPool.threadCount”] &#x3D; “5”;  </p>
<p>这个线程池的设置，是指同时间，调度器能执行Job的最大数量。</p>
<p>quartz是用每个线程跑一个job。上面的设置可以解释是job并发时能执行5个job，剩下的job如果触发时间恰好到了，当前job会进入暂停状态，直到有可用的线程。</p>
<p>如果在指定的时间范围依旧没有可用线程，会触发misfired时间。</p>
<p>quartz 提供了IThreadPool接口，也可以用自定义线程池来实现。</p>
<p>配置如下：</p>
<p>properties[“quartz.threadPool.type”] &#x3D; “Quartz.Simpl.SimpleThreadPool, Quartz”; </p>
<p>一般来说作业调度很少并发触发大量job，如果有上百个JOB，可在服务器承受范围内适量增加线程数量。     </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>官方有LoggingTriggerHistoryPlugin，LoggingJobHistoryPlugin  已实现的，触发器和job历史记录的插件。</p>
<p>Quartz.Plugin 命名空间下有官方实现的其他一些插件，也可以自己增加扩展。</p>
<p>quartz中监听器还有SchedulerListener，使用方法基本一样。 </p>
<p>本文基于自用经验和官方文档代码来写的，部分是直接翻译的。 </p>
<p>Quartz.Net官方教程<a href="http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/index.html">http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/index.html</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Quartz.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Net作业调度(二) -CrystalQuartz远程管理</title>
    <url>/2015/09/19/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%8C)%20-CrystalQuartz%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>上篇已经了解Quartz.NET的基本使用方法了。但如果想方便的知道某个作业执行情况，需要暂停，启动等操作行为，这时候就需要个Job管理的界面。</p>
<p>本文介绍Quartz.NET如何进行远程job管理，如图:</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%8C"> -CrystalQuartz远程管理&#x2F;011755051751192.png)</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>一：作业服务端</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p>16</p>
<p>17</p>
<p>18</p>
<p>19</p>
<p>20</p>
<p>21</p>
<p>22</p>
<p>23</p>
<p>24</p>
<p>25</p>
<p>26</p>
<p>27</p>
<p>28</p>
<p>29</p>
<p>30</p>
<p>31</p>
<p>32</p>
<p><code>static</code> <code>void</code> <code>Main(``string``[] args)</code></p>
<p> <code>&#123;</code></p>
<p> <code>var</code> <code>properties =</code> <code>new</code> <code>NameValueCollection();</code></p>
<p> <code>properties[``&quot;quartz.scheduler.instanceName&quot;``] =</code> <code>&quot;RemoteServerSchedulerClient&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.threadPool.type&quot;``] =</code> <code>&quot;Quartz.Simpl.SimpleThreadPool, Quartz&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.threadPool.threadCount&quot;``] =</code> <code>&quot;5&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.threadPool.threadPriority&quot;``] =</code> <code>&quot;Normal&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.scheduler.exporter.type&quot;``] =</code> <code>&quot;Quartz.Simpl.RemotingSchedulerExporter, Quartz&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.scheduler.exporter.port&quot;``] =</code> <code>&quot;556&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.scheduler.exporter.bindName&quot;``] =</code> <code>&quot;QuartzScheduler&quot;``;</code></p>
<p> <code>properties[``&quot;quartz.scheduler.exporter.channelType&quot;``] =</code> <code>&quot;tcp&quot;``;</code></p>
<p> <code>var</code> <code>schedulerFactory =</code> <code>new</code> <code>StdSchedulerFactory(properties);</code></p>
<p> <code>var</code> <code>scheduler = schedulerFactory.GetScheduler();</code></p>
<p> <code>var</code> <code>job = JobBuilder.Create&lt;PrintMessageJob&gt;()</code></p>
<p> <code>.WithIdentity(``&quot;myJob&quot;``,</code> <code>&quot;group1&quot;``)</code></p>
<p> <code>.Build();</code></p>
<p> <code>var</code> <code>trigger = TriggerBuilder.Create()</code></p>
<p> <code>.WithIdentity(``&quot;myJobTrigger&quot;``,</code> <code>&quot;group1&quot;``)</code></p>
<p> <code>.StartNow()</code></p>
<p> <code>.WithCronSchedule(``&quot;/10 * * ? * *&quot;``)</code></p>
<p> <code>.Build();</code></p>
<p> <code>scheduler.ScheduleJob(job, trigger);</code></p>
<p> <code>scheduler.Start();</code></p>
<p> <code>&#125;</code></p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p><code>public</code> <code>class</code> <code>PrintMessageJob : IJob</code></p>
<p> <code>&#123;</code></p>
<p> <code>public</code> <code>void</code> <code>Execute(IJobExecutionContext context)</code></p>
<p> <code>&#123;</code></p>
<p> <code>Console.WriteLine(``&quot;Hello!&quot;``);</code></p>
<p> <code>&#125;</code></p>
<p> <code>&#125;</code></p>
<p>启动如下</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%8C"> -CrystalQuartz远程管理&#x2F;011801015192327.png)</p>
<p>二：作业远程管理端，无需写任何代码，引用官方程序集，嵌入到已有的web网站。 </p>
<p>      PM&gt; Install-Package CrystalQuartz.Remote</p>
<p>      Webconfig 需要配置的地方</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p><code>&lt;configuration&gt;</code> </p>
<p> <code>&lt;crystalQuartz&gt;</code></p>
<p> <code>&lt;provider&gt;</code></p>
<p> <code>&lt;add property=``&quot;Type&quot;</code> <code>value=``&quot;CrystalQuartz.Core.SchedulerProviders.RemoteSchedulerProvider, CrystalQuartz.Core&quot;</code> <code>/&gt;</code></p>
<p> <code>&lt;add property=``&quot;SchedulerHost&quot;</code> <code>value=``&quot;tcp://127.0.0.1:556/QuartzScheduler&quot;</code> <code>/&gt; &lt;!--TCP监听的地址--&gt;</code></p>
<p> <code>&lt;/provider&gt;</code></p>
<p> <code>&lt;/crystalQuartz&gt;</code></p>
<p><code>&lt;system.webServer&gt;</code></p>
<p> <code>&lt;!-- Handler拦截处理了，输出作业监控页面--&gt;</code></p>
<p> <code>&lt;handlers&gt;</code></p>
<p> <code>&lt;add name=``&quot;CrystalQuartzPanel&quot;</code> <code>verb=``&quot;*&quot;</code> <code>path=``&quot;CrystalQuartzPanel.axd&quot;</code> <code>type=``&quot;CrystalQuartz.Web.PagesHandler, CrystalQuartz.Web&quot;</code> <code>/&gt;</code></p>
<p> <code>&lt;/handlers&gt;</code></p>
<p> <code>&lt;/system.webServer&gt;</code></p>
<p><code>&lt;/configuration&gt;</code></p>
<p>　Web管理界面</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%8C"> -CrystalQuartz远程管理&#x2F;011811269404890.png)</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>CrystalQuartz 提供基础功能，可以继续在此基础上进行二次开发，另外推荐使用Window服务寄宿，比较方法。</p>
<h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><p>张善友   　　　　　　　　    <a href="http://www.cnblogs.com/shanyou/archive/2012/01/15/2323011.html">http://www.cnblogs.com/shanyou/archive/2012/01/15/2323011.html</a></p>
<p>CrystalQuartz开源的地址 　　<a href="https://github.com/guryanovev/CrystalQuartz">https://github.com/guryanovev/CrystalQuartz</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Quartz.NET</tag>
        <tag>任务调度</tag>
      </tags>
  </entry>
  <entry>
    <title>Net作业调度(五)—quartz.net动态添加job设计</title>
    <url>/2015/10/10/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%94)%E2%80%94quartz.net%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0job%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在实际项目使用中quartz.net中，都希望有一个管理界面可以动态添加job，而避免每次都要上线发布。 </p>
<p>也看到有园子的同学问过。这里就介绍下实现动态添加job的几种方式， 也是二次开发的核心模块。</p>
<h4 id="阅读目录："><a href="#阅读目录：" class="headerlink" title="阅读目录："></a>阅读目录：</h4><ol>
<li><a href="https://www.cnblogs.com/mushroom/p/4231834.html#one">传统方式</a></li>
<li><a href="https://www.cnblogs.com/mushroom/p/4231834.html#two">框架反射方式</a></li>
<li><a href="https://www.cnblogs.com/mushroom/p/4231834.html#three">进程方式</a></li>
<li><a href="https://www.cnblogs.com/mushroom/p/4231834.html#four">URL方式</a></li>
<li><a href="https://www.cnblogs.com/mushroom/p/4231834.html#five">框架配置方式</a></li>
</ol>
<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><p> 继承IJob，实现业务逻辑，添加到scheduler。</p>
<p>public class MonitorJob : IJob<br>    { public void Execute(IJobExecutionContext context)<br>        { &#x2F;&#x2F;do something<br>            Console.WriteLine(“test”);<br>        }<br>    } &#x2F;&#x2F;var job &#x3D; JobBuilder.Create<MonitorJob>() &#x2F;&#x2F; .WithIdentity(“test”, “value”) &#x2F;&#x2F; .Build(); &#x2F;&#x2F;var trigger &#x3D; (ICronTrigger) TriggerBuilder.Create() &#x2F;&#x2F; .WithIdentity(“test”, “value”) &#x2F;&#x2F; .WithCronSchedule(“0 0&#x2F;5 * * * ?”) &#x2F;&#x2F; .Build(); &#x2F;&#x2F;scheduler.ScheduleJob(job, trigger);</p>
<p>也可以使用CrystalQuartz远程管理暂停取消。之前的博客<a href="http://www.cnblogs.com/mushroom/p/4067558.html">CrystalQuartz远程管理(二)</a>。</p>
<h2 id="框架反射方式"><a href="#框架反射方式" class="headerlink" title="框架反射方式"></a>框架反射方式</h2><p>这种方式需要定义一套接口框架。 比如：</p>
<p>  interface IcustomJob<br>    { void Excute(string context); void Failed(string error); void Complete(string msg);<br>    }</p>
<p>1：当我们写job时同一实现这个框架接口，类库形式。</p>
<p>2：写完后编译成DLL，上传到我们的作业执行节点。</p>
<p>3：在执行节点中，通过反射拿到DLL的job信息。</p>
<p>4：然后构建quartz的job，添加到scheduler。</p>
<p>这种方式缺点： 耦合性太高，开发量较大。 优点：集中式管理。</p>
<p>系统结构如图：</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%94)%E2%80%94quartz.net%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0job%E8%AE%BE%E8%AE%A1/181839415731718.png"></p>
<h2 id="进程方式"><a href="#进程方式" class="headerlink" title="进程方式"></a>进程方式</h2><p>这个方式和windows任务计划类似。</p>
<p>1：使用方编写自己的job，无需实现任何接口，可执行应用程序形式。</p>
<p>2：将程序发送到执行节点，由执行节点起进程调用job程序。</p>
<p>执行节点调用，示例如下：</p>
<p> public class ConsoleJob:IJob<br>    { public void Execute(IJobExecutionContext context)<br>        {<br>            JobDataMap dataMap = context.JobDetail.JobDataMap; string content &#x3D; dataMap.GetString(“jobData”); var jd &#x3D; new JavaScriptSerializer().Deserialize<ConsoleJobData>(content);</p>
<pre><code>        Process p \= new Process();
        p.StartInfo.UseShellExecute \= true;
        p.StartInfo.FileName \= jd.Path;
        p.StartInfo.Arguments \= jd.Parameters;   //空格分割
        p.StartInfo.WindowStyle = ProcessWindowStyle.Minimized;
        p.Start();
    &#125;
&#125;
</code></pre>
<p>这种方式相对来说： 耦合性中等，执行节点和job相互不关心，没有依赖，开发量较小。</p>
<p>系统结构如图：</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%94)%E2%80%94quartz.net%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0job%E8%AE%BE%E8%AE%A1/181849136677228.png"></p>
<h2 id="URL方式"><a href="#URL方式" class="headerlink" title="URL方式"></a>URL方式</h2><p>URL方式和第三种类似，不过调用的不在是执行程序，而是URL。</p>
<p>1： 使用方在网页或服务中，实现业务逻辑。</p>
<p>2： 然后将Url，交给执行节点post或get执行。</p>
<p>执行节点调用，示例如下：</p>
<p> public class HttpJob : IJob<br>    { public void Execute(IJobExecutionContext context)<br>        { var dataMap &#x3D; context.JobDetail.JobDataMap; var content &#x3D; dataMap.GetString(“jobData”); var jd &#x3D; new JavaScriptSerializer().Deserialize<HttpJobData>(content); if (jd.Parameters &#x3D;&#x3D; null)<br>                jd.Parameters = string.Empty; if (jd.Timeout &#x3D;&#x3D; 0)<br>                jd.Timeout = 5*60; var result &#x3D; RequestHelper.Post(jd.Url, jd.ContentType, jd.Timeout, jd.Parameters, jd.heads);<br>        }<br>    }</p>
<p>这种方式耦合比较低，使用方不需要单独写应用程序了，和平常业务开发一样。</p>
<p>执行节点的职权，仅仅作为一个触发器。</p>
<p>有2点需要注意的是：</p>
<p>1：请求URL时，注意双方约定token加密，防止非执行节点执行调用。</p>
<p>2：使用方，如果有耗时操作，建议异步执行。 </p>
<p>系统结构如图：</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%94)%E2%80%94quartz.net%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0job%E8%AE%BE%E8%AE%A1/181853563397152.png"></p>
<h2 id="框架配置方式"><a href="#框架配置方式" class="headerlink" title="框架配置方式"></a>框架配置方式</h2><p>1：使用方直接使用quartz.net框架，实现自己的job。从管理方拉取执行节点配置，然后自行管理执行节点。</p>
<p>2：使用方也可以暴露端口给管理方，以实现监控，修改配置。</p>
<p>这种形式，耦合性最低。是把管理方当成一个配置中心。 ps：几乎和传统方式+CrystalQuartz一样了。</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E4%BA%94)%E2%80%94quartz.net%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0job%E8%AE%BE%E8%AE%A1/181858070583283.png"></p>
<p>通过context.JobDetail.JobDataMap，可以保存job的需要的信息。</p>
<p>本篇介绍主流的几种实现方案，供大家参考使用。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Quartz.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Net作业调度(四)—quartz.net持久化和集群</title>
    <url>/2015/10/03/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E5%9B%9B)%E2%80%94quartz.net%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在实际使用quartz.net中，持久化能保证实例重启后job不丢失、 集群能均衡服务器压力和解决单点问题。</p>
<p>quartz.net在这两方面配置都比较简单。</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>quartz.net的持久化，是把job、trigger一些信息存储到数据库里面，以解决内存存储重启丢失。</p>
<h3 id="下载sql脚本"><a href="#下载sql脚本" class="headerlink" title="下载sql脚本"></a><strong>下载sql脚本</strong></h3><p>           <a href="https://github.com/quartznet/quartznet/blob/master/database/tables/tables/_sqlServer.sql">https://github.com/quartznet/quartznet/blob/master/database/tables/tables\_sqlServer.sql</a></p>
<h3 id="创建个数据库，并执行脚本"><a href="#创建个数据库，并执行脚本" class="headerlink" title="创建个数据库，并执行脚本"></a><strong>创建个数据库，并执行脚本</strong></h3><p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E5%9B%9B)%E2%80%94quartz.net%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/181125329017601.png"></p>
<p>  QRTZ_BLOB_TRIGGERS  以Blob 类型存储的触发器。</p>
<p>  QRTZ_CALENDARS   存放日历信息， quartz.net可以指定一个日历时间范围。</p>
<p>  QRTZ_CRON_TRIGGERS  cron表达式触发器。</p>
<p>  QRTZ_JOB_DETAILS      job详细信息。</p>
<p>  QRTZ_LOCKS       集群实现同步机制的行锁表</p>
<p>  QRTZ_SCHEDULER_STATE   实例信息，集群下多使用。</p>
<h3 id="quartz-net-配置"><a href="#quartz-net-配置" class="headerlink" title="quartz.net 配置"></a>quartz.net 配置</h3><p>  &#x2F;&#x2F;=&#x3D;&#x3D;持久化&#x3D;&#x3D;&#x3D;&#x3D; &#x2F;&#x2F;存储类型<br>            properties[“quartz.jobStore.type”] &#x3D; “Quartz.Impl.AdoJobStore.JobStoreTX, Quartz”; &#x2F;&#x2F;表明前缀<br>            properties[“quartz.jobStore.tablePrefix”] &#x3D; “QRTZ_“; &#x2F;&#x2F;驱动类型<br>            properties[“quartz.jobStore.driverDelegateType”] &#x3D; “Quartz.Impl.AdoJobStore.SqlServerDelegate, Quartz”; &#x2F;&#x2F;数据源名称<br>            properties[“quartz.jobStore.dataSource”] &#x3D; “myDS”; &#x2F;&#x2F;连接字符串<br>            properties[“quartz.dataSource.myDS.connectionString”] &#x3D; @”Data Source&#x3D;(local);Initial Catalog&#x3D;JobScheduler;User ID&#x3D;sa;Password&#x3D;123465”; &#x2F;&#x2F;sqlserver版本<br>            properties[“quartz.dataSource.myDS.provider”] &#x3D; “SqlServer-20”;</p>
<h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><p>  var properties &#x3D; JobsManager.GetProperties(); var schedulerFactory &#x3D; new StdSchedulerFactory(properties);<br>            scheduler = schedulerFactory.GetScheduler();<br>            scheduler.Start(); &#x2F;&#x2F;var job &#x3D; JobBuilder.Create<MonitorJob>() &#x2F;&#x2F; .WithIdentity(“test”, “value”) &#x2F;&#x2F; .Build(); &#x2F;&#x2F;var trigger &#x3D; (ICronTrigger) TriggerBuilder.Create() &#x2F;&#x2F; .WithIdentity(“test”, “value”) &#x2F;&#x2F; .WithCronSchedule(“0 0&#x2F;5 * * * ?”) &#x2F;&#x2F; .Build(); &#x2F;&#x2F;scheduler.ScheduleJob(job, trigger);</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>     1： 持久化后，job只有添加一次了(数据库已经有了)，所以不能再执行端写添加job的行为。这时候需要一个管理工具，动态添加操作。</p>
<p>     2： quartz.net 支持sql server、sqlite、mysql、oracle、mongodb(非官方版)。</p>
<p>部署图：</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E5%9B%9B)%E2%80%94quartz.net%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/181416397612551.png"> </p>
<p>如图quartz.net 的集群模式是依赖数据库表的，所以要持久化配置。  集群节点之间是不通信的，这样分布式的架构，很方便进行水平扩展。</p>
<p>1: 除了线程池数量，instanceId可以不同外，各个节点的配置必须是一样的。</p>
<p>2：集群中节点的系统时间一致。  </p>
<p>3：多线程、集群中。quartz.net 利用数据库锁来保证job不会重复执行。</p>
<p>     源码在DBSemaphore.cs、UpdateLockRowSemaphore.cs、StdRowLockSemaphore.cs</p>
<p>4：集群化后，某节点失效后，剩余的节点能保证job继续执行下去。</p>
<p>实例配置后启动。</p>
<p>   &#x2F;&#x2F;cluster<br>            properties[“quartz.jobStore.clustered”] &#x3D; “true”;<br>            properties[“quartz.scheduler.instanceId”] &#x3D; “AUTO”;</p>
<p>简单管理界面：</p>
<p><img src="/Net%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6(%E5%9B%9B)%E2%80%94quartz.net%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E9%9B%86%E7%BE%A4/181503535266416.png"></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Quartz.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism之Bootstrapper</title>
    <url>/2015/07/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BBootstrapper/</url>
    <content><![CDATA[<p>  在程序中使用框架必然要有一个切入点，框架会在这里进行初始化，处理相关配置信息等。在Prism中扮演这一角色的就是Bootstrapper。</p>
<p>Prism提供了一个抽象基类Bootstrapper，这个类里面包含了包含了许多空的虚方法，可以重写它们添加自己的逻辑。这个基类与任何容器无关，所以可以通过继承它来实现基于特定容器的Bootstrapper，不过通常我们大可不必这样做，因为Prism默认提供了两个基于特定容器的Bootstrapper——UnityBootstrapper和MefBootstrapper，分别使用Unity和Mef来实现依赖注入。而我们需要做的工作就是在这两个类之间选择一个适合自己的，稍微配置一下就可以了。当然如果你不喜欢这两个容器或者已有的程序使用了其它容器(如Spring.Net， Castle等)，也可以通过继承Boostrapper抽象基类来实现自己的SpringBootstrapper和CastleBootstrapper。虽然UnityBootstrapper的代码看起来挺简单的，但是如果仿照这个来实现CastleBootstrapper却并不是那么容易的一件事(不信你可以试试)，所以更好的办法是用<a href="http://compositewpfcontrib.codeplex.com/">现成</a>的。</p>
<pre><code>那么Bootstrapper都做了些什么呢？
</code></pre>
<ol>
<li><p>创建Logger：</p>
<p> 执行CreateLogger方法，默认创建一个EmptyLogger，不会在任何地方输出log。当然是可以扩展的，比如你可以使用<a href="http://clog.codeplex.com/">Clog</a>来做一个适配器。</p>
</li>
<li><p>创建并配置ModuleCatalog</p>
</li>
</ol>
<p>执行CreateModuleCatalog方法，默认创建一个空的ModuleCatalog。然后执行ConfigureModuleCatalog方法，默认情况下这个方法是空的。可以重写这两个方法，加入自定义的获取ModuleCatalog的逻辑，比如在CreateModuleCatalog中可以从一个xaml文件中读取Module信息。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IModuleCatalog <span class="title">CreateModuleCatalog</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ModuleCatalog.CreateFromXaml(<span class="keyword">new</span> Uri(<span class="string">&quot;/AssemblyName;component/ModulesCatalog.xaml&quot;</span>,  UriKind.Relative));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建并配置依赖注入容器</li>
</ol>
<p>  Prism中使用依赖注入来管理各个组件，你可以使用任何你熟悉的容器，比如Castle, Unity等。Prism中内置了对Unity以及Mef的支持，所以有两种预定义好的Bootstrapper: UnityBootstrapper和MefBootstrapper，其中分别采用UnityContainer和CompositionContainer作为依赖注入容器。以UnityBootstrapper为例，在这一步中会先调用CreateContainer方法，返回一个UnityContainer；然后调用ConfigureContainer方法，在这个方法中主要是将一些常用的类注册到容器中。</p>
<ol start="4">
<li>配置默认的Region适配器映射</li>
</ol>
<p>  为了使xaml中的UI控件可以使用Region，需要先注册一下。Prism默认支持Region的控件类型有：TabControl, Selector, ItemsControl, ContentControl。当然你也可以通过实现IRegionAdapter接口或者直接继承RegionAdapterBase<T>来使其它控件也支持Region。</p>
<ol start="5">
<li>配置默认的Region 行为(Behavior)</li>
</ol>
<p>  为RegionBehaviorFactory添加一些默认的行为。这样可以扩展Region的行为。可以通过实现IRegionBehavior接口或继承RegionBehavior来自定义Region的行为，并重写ConfigureDefaultRegionBehaviors方法添加到Region。</p>
<ol start="6">
<li>注册框架异常类型</li>
</ol>
<p>  Prism提供了ExceptionExtensions类来帮助开发人员定位异常发生的根异常。在这一步通过调用RegisterFrameworkExceptionTypes方法向ExceptionExtensions中添加新的Root Exception。</p>
<ol start="7">
<li>创建并初始化Shell</li>
</ol>
<p>  首先调用CreateShell方法来创建一个Shell，这是一个抽象方法，通常这个方法中就是返回作为整个网站容器的页面。之后会将RegionManager attach到Shell上，然后更新定义的Regions，最后调用InitializeShell方法来初始化Shell。默认情况下这是个空方法，可以通过重写这个方法加入自定义的逻辑，可以在这个方法中将Shell作为Silverlight程序的根容器页面显示出来。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InitializeShell</span>()`</span></span><br><span class="line">&#123;</span><br><span class="line">     Application.Current.RootVisual = Shell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>初始化Modules</li>
</ol>
<p>  调用InitializeModules方法，实际上就是调用ModuleManager.Run方法，会调用ModuleCatalog中的所有InitializationMode为WhenAvailable的Module的Initialize方法。</p>
<p>  至此，整个容器的初始化过程就完毕了。</p>
<p>  值得一提的还有<a href="http://commonservicelocator.codeplex.com/">CommonServiceLocator</a>，这同样是Patterns &amp; Practices小组的产品。它的作用很简单，就是统一依赖注入容器的接口，使程序不必依赖于特定的容器，只需要使用ServiceLocator，然后去间接地使用其它各种各样的容器。在Prism的内部就是使用ServiceLocator来进行管理的。所以不管使用什么样的容器，都需要提供一个实现了IServiceLocator接口的适配器，如使用Unity要提供UnityServiceLocatorAdapter，使用Mef要提供MefServiceLocatorAdapter。这样不管外部使用什么容器，内部都不需要改变。所以如果要使用Prism重头开始构架一个程序，那么在整个程序中不依赖于特定的依赖注入容器接口，而是使用ServiceLocator是一个不错的选择，这样可以在需要的情况下很容易地更换容器，只需要重写一个Bootstrapper和一个ServiceLocatorAdapter就可以了。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism之Module</title>
    <url>/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/</url>
    <content><![CDATA[<p>Prism的核心功能之一就是支持模块化应用程序开发(Modular Application Development)，并且在运行时对各个模块进行动态管理。</p>
<p>使用Prism进行模块化开发首先要了解几个概念：</p>
<p>1.Module: Module是一些逻辑上相关的程序集或者资源文件的集合，在Silverlight程序中通常以xap文件为单位存在。而每一个Module中都需要有一个负责进行初始化工作以及与系统进行集成的角色，它需要实现IModule接口。IModule接口中只有一个Initialize方法，一方面这个接口将这个工程标记为一个Module，另一方面你可以在Initialize方法中实现一些逻辑，比如向容器中注册一些Service，或者将视图集成到程序中等等。</p>
<p>2.ModuleInfo: 在创建了一个Module之后，需要通知Prism这个Module的存在，也就是要注册一下。在Prism中，Module是以ModuleInfo的形式存在的。ModuleInfo记录了Module的信息，ModuleName属性是Module的标识符，相当于Module的ID；ModuleType是Module的AssemblyQualifiedName；DependsOn属性是该Module依赖的其它Module的ModuleName的集合，在加载该Module时，如果有依赖项没有加载的话，会先将依赖项加载；InitializationMode，有两种情况——WhenAvailable和OnDemand，当选择了WhenAvailable时，该Module会在程序启动时自动加载，如果选择了OnDemand，则会按需加载，默认情况下是WhenAvailable；Ref，存储该Module的位置，如XXX.xap；State，定义了Module从注册到加载到初始化的整个过程中的状态。</p>
<p>3.ModuleCatalog: ModuleCatalog实现了IModuleCatalog接口，它是ModuleInfo的容器，保存着系统中所有Module的信息，不仅会管理哪些Module需要加载，什么时候加载以什么顺序加载等问题，还要检查各个Module之间是否存在着循环依赖、是否有重复的Module等等。ModuleCatalog提供了含参构造方法和AddModule方法，可以通过代码将Module注册进去，同时也可以在xaml文件中配置好Module，然后通过ModuleCatalog.CreateFromXaml方法来加载。</p>
<p>4.ModuleManager: ModuleManager实现了IModuleManager接口。顾名思义就是管理Module的类。IModuleManager中含有两个方法和两个事件：Run方法会将所有InitializationMode为WhenAvailable的Module加载，然后进行初始化，初始化的工作委托给了IModuleInitializer来完成，它会获取到Module类(上面提到的实现了IModule接口的类)的实例，然后调用其Initialize方法。LoadModule方法用来加载InitializationMode为OnDemand的Module。两个事件分别用来通知下载Module的进度变化以及Module加载完成。</p>
<p>下面用一个示例程序来说明如何在Prism中进行模块化程序开发。</p>
<p>1.创建一个Silverlight Application，叫做PrismModule。</p>
<p>2.在Solution中添加三个Silverlight Application，分别叫做ModuleA, ModuleB, ModuleC。然后删除这三个工程中的App文件和MainPage文件。</p>
<p>3.在ModuleA工程下添加一个UserControl，叫做ViewA，然后再添加一个类，叫做ModuleA。并添加Microsoft.Practices.Prism和Microsoft.Practices.ServiceLocation引用。下面是ViewA和ModuleA的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserControl x:Class=&quot;ModuleA.ViewA&quot;</span><br><span class="line">    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">    mc:Ignorable=&quot;d&quot;</span><br><span class="line">    d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;400&quot;&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;Grid x:Name=&quot;LayoutRoot&quot; Background=&quot;White&quot;&gt;</span><br><span class="line">        &lt;TextBlock Text=&quot;Module A&quot; FontSize=&quot;22&quot; /&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/UserControl&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModuleA</span> : <span class="title">IModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.对ModuleB和ModuleC重复做步骤3的操作，只是将文本改成相应模块。</p>
<p>5.在PrismModule中添加对ModuleA、ModuleB、ModuleC、Prism、UnityExtensions还有Unity for Silverlight的引用，然后创建Shell和<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/18/1935713.html">Bootstrapper</a>。添加一个UserControl，叫做Shell；再添加一个类，叫做Bootstrapper。</p>
<p>Shell代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserControl x:Class=&quot;PrismModule.Shell&quot;</span><br><span class="line">    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">    xmlns:prism=&quot;http://www.codeplex.com/prism&quot;</span><br><span class="line">    mc:Ignorable=&quot;d&quot;</span><br><span class="line">    d:DesignHeight=&quot;600&quot; d:DesignWidth=&quot;800&quot;&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;StackPanel Margin=&quot;50&quot;&gt;</span><br><span class="line">        &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;</span><br><span class="line">            &lt;Border VerticalAlignment=&quot;Top&quot; BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionA&quot; /&gt;</span><br><span class="line">            &lt;/Border&gt;</span><br><span class="line">            &lt;Border VerticalAlignment=&quot;Top&quot; BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionB&quot; /&gt;</span><br><span class="line">            &lt;/Border&gt;</span><br><span class="line">            &lt;StackPanel&gt;</span><br><span class="line">                &lt;Border BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                    &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionC&quot; /&gt;</span><br><span class="line">                &lt;/Border&gt;</span><br><span class="line">                &lt;Button Content=&quot;Load Module C&quot; Click=&quot;LoadModuleC&quot; Width=&quot;120&quot; Height=&quot;25&quot; /&gt;</span><br><span class="line">            &lt;/StackPanel&gt;</span><br><span class="line">        &lt;/StackPanel&gt;</span><br><span class="line">    &lt;/StackPanel&gt;</span><br><span class="line">&lt;/UserControl&gt;</span><br></pre></td></tr></table></figure>



<p>Shell.xaml.cs代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserControl x:Class=&quot;PrismModule.Shell&quot;</span><br><span class="line">    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">    xmlns:prism=&quot;http://www.codeplex.com/prism&quot;</span><br><span class="line">    mc:Ignorable=&quot;d&quot;</span><br><span class="line">    d:DesignHeight=&quot;600&quot; d:DesignWidth=&quot;800&quot;&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;StackPanel Margin=&quot;50&quot;&gt;</span><br><span class="line">        &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;</span><br><span class="line">            &lt;Border VerticalAlignment=&quot;Top&quot; BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionA&quot; /&gt;</span><br><span class="line">            &lt;/Border&gt;</span><br><span class="line">            &lt;Border VerticalAlignment=&quot;Top&quot; BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionB&quot; /&gt;</span><br><span class="line">            &lt;/Border&gt;</span><br><span class="line">            &lt;StackPanel&gt;</span><br><span class="line">                &lt;Border BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; Width=&quot;200&quot; Height=&quot;100&quot;&gt;</span><br><span class="line">                    &lt;ContentControl prism:RegionManager.RegionName=&quot;RegionC&quot; /&gt;</span><br><span class="line">                &lt;/Border&gt;</span><br><span class="line">                &lt;Button Content=&quot;Load Module C&quot; Click=&quot;LoadModuleC&quot; Width=&quot;120&quot; Height=&quot;25&quot; /&gt;</span><br><span class="line">            &lt;/StackPanel&gt;</span><br><span class="line">        &lt;/StackPanel&gt;</span><br><span class="line">    &lt;/StackPanel&gt;</span><br><span class="line">&lt;/UserControl&gt;</span><br></pre></td></tr></table></figure>



<p>Bootstrapper代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">UnityBootstrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DependencyObject <span class="title">CreateShell</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Container.TryResolve&lt;Shell&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InitializeShell</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        App.Current.RootVisual = (UIElement)<span class="keyword">this</span>.Shell;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IModuleCatalog <span class="title">CreateModuleCatalog</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleCatalog();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureModuleCatalog</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Type typeA = <span class="keyword">typeof</span>(ModuleA.ModuleA);</span><br><span class="line">        ModuleInfo moduleA = <span class="keyword">new</span> ModuleInfo</span><br><span class="line">        &#123;   <span class="comment">//  ModuleA没有设置InitializationMode,默认为WhenAvailable</span></span><br><span class="line">            ModuleName = typeA.Name,</span><br><span class="line">            ModuleType = typeA.AssemblyQualifiedName,</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        Type typeB = <span class="keyword">typeof</span>(ModuleB.ModuleB);</span><br><span class="line">        ModuleInfo moduleB = <span class="keyword">new</span> ModuleInfo</span><br><span class="line">        &#123;</span><br><span class="line">            ModuleName = typeB.Name,</span><br><span class="line">            ModuleType = typeB.AssemblyQualifiedName,</span><br><span class="line">            InitializationMode = InitializationMode.OnDemand,</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        Type typeC = <span class="keyword">typeof</span>(ModuleC.ModuleC);</span><br><span class="line">        ModuleInfo moduleC = <span class="keyword">new</span> ModuleInfo</span><br><span class="line">        &#123;</span><br><span class="line">            ModuleName = typeC.Name,</span><br><span class="line">            ModuleType = typeC.AssemblyQualifiedName,</span><br><span class="line">            InitializationMode = InitializationMode.OnDemand,</span><br><span class="line">            <span class="comment">//  ModuleC依赖于ModuleB</span></span><br><span class="line">            DependsOn = <span class="keyword">new</span> Collection&lt;<span class="built_in">string</span>&gt; &#123; moduleB.ModuleName &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.ModuleCatalog.AddModule(moduleA);</span><br><span class="line">        <span class="keyword">this</span>.ModuleCatalog.AddModule(moduleB);</span><br><span class="line">        <span class="keyword">this</span>.ModuleCatalog.AddModule(moduleC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将App.xaml.cs中的Application_Startup方法改为</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Application_Startup</span>(<span class="params"><span class="built_in">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Bootstrapper bootstrapper = <span class="keyword">new</span> Bootstrapper();</span><br><span class="line">    bootstrapper.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6.现在已经有了Region，需要将各个Module中的View填充到Region中。修改ModuleA,ModuleB和ModuleC的Initialize方法。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;().</span><br><span class="line">        RegisterViewWithRegion(<span class="string">&quot;RegionA&quot;</span>, <span class="keyword">typeof</span>(ViewA));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将其中的A改为相应的字母。运行程序，结果如下：</p>
<img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401416868.png" class="" title="image image">

<p>我们点击按钮来加载ModuleC，因为ModuleC依赖于ModuleB，所以ModuleB也一块儿加载出来了。但是这与我们预期的效果不太一致。因为一共只load了一个xap文件，用WinRAR打开看一下，发现三个Module的程序集都在其中。</p>
<img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401425953.png" class="" title="image image">

<p>在Silverlight程序中，模块化程序开发应该不仅仅体现在开发时的模块化，运行时也应该是模块化的。比如ModuleA在程序加载时就load出来，但是ModuleB和ModuleC则是在点击了按钮后才load出来的，换句话说，在没点按钮前就不应该将ModuleB和ModuleC的程序集加载进来。现在由于PrismModule项目引用了三个Module，所以程序集会被一块打包进xap文件中。我们修改一下，将对ModuleB和ModuleC的引用的Copy Local属性设置为false：</p>
<img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401443119.png" class="" title="image image"><img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401462445.png" class="" title="image image">

<p>重新编译一下，再次查看xap文件，发现已经没有了ModuleB和ModuleC。</p>
<img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401481531.png" class="" title="image image">

<p>运行程序，报错。很简单，因为我们在Bootstrapper中用到了ModuleB和ModuleC，缺少了这两个dll，程序没法运行。为了解决这个问题，我们把初始化ModuleCatalog的过程改一下，不使用代码，而是使用配置文件。在Silverlight中，Prism支持使用xaml文件作为配置文件。下面在PrismModule工程下新建一个资源文件，ModuleCatalog.xaml。内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Modularity:ModuleCatalog xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;       </span><br><span class="line">        xmlns:Modularity=&quot;clr-namespace:Microsoft.Practices.Prism.Modularity;assembly=Microsoft.Practices.Prism&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Modularity:ModuleInfo Ref=&quot;ModuleA.xap&quot; ModuleName=&quot;ModuleA&quot; </span><br><span class="line">        ModuleType=&quot;ModuleA.ModuleA, ModuleA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Modularity:ModuleInfo Ref=&quot;ModuleB.xap&quot; ModuleName=&quot;ModuleB&quot; InitializationMode=&quot;OnDemand&quot;</span><br><span class="line">        ModuleType=&quot;ModuleB.ModuleB, ModuleB, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Modularity:ModuleInfo Ref=&quot;ModuleC.xap&quot; ModuleName=&quot;ModuleC&quot; InitializationMode=&quot;OnDemand&quot;</span><br><span class="line">        ModuleType=&quot;ModuleC.ModuleC, ModuleC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;&gt;</span><br><span class="line">        &lt;Modularity:ModuleInfo.DependsOn&gt;</span><br><span class="line">            &lt;sys:String&gt;ModuleB&lt;/sys:String&gt;</span><br><span class="line">        &lt;/Modularity:ModuleInfo.DependsOn&gt;</span><br><span class="line">    &lt;/Modularity:ModuleInfo&gt;</span><br><span class="line">&lt;/Modularity:ModuleCatalog&gt;</span><br></pre></td></tr></table></figure>



<p>这里大体和用代码写一致，只不过Ref属性里要写明该Module对应的是哪个xap包。Prism在Silverlight程序中使用一个叫做XapModuleTypeLoader的类来加载Module，在将Module下载之后会获取AppManifest.xaml文件，也就是说如果你的Module是个类库工程的话，会在加载时产生错误。可以将几个类库的程序集文件包装在一个xap文件中作为一个Module来使用，或者自定义一个ModuleTypeLoader。</p>
<p>定义完Module的配置文件后，要改写Bootstrapper。首先删除用代码配置Module的方法ConfigureModuleCatalog，然后在CreateModuleCatalog方法中替换成一下内容：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IModuleCatalog <span class="title">CreateModuleCatalog</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(</span><br><span class="line">        <span class="keyword">new</span> Uri(<span class="string">&quot;/PrismModule;component/ModuleCatalog.xaml&quot;</span>, UriKind.Relative));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>再次运行程序，正常运行。</p>
<img src="/2015/07/25/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BModule/201101201401527010.png" class="" title="image image">

<p>这样就达到了按需加载的目的。节约带宽是一个好处，如果产品是分模块往外卖的时候，可以由客户按需定制。</p>
<p>不过再打开ModuleB和ModuleC的xap文件看一下，发现里面不仅有Module本身的程序集，还包括了引用的Prism的程序集等。而这些程序集其实已经在PrismModule.xap中包含了。完全没有必要重复下载。所以可以将多余的程序集的引用的Copy Local属性设置为false，这样就瘦身成功了。(想要避免重复加载相同的文件，也可以通过在项目的Properties面板中勾选Reduce XAP size by using application library caching选项)</p>
<p>如果你对Module的加载到执行的整个过程感兴趣，那么Prism本身提供了一个QuickStart，既有Unity版本也有Mef版本，不要错过。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism之Region(1)</title>
    <url>/2015/08/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BRegion(1)/</url>
    <content><![CDATA[<p>Prism可以帮助我们开发模块化程序，将程序分割成一个个独立的<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/20/1940161.html">Module</a>，分别进行开发。然后在程序运行的时候，将各个Module组合到一起，为程序提供各种各样的功能。通常来说，Module是一些视图和功能的集合，那么就需要一种办法来将这些视图以某种形式，在特定的时间展现出来。Prism通过Shell + Region来组织视图的布局，完成视图间的转换等。</p>
<p><img src="/Prism%E4%B9%8BRegion(1)/201101281728038372.png" alt="image" title="image"></p>
<p>如上图所示，Shell相当于ASP.NET中的母版页，它定义了页面的布局、主题等。其中的导航区和内容区是预留出来的需要进行填充内容的部分，也就是Region，起到占位符的作用，程序会在运行时动态地向Region中填充内容。</p>
<p>那么如何将一个区域定义为Region呢？</p>
<p>首先在引入Prism的命名空间</p>
<p><code>xmlns:prism=&quot;http://www.codeplex.com/prism&quot;</code>   如果IDE无法找到这个命名空间的话，需要先<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/13/1934564.html">注册Prism</a>。</p>
<p>然后在需要定义为Region的控件上加上Attached Property。</p>
<p><code>&lt;ContentControl prism:RegionManager.RegionName=&quot;MainRegion&quot; /&gt;</code></p>
<p>并不是所有的控件都可以作为Region的，需要为需要定义为Region的控件添加RegionAdapter。RegionAdapter的作用是为特定的控件创建相应的Region，并将控件与Region进行绑定，然后为Region添加一些行为。一个RegionAdapter需要实现IRegionAdapter接口，如果你需要自定义一个RegionAdapter，可以通过继承RegionAdapterBase类来省去一些工作。Prism为Silverlight提供了几个RegionAdapter：</p>
<ul>
<li><code>ContentControlRegionAdapter</code>： 创建一个SingleActiveRegion并将其与ContentControl绑定</li>
<li><code>ItemsControlRegionAdapter</code>： 创建一个AllActiveRegion并将其与ItemsControl绑定</li>
<li><code>SelectorRegionAdapter</code>： 创建一个Region并将其与Selector绑定</li>
<li><code>TabControlRegionAdapter</code>： 创建一个Region并将其与TabControl绑定</li>
</ul>
<p>从图中可以看到，导航区对应的NavigationRegion中四个视图都是亮着的，而内容区对应的ContentRegion中四个视图只有一个是亮着的(橘黄色代表显示在页面中)。ItemsControl本来就是由许多个Item组成的，因此ItemsControlRegionAdapter会创建AllActiveRegion，这种类型的Region中所有Active的视图都会显示在ItemsControl中；而ContentControl只能容纳一个Content，所以ContentControlRegionAdapter创建了一个SingleActiveRegion，其中的视图只有一个是处于Active状态的，会显示在ContentControl中，其它的都是不可见的，需要将它们激活(Active)，才能使其显示。</p>
<p>通常我们并不直接和Region打交道，而是通过RegionManager，它实现了IRegionManager接口。IRegionManager接口包含一个只读属性Regions，是Region的集合，还有一个CreateRegionManager方法。Prism通过RegionManagerExtensions类使用扩展方法为IRegionManager添加了更多的功能。</p>
<ul>
<li>AddToRegion： 将一个视图添加到一个Region中。</li>
<li>RegisterViewWithRegion： 将一个视图和一个Region进行关联。当Region显示的时候，关联的视图才会显示，也就是说，在这个Region显示之前，关联的视图是不会被创建的。</li>
<li>RequestNavigate： 进行页面切换，将指定的Region中显示的视图切换为指定的视图。</li>
</ul>
<p>本文开头说过，需要在运行时将分散在各个Module的视图显示在页面特定的位置上。那么首先就需要定义页面显示的地方，即Region。然后就是要定义创建视图的时机和方式。在Prism中有两种方式来定义视图与Region之间的映射关系——View Discovery和View Injection。</p>
<p>View Discovery是以声明式的方式来建立Region和视图之间的关系。如上图中的导航区，需要在导航区显示的时候就将各个导航视图填充到其中。而内容区中也需要一个默认显示的内容视图。因此也可以这样理解View Discovery，就是指定一个Region的默认视图。我们可以使用IRegionManager.RegisterViewWithRegion方法来声明某个Region默认应该显示哪个视图。注意这里是Register，是注册，也就是说不会马上创建该视图。当Region显示在页面中的时候，它会去寻找与自己相关联的视图，并对其进行初始化。</p>
<p><img src="/Prism%E4%B9%8BRegion(1)/201101301728424507.png" alt="1-30-2011 5-03-27 PM" title="1-30-2011 5-03-27 PM"></p>
<p><img src="/Prism%E4%B9%8BRegion(1)/201101301728498789.png" alt="1-30-2011 5-04-22 PM" title="1-30-2011 5-04-22 PM"></p>
<p>这样做的好处是我们不必关注在什么时候创建视图，一切都会自动完成。缺点就是默认视图是确定的，当需要进行视图转换的时候，这种方式就行不通了。这时候就需要View Injection。</p>
<p>View Injection可以让我们对于Region中显示的视图有更精确的控制。通常可以通过调用IRegionManager.AddToRegion方法或者是IRegionManager.Regions[“RegionName”].Add方法来向一个Region中添加一个视图的<strong>实例</strong>。对于SingleActiveRegion(ContentControlRegionAdapter会创建这种类型的Region)，可以通过IRegion.Activate方法将一个已经添加到Region中的视图显示出来。当然也可以通过IRegion.Deactivate方法来将视图状态置为非激活或者干脆调用IRegion.Remove方法将视图移除。可以看到，因为要添加的是视图的实例，所以需要仔细地设计在什么时候使用View Injection，以免造成不必要的开销。</p>
<p>在Prism 4.0中新添加了一些导航API，这套API大大地简化了View Injection的流程，它使用URI来进行Region中视图的导航，然后会根据URI来创建视图，并将其添加到Region中，然后激活该视图。导航API的出现不只是为了简化View Injection的过程，它还提供了前进、后退的功能，并且对MVVM模式下的导航有良好的支持，还能够在进行导航的时候传递参数等等。所以推荐的方式是使用新的导航API，也就是使用IRegionManager.RequestNavigate方法。</p>
<p>如果一个页面相对来说不大变化，如导航区，在程序初始化的过程完成后就不会轻易地变动，这时候就较适合于使用RegisterViewWithRegion方法，通常可以在Module的Initialize方法中完成这个过程。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    logger.Log(<span class="string">&quot;初始化Navigation模块&quot;</span>, Category.Debug, Priority.Low);</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.NavRegion, <span class="keyword">typeof</span>(NavigationItem));</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.MainRegion, <span class="comment">// 两种方式都可以</span></span><br><span class="line">                                            () =&gt; _container.Resolve&lt;NavigationContainer&gt;() );</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.NavDemoActionRegion, <span class="keyword">typeof</span>(ActionController));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果一个区域需要频繁地切换页面的话，如主内容区，可以使用View Injection的方式。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">IRegionManager regionManager = ...;</span><br><span class="line">IRegion mainRegion = regionManager.Regions[<span class="string">&quot;MainRegion&quot;</span>];</span><br><span class="line">InboxView view = <span class="keyword">this</span>.container.Resolve&lt;InboxView&gt;();</span><br><span class="line">mainRegion.Add(view);</span><br></pre></td></tr></table></figure>



<p>可以看到，这时候已经生成了视图的实例。之前提到过，一个Region可以包含多个视图，这些视图会处于不同的状态，对于ItemsControl类型的Region来说，里面会显示很多个Item，所以添加进去就可以了；但是对于ContentControl这种Region，同一时刻只能显示一个视图，所以在添加进去之后还需要有一个Activate的过程。</p>
<p>使用URI来进行导航只需要提供需要切换的视图的名称就可以，并不需要了解视图的类型，从而达到解耦的目的，并且可以通过URI来进行参数传递。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">//  因为Prism无法确定每个视图都是什么类型，所以就使用了Object，</span></span><br><span class="line">    <span class="comment">//  因此在根据ViewName获取实例时，会使用IServiceLocator.GetInstance&lt;Object&gt;(ViewName)</span></span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewA&gt;(ViewNames.ViewA);</span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewB&gt;(ViewNames.ViewB);</span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewC&gt;(ViewNames.ViewC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>首先注册一下视图的类型，其实就是将视图的名称与视图类型进行一下关联。在导航的时候调用RequestNavigate方法就可以了。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ToSpecifiedView</span>(<span class="params"><span class="built_in">string</span> viewName</span>)</span></span><br><span class="line">&#123;          </span><br><span class="line">    Uri uri = <span class="keyword">new</span> Uri(viewName, UriKind.Relative);</span><br><span class="line">    _regionManager.RequestNavigate(RegionNames.NavDemoShowRegion, uri);</span><br><span class="line">    logger.Log(<span class="string">&quot;跳转到视图 [&quot;</span> + viewName + <span class="string">&quot;]&quot;</span>, Category.Info, Priority.Low);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Prism提供了UriQuery类来帮助我们在导航的时候传递参数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ToSpecifiedView</span>(<span class="params"><span class="built_in">string</span> viewName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    UriQuery query = <span class="keyword">new</span> UriQuery();</span><br><span class="line">    <span class="keyword">if</span> (viewName == ViewNames.ViewA)</span><br><span class="line">    &#123;</span><br><span class="line">        query.Add(<span class="string">&quot;Time&quot;</span>, DateTime.Now.ToShortTimeString());</span><br><span class="line">    &#125;</span><br><span class="line">    Uri uri = <span class="keyword">new</span> Uri(viewName + query.ToString(), UriKind.Relative);</span><br><span class="line">    _regionManager.RequestNavigate(RegionNames.NavDemoShowRegion, uri, CallbackHandler);   <span class="comment">//  回调方法可加可不加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面的代码判断当跳转到ViewA时，传递一个叫做Time的参数。那么怎样在视图中获取传递的参数呢？这里就要提一下INavigationAware接口了。这个接口使视图或者其对应的ViewModel也可以参与到页面导航的过程中来。所以这个接口既可以由视图来实现，也可以由视图的DataContext——通常指的就是ViewModel，来实现。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">INavigationAware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">IsNavigationTarget</span>(<span class="params">NavigationContext navigationContext</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnNavigatedTo</span>(<span class="params">NavigationContext navigationContext</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnNavigatedFrom</span>(<span class="params">NavigationContext navigationContext</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当从本页面转到其它页面的时候，会调用OnNavigatedFrom方法，navigationContext会包含目标页面的URI。</p>
<p>当从其它页面导航至本页面的时候，首先会调用IsNavigationTarget，IsNavigationTarget返回一个bool值，简单地说这个方法的作用就是告诉Prism，是重复使用这个视图的实例还是再创建一个。然后调用OnNavigatedTo方法。在导航到本页面的时候，就可以从navigationContext中取出传递过来的参数。</p>
<p><img src="/Prism%E4%B9%8BRegion(1)/201101311116493180.png" alt="image" title="image"></p>
<p>使用导航API的另一个优点就是可以进行页面的前进和后退，一切由Prism完成。这个功能是由IRegionNavigationJournal接口提供的。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRegionNavigationJournal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> CanGoBack &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="built_in">bool</span> CanGoForward &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    IRegionNavigationJournalEntry CurrentEntry &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    INavigateAsync NavigationTarget &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GoBack</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GoForward</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RecordNavigation</span>(<span class="params">IRegionNavigationJournalEntry entry</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>其中CanGoBack和CanGoForward属性表示当前是否可以后退或前进。如果可以的话，可以使用GoBack和GoForward方法进行前进和后退。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActionControllerViewModel</span> : <span class="title">NotificationObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IRegion _demoShowRegion;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CanGoBack</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _demoShowRegion.NavigationService.Journal.CanGoBack;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CanGoForward</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _demoShowRegion.NavigationService.Journal.CanGoForward;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ToPrevious</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _demoShowRegion.NavigationService.Journal.GoBack();</span><br><span class="line">        ResetNavigationButtonState();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ToNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _demoShowRegion.NavigationService.Journal.GoForward();</span><br><span class="line">        ResetNavigationButtonState();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ResetNavigationButtonState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RaisePropertyChanged(() =&gt; <span class="keyword">this</span>.CanGoBack);</span><br><span class="line">        RaisePropertyChanged(() =&gt; <span class="keyword">this</span>.CanGoForward);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/Prism%E4%B9%8BRegion(1)/201101311119072583.png" alt="image" title="image"></p>
<p>导航API还可以控制视图的生命周期，在页面跳转时进行确认拦截(Confirming or Cancelling Navigation)以及其它功能，可以参考 <a href="http://msdn.microsoft.com/en-us/library/gg430865(v=PandP.40).aspx">Developer’s Guide to Microsoft Prism</a>。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism之Region(2)</title>
    <url>/2015/08/08/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8BRegion(2)/</url>
    <content><![CDATA[<p>在<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/31/1947163.html">Prism之Region(1)</a>中，介绍了一些Prism中页面组织以及切换的方式。这一篇将以一个很简单的示例程序来实践一下。</p>
<p>下面是效果图：</p>
<p><img src="/Prism%E4%B9%8BRegion(2)/201102101320047122.png" alt="image" title="image"></p>
<p>先说Log，Prism内置了<code>ILogFacade</code>接口，在Prism提供的QuickStart项目里的Modularity中，有一个<code>CallbackLogger</code>，这里我们直接拿过来使用。然后在<code>PrismRegionShell</code>中放一个<code>TextBox</code>，将log的内容显示在这个<code>TextBox</code>中。值得一提的是，为了让输出新log的直接显示出来，需要将TextBox的滚动条滚动到最下面。这里采用的是如下方法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> message, Category category, Priority priority</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.LogContainer.Text += <span class="built_in">string</span>.Format(CultureInfo.CurrentUICulture, <span class="string">&quot;[&#123;0&#125;][&#123;1&#125;] &#123;2&#125;\r\n&quot;</span>, category, priority, message);</span><br><span class="line">    <span class="comment">//  这段代码的作用是让文本框的滚动条滚动到最底部</span></span><br><span class="line">    LogContainer.Select(LogContainer.Text.Length, LogContainer.Text.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后说一下左边的导航区。这里放置了一个ItemsControl，并将其设为Region。里面的两个按钮并不是直接写死到xaml里的，而是在两个Module初始化时动态添加进来的。也就是说，这个ItemsControl并不知道自己将要包含哪些项。这里我们使用IRegionManager.RegisterViewWithRegion(RegionNames.NavRegion, typeof(EmptyNavigationItem));这种方式来将视图注册到Region中。这样当该Region显示的时候两个视图才会被初始化。这里需要注意的是，一个Region里需要同时显示多个视图时，视图的顺序问题。比如ItemsControl，哪个先被注册就哪个显示在上面，但是由于Module的加载速度等原因，所以这时两个视图不一定谁在上面。现在我需要指定[导航示例]这个按钮在上，那么Prism为我们提供了ViewSortHintAttribute来解决这个问题。在需要进行排序的视图上添加上相应的attribute就可以了。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ViewSortHint(<span class="string">&quot;01&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">NavigationItem</span> : <span class="title">UserControl</span></span><br><span class="line"> </span><br><span class="line">[<span class="title">ViewSortHint</span>(&quot;02&quot;)]</span><br><span class="line"><span class="title">public</span> <span class="title">partial</span> <span class="keyword">class</span> <span class="title">EmptyNavigationItem</span> : <span class="title">UserControl</span></span><br></pre></td></tr></table></figure>



<p>在初始化导航实例的Module时，将导航示例的视图注册到内容区的Region，这时[上一个]按钮依然处于灰色状态，因为通过RegisterViewWithRegion方法显示的页面是不被记录的。当点击[ViewA][ViewB][ViewC]这三个按钮时，会采用RequestNavigate方法来进行页面的跳转，这时页面跳转的过程会被记录下来，此时就可以通过[上一个]和[下一个]按钮进行页面的前进和后退。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ToSpecifiedView</span>(<span class="params"><span class="built_in">string</span> viewName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    UriQuery query = <span class="keyword">new</span> UriQuery();</span><br><span class="line">    <span class="keyword">if</span> (viewName == ViewNames.ViewA)</span><br><span class="line">    &#123;</span><br><span class="line">        query.Add(<span class="string">&quot;Time&quot;</span>, DateTime.Now.ToShortTimeString());</span><br><span class="line">    &#125;</span><br><span class="line">    Uri uri = <span class="keyword">new</span> Uri(viewName + query.ToString(), UriKind.Relative);</span><br><span class="line">    _regionManager.RequestNavigate(RegionNames.NavDemoShowRegion, uri);</span><br><span class="line">    logger.Log(<span class="string">&quot;跳转到视图 [&quot;</span> + viewName + <span class="string">&quot;]&quot;</span>, Category.Info, Priority.Low);</span><br><span class="line">    ResetNavigationButtonState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意这三个视图已经在初始化Module的时候使用IUnityContainer.RegisterType&lt;object, ViewA&gt;(ViewNames.ViewA)方法注册过了。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    logger.Log(<span class="string">&quot;初始化Navigation模块&quot;</span>, Category.Debug, Priority.Low);</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.NavRegion, <span class="keyword">typeof</span>(NavigationItem));</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.MainRegion, </span><br><span class="line">                                            () =&gt; _container.Resolve&lt;NavigationContainer&gt;() );</span><br><span class="line">    _regionManager.RegisterViewWithRegion(RegionNames.NavDemoActionRegion, <span class="keyword">typeof</span>(ActionController));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//  注意注册的类型的必须是object，因为Prism无法确定视图的类型，所以就用了object</span></span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewA&gt;(ViewNames.ViewA);</span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewB&gt;(ViewNames.ViewB);</span><br><span class="line">    _container.RegisterType&lt;<span class="built_in">object</span>, ViewC&gt;(ViewNames.ViewC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>ViewA和ViewB都实现了INavigationAware接口，不同之处在于ViewA是在其对应的ViewModel ViewAViewModel类中实现的，而ViewB则直接在Code Behind中实现的。Prism对MVVM提供了良好的支持，因此既可以选择在视图中实现该接口也可以在对应的ViewModel中实现。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsNavigationTarget</span>(<span class="params">NavigationContext navigationContext</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在ViewB中，IsNavigationTarget方法返回了false，而ViewA中则返回了true。可以通过点击三个按钮进行页面跳转，观察log可以发现，ViewA只创建了一次，而ViewB则每次都要重新创建。还有就是在跳转到ViewA的时候传递了参数，可以在OnNavigatedTo方法中取出参数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnNavigatedTo</span>(<span class="params">NavigationContext navigationContext</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    UriQuery query = navigationContext.Parameters;</span><br><span class="line">    <span class="built_in">string</span> time = query[<span class="string">&quot;Time&quot;</span>];</span><br><span class="line">    logger.Log(<span class="built_in">string</span>.Format(<span class="string">&quot;ViewA: 现在时间 &#123;0&#125;&quot;</span>, time), Category.Info, Priority.Medium);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism之使用EventAggregation进行模块间通信</title>
    <url>/2015/08/15/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8B%E4%BD%BF%E7%94%A8EventAggregation%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>在开发Silverlight程序的时候，经常需要在不同的组件间进行通信。比如点击一个button，可能就需要改变另一个控件的内容。比较直接的办法是使用事件，当然使用MVVM的时候也可以使用command，还可以定义一些全局的变量来保存一些信息等。</p>
<p>Prism提供了几种用于组件间通信的途径，可以使用RegionContext使不同的视图共享数据，也可以借助于容器的力量来使用共享的service来进行通信，或者使用command等。除此之外，Prism还提供了一种基于事件的多播发布&#x2F;订阅方式的通信机制，使不同的组件之间能够以一种松散耦合的方式来进行通信。这就是本文要介绍的事件聚合(Event Aggregation)。</p>
<p>事件聚合的过程有点像收听广播，首先要有个固定的频率，然后内容就会在这个频率上广播出去，至于有没有人收听，广播电台是不知道的，它只是把内容播送了出去。而其他的人想听广播也不用跑到广播电台，只要知道频率，收听这个频率就可以了。联系广播电台和听众的就是这个频率。</p>
<p>在事件聚合的过程中，事件发布方(publisher)相当于广播电台，事件接收方(Subscriber)相当于听众，而事件自然就相当于频率了。</p>
<p>使用Event Aggregation很简单，只需要知道一个接口和一个类基本上就足够了。接口是IEventAggregator，类是CompositePresentationEvent。</p>
<p>要想发布或订阅事件，自然得先要有事件，所以第一件工作就是要定义事件。Prism提供了一个事件基类CompositePresentationEvent<TPayload>，自定义的事件只需要继承这个类就可以了，泛型代表的是事件发生过程中需要传递的参数类型。如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReceiveNewEmailEvent</span> : <span class="title">CompositePresentationEvent</span>&lt;<span class="title">MailViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面定义了一个事件，用于在收到新邮件时使用，传递的参数是一个邮件的ViewModel。</p>
<p>使用的时候也很简单，使用IEventAggregator接口中的GetEvent<TEventType>方法来获取事件，然后要么发布出去，要么订阅一下就可以了。</p>
<p>下面是当收到一封新的邮件的时候，发布事件的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailReceiver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IEventAggregator _eventAggregator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailReceiver</span>(<span class="params">IEventAggregator eventAggregator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _eventAggregator = eventAggregator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveEmail</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_email != <span class="literal">null</span>)</span><br><span class="line">        &#123;   <span class="comment">//  当接收到新邮件时，就发布事件，所有订阅了该事件的组件都会接到通知</span></span><br><span class="line">            _eventAggregator.GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">                .Publish(_email);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可以看到我们直接在构造函数中传递了IEventAggregator类型的参数，如果使用Prism来搭建Silverlight程序的话，那么在默认的Bootstrapper中会在容器中添加IEventAggregator的实例，所以并不需要我们做其它更多的工作。如果对Prism或Bootstrapper不太了解的话，可以参考这两篇文章(<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/13/1934564.html">Prism简介</a>，<a href="http://www.cnblogs.com/li-xiao/archive/2011/01/18/1935713.html">Bootstrapper</a>)。</p>
<p>下面是订阅ReceiveNewEmail事件的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailBox</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailBox</span>(<span class="params">IEventAggregator eventAggregator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        eventAggregator.GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">            .Subscribe(OnReceivedNewEmail);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//  该方法必须为public</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnReceivedNewEmail</span>(<span class="params">MailViewModel mail</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样，发布出去的事件马上就可以被接收到，而且两个组件只是依赖于事件，彼此之间是松散耦合的。</p>
<p>事件可以订阅，也可以退订，甚至可以有选择地接受某些特定的事件。下面以一个模拟的简单的邮箱客户端来演示一下Event Agregation的使用场景。</p>
<img src="/2015/08/15/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E4%B9%8B%E4%BD%BF%E7%94%A8EventAggregation%E8%BF%9B%E8%A1%8C%E6%A8%A1%E5%9D%97%E9%97%B4%E9%80%9A%E4%BF%A1/201104202212192660.png" class="" title="image image">

<p>如图所示,左边是邮件列表，会有一个定时器每隔两秒钟接收到一封邮件，这时邮箱客户端会更新邮件列表，点击左边的列表，会在右边显示邮件的内容。如果点击’将该发信人加入黑名单’，则不会再接受来自该发件人的邮件，如果点击断开连接，则停止接受邮件，再次点击会继续接收邮件。需求大致就是这样了。</p>
<p>首先在启动程序的时候开启一个定时器，每隔两秒钟会接收一封邮件，并发布事件通知有新邮件：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailReceiver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="keyword">new</span> DispatcherTimer();</span><br><span class="line">        timer.Tick += (s, e) =&gt; EventAggregatorRepository.EventAggregator</span><br><span class="line">                                    .GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">                                    .Publish(EmailRepository.GetMail());</span><br><span class="line">        timer.Interval = <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        timer.Start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>MailList组件会订阅这个事件，并对邮件列表进行更新：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MailList</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ObservableCollection&lt;MailViewModel&gt; _mails = </span><br><span class="line">        <span class="keyword">new</span> ObservableCollection&lt;MailViewModel&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//  黑名单列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">string</span>&gt; _refusedSenders = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">         </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"> </span><br><span class="line">        MailItems.ItemsSource = _mails;</span><br><span class="line"> </span><br><span class="line">        SubscribeReceiveEmailEvent();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SubscribeReceiveEmailEvent</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  订阅事件的Subscribe方法提供了几个重载方法，除了最简单的直接订阅之外,</span></span><br><span class="line">        <span class="comment">//  还可以指定线程类型(比如如果直接使用System.Threading.Timer的话，</span></span><br><span class="line">        <span class="comment">//  就必须使用ThreadOption.UIThread，否则会报错)，以及是否持有订阅者的引用,</span></span><br><span class="line">        <span class="comment">//  或者指定一个filter来对事件进行过滤</span></span><br><span class="line">        <span class="comment">//  本例中使用的filter是拒绝接受黑名单中包含的发件人发过来的邮件</span></span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">            .Subscribe(OnReceiveNewEmail, ThreadOption.UIThread,</span><br><span class="line">            <span class="literal">true</span>, (mail) =&gt; !_refusedSenders.Contains(mail.From));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnReceiveNewEmail</span>(<span class="params">MailViewModel mail</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _mails.Insert(<span class="number">0</span>, mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当点击左边的邮件列表的时候，会在右边的MailContent组件中显示该邮件的信息，这个过程也是通过Event Aggregation来完成的。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  NotificationObject是Prism提供的对MVVM的支持的ViewModel的基类</span></span><br><span class="line"><span class="comment">//  可以简化INotifyPropertyChanged接口的实现方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailViewModel</span> : <span class="title">NotificationObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailViewModel</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  DelegateCommand也是Prism提供的一种Command类型</span></span><br><span class="line">        ViewMailCommand = <span class="keyword">new</span> DelegateCommand(OnViewMail);</span><br><span class="line">    &#125;</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">public</span> ICommand ViewMailCommand &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnViewMail</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.HasRead = <span class="literal">true</span>;</span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ViewEmailEvent&gt;()</span><br><span class="line">            .Publish(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当点击时，会进入相应的Command逻辑，而MailContent则订阅了ViewEmailEvent，并将传递过来的MailViewModel显示出来：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MailContent</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailContent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"> </span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ViewEmailEvent&gt;()</span><br><span class="line">            .Subscribe(OnViewEmail);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnViewEmail</span>(<span class="params">MailViewModel mail</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.DataContext = mail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当点击将该发信人加入黑名单按钮时,会发布AddRefuseSenderEvent，而接收到这一事件的MailList组件则会更新黑名单，这样filter就会过滤掉黑名单中已经存在的发件人的邮件：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRefusedSendersAdded</span>(<span class="params"><span class="built_in">string</span> sender</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_refusedSenders.Contains(sender))</span><br><span class="line">    &#123;</span><br><span class="line">        _refusedSenders.Add(sender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果点击了断开连接或重新连接的话，会发布一个ConnectOrDisconnectMailServerEvent事件。Prism的事件基类并不支持不带参数的事件，也就是说没有办法创建一个不需要传参的事件。所以这里我们使用了object类型作为参数类型，在传递参数的时候直接传了个null过去。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">EventAggregatorRepository.EventAggregator</span><br><span class="line">    .GetEvent&lt;ConnectOrDisconnectMailServerEvent&gt;()</span><br><span class="line">    .Publish(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>



<p>而当MailList接收到该事件的时候，首先判断一下是否已经订阅了ReceiveNewEmailEvent事件，如果订阅了就退订，如果没有订阅就重新订阅。这样来达到开启或关闭接收邮件的目的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MailList</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ObservableCollection&lt;MailViewModel&gt; _mails = </span><br><span class="line">        <span class="keyword">new</span> ObservableCollection&lt;MailViewModel&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">string</span>&gt; _refusedSenders = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">         </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"> </span><br><span class="line">        SubscribeReceiveEmailEvent();</span><br><span class="line"> </span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ConnectOrDisconnectMailServerEvent&gt;()</span><br><span class="line">            .Subscribe(OnConnectOrDisconnectMailServer);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnConnectOrDisconnectMailServer</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  判断是否已经订阅了该事件</span></span><br><span class="line">        <span class="built_in">bool</span> hasSubscribed = EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">            .Contains(OnReceiveNewEmail);</span><br><span class="line">        <span class="keyword">if</span> (hasSubscribed)</span><br><span class="line">        &#123;</span><br><span class="line">            UnsubscribeReceiveEmailEvent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SubscribeReceiveEmailEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SubscribeReceiveEmailEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">            .Subscribe(OnReceiveNewEmail, ThreadOption.UIThread,</span><br><span class="line">            <span class="literal">true</span>, (mail) =&gt; !_refusedSenders.Contains(mail.From));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UnsubscribeReceiveEmailEvent</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  退订事件</span></span><br><span class="line">        EventAggregatorRepository.EventAggregator</span><br><span class="line">            .GetEvent&lt;ReceiveNewEmailEvent&gt;()</span><br><span class="line">            .Unsubscribe(OnReceiveNewEmail);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnReceiveNewEmail</span>(<span class="params">MailViewModel mail</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _mails.Insert(<span class="number">0</span>, mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>由于EventAggregation并不需要建立在Prism装配的程序上，为了操作简便，所以并没有使用Prism来管理这个程序，当然也就没有使用容器。所以我用了一个static的全局变量来保存了一个IEventAggregator的实例。</p>
<p>本文为了演示，所以大量地使用了Event Aggregation，希望大家在工作中要仔细斟酌使用，虽然用起来很灵活，但是如果事件太多的话，也会让人有无从下手的感觉，增加维护的难度。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>Prism简介</title>
    <url>/2015/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><a href="http://compositewpf.codeplex.com/">Prism</a>是由微软Patterns &amp; Practices团队开发的项目，目的在于帮助开发人员构建松散耦合的、更灵活、更易于维护并且更易于测试的WPF应用或是Silverlight应用以及Windows Phone 7应用。使用Prism可以使程序开发更趋于模块化，整个项目将由多个离散的、松耦合的模块组成，而各个模块又可以又不同的开发者或团队进行开发、测试和部署。目前Prism的最新版本是Prism 4，于2010年11月12日发布。Prism有很完整的文档以及丰富的示例程序。在这里我们仅针对于Silverlight程序的开发。</p>
<p>在下载Prism安装包并安装完成后，会在目标文件夹中发现很多文件。</p>
<img src="/2015/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E7%AE%80%E4%BB%8B/IMG-20250804110742685.png" class="">

<p>推荐首先运行RegisterPrismBinaries.bat文件，这样在开发基于Prism的程序时可以更方便地添加引用程序集。</p>
<img src="/2015/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E7%AE%80%E4%BB%8B/IMG-20250804110743031.png" class="">

<p>使用Prism之前，需要了解一些概念，下面通过一个非常简单的小程序来了解一下Prism。</p>
<p>1.打开Visual Studio 2010，新建一个Silverlight Application项目，并添加对Prism的引用。再创建三个Silverlight类库工程。</p>
<img src="/2015/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E7%AE%80%E4%BB%8B/IMG-20250804110743448.png" class="">

<p>2.在Contract工程下新建一个接口，叫做ITextProvider。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITextProvider</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">GetText</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.在其它的三个项目中都引用Contract项目。</p>
<p>4.在PrismStarter工程下新建一个TextProvider类并实现ITextProvider接口。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextProvider</span> : <span class="title">ITextProvider</span></span><br><span class="line">&#123;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetText</span>()</span></span><br><span class="line"> 	&#123;</span><br><span class="line"> 	 	i++;</span><br><span class="line">  	 	<span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;From TextProvider [&#123;0&#125;]&quot;</span>, i);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.删除PrismStarter项目中自动生成的MainPage.xaml，创建一个新的UserControl，叫做Shell。页面代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserControl x:Class=&quot;PrismStarter.Shell&quot;</span><br><span class="line">    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">    xmlns:prism=&quot;http://www.codeplex.com/prism&quot;</span><br><span class="line">    mc:Ignorable=&quot;d&quot;</span><br><span class="line">    d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;400&quot;&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;Grid x:Name=&quot;LayoutRoot&quot; Background=&quot;White&quot;&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;100&quot; /&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;100&quot; /&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;100&quot; /&gt;</span><br><span class="line">        &lt;/Grid.RowDefinitions&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;TextBlock FontSize=&quot;30&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; Text=&quot;Prism Starter&quot; /&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;ContentControl Grid.Row=&quot;1&quot; HorizontalContentAlignment=&quot;Stretch&quot; prism:RegionManager.RegionName=&quot;RegionA&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;ContentControl Grid.Row=&quot;2&quot; HorizontalContentAlignment=&quot;Stretch&quot; prism:RegionManager.RegionName=&quot;RegionB&quot; /&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/UserControl&gt;</span><br></pre></td></tr></table></figure>



<p>6.在ModuleA工程中添加对Prism程序集的引用。并添加一个UserControl叫做ViewA，页面代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Grid :Name=&quot;LayoutRoot&quot; Background=&quot;White&quot;&gt;</span><br><span class="line"> &lt;TextBlock x:Name=&quot;textModuleA&quot; FontSize=&quot;30&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; /&gt; </span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>

<p>CodeBehind中的代码为：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ViewA</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ViewA</span>(<span class="params">ITextProvider textProvider</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         InitializeComponent();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.Loaded += (s, e) =&gt;</span><br><span class="line">         &#123;</span><br><span class="line">            textModuleA.Text = <span class="built_in">string</span>.Format(<span class="string">&quot;Module A &#123;0&#125;&quot;</span>, textProvider.GetText());</span><br><span class="line">         &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7.在ModuleA工程中添加一个类叫做ModuleA，并实现接口IModule。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModuleA</span> : <span class="title">IModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IRegionManager _regionManager;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModuleA</span>(<span class="params">IRegionManager regionManager</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _regionManager = regionManager;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _regionManager.RegisterViewWithRegion(<span class="string">&quot;RegionA&quot;</span>, <span class="keyword">typeof</span>(ViewA));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>注意这里的RegionA对应于Shell页面中的RegionName。</p>
<p>8.在ModuleB工程中重复6、7过程，只是将A替换为B。</p>
<p>9.在PrismStarter工程中添加对ModuleA和ModuleB的引用。</p>
<p>10.在PrismStarter工程中添加一个PrismStarterBootstrapper类，并继承UnityBootstrapper。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PrismStarterBootstrapper</span> : <span class="title">UnityBootstrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DependencyObject <span class="title">CreateShell</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Container.TryResolve&lt;Shell&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InitializeShell</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  控制页面在初始化时显示Shell页面</span></span><br><span class="line">        App.Current.RootVisual = (UIElement)<span class="keyword">this</span>.Shell;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureModuleCatalog</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  注册Module。在实际开发中可以使用xaml做配置文件，</span></span><br><span class="line">        <span class="comment">//  这样就可以将PrismStarter与ModuleA和ModuleB完全解耦，也就不再需要引用这两个项目</span></span><br><span class="line">        Type moduleAType = <span class="keyword">typeof</span>(ModuleA.ModuleA);</span><br><span class="line">        ModuleInfo moduleA = <span class="keyword">new</span> ModuleInfo</span><br><span class="line">        &#123;</span><br><span class="line">            ModuleName = moduleAType.Name,</span><br><span class="line">            ModuleType = moduleAType.AssemblyQualifiedName,</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        Type moduleBType = <span class="keyword">typeof</span>(ModuleB.ModuleB);</span><br><span class="line">        ModuleInfo moduleB = <span class="keyword">new</span> ModuleInfo</span><br><span class="line">        &#123;</span><br><span class="line">            ModuleName = moduleBType.Name,</span><br><span class="line">            ModuleType = moduleBType.AssemblyQualifiedName,</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.ModuleCatalog.AddModule(moduleA);</span><br><span class="line">        <span class="keyword">this</span>.ModuleCatalog.AddModule(moduleB);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>()</span></span><br><span class="line">    &#123;   <span class="comment">//  注册一下TextProvider，这样在通过容器请求ITextProvider时会返回TextProvider实例</span></span><br><span class="line">        <span class="keyword">base</span>.ConfigureContainer();</span><br><span class="line">        <span class="keyword">this</span>.Container.RegisterInstance&lt;ITextProvider&gt;(<span class="keyword">new</span> TextProvider());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>11.最后一步，打开App.xaml.cs，修改Application_Startup方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Application_Startup</span>(<span class="params"><span class="built_in">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    PrismStarterBootstrapper bootstrapper = <span class="keyword">new</span> PrismStarterBootstrapper();</span><br><span class="line">    bootstrapper.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行程序，结果如下：</p>
<img src="/2015/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Prism%E7%AE%80%E4%BB%8B/201101131453393827.png" class="" title="image image">

<p>下面简单介绍一下这个小例子中涉及到的一些概念。</p>
<p><strong>Bootstrapper</strong>: 在程序中使用框架需要找到一个切入点，将框架植入进去，将一部分功能委托给框架来实现。在Silverlight中使用Prism的切入点就是App.xaml.cs中的Application_Startup方法。一般来说，这个方法中只是指定页面最先加载的页面，但是我们把默认的逻辑去掉，取而代之的是Bootstrapper(在本例中就是PrismStarterBootstrapper)。当调用Bootstrapper.Run方法时，它会完成一些准备工作，如一些配置等。因此你会发现，使用Prism后，启动程序时会比正常启动要慢一些，就是因为Bootstrapper做了许多工作。</p>
<p><strong>Container</strong>: 依赖注入容器。在程序中使用依赖注入的好处到处都可以找的到。在Silverlight中使用容器来管理各个组件的一个很明显的好处就是使用单例来降低内存使用。否则每次加载一个页面都需要重新创建一个也很耗费资源的。当然好处不只这些，通过容器来注入一些服务(如本例中的IRegionManager和ITextProvider)显得相当方便。</p>
<p><strong>Module</strong>: Prism帮助我们把程序分解成一个个功能模块，这些功能模块就叫做Module，通常一个工程就是一个Module。由于Module彼此是独立的，但是在运行时需要将它们整合到一起，因此Prism需要知道Module的存在，这里就涉及到了<strong>ModuleCatalog</strong>, ModuleCatalog就是Module的容器，里面包含了所有Module的信息，以<strong>ModuleInfo</strong>的形式存在。ModuleInfo就是对Module的抽象，包含Module的名字，类型，依赖等一些信息。</p>
<p><strong>Shell</strong>: 相当于程序的入口，初始界面，还能够提供类似ASP.Net中的母版页的功能。Shell必须由Bootstrapper创建，因为Shell需要使用的一些service，比如RegionManager等，需要在Shell显示前注册。</p>
<p><strong>Region</strong>: 相当于ASP.Net中的ContentPlaceHolder(是这么叫的吧？)，起到占位符的作用，如本例中Shell中有两个Region——RegionA和RegionB，定义了两块区域。在Module的初始化过程中，通过<strong>IRegionManager</strong>将Module中的页面放进了定义好的Region中。IRegionManager负责管理Region，可以通过它向Region中注册View，进行导航等。</p>
<p>Prism的功能当然远不止这么简单，它还提供对MVVM模式的支持，对导航的支持等，在后续文章中会逐步介绍。希望能够通过本文让大家对Prism有一定的了解。</p>
<p><a href="https://files.cnblogs.com/li-xiao/PrismStarter.rar">代码下载</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Prism</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - Hello World</title>
    <url>/2018/04/14/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20Hello%20World/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
</blockquote>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍#"></a>介绍<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E4%BB%8B%E7%BB%8D">#</a></h2><p>RabbitMQ 是一个消息中间件：它接收并转发消息。您可以把它想象为一个邮局：当您把需要寄出的邮件投递到邮箱，邮差最终会把邮件送给您的收件人。在这个比喻中，RabbitMQ 就是一个邮箱，也可以理解成邮局和邮递员。</p>
<p>RabbitMQ 和邮局的主要区别在于它不处理纸张，而是接收、存储和转发二进制数据块 - _<strong>消息</strong>_。</p>
<p>RabbitMQ 和消息传递通常使用一些术语。</p>
<p><em><strong>生产</strong></em> 的意思无非就是发送。发送消息的程序就是一个 _<strong>生产者</strong>_：</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230040114-1725657053.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230040114-1725657053.png" alt="Producer"></a></p>
<p><em><strong>队列</strong></em> 就是 RabbitMQ 内部“邮箱”的名称。虽然消息流经 RabbitMQ 和您的应用程序，但它们只能存储在 <em><strong>队列</strong></em> 中。_<strong>队列</strong>_ 只受主机的内存和磁盘的限制，它本质上就是一个很大的消息缓冲区。多个 <em><strong>生产者</strong></em> 可以发送消息到一个队列，并且多个 <em><strong>消费者</strong></em> 可以尝试从一个 <em><strong>队列</strong></em> 接收数据。这就是我们代表队列的方式：</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230222640-301693279.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230222640-301693279.png" alt="Queue"></a></p>
<p><em><strong>消费</strong></em> 与接收有相似的含义，等待接收消息的程序就是一个 _<strong>消费者</strong>_：</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230333180-2050010801.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230333180-2050010801.png" alt="Consumer"></a></p>
<blockquote>
<p>注意：生产者、消费者和中间件不是必须部署在同一主机上，实际上在大多数应用程序中它们也不是这样的。</p>
</blockquote>
<h2 id="“Hello-World”"><a href="#“Hello-World”" class="headerlink" title="“Hello World”#"></a>“Hello World”<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#hello-world">#</a></h2><p><strong>使用 .NET &#x2F; C＃Client</strong></p>
<p>在教程的这一部分，我们将用 C＃ 编写两个程序：一个发送单条消息的生产者，以及接收消息并将其打印出来的消费者。我们将忽略 .NET 客户端 API 中的一些细节，专注于更简单的开始。这是一个消息传递的“Hello World”。</p>
<p>在下图中，<code>P</code>是我们的生产者，<code>C</code>是我们的消费者。中间的盒子是队列 - RabbitMQ 代表消费者保存的消息缓冲区。</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230602905-137147155.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230602905-137147155.png"></a></p>
<blockquote>
<p><strong>.NET 客户端库</strong></p>
<p>RabbitMQ 支持多种协议，本教程使用<code>AMQP 0-9-1</code>，它是一种开放的、通用的消息传递协议。RabbitMQ 提供了一些针对不同 <a href="http://www.rabbitmq.com/devtools.html">语言环境</a> 的客户端，我们将使用 RabbitMQ 提供的 .NET 客户端。</p>
<p>客户端支持 <a href="https://www.microsoft.com/net/learn/get-started/windows">.NET Core</a> 以及 .NET Framework 4.5.1+。本教程将使用 .NET Core，因此您需要确保客户端已 <a href="https://www.microsoft.com/net/learn/get-started/windows">安装</a> 并且路径添加到<code>PATH</code>系统变量。</p>
<p>您也可以使用 .NET Framework 来完成本教程，但设置步骤会有所不同。</p>
<p>RabbitMQ .NET 客户端 5.0 及更高版本通过 <a href="https://www.nuget.org/packages/RabbitMQ.Client">nuget</a> 发布。</p>
<p>本教程假定您在 Windows 上使用 PowerShell。在 MacOS 和 Linux 上，几乎所有 shell 也都可以正常工作。</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装#"></a>安装<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E5%AE%89%E8%A3%85">#</a></h3><p>首先让我们验证您在<code>PATH</code>系统变量是否有 .NET Core 工具链：</p>
<pre><code>dotnet --help
</code></pre>
<p>应该产生帮助信息。</p>
<p>现在，让我们生成两个项目，一个用于发布者，另一个用于消费者：</p>
<pre><code>dotnet new console --name Send
mv Send/Program.cs Send/Send.cs
dotnet new console --name Receive
mv Receive/Program.cs Receive/Receive.cs
</code></pre>
<p>这将创建两个名为<code>Send</code>和<code>Receive</code>的新目录。</p>
<p>然后，我们添加客户端依赖项。</p>
<pre><code>cd Send
dotnet add package RabbitMQ.Client
dotnet restore
cd ../Receive
dotnet add package RabbitMQ.Client
dotnet restore
</code></pre>
<p>我们已经建立了 .NET 项目，现在我们可以编写一些代码。</p>
<h3 id="发送"><a href="#发送" class="headerlink" title="发送#"></a>发送<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E5%8F%91%E9%80%81">#</a></h3><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230729567-488325508.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117230729567-488325508.png"></a></p>
<p>我们将调用我们的消息发布者（发送者）<code>Send.cs</code>和我们的消息消费者（接收者）<code>Receive.cs</code>。发布者将连接到 RabbitMQ，发送一条消息，然后退出。</p>
<p>在 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Send/Send.cs">Send.cs</a> 中，我们需要使用一些命名空间：</p>
<pre><code>using System;
using RabbitMQ.Client;
using System.Text;
</code></pre>
<p>设置类：</p>
<pre><code>class Send
&#123;
    public static void Main()
    &#123;
        ...
    &#125;
&#125;
</code></pre>
<p>然后，我们可以创建一个连接，连接到服务器：</p>
<pre><code>class Send
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using (var connection = factory.CreateConnection())
        &#123;
            using (var channel = connection.CreateModel())
            &#123;
                ...
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>
<p>该连接抽象了套接字连接，并为我们处理协议版本的协商和身份验证等。在这里，我们连接的是本地机器上的代理， 因此是<code>localhost</code>。如果我们想连接到其他机器上的代理，我们只需在此指定其名称或 IP 地址。</p>
<p>接下来，我们创建一个通道，该 API 的主要功能是把获得信息保存起来。</p>
<p>想要发送消息，我们必须为需要发送的消息声明一个队列，然后我们就可以把消息发布到队列中：</p>
<pre><code>using System;
using RabbitMQ.Client;
using System.Text;

class Send
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.QueueDeclare(queue: &quot;hello&quot;,
                                 durable: false,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);

            string message = &quot;Hello World!&quot;;
            var body = Encoding.UTF8.GetBytes(message);

            channel.BasicPublish(exchange: &quot;&quot;,
                                 routingKey: &quot;hello&quot;,
                                 basicProperties: null,
                                 body: body);
            Console.WriteLine(&quot; [x] Sent &#123;0&#125;&quot;, message);
        &#125;

        Console.WriteLine(&quot; Press [enter] to exit.&quot;);
        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p>声明队列是 <a href="https://baike.baidu.com/item/%E5%B9%82%E7%AD%89/8600688?fr=aladdin">幂等</a> 的 - 只有当它不存在时才会被创建。消息内容是一个字节数组，所以您可以用喜欢的任意方式编码。</p>
<p>当上面的代码完成运行时，通道和连接将被释放。这就是我们的发布者。</p>
<p>（<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Send/Send.cs">Send.cs</a> 源码）</p>
<blockquote>
<p><strong>发送不起作用！</strong></p>
<p>如果这是您第一次使用 RabbitMQ，并且您没有看到“已发送”消息，那么您可能会挠着头想知道错误出在什么地方。也许是代理程序启动时没有足够的可用磁盘空间（默认情况下，它至少需要50 MB空闲空间），因此拒绝接收消息。<br>必要时检查代理程序日志文件来确认和减少限制。配置文件 <a href="http://www.rabbitmq.com/configure.html#config-items">文档</a> 将告诉您如何设置<code>disk_free_limit</code>。</p>
</blockquote>
<h3 id="接收"><a href="#接收" class="headerlink" title="接收#"></a>接收<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E6%8E%A5%E6%94%B6">#</a></h3><p>至于消费者，它是把消息从 RabbitMQ 拉取过来。因此，与发布消息的发布者不同，我们会保持消费者持续不断地运行，监听消息并将其打印出来。</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231003983-2037680750.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231003983-2037680750.png"></a></p>
<p>代码（在 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Receive/Receive.cs">Receive.cs</a> 中）具有与<code>Send</code>差不多一样的<code>using</code>声明：</p>
<pre><code>using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;
</code></pre>
<p>设置与发布者相同；我们开启一个连接和一个通道，并声明我们将要使用的队列。请注意，这需要与<code>Send</code>发布到的队列相匹配。</p>
<pre><code>class Receive
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using (var connection = factory.CreateConnection())
        &#123;
            using (var channel = connection.CreateModel())
            &#123;
                channel.QueueDeclare(queue: &quot;hello&quot;,
                                     durable: false,
                                     exclusive: false,
                                     autoDelete: false,
                                     arguments: null);
                ...
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>
<p>请注意，我们在这里也声明了队列。因为我们可能会在发布者之前启动消费者，所以我们希望在我们尝试从它中消费消息之前确保队列已存在。</p>
<p>我们即将告诉服务器将队列中的消息传递给我们。由于它会异步推送消息，因此我们提供了一个回调。这就是<code>EventingBasicConsumer.Received</code>事件处理程序所做的事情。</p>
<pre><code>using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;

class Receive
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.QueueDeclare(queue: &quot;hello&quot;,
                                 durable: false,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);

            var consumer = new EventingBasicConsumer(channel);
            consumer.Received += (model, ea) =&gt;
            &#123;
                var body = ea.Body;
                var message = Encoding.UTF8.GetString(body);
                Console.WriteLine(&quot; [x] Received &#123;0&#125;&quot;, message);
            &#125;;
            channel.BasicConsume(queue: &quot;hello&quot;,
                                 autoAck: true,
                                 consumer: consumer);

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        &#125;
    &#125;
&#125;
</code></pre>
<p>（<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Receive/Receive.cs">Receive.cs</a> 源码）</p>
<h3 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h3><p>打开两个终端。</p>
<p>运行消费者：</p>
<pre><code>cd Receive
dotnet run
</code></pre>
<p>运行生产者：</p>
<pre><code>cd Send
dotnet run
</code></pre>
<p>消费者将打印它通过 RabbitMQ 从发布者处获得的消息。消费者将继续运行、等待新消息（按<code>Ctrl-C</code>将其停止），可以尝试从开启另一个终端运行发布者。</p>
<p>接下来可以跳转到 <a href="http://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html/">教程[2]</a>，构建一个简单的工作队列。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html">RabbitMQ tutorial - “Hello World!”</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.3、Visual Studio Code</li>
<li>最后更新：2018-03-13</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - 主题</title>
    <url>/2018/04/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题#"></a>主题<a href="https://www.cnblogs.com/esofar/p/rabbitmq-topics.html#%E4%B8%BB%E9%A2%98">#</a></h2><p><strong>（使用 .NET 客户端）</strong></p>
<p>在 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html">教程[4]</a> 中，我们改进了我们日志系统。我们用<code>direct</code>交换器替换了只能呆滞广播消息的<code>fanout</code>交换器，从而可以有选择性的接收日志。</p>
<p>虽然使用<code>direct</code>交换器改进了我们的系统，但它仍然有局限性 - 不能基于多个标准进行路由。</p>
<p>在我们的日志系统中，我们可能不仅要根据日志的严重性订阅日志，可能还要根据日志分发源来订阅日志。或许您可能从 unix <a href="https://en.wikipedia.org/wiki/Syslog">syslog</a> 工具中了解过这种概念，syslog 工具在路由日志的时候是可以既基于严重性（info&#x2F;warn&#x2F;crit…）又基于设备（auth&#x2F;cron&#x2F;kern…）的。</p>
<p>这种机制会给我们带来极大的灵活性 - 我们可以仅监听来自<code>cron</code>的关键错误日志，与此同时，监听来自<code>kern</code>的所有日志。</p>
<p>要在我们的日志系统中实现这一特性，我们需要学习更复杂的<code>topic</code>交换器。</p>
<h2 id="Topic交换器"><a href="#Topic交换器" class="headerlink" title="Topic交换器#"></a>Topic交换器<a href="https://www.cnblogs.com/esofar/p/rabbitmq-topics.html#topic%E4%BA%A4%E6%8D%A2%E5%99%A8">#</a></h2><p>发送到<code>topic</code>交换器的消息不能随意指定<code>routing key</code>，它必须是一个由点分割的单词列表，这些单词可以是任意内容，但通常会在其中指定一些与消息相关的特性。请看一些合法的路由键示例：<code>stock.usd.nyse</code>，<code>nyse.vmw</code>，<code>quick.orange.rabbit</code>，路由键可以包含任意数量的单词，但不能超过255个字节的上限。</p>
<p><code>binding key</code>也必须是相同的形式，<code>topic</code>交换器的背后逻辑与<code>direct</code>交换器类似 - 使用指定路由键发送的消息会被分发到与其绑定键匹配的所有队列中。不过对于绑定键来说，有两个重要的特殊情况需要注意：</p>
<ul>
<li><code>*</code>（星号）可以代替一个单词。</li>
<li><code>#</code>（哈希）可以代替零个或多个单词。</li>
</ul>
<p>下图示例是对上述内容最简单的解释：</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201810/785976-20181018102059933-1881108991.png"><img src="https://img2018.cnblogs.com/blog/785976/201810/785976-20181018102059933-1881108991.png"></a></p>
<p>在这个示例中，我们打算发送的消息全是用来描述动物的，这些消息会使用由三个单词（两个点）组成的路由键来发送。在路由键中，第一个单词用来描述行动速度、第二个是颜色、第三个是物种，即：<code>&lt;speed&gt;.&lt;colour&gt;.&lt;species&gt;</code>。</p>
<p>我们创建了三个绑定：Q1绑定了键<code>.orange.</code>，Q2绑定了键<code>*.*.rabbit</code>和<code>lazy.#</code>。</p>
<p>这些绑定可以被概括为：</p>
<ul>
<li>Q1对所有橙色的动物感兴趣。</li>
<li>Q2对兔子以及所有行动缓慢的动物感兴趣。</li>
</ul>
<p>路由键为<code>quick.orange.rabbit</code>的消息会被发送到这两个队列，消息<code>lazy.orange.elephant</code>也会被发送到这两个队列。另外，<code>quick.orange.fox</code>只会进入第一个队列，<code>lazy.brown.fox</code>只会进入第二个队列。<code>lazy.pink.rabbit</code>只会被发送到第二个队列一次，尽管它匹配了两个绑定（避免了消息重复）。<code>quick.brown.fox</code>没有匹配的绑定，因此它将会被丢弃。</p>
<p>如果我们打破约定，发送使用一个或四个单词（例如：<code>orange</code>和<code>quick.orange.male.rabbit</code>）作路由键的消息会发生什么？答案是，这些消息因为没有匹配到任何绑定，将被丢弃。</p>
<p>但是，另外，例如路由键为<code>lazy.orange.male.rabbit</code>的消息，尽管它有四个单词，也会匹配最后一个绑定，并将被发送到第二个队列。</p>
<blockquote>
<p><strong>Topics 交换器</strong><br><code>topic</code>交换器的功能是很强大的，它可以表现出一些其他交换器的行为。<br>当一个队列与键<code>＃</code>（哈希）绑定时， 它会忽略路由键，接收所有消息，这就像<code>fanout</code>交换器一样。<br>当特殊字符<code>*</code>（星号）和<code>＃</code>（哈希）未在绑定中使用时，<code>topic</code>交换器的行为就像<code>direct</code>交换器一样。</p>
</blockquote>
<h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-topics.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h2><p>我们将要在我们的日志系统中使用<code>topic</code>交换器，首先假设日志的路由键有两个单词组成：<code>&lt;facility&gt;.&lt;severity&gt;</code>。</p>
<p>代码与上一篇 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html">教程</a> 中的代码几乎相同。</p>
<p><code>EmitLogTopic.cs</code>的代码：</p>
<pre><code>using System;
using System.Linq;
using RabbitMQ.Client;
using System.Text;

class EmitLogTopic
&#123;
    public static void Main(string[] args)
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;topic_logs&quot;,
                                    type: &quot;topic&quot;);

            var routingKey = (args.Length &gt; 0) ? args[0] : &quot;anonymous.info&quot;;
            
            var message = (args.Length &gt; 1)
                          ? string.Join(&quot; &quot;, args.Skip(1).ToArray())
                          : &quot;Hello World!&quot;;
            var body = Encoding.UTF8.GetBytes(message);
            
            channel.BasicPublish(exchange: &quot;topic_logs&quot;,
                                 routingKey: routingKey,
                                 basicProperties: null,
                                 body: body);
                                 
            Console.WriteLine(&quot; [x] Sent &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;, routingKey, message);
        &#125;
    &#125;
&#125;
</code></pre>
<p><code>ReceiveLogsTopic.cs</code>的代码：</p>
<pre><code>using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

class ReceiveLogsTopic
&#123;
    public static void Main(string[] args)
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;topic_logs&quot;, type: &quot;topic&quot;);
            var queueName = channel.QueueDeclare().QueueName;

            if(args.Length &lt; 1)
            &#123;
                Console.Error.WriteLine(&quot;Usage: &#123;0&#125; [binding_key...]&quot;,
                                        Environment.GetCommandLineArgs()[0]);
                Console.WriteLine(&quot; Press [enter] to exit.&quot;);
                Console.ReadLine();
                Environment.ExitCode = 1;
                return;
            &#125;

            foreach(var bindingKey in args)
            &#123;
                channel.QueueBind(queue: queueName,
                                  exchange: &quot;topic_logs&quot;,
                                  routingKey: bindingKey);
            &#125;

            Console.WriteLine(&quot; [*] Waiting for messages. To exit press CTRL+C&quot;);

            var consumer = new EventingBasicConsumer(channel);
            consumer.Received += (model, ea) =&gt;
            &#123;
                var body = ea.Body;
                var message = Encoding.UTF8.GetString(body);
                var routingKey = ea.RoutingKey;
                Console.WriteLine(&quot; [x] Received &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;,
                                  routingKey,
                                  message);
            &#125;;
            channel.BasicConsume(queue: queueName,
                                 autoAck: true,
                                 consumer: consumer);

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        &#125;
    &#125;
&#125;
</code></pre>
<p><strong>请运行以下示例：</strong></p>
<p>要接收所有日志：</p>
<pre><code>cd ReceiveLogsTopic
dotnet run &quot;#&quot;
</code></pre>
<p>要接收来自设备<code>kern</code>的所有日志：</p>
<pre><code>cd ReceiveLogsTopic
dotnet run &quot;kern.*&quot;
</code></pre>
<p>或者，如果您只想监听级别为<code>critical</code>的日志：</p>
<pre><code>cd ReceiveLogsTopic
dotnet run &quot;*.critical&quot;
</code></pre>
<p>您可以创建多个绑定：</p>
<pre><code>cd ReceiveLogsTopic
dotnet run &quot;kern.*&quot; &quot;*.critical&quot;
</code></pre>
<p>使用路由键<code>kern.critical</code>发出日志：</p>
<pre><code>cd EmitLogTopic
dotnet run &quot;kern.critical&quot; &quot;A critical kernel error&quot;
</code></pre>
<p>希望运行这些程序能让您玩得开心。要注意的是，这些代码没有针对路由键和绑定键做任何预设，您可以尝试使用两个以上的路由键参数。</p>
<p>（ <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/EmitLogTopic/EmitLogTopic.cs">EmitLogTopic.cs</a> 和 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/ReceiveLogsTopic/ReceiveLogsTopic.cs">ReceiveLogsTopic.cs</a> 的完整源码）</p>
<p>接下来，在 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html">教程[6]</a> 中将了解如何将往返消息作为远程过程调用。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-topics.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-five-dotnet.html">RabbitMQ tutorial - Topics</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.3、Visual Studio Code</li>
<li>最后更新：2018-09-06</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - 发布订阅</title>
    <url>/2018/04/21/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布&#x2F;订阅#"></a>发布&#x2F;订阅<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85">#</a></h2><p><strong>（使用 .NET Client）</strong></p>
<p>在 <a href="http://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html">教程[2]</a> 中，我们创建了一个工作队列，假设在工作队列中的每一个任务都只被分发给一个 Worker。那么在这一章节，我们要做与之完全不同的事，那就是我们将要把一条消息分发给多个消费者。这种模式被称为“发布&#x2F;订阅”。</p>
<p>为了说明、体现这种模式，我们将会建一个简单的日志系统。它将会包含两个程序 - 第一个用来发送日志消息，第二个用来接收并打印它们。</p>
<p>在我们建立的日志系统中，每个接收程序的运行副本都会收到消息。这样我们就可以运行一个接收程序接收消息并将日志写入磁盘；同时运行另外一个接收程序接收消息并将日志打印到屏幕上。</p>
<p>实质上，发布的日志消息将会被广播给所有的接收者。</p>
<h2 id="交换器"><a href="#交换器" class="headerlink" title="交换器#"></a>交换器<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E4%BA%A4%E6%8D%A2%E5%99%A8">#</a></h2><p>在教程的前几部分，我们是发送消息到队列并从队列中接收消息。现在是时候介绍 Rabbit 中完整的消息传递模型了。</p>
<p>让我们快速回顾一下前面教程中的内容：</p>
<ul>
<li>_生产者_是发送消息的用户应用程序。</li>
<li>_队列_是存储消息的缓冲区。</li>
<li>_消费者_是接收消息的用户应用程序。</li>
</ul>
<p>在 RabbitMQ 中，消息传递模型的核心理念是生产者从来不会把任何消息直接发送到队列，其实，通常生产者甚至不知道消息是否会被分发到任何队列中。</p>
<p>然而，生产者只能把消息发送给_交换器_。交换器非常简单，一方面它接收来自生产者的消息，另一方面又会把接收的消息推送到队列中。交换器必须明确知道该如何处理收到的消息，应该追加到一个特定队列中？还是应该追加到多个队列中？或者应该把它丢弃？这些规则都被定义在_交换器类型_中。</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231511453-1306601735.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231511453-1306601735.png" alt="Exchanges"></a></p>
<p>目前交换器类型有这几种：<code>direct</code>，<code>topic</code>，<code>headers</code>和<code>fanout</code>。我们先重点关注最后一个<code>fanout</code>，我们创建一个这种类型的交换器，将其命名为<code>logs</code>：</p>
<pre><code>channel.ExchangeDeclare(&quot;logs&quot;, &quot;fanout&quot;);
</code></pre>
<p><code>fanout</code>类型交换器非常简单，正如您可能从名字中猜出的那样，它会把收到的所有消息广播到它已知的所有队列中。这恰巧是我们的日志系统目前所需要的。</p>
<blockquote>
<p><strong>列举交换器</strong><br>要列举出服务器上的交换器，您可以使用非常有用的<code>rabbitmqctl</code>命令行工具：</p>
<pre><code>sudo rabbitmqctl list_exchanges
</code></pre>
<p>执行上述命令后，出现的列表中将会有一些<code>amq.*</code>交换器和默认（未命名）交换器。这些是默认创建的，不过目前您可能用不到它们。</p>
<p><strong>默认交换器</strong><br>在教程的前些部分，我们对交换器这一概念还一无所知，但仍然可以把消息发送到队列。之所以这样，是因为我们使用了一个用空字符串(<code>&quot;&quot;</code>)标识的默认交换器。</p>
<p>回顾一下我们之前如何发布消息：</p>
<pre><code>var message = GetMessage(args);
var body = Encoding.UTF8.GetBytes(message);
channel.BasicPublish(exchange: &quot;&quot;,
                     routingKey: &quot;hello&quot;,
                     basicProperties: null,
                     body: body);
</code></pre>
<p>第一个参数就是交换器的名称，空字符串表示默认或匿名交换器：将消息路由到<code>routingKey</code>指定的队列（如果存在）中。</p>
</blockquote>
<p>现在，我们可以把消息发布到我们指定的交换器：</p>
<pre><code>var message = GetMessage(args);
var body = Encoding.UTF8.GetBytes(message);
channel.BasicPublish(exchange: &quot;logs&quot;,
                     routingKey: &quot;&quot;,
                     basicProperties: null,
                     body: body);
</code></pre>
<h2 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列#"></a>临时队列<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97">#</a></h2><p>您是否还记得之前我们使用过的队列，它们都有一个特定的名称（记得应该是<code>hello</code>和<code>task_queue</code>吧）。给队列命名对我们来说是至关重要的 – 因为我们可能需要多个 Worker 指向同一个队列；当您想要在生产者和消费者之间共享队列时，给队列一个名称也是非常重要的。</p>
<p>但是，我们创建的日志系统并不希望如此。我们希望监听所有的日志消息，而不仅仅是其中一部分。我们也只对目前流动的消息感兴趣，而不是旧消息。为解决这个问题，我们需要做好两件事。</p>
<p>首先，我们无论何时连接 Rabbit，都需要一个新的、空的队列。要做到这一点，我们可以使用随机名称来创建队列，或许，甚至更好的方案是让服务器为我们选择一个随机队列名称。</p>
<p>其次，一旦我们与消费者断开连接，与之相关的队列应该被自动删除。</p>
<p>在 .NET 客户端中，如果不向<code>QueueDeclare()</code>方法提供任何参数，实际上就是创建了一个非持久化、独占、且自动删除的随机命名队列：</p>
<pre><code>var queueName = channel.QueueDeclare().QueueName;
</code></pre>
<p>您可以在 <a href="http://www.rabbitmq.com/queues.html">队列指南</a> 中了解更多关于<code>exclusive</code>参数和其他队列属性的信息。</p>
<p>此时，<code>queueName</code>包含一个随机队列名称。例如，它看起来可能像<code>amq.gen-JzTY20BRgKO-HjmUJj0wLg</code>。</p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定#"></a>绑定<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E7%BB%91%E5%AE%9A">#</a></h2><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231544150-1057172664.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231544150-1057172664.png" alt="Bindings"></a></p>
<p>我们已经创建好了一个<code>fanout</code> 交换器和一个队列。现在我们需要告诉交换器把消息发送到我们的队列。而交换器和队列之间的关系就称之为_绑定_。</p>
<pre><code>channel.QueueBind(queue: queueName,
                  exchange: &quot;logs&quot;,
                  routingKey: &quot;&quot;);
</code></pre>
<p>从现在起，<code>logs</code>交换器会把消息追加到我们的队列中。</p>
<blockquote>
<p><strong>列举绑定</strong><br>您可以使用（您或许已经猜到了），列举出现有的绑定。</p>
<pre><code>sudo rabbitmqctl list_bindings
</code></pre>
</blockquote>
<h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h2><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231615809-832422226.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231615809-832422226.png"></a></p>
<p>生产者程序负责分发消息，这与之前的教程看起来没有太大区别。</p>
<p>最重要的变化是我们现在想把消息发布到我们的<code>logs</code>交换器，而不是匿名交换器。在发送时我们需要提供一个路由键<code>routingKey</code>，但是对于<code>fanout</code>交换器，它的值可以被忽略。这里是<code>EmitLog.cs</code>文件的代码：</p>
<pre><code>using System;
using RabbitMQ.Client;
using System.Text;

class EmitLog
&#123;
    public static void Main(string[] args)
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;logs&quot;, type: &quot;fanout&quot;);

            var message = GetMessage(args);
            var body = Encoding.UTF8.GetBytes(message);
            channel.BasicPublish(exchange: &quot;logs&quot;,
                                 routingKey: &quot;&quot;,
                                 basicProperties: null,
                                 body: body);
            Console.WriteLine(&quot; [x] Sent &#123;0&#125;&quot;, message);
        &#125;

        Console.WriteLine(&quot; Press [enter] to exit.&quot;);
        Console.ReadLine();
    &#125;

    private static string GetMessage(string[] args)
    &#123;
        return ((args.Length &gt; 0)
               ? string.Join(&quot; &quot;, args)
               : &quot;info: Hello World!&quot;);
    &#125;
&#125;
</code></pre>
<p>（<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/EmitLog/EmitLog.cs">EmitLog.cs</a> 源码）</p>
<p>如你所见，在建立连接后，我们声明了交换器。这一步非常有必要，因为发布消息到一个不存在的交换器，这种情况是被禁止的。</p>
<p>如果没有队列绑定到交换器上，消息将会丢失，但这对我们来说并没有什么没问题；如果没有消费者正在监听，我们是可以放心地把消息丢弃的。</p>
<p><code>ReceiveLogs.cs</code>的代码：</p>
<pre><code>using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

class ReceiveLogs
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;logs&quot;, type: &quot;fanout&quot;);

            var queueName = channel.QueueDeclare().QueueName;
            channel.QueueBind(queue: queueName,
                              exchange: &quot;logs&quot;,
                              routingKey: &quot;&quot;);

            Console.WriteLine(&quot; [*] Waiting for logs.&quot;);

            var consumer = new EventingBasicConsumer(channel);
            consumer.Received += (model, ea) =&gt;
            &#123;
                var body = ea.Body;
                var message = Encoding.UTF8.GetString(body);
                Console.WriteLine(&quot; [x] &#123;0&#125;&quot;, message);
            &#125;;
            channel.BasicConsume(queue: queueName,
                                 autoAck: true,
                                 consumer: consumer);

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        &#125;
    &#125;
&#125;
</code></pre>
<p>（<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/ReceiveLogs/ReceiveLogs.cs">ReceiveLogs.cs</a> 源码）</p>
<p>按照 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html">教程[1]</a>中的设置说明生成<code>EmitLogs</code>和<code>ReceiveLogs</code> 项目。</p>
<p>如果您想把日志保存到文件中，只需打开一个控制台并输入：</p>
<pre><code>cd ReceiveLogs
dotnet run &gt; logs_from_rabbit.log
</code></pre>
<p>如果你想在屏幕上看到日志，我可以新开一个终端并运行：</p>
<pre><code>cd ReceiveLogs
dotnet run
</code></pre>
<p>当然，分发日志需要输入：</p>
<pre><code>cd EmitLog
dotnet run
</code></pre>
<p>使用<code>rabbitmqctl list_bindings</code>命令，您可以验证代码是否真正创建了我们想要的绑定和队列。当有两<code>个ReceiveLogs.cs</code>程序运行时，您应该看到如下所示的内容：</p>
<pre><code>sudo rabbitmqctl list_bindings
</code></pre>
<p>​<br>​<br>​<br>​    </p>
<p>对执行结果的解释简洁明了：来自<code>logs</code>交换器的数据转发到了两个由服务器随机分配名称的队列。这正是我们期待的结果。</p>
<p>想要了解如何监听消息的这一块内容，让我们继续阅读 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html">教程[4]</a>。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-three-dotnet.html">RabbitMQ tutorial - Publish&#x2F;Subscribe</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.3、Visual Studio Code</li>
<li>最后更新：2018-06-11</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - 工作队列</title>
    <url>/2018/04/28/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列#"></a>工作队列<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97">#</a></h2><p><strong>（使用 .NET Client）</strong></p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231201957-1092292813.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231201957-1092292813.png"></a></p>
<p>在 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html">教程[1]</a> 中，我们编写了两个程序，用于从一个指定的队列发送和接收消息。在本文中，我们将创建一个_工作队列_，用于在多个工作线程间分发耗时的任务。</p>
<p>工作队列（又名：任务队列）背后的主要想法是避免立即执行资源密集型、且必须等待其完成的任务。相反的，我们把这些任务安排在稍后完成。我们可以将任务封装为消息并把它发送到队列中，在后台运行的工作进程将从队列中取出任务并最终执行。当您运行多个工作线程，这些任务将在这些工作线程之间共享。</p>
<p>这个概念在Web应用程序中特别有用，因为在一个 HTTP 请求窗口中无法处理复杂的任务。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备#"></a>准备<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E5%87%86%E5%A4%87">#</a></h2><p>我们将略微修改上一个示例中的_Send_程序，以其可以在命令行发送任意消息。<br>这个程序将调度任务到我们的工作队列中，所以让我们把它命名为<code>NewTask</code>：</p>
<p>像 <a href="http://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html">教程[1]</a>一样，我们需要生成两个项目：</p>
<pre><code>dotnet new console --name NewTask
mv NewTask/Program.cs NewTask/NewTask.cs

dotnet new console --name Worker
mv Worker/Program.cs Worker/Worker.cs

cd NewTask
dotnet add package RabbitMQ.Client
dotnet restore

cd ../Worker
dotnet add package RabbitMQ.Client
dotnet restore


var message = GetMessage(args);
var body = Encoding.UTF8.GetBytes(message);

var properties = channel.CreateBasicProperties();
properties.Persistent = true;

channel.BasicPublish(exchange: &quot;&quot;,
                     routingKey: &quot;task_queue&quot;,
                     basicProperties: properties,
                     body: body);
</code></pre>
<p>从命令行参数获取消息的帮助方法：</p>
<pre><code>private static string GetMessage(string[] args)
&#123;
    return ((args.Length &gt; 0) ? string.Join(&quot; &quot;, args) : &quot;Hello World!&quot;);
&#125;
</code></pre>
<p>我们旧的<code>Receive.cs</code>脚本也需要进行一些更改：它需要为消息体中的每个点模拟一秒种的时间消耗。它将处理由 RabbitMQ 发布的消息，并执行任务，因此我们把它复制到<code>Worker</code>项目并修改：</p>
<pre><code>var consumer = new EventingBasicConsumer(channel);
</code></pre>
<p>​<br>​    consumer.Received +&#x3D; (model, ea) &#x3D;&gt;<br>​    {<br>​        var body &#x3D; ea.Body;<br>​        var message &#x3D; Encoding.UTF8.GetString(body);<br>​        Console.WriteLine(“ [x] Received {0}”, message);</p>
<p>​<br>​        int dots &#x3D; message.Split(‘.’).Length - 1;<br>​        Thread.Sleep(dots * 1000);<br>​<br>​        Console.WriteLine(“ [x] Done”);<br>​    };<br>​<br>    channel.BasicConsume(queue: “task_queue”, autoAck: true, consumer: consumer);</p>
<p>模拟虚拟任务的执行时间：</p>
<pre><code>int dots = message.Split(&#39;.&#39;).Length - 1;
Thread.Sleep(dots * 1000);
</code></pre>
<h2 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度#"></a>循环调度<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E5%BE%AA%E7%8E%AF%E8%B0%83%E5%BA%A6">#</a></h2><p>使用任务队列的优点之一是能够轻松地并行工作。如果我们正在积累积压的工作，我们仅要增加更多的工作者，并以此方式可以轻松扩展。</p>
<p>首先，我们尝试同时运行两个<code>Worker</code>实例。他们都会从队列中获取消息，但究竟如何？让我们来看看。</p>
<p>您需要打开三个控制台，两个运行<code>Worker</code>程序，这些控制台作为我们的两个消费者 - C1和C2。</p>
<pre><code>cd Worker
dotnet run
</code></pre>
<p>​    </p>
<pre><code>cd Worker
dotnet run
</code></pre>
<p>​    </p>
<p>在第三个控制台中，我们将发布一些新的任务。一旦你已经运行了消费者，你可以尝试发布几条消息：</p>
<pre><code>cd NewTask
dotnet run &quot;First message.&quot;
dotnet run &quot;Second message..&quot;
dotnet run &quot;Third message...&quot;
dotnet run &quot;Fourth message....&quot;
dotnet run &quot;Fifth message.....&quot;
</code></pre>
<p>让我们看看有什么发送到了我们的<code>Worker</code>程序：</p>
<pre><code># shell 1
# =&gt; [*] Waiting for messages. To exit press CTRL+C
# =&gt; [x] Received &#39;First message.&#39;
# =&gt; [x] Received &#39;Third message...&#39;
# =&gt; [x] Received &#39;Fifth message.....&#39;


# shell 2
# =&gt; [*] Waiting for messages. To exit press CTRL+C
# =&gt; [x] Received &#39;Second message..&#39;
# =&gt; [x] Received &#39;Fourth message....&#39;
</code></pre>
<p>默认情况下，RabbitMQ 会按顺序将每条消息发送给下一个消费者。消费者数量平均的情况下，每个消费者将会获得相同数量的消息。这种分配消息的方式称为循环（Round-Robin）。请尝试开启三个或更多的<code>Worker</code>程序来验证。</p>
<h2 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认#"></a>消息确认<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4">#</a></h2><p>处理一项任务可能会需要几秒钟的时间。如果其中一个消费者开启了一项长期的任务并且只完成了部分就挂掉了，您可能想知道会发生什么？在我们当前的代码中，一旦 RabbitMQ 把消息分发给了消费者，它会立即将这条消息标记为删除。在这种情况下，如果您停掉某一个 Worker，我们将会丢失这条正在处理的消息，也将丢失所有分发到该 Worker 但尚未处理的消息。</p>
<p>但是我们不想丢失任何一个任务。如果一个 Worker 挂掉了，我们希望这个任务能被重新分发给其他 Worker。</p>
<p>为了确保消息永远不会丢失，RabbitMQ 支持 <a href="http://www.rabbitmq.com/confirms.html"><em>消息确认</em></a> 机制。消费者回发一个确认信号 Ack(nowledgement) 给 RabbitMQ，告诉它某个消息已经被接收、处理并且可以自由删除它。</p>
<p>如果一个消费者在还没有回发确认信号之前就挂了（其通道关闭，连接关闭或者 TCP 连接丢失），RabbitMQ 会认为该消息未被完全处理，并将其重新排队。如果有其他消费者同时在线，该消息将会被会迅速重新分发给其他消费者。这样，即便 Worker 意外挂掉，也可以确保消息不会丢失。</p>
<p>没有任何消息会超时；当消费者死亡时，RabbitMQ 将会重新分发消息。即使处理消息需要非常非常长的时间也没关系。</p>
<p>默认情况下，<a href="http://www.rabbitmq.com/confirms.html">手动消息确认</a> 模式是开启的。在前面的例子中，我们通过将<code>autoAck</code>（“自动确认模式”）参数设置为<code>true</code>来明确地关闭手动消息确认模式。一旦完成任务，是时候删除这个标志并且从 Worker 手动发送一个恰当的确认信号给RabbitMQ。</p>
<pre><code>var consumer = new EventingBasicConsumer(channel);
</code></pre>
<p>​<br>​    consumer.Received +&#x3D; (model, ea) &#x3D;&gt;<br>​    {<br>​        var body &#x3D; ea.Body;<br>​        var message &#x3D; Encoding.UTF8.GetString(body);<br>​        Console.WriteLine(“ [x] Received {0}”, message);</p>
<p>​<br>​        int dots &#x3D; message.Split(‘.’).Length - 1;<br>​        Thread.Sleep(dots * 1000);<br>​<br>​        Console.WriteLine(“ [x] Done”);</p>
<p>​<br>​        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);<br>​    };</p>
<p>​<br>​<br>​    channel.BasicConsume(queue: “task_queue”, autoAck: false, consumer: consumer);</p>
<p>使用上面这段代码，我们可以确定的是，即使一个 Worker 在处理消息时，我们通过使用<code>CTRL + C</code>来终止它，也不会丢失任何消息。Worker 挂掉不久，所有未确认的消息将会被重新分发。</p>
<blockquote>
<p><strong>忘记确认</strong><br>遗漏<code>BasicAck</code>是一个常见的错误。这是一个很简单的错误，但导致的后果却是严重的。当客户端退出时（看起来像是随机分发的），消息将会被重新分发，但是RabbitMQ会吃掉越来越多的内存，因为它不能释放未确认的消息。<br>为了调试这种错误，您可以使用<code>rabbitmqctl</code>来打印<code>messages_unacknowledged</code>字段：</p>
<pre><code>sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged
</code></pre>
<p>在Windows上，删除<code>sudo</code>：</p>
<pre><code>rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged
</code></pre>
</blockquote>
<h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化#"></a>消息持久化<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96">#</a></h2><p>我们已经学习了如何确保即使消费者挂掉，任务也不会丢失。但是如果 RabbitMQ 服务器停止，我们的任务还是会丢失。</p>
<p>当 RabbitMQ 退出或崩溃时，它会忘记已存在的队列和消息，除非告诉它不要这样做。为了确保消息不会丢失，有两件事是必须的：我们需要将队列和消息标记为<strong>持久</strong>。</p>
<p>首先，我们需要确保 RabbitMQ 永远不会丢失我们的队列。为了做到这一点，我们需要把队列声明是_持久的（Durable）_：</p>
<pre><code>// 声明队列，通过指定 durable 参数为 true，对消息进行持久化处理。 
channel.QueueDeclare(queue: &quot;hello&quot;,
                     durable: true,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);
</code></pre>
<p>虽然这个命令本身是正确的，但是它在当前设置中不会起作用。那是因为我们已经定义过一个名为<code>hello</code>的队列，并且这个队列不是持久化的。RabbitMQ 不允许使用不同的参数重新定义已经存在的队列，并会向尝试执行该操作的程序返回一个错误。但有一个快速的解决办法 - 让我们用不同的名称声明一个队列，例如<code>task_queue</code>：</p>
<pre><code>channel.QueueDeclare(queue: &quot;task_queue&quot;,
                     durable: true,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);
</code></pre>
<p>注意，该声明队列<code>QueueDeclare</code>方法的更改需要同时应用于生产者和消费者代码。</p>
<p>此时，我们可以确定的是，即使 RabbitMQ 重新启动，<code>task_queue</code>队列也不会丢失。现在我们需要将我们的消息标记为_持久的（Persistent）_ - 通过将<code>IBasicProperties.Persistent</code>设置为<code>true</code>。</p>
<pre><code>var properties = channel.CreateBasicProperties();
properties.Persistent = true;
</code></pre>
<blockquote>
<p><strong>关于消息持久性的说明</strong><br>将消息标记为<code>Persistent</code>并不能完全保证消息不会丢失。尽管它告诉 RabbitMQ 将消息保存到磁盘，但当 RabbitMQ 接收到消息并且尚未保存消息时仍有一段时间间隔。此外，RabbitMQ 不会为每条消息执行<code>fsync(2)</code> - 它可能只是保存到缓存中，并没有真正写入磁盘。消息的持久化保证并不健壮，但对于简单的任务队列来说已经足够了。如果您需要一个更加健壮的保证，可以使用 <a href="https://www.rabbitmq.com/confirms.html">发布者确认</a>。</p>
</blockquote>
<h2 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度#"></a>公平调度<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6">#</a></h2><p>您可能已经注意到调度仍然无法完全按照我们期望的方式工作。例如，在有两个 Worker 的情况下，假设所有奇数消息都很庞大、偶数消息都很轻量，那么一个 Worker 将会一直忙碌，而另一个 Worker 几乎不做任何工作。是的，RabbitMQ 并不知道存在这种情况，它仍然会平均地分发消息。</p>
<p>发生这种情况是因为 RabbitMQ 只是在消息进入队列后就将其分发。它不会去检查每个消费者所拥有的未确认消息的数量。它只是盲目地将第 n 条消息分发给第 n 位消费者。</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231253359-1054097198.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231253359-1054097198.png"></a></p>
<p>为了改变上述这种行为，我们可以使用参数设置<code>prefetchCount = 1</code>的<code>basicQos</code>方法。</p>
<p>这就告诉 RabbitMQ 同一时间不要给一个 Worker 发送多条消息。或者换句话说，不要向一个 Worker 发送新的消息，直到它处理并确认了前一个消息。<br>相反，它会这个消息调度给下一个不忙碌的 Worker。</p>
<pre><code>channel.BasicQos(0, 1, false);
</code></pre>
<blockquote>
<p><strong>关于队列大小的说明</strong><br>如果所有的 Worker 都很忙，您的队列可能会被填满。请留意这一点，可以尝试添加更多的 Worker，或者使用其他策略。</p>
</blockquote>
<h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h2><p>我们<code>NewTask.cs</code>类的最终代码：</p>
<pre><code>using System;
using RabbitMQ.Client;
using System.Text;

class NewTask
&#123;
    public static void Main(string[] args)
    &#123;
        
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
</code></pre>
<p>​<br>​            using(var connection &#x3D; factory.CreateConnection())<br>​            using(var channel &#x3D; connection.CreateModel())<br>​            {<br>​<br>​                channel.QueueDeclare(queue: “task_queue”,<br>​                                     durable: true,<br>​                                     exclusive: false,<br>​                                     autoDelete: false,<br>​                                     arguments: null);</p>
<p>​<br>​                var message &#x3D; GetMessage(args);<br>​                var body &#x3D; Encoding.UTF8.GetBytes(message);</p>
<p>​<br>​                var properties &#x3D; channel.CreateBasicProperties();<br>​                properties.Persistent &#x3D; true;</p>
<p>​<br>​                channel.BasicPublish(exchange: “”,<br>​                                     routingKey: “task_queue”,<br>​                                     basicProperties: properties,<br>​                                     body: body);<br>​<br>​                Console.WriteLine(“ [x] Sent {0}”, message);<br>​            }<br>​<br>            Console.WriteLine(“ Press [enter] to exit.”);<br>            Console.ReadLine();<br>        }</p>
<pre><code>    private static string GetMessage(string[] args)
    &#123;
        return ((args.Length &gt; 0) ? string.Join(&quot; &quot;, args) : &quot;Hello World!&quot;);
    &#125;
&#125;
</code></pre>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/NewTask/NewTask.cs">（NewTask.cs 源码）</a></p>
<p>还有我们的<code>Worker.cs</code>：</p>
<pre><code>using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;
using System.Threading;

class Worker
&#123;
    public static void Main()
    &#123;
        
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
</code></pre>
<p>​<br>​            using(var connection &#x3D; factory.CreateConnection())<br>​            using(var channel &#x3D; connection.CreateModel())<br>​            {<br>​<br>​                channel.QueueDeclare(queue: “task_queue”,<br>​                                     durable: true,<br>​                                     exclusive: false,<br>​                                     autoDelete: false,<br>​                                     arguments: null);</p>
<p>​<br>​                channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);<br>​<br>​                Console.WriteLine(“ [*] Waiting for messages.”);</p>
<p>​<br>​                var consumer &#x3D; new EventingBasicConsumer(channel);</p>
<p>​<br>​                consumer.Received +&#x3D; (model, ea) &#x3D;&gt;<br>​                {<br>​                    var body &#x3D; ea.Body;<br>​                    var message &#x3D; Encoding.UTF8.GetString(body);<br>​                    Console.WriteLine(“ [x] Received {0}”, message);</p>
<p>​<br>​                    int dots &#x3D; message.Split(‘.’).Length - 1;<br>​                    Thread.Sleep(dots * 1000);<br>​<br>​                    Console.WriteLine(“ [x] Done”);</p>
<p>​<br>​                    channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);<br>​                };<br>​<br>​                channel.BasicConsume(queue: “task_queue”,<br>​                                     autoAck: false,<br>​                                     consumer: consumer);<br>​<br>                Console.WriteLine(“ Press [enter] to exit.”);<br>                Console.ReadLine();<br>            }<br>        }<br>    }</p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Worker/Worker.cs">（Worker.cs 源码）</a></p>
<p>使用消息确认机制和<code>BasicQ</code>您可以创建一个工作队列。即使 RabbitMQ 重新启动，通过持久性选项也可让任务继续存在。</p>
<p>有关<code>IModel</code>方法和<code>IBasicProperties</code>的更多信息，您可以在线浏览 <a href="http://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v3.6.10/rabbitmq-dotnet-client-3.6.10-client-htmldoc/html/index.html">RabbitMQ .NET客户端API参考</a>。</p>
<p>现在，我们可以继续阅读 <a href="http://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html">教程[3]</a>，学习如何向多个消费者发送相同的消息。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-two-dotnet.html">RabbitMQ tutorial - Work Queues</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.2、Visual Studio Code</li>
<li>最后更新：2018-04-03</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - 路由</title>
    <url>/2018/05/05/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由#"></a>路由<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E8%B7%AF%E7%94%B1">#</a></h2><p><strong>（使用.NET客户端）</strong></p>
<p>在 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html">教程[3]</a> 中，我们构建了一个简单的日志系统，可以向多个接收者广播消息。</p>
<p>在本教程中，我们会为日志系统再添加一个特性，使其可以只订阅消息的一个子集。例如，将所有日志消息打印到<br>控制台，同时只会将严重错误消息写入日志文件（保存到磁盘空间）。</p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定#"></a>绑定<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E7%BB%91%E5%AE%9A">#</a></h2><p>在前面的例子中，我们创建过_绑定_。不知道您是否还记得下面的代码：</p>
<pre><code>channel.QueueBind(queue: queueName,
                  exchange: &quot;logs&quot;,
                  routingKey: &quot;&quot;);
</code></pre>
<p>绑定是指交换器和队列之间的关联关系。可以简单地理解为：某个队列对来自此交换器的消息感兴趣。</p>
<p>绑定可以采用额外的<code>routingKey</code>参数，为了避免与<code>BasicPublish</code>方法中相同参数混淆，我们将其称为<code>binding key</code>（这里是指路由键从声明角度的一种别称，绑定键）。下面即是如何使用绑定键 建立一个绑定：</p>
<pre><code>channel.QueueBind(queue: queueName,
                  exchange: &quot;direct_logs&quot;,
                  routingKey: &quot;black&quot;);
</code></pre>
<p>绑定键的含义取决于交换器类型。像我们前面使用的<code>fanout</code> 交换器，忽略了它的值（依据<code>fanout</code>交换器的特性，它会把消息广播到所有订阅的队列，所以就算指定<code>routingKey</code>也不会根据其过滤消息）。</p>
<h2 id="Direct交换器"><a href="#Direct交换器" class="headerlink" title="Direct交换器#"></a>Direct交换器<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#direct%E4%BA%A4%E6%8D%A2%E5%99%A8">#</a></h2><p>在上篇教程中，我们的日志系统会把所有消息广播给所有消费者，现在我们想要扩展使其可以根据消息的严重性过滤消息。例如，我们希望将日志消息写入磁盘的脚本仅接收严重错误的消息，而不是在警告或者信息类型的消息上浪费磁盘空间。</p>
<p>之前我们使用的是<code>fanout</code>交换器，它没有给我们足够的灵活性 - 它只能进行无意识的广播。</p>
<p>现在我们要用<code>direct</code>交换器替换它，<code>direct</code>交换器背后的路由算法很简单 - 消息会进入其<code>binding key</code>恰好与<code>routing key</code>相匹配的队列。<br>为了说明这一点，请参考以下设置：</p>
<p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231746073-139207930.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231746073-139207930.png"></a></p>
<p>在上面的设置中，我们可以看到<code>direct</code>交换器<code>X</code>与两个队列绑定。第一个队列通过键<code>orange</code>绑定，第二个队列有两个绑定，一个通过键<code>black</code>绑定、另外一个通过键<code>green</code>绑定。</p>
<p>如此设置，发布使用路由键<code>orange</code>的消息到交换器最终会被路由到队列<code>Q1</code>，路由键为<code>black</code>或<code>green</code>的消息会去向队列<code>Q2</code>，而其他所有的消息会被丢弃。</p>
<h2 id="多重绑定"><a href="#多重绑定" class="headerlink" title="多重绑定#"></a>多重绑定<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E5%A4%9A%E9%87%8D%E7%BB%91%E5%AE%9A">#</a></h2><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231813076-1280701060.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231813076-1280701060.png"></a></p>
<p>使用相同的绑定键绑定多个队列是完全合法的。在示例中，我们可以在<code>X</code>和<code>Q1</code>之间添加一个键为<code>black</code>的绑定。这种情况下，<code>direct</code>交换器会像<code>fanout</code>交换器一样，把消息广播到所有匹配的队列，路由键为<code>black</code>的消息会被分别发送到队列<code>Q1</code>和<code>Q2</code>。</p>
<h2 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志#"></a>发送日志<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E5%8F%91%E9%80%81%E6%97%A5%E5%BF%97">#</a></h2><p>我们将在日志系统中使用上述消息模型，在发送消息时使用<code>direct</code>交换机来替换<code>fanout</code>交换器。同时我们会把日志的严重性作为路由键，这样的话，接收脚本就可以选择性地接收它期望严重性的消息。首先我们来关注如何发送日志。</p>
<p>同样地，我们需要先创建一个交换器：</p>
<pre><code>channel.ExchangeDeclare(exchange: &quot;direct_logs&quot;, type: ExchangeType.Direct);
</code></pre>
<p>准备好发送消息：</p>
<pre><code>var body = Encoding.UTF8.GetBytes(message);
channel.BasicPublish(exchange: &quot;direct_logs&quot;,
                     routingKey: severity,
                     basicProperties: null,
                     body: body);
</code></pre>
<p>简单起见，我们先假定<code>severity</code>可以是<code>info</code>、<code>warning</code>或<code>error</code>任意一值。</p>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅#"></a>订阅<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E8%AE%A2%E9%98%85">#</a></h2><p>马上就可以像前面的教程接收消息了，但有一点不同， 我们需要为我们感兴趣的每种日志严重性级别的消息建立一个新的绑定。</p>
<pre><code>var queueName = channel.QueueDeclare().QueueName;

foreach(var severity in args)
&#123;
    channel.QueueBind(queue: queueName,
                      exchange: &quot;direct_logs&quot;,
                      routingKey: severity);
&#125;
</code></pre>
<h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h2><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231857862-1124037273.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117231857862-1124037273.png"></a></p>
<p><code>EmitLogDirect.cs</code>类的代码：</p>
<pre><code>using System;
using System.Linq;
using RabbitMQ.Client;
using System.Text;

class EmitLogDirect
&#123;
    public static void Main(string[] args)
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;direct_logs&quot;,
                                    type: &quot;direct&quot;);

            var severity = (args.Length &gt; 0) ? args[0] : &quot;info&quot;;
            var message = (args.Length &gt; 1)
                          ? string.Join(&quot; &quot;, args.Skip(1).ToArray())
                          : &quot;Hello World!&quot;;
            var body = Encoding.UTF8.GetBytes(message);
            channel.BasicPublish(exchange: &quot;direct_logs&quot;,
                                 routingKey: severity,
                                 basicProperties: null,
                                 body: body);
            Console.WriteLine(&quot; [x] Sent &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;, severity, message);
        &#125;

        Console.WriteLine(&quot; Press [enter] to exit.&quot;);
        Console.ReadLine();
    &#125;
&#125;
</code></pre>
<p><code>ReceiveLogsDirect.cs</code>类的代码：</p>
<pre><code>using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

class ReceiveLogsDirect
&#123;
    public static void Main(string[] args)
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        &#123;
            channel.ExchangeDeclare(exchange: &quot;direct_logs&quot;,
                                    type: &quot;direct&quot;);
            var queueName = channel.QueueDeclare().QueueName;

            if(args.Length &lt; 1)
            &#123;
                Console.Error.WriteLine(&quot;Usage: &#123;0&#125; [info] [warning] [error]&quot;,
                                        Environment.GetCommandLineArgs()[0]);
                Console.WriteLine(&quot; Press [enter] to exit.&quot;);
                Console.ReadLine();
                Environment.ExitCode = 1;
                return;
            &#125;

            foreach(var severity in args)
            &#123;
                channel.QueueBind(queue: queueName,
                                  exchange: &quot;direct_logs&quot;,
                                  routingKey: severity);
            &#125;

            Console.WriteLine(&quot; [*] Waiting for messages.&quot;);

            var consumer = new EventingBasicConsumer(channel);
            consumer.Received += (model, ea) =&gt;
            &#123;
                var body = ea.Body;
                var message = Encoding.UTF8.GetString(body);
                var routingKey = ea.RoutingKey;
                Console.WriteLine(&quot; [x] Received &#39;&#123;0&#125;&#39;:&#39;&#123;1&#125;&#39;&quot;,
                                  routingKey, message);
            &#125;;
            channel.BasicConsume(queue: queueName,
                                 autoAck: true,
                                 consumer: consumer);

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        &#125;
    &#125;
&#125;
</code></pre>
<p>请像往常一样创建项目（请参阅 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html">教程[1]</a>）。</p>
<p>如果您想将<code>warning</code>和<code>error</code>（不包括<code>info</code>）日志消息保存到文件，只需打开控制台并输入：</p>
<pre><code>cd ReceiveLogsDirect
dotnet run warning error &gt; logs_from_rabbit.log
</code></pre>
<p>如果您想在屏幕上看到所有日志消息，请打开一个新终端并执行以下操作：</p>
<pre><code>cd ReceiveLogsDirect
dotnet run info warning error
</code></pre>
<p>​    </p>
<p>例如，想要发出<code>error</code>日志消息，只需要输入：</p>
<pre><code>cd EmitLogDirect
dotnet run error &quot;Run. Run. Or it will explode.&quot;
</code></pre>
<p>​    </p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/EmitLogDirect/EmitLogDirect.cs">EmitLogDirect.cs</a> 和 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/ReceiveLogsDirect/ReceiveLogsDirect.cs">ReceiveLogsDirect.cs</a> 的完整源代码。</p>
<p>跳转到 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-topics.html">教程[5]</a>，了解如何基于模式监听消息。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-routing.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-four-dotnet.html">RabbitMQ tutorial - Routing</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.3、Visual Studio Code</li>
<li>最后更新：2018-08-31</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]RabbitMQ教程C#版 - 远程过程调用(RPC)</title>
    <url>/2018/05/12/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/RabbitMQ%E6%95%99%E7%A8%8BC#%E7%89%88%20-%20%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8(RPC)/</url>
    <content><![CDATA[<blockquote>
<p><strong>先决条件</strong><br>本教程假定 RabbitMQ 已经安装，并运行在<code>localhost</code> 标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。</p>
<p><strong>从哪里获得帮助</strong><br>如果您在阅读本教程时遇到困难，可以通过邮件列表 <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">联系我们</a>。</p>
</blockquote>
<p>在第 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html">教程[2]</a> 中，我们学习了如何使用工作队列在多个工作单元之间分配耗时任务。</p>
<p>但是如果我们想要运行一个在远程计算机上的函数并等待其结果呢？这将是另外一回事了。这种模式通常被称为 <em>远程过程调用</em> 或 <em>RPC</em> 。</p>
<p>在本篇教程中，我们将使用 RabbitMQ 构建一个 RPC 系统：一个客户端和一个可扩展的 RPC 服务器。由于我们没有什么耗时任务值得分发，那干脆就创建一个返回斐波那契数列的虚拟 RPC 服务吧。</p>
<h2 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口#"></a>客户端接口<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%8F%A3">#</a></h2><p>为了说明如何使用 RPC 服务，我们将创建一个简单的客户端类。该类将暴露一个名为<code>Call</code>的方法，用来发送 RPC 请求并且保持阻塞状态，直到接收到应答为止。</p>
<pre><code>var rpcClient = new RPCClient();

Console.WriteLine(&quot; [x] Requesting fib(30)&quot;);
var response = rpcClient.Call(&quot;30&quot;);
Console.WriteLine(&quot; [.] Got &#39;&#123;0&#125;&#39;&quot;, response);

rpcClient.Close();
</code></pre>
<blockquote>
<p><strong>关于 RPC 的说明</strong></p>
<p>尽管 RPC 在计算机中是一种很常见的模式，但它经常受到批评。问题出现在当程序员不知道一个函数是本地调用还是一个耗时的 RPC 请求。这样的混淆，会导致系统不可预测，以及给调试增加不必要的复杂性。误用 RPC 可能会导致不可维护的混乱代码，而不是简化软件。</p>
<p>牢记这些限制，请考虑如下建议：</p>
<ul>
<li>确保可以明显区分哪些函数是本地调用，哪些是远程调用。</li>
<li>为您的系统编写文档，明确组件之间的依赖关系。</li>
<li>捕获异常，当 RPC 服务长时间宕机时客户端该如何应对。</li>
</ul>
<p>当有疑问的时候可以先避免使用 RPC。如果可以的话，考虑使用异步管道 - 而不是类似 RPC 的阻塞，其会将结果以异步的方式推送到下一个计算阶段。</p>
</blockquote>
<h2 id="回调队列"><a href="#回调队列" class="headerlink" title="回调队列#"></a>回调队列<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E5%9B%9E%E8%B0%83%E9%98%9F%E5%88%97">#</a></h2><p>一般来讲，基于 RabbitMQ 进行 RPC 通信是非常简单的，客户端发送一个请求消息，然后服务端用一个响应消息作为应答。为了能接收到响应，我们需要在发送请求过程中指定一个’callback’队列地址。</p>
<pre><code>var props = channel.CreateBasicProperties();
props.ReplyTo = replyQueueName;

var messageBytes = Encoding.UTF8.GetBytes(message);
channel.BasicPublish(exchange: &quot;&quot;,
                     routingKey: &quot;rpc_queue&quot;,
                     basicProperties: props,
                     body: messageBytes);
</code></pre>
<p>​<br>​    </p>
<blockquote>
<p><strong>消息属性</strong></p>
<p>AMQP 0-9-1 协议在消息中预定义了一个包含 14 个属性的集合，大多数属性很少使用，但以下情况除外：<br><code>Persistent</code>：将消息标记为持久的（值为2）或者瞬时的（其他值），可以参考 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html">教程[2]</a>。<br><code>DeliveryMode</code>：熟悉 AMQP 协议的人可以选择此属性而不是熟悉协议的人可以选择使用此属性而不是<code>Persistent</code>，它们控制的东西是一样的。<br><code>ContentType</code>：用于描述编码的 mime 类型。例如，对于经常使用的 JSON 编码，将此属性设置为：<code>application/json</code>是一种很好的做法。<br><code>ReplyTo</code>：通常用于命名回调队列。<br><code>CorrelationId</code>：用于将 RPC 响应与请求相关联。</p>
</blockquote>
<h2 id="关联ID"><a href="#关联ID" class="headerlink" title="关联ID#"></a>关联ID<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E5%85%B3%E8%81%94id">#</a></h2><p>在上面介绍的方法中，我们建议为每个 RPC 请求创建一个回调队列，但是这种方式效率低。幸运的是我们有一种更好的方式，那就是为每个客户端创建一个独立的回调队列。</p>
<p>这种方式会引出一个新的问题，在收到响应的回调队列中，它无法区分响应属于哪一个请求，此时便是<code>CorrelationId</code>属性的所用之处。我们将为每个请求的<code>CorrelationId</code>设置一个唯一值。之后当我们在回调队列接收到响应的时候，再去检查下这个属性是否和请求中的值匹配，如此一来，我们就可以把响应和请求关联起来了。如果出现一个未知的<code>CorrelationId</code>值，我们可以安全的销毁这个消息，因为这个消息不属于我们的请求。</p>
<p>你可能会问，为什么我们应该忽略回调队列中的未知的消息，而不是用错误来标识失败呢？这是因为于服务器端可能存在竞争条件。虽然不太可能，但是 RPC 服务器可能在仅发送了响应消息而未发送消息确认的情况下挂掉，如果出现这种情况，RPC 服务器重启之后将会重新处理该请求。这就是为什么在客户端上我们必须优雅地处理重复的响应，并且理想情况下 RPC 应该是幂等的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结#"></a>总结<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E6%80%BB%E7%BB%93">#</a></h2><p><a href="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117212349010-1581646652.png"><img src="https://img2018.cnblogs.com/blog/785976/201811/785976-20181117212349010-1581646652.png"></a></p>
<p>我们的 RPC 会是这样工作：</p>
<ul>
<li>客户端启动时，会创建一个匿名的独占回调队列。</li>
<li>对于 RPC 请求，客户端发送带有两个属性的消息：<code>ReplyTo</code>（设置为回调队列）和<code>CorrelationId</code>（为每个请求设置唯一值）。</li>
<li>请求被发送到<code>rpc_queue</code>队列。</li>
<li>RPC 工作线程（或者叫：服务器）正在等待该队列上的请求。当出现请求时，它会执行该作业，并使用<code>ReplyTo</code>属性设置的队列将带有结果的消息发送回客户端。</li>
<li>客户端等待回调队列上的数据。出现消息时，它会检查<code>CorrelationId</code>属性。如果它与请求中的值匹配，则返回对应用程序的响应。</li>
</ul>
<h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起#"></a>组合在一起<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7">#</a></h2><p>斐波纳契 任务：</p>
<pre><code>private static int fib(int n)
&#123;
    if (n == 0 || n == 1) return n;
    return fib(n - 1) + fib(n - 2);
&#125;
</code></pre>
<p>我们宣布我们的斐波那契函数。并假定只允许有效的正整数输入。 （不要期望这个适用于大数字，它可能是最慢的递归实现）。</p>
<p>我们的 RPC 服务端代码 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/RPCServer/RPCServer.cs">RPCServer.cs</a> 看起来如下所示：</p>
<pre><code>using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

class RPCServer
&#123;
    public static void Main()
    &#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;
        using (var connection = factory.CreateConnection())
        using (var channel = connection.CreateModel())
        &#123;
            channel.QueueDeclare(queue: &quot;rpc_queue&quot;, durable: false,
              exclusive: false, autoDelete: false, arguments: null);
            channel.BasicQos(0, 1, false);
            var consumer = new EventingBasicConsumer(channel);
            channel.BasicConsume(queue: &quot;rpc_queue&quot;,
              autoAck: false, consumer: consumer);
            Console.WriteLine(&quot; [x] Awaiting RPC requests&quot;);

            consumer.Received += (model, ea) =&gt;
            &#123;
                string response = null;

                var body = ea.Body;
                var props = ea.BasicProperties;
                var replyProps = channel.CreateBasicProperties();
                replyProps.CorrelationId = props.CorrelationId;

                try
                &#123;
                    var message = Encoding.UTF8.GetString(body);
                    int n = int.Parse(message);
                    Console.WriteLine(&quot; [.] fib(&#123;0&#125;)&quot;, message);
                    response = fib(n).ToString();
                &#125;
                catch (Exception e)
                &#123;
                    Console.WriteLine(&quot; [.] &quot; + e.Message);
                    response = &quot;&quot;;
                &#125;
                finally
                &#123;
                    var responseBytes = Encoding.UTF8.GetBytes(response);
                    channel.BasicPublish(exchange: &quot;&quot;, routingKey: props.ReplyTo,
                      basicProperties: replyProps, body: responseBytes);
                    channel.BasicAck(deliveryTag: ea.DeliveryTag,
                      multiple: false);
                &#125;
            &#125;;

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        &#125;
    &#125;
</code></pre>
<p>​<br>​<br>​<br>​<br>​<br>​<br>​        private static int fib(int n)<br>​        {<br>​            if (n &#x3D;&#x3D; 0 || n &#x3D;&#x3D; 1)<br>​            {<br>​                return n;<br>​            }<br>​<br>​            return fib(n - 1) + fib(n - 2);<br>​        }<br>​    }</p>
<p>服务端代码非常简单：</p>
<ul>
<li>像往常一样，首先建立连接，通道和声明队列。</li>
<li>我们可能希望运行多个服务器进程。为了在多个服务器上平均分配负载，我们需要设置<code>channel.BasicQos</code>中的<code>prefetchCount</code>值。</li>
<li>使用<code>BasicConsume</code>访问队列，然后注册一个交付处理程序，并在其中完成工作并发回响应。</li>
</ul>
<p>我们的 RPC 客户端 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/RPCClient/RPCClient.cs">RPCClient.cs</a> 代码：</p>
<pre><code>using System;
using System.Collections.Concurrent;
using System.Text;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

public class RpcClient
&#123;
    private readonly IConnection connection;
    private readonly IModel channel;
    private readonly string replyQueueName;
    private readonly EventingBasicConsumer consumer;
    private readonly BlockingCollection&lt;string&gt; respQueue = new BlockingCollection&lt;string&gt;();
    private readonly IBasicProperties props;

public RpcClient()
&#123;
        var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;

        connection = factory.CreateConnection();
        channel = connection.CreateModel();
        replyQueueName = channel.QueueDeclare().QueueName;
        consumer = new EventingBasicConsumer(channel);

        props = channel.CreateBasicProperties();
        var correlationId = Guid.NewGuid().ToString();
        props.CorrelationId = correlationId;
        props.ReplyTo = replyQueueName;

        consumer.Received += (model, ea) =&gt;
        &#123;
            var body = ea.Body;
            var response = Encoding.UTF8.GetString(body);
            if (ea.BasicProperties.CorrelationId == correlationId)
            &#123;
                respQueue.Add(response);
            &#125;
        &#125;;
    &#125;

    public string Call(string message)
    &#123;
        var messageBytes = Encoding.UTF8.GetBytes(message);
        channel.BasicPublish(
            exchange: &quot;&quot;,
            routingKey: &quot;rpc_queue&quot;,
            basicProperties: props,
            body: messageBytes);

        channel.BasicConsume(
            consumer: consumer,
            queue: replyQueueName,
            autoAck: true);

        return respQueue.Take(); ;
    &#125;

    public void Close()
    &#123;
        connection.Close();
    &#125;
&#125;

public class Rpc
&#123;
    public static void Main()
    &#123;
        var rpcClient = new RpcClient();

        Console.WriteLine(&quot; [x] Requesting fib(30)&quot;);
        var response = rpcClient.Call(&quot;30&quot;);

        Console.WriteLine(&quot; [.] Got &#39;&#123;0&#125;&#39;&quot;, response);
        rpcClient.Close();
    &#125;
&#125;
</code></pre>
<p>客户端代码稍微复杂一些：</p>
<ul>
<li>建立连接和通道，并为响应声明一个独有的 ‘callback’ 队列。</li>
<li>订阅这个 ‘callback’ 队列，以便可以接收到 RPC 响应。</li>
<li><code>Call</code>方法用来生成实际的 RPC 请求。</li>
<li>在这里，我们首先生成一个唯一的<code>CorrelationId</code>编号并保存它，while 循环会使用该值来捕获匹配的响应。</li>
<li>接下来，我们发布请求消息，其中包含两个属性：<code>ReplyTo</code>和<code>CorrelationId</code>。</li>
<li>此时，我们可以坐下来稍微一等，直到指定的响应到来。</li>
<li>while 循环做的工作非常简单，对于每个响应消息，它都会检查<code>CorrelationId</code>是否是我们正在寻找的那一个。如果是这样，它就会保存该响应。</li>
<li>最后，我们将响应返回给用户。</li>
</ul>
<p>客户发出请求：</p>
<pre><code>var rpcClient = new RPCClient();

Console.WriteLine(&quot; [x] Requesting fib(30)&quot;);
var response = rpcClient.Call(&quot;30&quot;);
Console.WriteLine(&quot; [.] Got &#39;&#123;0&#125;&#39;&quot;, response);

rpcClient.Close();
</code></pre>
<p>现在是查看 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/RPCClient/RPCClient.cs">RPCClient.cs</a> 和 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/RPCServer/RPCServer.cs">RPCServer.cs</a> 的完整示例源代码（包括基本异常处理）的好时机哦。</p>
<p>像往常一样设置（请参见 <a href="https://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html">教程[1]</a>）：</p>
<p>我们的 RPC 服务现已准备就绪，现在可以启动服务端：</p>
<pre><code>cd RPCServer
dotnet run
</code></pre>
<p>​    </p>
<p>要请求斐波纳契数，请运行客户端：</p>
<pre><code>cd RPCClient
dotnet run
</code></pre>
<p>​    </p>
<p>这里介绍的设计并不是 RPC 服务的唯一可能实现，但它仍具有一些重要优势：</p>
<ul>
<li>如果 RPC 服务器太慢，您可以通过运行另一个服务器来扩展。尝试在新开一个控制台，运行第二个 RPCServer。</li>
<li>在客户端，RPC 只需要发送和接收一条消息。不需要像<code>QueueDeclare</code>一样同步调用。因此，对于单个 RPC 请求，RPC 客户端只需要一次网络往返。</li>
</ul>
<p>我们的代码很简单，也并没有尝试去解决更复杂（但很重要）的问题，比如就像：</p>
<ul>
<li>如果服务端没有运行，客户端应该如何反应？</li>
<li>客户端是否应该为 RPC 设置某种超时机制？</li>
<li>如果服务端出现故障并引发异常，是否应将其转发给客户端？</li>
<li>在处理之前防止无效的传入消息（例如：检查边界、类型）。</li>
</ul>
<blockquote>
<p>如果您想进行实验，您可能会发现 <a href="http://www.rabbitmq.com/management.html">管理 UI</a> 对于查看队列非常有用。</p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后#"></a>写在最后<a href="https://www.cnblogs.com/esofar/p/rabbitmq-rpc.html#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">#</a></h2><p>本文翻译自 RabbitMQ 官方教程 C# 版本。如本文介绍内容与官方有所出入，请以官方最新内容为准。水平有限，翻译的不好请见谅，如有翻译错误还请指正。</p>
<ul>
<li>原文链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-six-dotnet.html">RabbitMQ tutorial - Remote procedure call (RPC)</a></li>
<li>实验环境：RabbitMQ 3.7.4 、.NET Core 2.1.3、Visual Studio Code</li>
<li>最后更新：2018-11-17</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SharpDevelop源码分析 (一、序+基本概念)</title>
    <url>/2015/08/22/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/SharpDevelop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20(%E4%B8%80%E3%80%81%E5%BA%8F+%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/passos">石榴刺猬</a> 2004-10-04 18:55:00 </p>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p><strong>序</strong></p>
<p>    最近开始学习.Net，遇到了一个比较不错的开源的IDE SharpDevelop。这个开发工具是使用C#开发的，比较吸引我的一点就是它是采用了和Eclipse类似的插件技术来实现整个系统的。而这个插件系统是我最感兴趣的地方，因此开始了一段代码的研究。在本篇之后，我会陆续把我研究的心得写下来。由于是在网吧上网，有诸多不便，因此可能会拖比较长的时间。</p>
<p><strong>一、基本概念</strong></p>
<p>    首先，我们先来对 SharpDevelop 有一个比较感性的认识。你可以从这里下载到它的可执行程序和代码包    <a href="http://www.icsharpcode.com/">http://www.icsharpcode.com/</a>  ，安装的废话就不说了，先运行一下看看。感觉跟VS很像吧？不过目前的版本是1.0.0.1550，还有很多地方需要完善。关于代码和系统结构，SharpDevelop的三个作者写了一本书，各位看官可以参考一下，不过我看过之后还是有很多地方不太理解。</p>
<p>    然后，让我来解释一下什么叫插件以及为什么要使用插件系统。我们以往的系统，开发人员编译发布之后，系统就不允许进行更改和扩充了，如果要进行某个功能的扩充，则必须要修改代码重新编译发布。这就给我们带来了比较大的不方便。解决的方法有很多，例如提供配置等等方法。在解决方案之中，插件是一个比较好的解决方法。大家一定知道PhotoShop、WinAmp吧，他们都有“插件”的概念，允许其他开发人员根据系统预定的接口编写扩展功能（例如PhotoShop中各种各样的滤镜）。所谓的插件就是系统的扩展功能模块，这个模块是以一个独立文件的形式出现的，与系统是相对独立。在系统设计期间并不知道插件的具体功能，仅仅是在系统中为插件留下预定的接口，系统启动的时候根据插件的配置寻找插件，根据预定的接口把插件挂接到系统中。</p>
<p>    这样的方式带来什么样的优点呢？首先是系统的扩展性大大的增强了，如果我们在系统发布后需要对系统进行扩充，不必重新编译，只需要修改插件就可以了。其次有利与团队开发，各个功能模块由于是以插件的形式表现在系统中，系统的每日构造就很简单了，不会因为某个模块的错误而导致整个系统的BUILD失败。失败的仅仅是一个插件而已。</p>
<p>    PhotoShop和Winamp的插件系统是比较简单的，他们首先实现了一个基本的系统，然后在这个系统的基础上挂接其他扩展的功能插件。而SharpDevelop的插件系统更加强大，它的整个系统的基础就仅仅是一个插件管理系统，而你看到的所有的界面、功能统统都是以插件的形式挂入的。在这样的一个插件系统下，我们可以不修改基本系统，仅仅使用插件就构造出各种各样不同的系统。</p>
<p>    现在让我们来看看它的插件系统。进入到SharpDevelop的安装目录中，在Bin目录下的SharpDevelop.exe 和 SharpDevelop.Core.dll是这个系统的基本的插件系统。在Addins目录下有两个后缀是addin的文件，其中一个 SharpDevelopCore.addin 就是它的核心插件的定义（配置）文件，里面定义的各个功能模块存在于Bin&#x2F;Sharpdevelop.Base.dll 文件中，另外还有很多其他的插件定义在Addins目录下的addin文件中。</p>
<p>    分析SharpDevelop的代码，首先要弄清楚几个基本的概念，这些概念和我以前的预想有一些区别，我深入了代码之后才发现我的困惑所在。</p>
<p><strong>1、AddInTree  插件树</strong><br>    SharpDevelop 中的插件被组织成一棵插件树结构，树的结构是通过 Extension（扩展点）中定义的Path(路径)来定义的，类似一个文件系统的目录结构。系统中的每一个插件都在配置文件中指定了 Extension，通过Extension中指定的 Path 挂到这棵插件树上。在系统中可以通过 AddTreeSingleton对象来访问各个插件，以实现插件之间的互动。</p>
<p><strong>2、 AddIn 插件</strong><br>    在 SharpDevelop 的概念中，插件是包含多个功能模块的集合（而不是我过去认为的一个功能模块）。在文件的表现形式上是一个addin配置文件，在系统中对应 AddIn 类。</p>
<p><strong>3、Extension 扩展点</strong><br>    SharpDevelop中的每一个插件都会被挂到 AddInTree（插件树） 中，而具体挂接到这个插件树的哪个位置，则是由插件的 Extension 对象中的 Path 指定的。在addin 配置文件中，对应于 <Extension> 。例如下面这个功能模块的配置</p>
<p>指定了扩展点路径为 &#x2F;SharpDevelop&#x2F;Workbench&#x2F;Ambiences ，也就是在插件树中的位置。</p>
<p><strong>4、Codon</strong><br>    这个是一个比较不好理解的东西，在 SharpDevelop 的三个作者写的书的中译版中被翻译为<strong>密码子</strong>，真是个糟糕的翻译，可以跟Handle(句柄)有一拼了。词典中还有一个翻译叫“基码”，我觉得这个也不算好，不过还稍微有那么一点意思。（这里我原来误写为“代码子”，在评论中有位仁兄说这个翻译不错，现在我觉得也好像确实不错 ^o^）<br>    根据我对代码的理解，Codon 的功能是描述(包装)一个功能模块（一个功能模块对应一个实现了具体功能的 Command 类）。为了方便访问各个插件中的功能模块， Codon 给各种功能定义了基本的属性，分别是 ID (功能模块的标识)，Name (功能模块的类型。别误会，这个Name 是addin文件定义中Codon的XML结点的名称，ID才是真正的名称)，其中Name可能是Class(类)、MenuItem(菜单项)、Pad(面板)等等。根据具体的功能模块，可以继承Codon定义其他的一些属性，SharpDevelop中就定义了 ClassCodon、MenuItemCodon、PadCodon等等，你可以根据需要自己定义其他类型的Codon。在addin定义文件中，Codon对应于 <Extension> 标签下的内容。例如下面这个定义</p>
<p>&lt;Extension …&gt; 内部定义了一个Codon，&lt;**Class** …&gt;  表示该Codon是一个 Class(类)，接着定义了该Codon的 ID和具体实现该Codon的类名ICSharpCode.SharpDevelop.Services.NetAmbience。运行期间将通过反射来找到对应的类并创建出来，这一点也是我们无法在以前的语言中实现的。</p>
<p>再例如这一个定义</p>
<p>这个扩展点中定义了三个菜单项，以及各个菜单项的名字、标签和实现的类名。这里的Codon就对应于系统中的MenuCodon对象。</p>
<p><strong>5、Command 命令</strong><br>    正如前文所述，Codon描述了一个功能模块，而每个功能模块都是一个 ICommand 的实现。最基本的 Command 是  AbstractCommand，根据Codon的不同对应了不同的 Command。例如 MenuItemCodon 对应 MenuItemCommand 等等。</p>
<p><strong>6、Service 服务</strong><br>    插件系统中，有一些功能是整个系统都要使用的，例如文件访问、资源、消息等等。这些功能都作为插件系统的一个基本功能为整个系统提供服务，我们就叫“服务”好了。为了便于访问，这些服务都统一通过 ServiceManager 来管理。其实服务也是一种类型的插件，它们的扩展点路径在目录树中的 &#x2F;Workspace&#x2F;Services 中。</p>
<p>    理解了这几个基本的概念之后，就可以看看 SharpDevelop 的代码了。从 src&#x2F;main&#x2F;startup.cs 看起吧，之后是addin.cs、addinTree.cs 等等。</p>
<p>   写了两个小时了，休息一下。且听下回分解。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>SharpDevelop</tag>
      </tags>
  </entry>
  <entry>
    <title>SharpDevelop源码分析 (三、插件系统)</title>
    <url>/2015/09/05/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/SharpDevelop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20(%E4%B8%89%E3%80%81%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F)/</url>
    <content><![CDATA[<p>**<br>三、插件系统**</p>
<p>   上回书说到SharpDevelop入口Main函数的结构，ServiceManager.Service在InitializeServicesSubsystem方法中首次调用了AddInTreeSingleton的AddInTree实例，AddInTree在这里进行了初始化。本回进入AddInTree着重讲述SharpDevelop的插件系统。在叙述的时候为了方便起见，对于“插件”和插件具体的“功能模块”这两个词不会特别的区分，各位看官可以从上下文分辨具体的含义（而事实上，SharpDevelop中的“插件”是指.addin配置文件，每一个“插件”都可能会包含多个“功能模块”）。</p>
<p><strong>1、插件的配置</strong><br>   既然说到插件系统，那么我们先来看一看SharpDevelop插件系统的组织形式。<br>   很多时候，同一个事物从不同的角度来看会得出不一样的结论，SharpDevelop的插件系统也是如此。在看SharpDevelop的代码以前，按照我对插件的理解，我认为所谓的“插件”就是代表一个功能模块，插件的配置就是描述该插件并指定如何把这个插件挂到系统中。SharpDevelop中有插件树的思想，也就是每一个插件在系统中都有一个扩展点的路径。那么按照我最初对插件的理解，编写插件需要做的就是：<br>   A、根据插件接口编写功能模块实现一个Command类<br>   B、编写一个配置文件，指定Command类的扩展点(Extension)路径，挂到插件树中</p>
<p>   之后按照这样的理解，我编写了一个察看插件树的插件AddinTreeView，打算挂到SharpDevelop中去。根据SharpDevelop对插件的定义，我把具体插件的AddinTreeViewCommand实现了之后，编写了一个配置文件AddinTreeView.addin如下：</p>
<p>   在配置文件中，Runtime节指定了插件功能模块所在的库文件Addins.dll的具体路径，在Extension节中指定了扩展点路径&#x2F;SharpDevelop&#x2F;Workbench&#x2F;MainMenu&#x2F;Tools（我是打算把它挂到主菜单的工具菜单下），然后在Extension内指定了它的Codon为 MenuItem以及具体的ID、标签、Command类名。这样做，SharpDevelop运行的很不错，我的插件出现在了Tools菜单下。之后，我又编写了一个SharpDevelop的资源管理器（ResourceEditor）的插件类ResourceEditor.dll并把它挂到Tool菜单下。同样的，我也写了一个ResourceEditor.addin文件来对应。系统工作的很正常。</p>
<p>   如果我们对于每一个插件都编写这样的一个配置文件，那么插件的库文件(.dll)、插件配置文件(.addin)是一一对应的。不过这样就带来了一个小小的问题，在这样的一个以插件为基础的系统中，每一个菜单、工具栏按钮、窗体、面板都是一个插件，那么我们需要为每一个插件编写配置文件，这样就会有很多个配置文件（似乎有点太多了，不是很好管理）。SharpDevelop也想到了这个问题，于是它允许我们把多个插件的配置合并在一个插件的配置文件中。因此，我把我的两个插件库文件合并到一个Addins工程内生成了Addins.dll，又重新编写了我的插件配置文件MyAddins.addin如下：  </p>
<p>   这样，我把两个插件的功能模块使用一个插件配置文件来进行配置。同样的，我也可以把几十个功能模块合并到一个插件配置文件中。SharpDevelop把这个插件配置文件称为“Addin(插件)”，而把具体的功能模块封装为Codon，使用Command类来包装具体的功能。SharpDevelop本身的核心配置SharpDevelopCore.addin里面就包含了所有的基本菜单、工具栏、PAD的插件配置。<br>我们回过头来看一下，现在我们有了两颗树。首先，插件树本身是一个树形的结构，这个树是根据系统所有插件的各个Codon的扩展点路径构造的，表示了各个Codon在插件树中的位置，各位看官可以通过我写的这个小小的AddinTreeView来看看SharpDevelop中实际的结构。其次，插件的配置文件本身也具有了一个树形的结构，这个树结构的根节点是系统的各个插件配置文件，其下是根据这个配置文件中的Extension节点的来构成的，描述了每个Extension节点下具有的Codon。我们可以通过SharpDevelop的Tools菜单下的AddinScout来看看这个树的结构。<br>我为了试验，把SharpDevelop的插件精简了很多，构成了一个简单的小插件系统。下面是这个精简系统的两个树的截图。各位看官可以通过这两副图理解一下插件树和插件配置文件的关系（只是看同样问题的两个角度，一个是Codon的ExtensionPath，一个是配置文件的内容）。<br><img src="/SharpDevelop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20(%E4%B8%89%E3%80%81%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F)/AddinTreeView.JPG"><br><img src="/SharpDevelop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20(%E4%B8%89%E3%80%81%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F)/AddinScout2.JPG"><br>总结一下SharpDevelop插件的配置文件格式。首先是 <AddIn>节点，需要指定AddIn的名称、作者之类的属性。其次，在AddIn节点下的<Runtime>节点内，使用&lt;Import …&gt;来指定本插件配置中Codon所在的库文件。如果分布在多个库文件中，可以一一指明。然后，编写具体功能模块的配置。每个功能模块的配置都以扩展点<Extension>开始，指定了路径(Path)属性之后，在这个节点内配置在这个扩展点下具体的Codon。每个Codon根据具体不同的实现有不同的属性。各位看官可以研究一下SharpDevelop的核心配置文件SharpDevelopCore.addin的写法，相信很容易理解的。</p>
<p><strong>2、插件系统的核心AddIn和AddInTree</strong><br>   前文讲到，在SharpDevelop的Main函数中，ServiceManager.Service在InitializeServicesSubsystem方法中首次调用了AddInTreeSingleton的AddInTree实例，AddinTree在这个时候进行了初始化。现在我们就来看看AddInTreeSingleton.AddInTree到底做了些什么事情，它定义在&#x2F;src&#x2F;Main&#x2F;Core&#x2F;AddIns&#x2F;AddInTreeSingleton.cs文件中。</p>
<p>   AddInTreeSingleton是插件树的一个Singleton（具体的可以去看《设计模式》了），AddInTreeSingleton.AddInTree是一个属性，返回一个IAddinTree接口。这里我注意到一点，AddInTreeSingleton是从DefaultAddInTree继承下来的。既然它是一个单件模式，包含的方法全部都是静态方法，没有实例化的必要，而且外部是通过AddInTree属性来访问插件树，为什么要从DefaultAddInTree继承呢？这好像没有什么必要。这也许是重构过程中被遗漏的一个小问题吧。</p>
<p>   我们先来看看IAddinTree接口的内容，它定义了这样的几个内容：<br>      A、属性ConditionFactory ConditionFactory　返回一个构造条件的工厂类，这里的条件是指插件配置中的条件，我们以后再详细说明。<br>      B、属性CodonFactory CodonFactory　返回一个构造Codon的工厂类。<br>      C、属性AddInCollection AddIns 返回插件树的根节点Addin（插件）集合。<br>      D、方法IAddInTreeNode GetTreeNode(string path) 根据扩展点路径（path）返回对应的树节点<br>      E、方法void InsertAddIn(AddIn addIn) 根据AddIn中的扩展点路径添加一个插件到树中<br>      F、方法void RemoveAddIn(AddIn addIn) 删除一个插件<br>      G、方法Assembly LoadAssembly(string assemblyFile)  读入插件中Runtime节的Import指定的Assembly，并构造相应的CodonFactory和CodonFactory类。</p>
<p>   AddInTreeSingleton在首次调用AddInTree的时候会调用CreateAddInTree方法来进行初始化。CreateAddInTree方法是这样实现的：  </p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> addInTree  =  new  DefaultAddInTree();<br><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"></p>
<p>      初始化插件树为DefaultAddInTree的实例，这里我感受到了一点重构的痕迹。首先，DefaultAddInTree从名称上看是默认的插件树（既然是默认，那么换句话说还可以有其他的插件树）。但是SharpDevelop并没有给外部提供使用自定义插件树的接口（除非我们修改这里的代码），也就是说这个名称并不像它本身所暗示的那样。其次，按照Singleton通常的写法以及前面提到AddInTreeSingleton是从DefaultAddInTree继承下来的疑问，我猜想DefaultAddinTree的内容本来是在AddinTreeSingleton里面实现的，后来也许为了代码的条理性，把实现IAddinTree内容的代码剥离了出去，形成了DefaultAddinTree类。至于继承DefaultAddInTree的问题，也许这里本来是一个AddInTree的基类。这是题外话，也未加证实，各位看官可以不必放在心上（有兴趣的可以去找找以前SharpDevelop的老版本的代码来看看）。<br>这里有两个察看代码的线路，一个是DefaultAddInTree的构造函数的代码，在这个构造函数中构造了Codon和Condtion的工厂类。另外一个是CreateAddInTree后面的代码，搜索插件文件，并根据插件文件进行AddIn的构造。各位看官可以选择走分支线路，也可以选择先看主线（不过这样你会漏掉不少内容）。</p>
<p><strong>2.1 支线 （DefaultAddInTree的构造函数）</strong><br>   我们把CreateAddInTree的代码中断一下压栈先，跳到DefaultAddInTree的构造函数中去看一看。DefaultAddInTree定义在&#x2F;src&#x2F;Main&#x2F;Core&#x2F;AddIns&#x2F;DefaultAddInTree.cs文件中。在DefaultAddInTree的构造函数中，注意到它具有一个修饰符internal，也就是说这个类只允许Core这个程序集中的类对DefaultAddInTree进行实例化（真狠啊）。构造函数中的代码只有一句：</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif">  LoadCodonsAndConditions(Assembly.GetExecutingAssembly());</p>
<p>   虽然只有一行代码，不过这里所包含的内容却很精巧，是全局的关键，要讲清楚我可有得写了。首先，通过全局的Assembly对象取得入口程序的Assembly，传入LoadCodonsAndConditions方法中。在该方法中，枚举传入的Assembly中的所有数据类型。如果不是抽象的，并且是AbstractCodon的子类，并且具有对应的CodonNameAttribute属性信息，那么就根据这个类的名称建立一个对应的CodonBuilder并它加入CodonFactory中（之后对Condition也进行了同样的操作，我们专注来看Codon部分，Condition跟Codon基本上是一样的）。<br>   这里的CodonFactory类和CodonBuilder类构成了SharpDevelop插件系统灵活的基础，各位看官可要看仔细了。<br>   我们以实例来演示，以前文我编写的AddinTreeViewCommand为例。在入口的Assembly中会搜索到MenuItemCodon，它是AbstractCodon的一个子类、包装MenuItem(菜单项)Command（命令）的Codon。符合条件，执行</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> codonFactory.AddCodonBuilder( new  CodonBuilder(type.FullName, assembly));</p>
<p>   首先根据类名MenuItemCodon和assembly 构造CodonBuilder。CodonBuilder定义在&#x2F;src&#x2F;Main&#x2F;Core&#x2F;AddIns&#x2F;Codons&#x2F;CodonBuilder.cs文件中。在CodonBuilder的构造函数中根据MenuItemCodon的CodonNameAttribute属性信息取得该Codon的名称MenuItem。CodonNameAttribute描述了Codon的名称，这个MenuItem也就是在.addin配置文件中对应的<MenuItem>标签，后文会看到它的重要用途。在CodonBuilder中除了包含了该Codon的ClassName（类名）和CodonName属性之外，就只有一个方法BuildCodon了。</p>
<p>   很明显，BuildCodon根据构造函数中传入的assembly和类型的ClassName，建立了具体的Codon的实例，并和具体的AddIn关联起来。<br>   之后，codonFactory调用AddCodonBuilder方法把这个CodonBuilder加入它的Builder集合中。我们向上一层，看看codonFactory如何使用这个CodonBuilder。<br>   在文件&#x2F;src&#x2F;Main&#x2F;Core&#x2F;AddIns&#x2F;Codons&#x2F;CodonFactory.cs中，codonFactory只有两个方法。AddCodonBuilder方法把CodonBuilder加入一个以CodonName为索引的Hashtable中。另外一个方法很重要：</p>
<p>   在这里，addin是这个配置文件的描述（也就是插件），而这个XmlNode类型的CodonNode是什么东西？<br>   还记得配置文件中在<Extension>标签下的<Class>、<MenuItem>、<Pad>之类的标签吗？我曾经说过，这些就是Codon的描述，现在我们来看看到底是不是如此。以前文的AddinTreeView配置为例：</p>
<p>   SharpDevelop在读入插件配置文件的<Extension>标签之后，就把它的ChildNodes（XmlElement的属性）依次传入CodonFactory的CreateCodon方法中。这里它的ChildNodes[0]就是这里的<MenuItem id = ..... />节点，也就是codonNode参数了。这个XML节点的Name是MenuItem，因此CreateCodon的第一行</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> CodonBuilder builder  =  codonHashtable[codonNode.Name]  as  CodonBuilder;<br><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"></p>
<p>   根据节点的名称(MenuItem)查找对应的CodonBuilder。记得前面的CodonBuilder根据CodonNameAttribute取得了MenuItemCodon的CodonName吗？就是这个MenuItem了。CodonFactory找到了对应的MenuItemCodon的CodonBuilder（这个是在DefaultAddInTree的构造函数中调用LoadCodonsAndConditions方法建立并加入CodonFactory中的，还记得么？），之后使用这个CodonBuilder建立了对应的Codon，并把它返回给调用者。<br>   就这样，通过CodonNameAttribute，SharpDevelop把addin配置文件的<MenuItem>节点、CodonBulder、MenuItemCodon三部分串起来形成了一个构造Codon的路线。</p>
<p>   我们回过头来整理一下思路，SharpDevelop进行了下面这样几步工作：<br>      A、建立各个Codon，使用CodonNameAttribute指明它在配置节点中的名称<br>      B、DefaultAddInTree的构造函数中调用LoadCodonsAndConditions方法，搜索所有的Codon，根据Codon的CodonNameAttribute建立对应的CodonBuilder加入CodonFactory中。<br>      C、读取配置文件，在<Extension>标签下遍历所有的节点，根据节点的Name使用CodonFactory建立对应的Codon。<br>   其中，Codon的CodonNameAttribute、CodonBuilder的CodonName以及<Extension>标签下XML节点的Name是一致的。对于Condition（条件）的处理也是一样。<br>   抱歉，我上网不是很方便也不太会在Blog里面贴图（都是为了省事的借口^o^），否则也许更好理解这里的脉络关系。</p>
<p>   好了，看到这里，我们看看SharpDevelop中插件的灵活性是如何体现的。首先，addin配置中的Extension节点下的Codon节点名称并没有在代码中和具体的Codon类联系起来，而是通过CodonNameAttribute跟Codon联系起来。这样做的好处是，SharpDevelop的Codon和XML的标签一样具有无限的扩展能力。假设我们要自己定义一个Codon类SplashFormCodon作用是指定某个窗体作为系统启动时的封面窗体。要做的工作很简单：首先，在SplashFormCodon中使用CodonNameAttribute指定CodonName为Splash，并且在SplashFormCodon中定义自己需要的属性。然后，在addin配置文件使用<Splash>标签这样写：</p>
<p>   是不是很简单？另外，对于Condition（条件）的处理也是一样，也就是说我们也可以使用类似的方法灵活的加入自己定义的条件。</p>
<p>   这里我有个小小的疑问：不知道我对于设计模式的理解是不是有点小问题，我感觉CodonBuilder类的实现似乎并不如它的类名所暗示的是《设计模式》中的Builder模式，反而似乎应该是Proxy模式，因此我觉得改叫做CodonProxy是不是比较容易理解？各位看官觉得呢？<br>   另外，虽然稍微麻烦了一小点，不过我觉得配置如果这样写会让我们比较容易和代码中具体的类关联起来:</p>
<p><strong>2.2 主线 (AddInTreeSingleton. CreateAddInTree)</strong><br>   啊～我写的有点累了。不过还是让我们继续AddInTreeSingleton中CreateAddInTree的代码。<br>   在建立了DefaultAddInTree的实例后，AddInTreeSingleton在插件目录中搜索后缀为.addin的文件。还记得在SharpDevelop的Main函数中曾经调用过AddInTreeSingleton. SetAddInDirectories吗，就是搜索这个传入的目录。看来SharpDevelop把在插件目录中所有后缀为.addin的文件都看做是插件了。</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> FileUtilityService fileUtilityService  =  (FileUtilityService)ServiceManager.Services.GetService( typeof (FileUtilityService));</p>
<p>   先学习一下如何从ServiceManager取得所需要的服务，在SharpDevelop中要取得一个服务全部都是通过这种方式取得的。调用GetService传入要获取的服务类的类型作为参数，返回一个IService接口，之后转换成需要的服务。</p>
<p>   搜索插件目录找到一个addin文件后，调用InsertAddIns把这个addin文件中的配置加入到目录树中。</p>
<p>   InsertAddIns建立一个对应的AddIn（插件），调用AddInTree的InsertAddIn方法把它挂到插件树中。在这里有一个小小的处理，由于是通过Assembly查找和插件配置中Codon的标签对应的类，而Codon类所在的Assembly是通过Import标签导入的。因此在查找配置中某个Codon标签对应的Codon类的时候，也许Codon类所在的文件是在其他的addin文件中Import的。这个时候在前面支线中讲到CodonFactory中查找CodonBuilder会失败，因此必须等到Codon类所在的addin处理之后才能正确的找到CodonBuilder。这是一个依赖关系的处理问题。<br>   SharpDevelop在这里处理的比较简单，调用InsertAddIns方法的时候，凡是出现CodonNotFoundException的时候，都加入一个retryList列表中返回。在CreateAddinTree处理完所有的addin文件之后，再重新循环尝试处理retryList列表中的addin。如果某次循环中再也无法成功的加入retryList中的addin，那么才提示失败错误。</p>
<p>   我们回头来看看对AddIn的处理。</p>
<p>**2.2.1  addIn.Initialize （AddIn的初始化）<br>**   建立了AddIn的实例后，调用Initialize 方法进行初始化。AddIn是对一个.addin文件的封装，定义在&#x2F;src&#x2F;Main&#x2F;Core&#x2F;AddIns&#x2F;AddIn.cs文件中。其中包含了.addin文件的根元素<AddIn>的描述，包括名称、作者、版权之类的属性。在<AddIn>节点下包括两种节点：一个是<Runtime>节点，包含了<Import>指定要导入的Assembly；另外一个是<Extension>节点，指定Codon的扩展点。在AddIn.Initialize方法中，使用XmlDocument对象来读取对应的addin文件。首先读取name、author 、copyright之类的基本属性，之后遍历所有的ChildNodes（子节点）。</p>
<p>   如果子节点是Runtime节点，则调用AddRuntimeLibraries方法。</p>
<p>   通过AddInTreeSingleton.AddInTree.LoadAssembly方法把Assembly中所有的Codon和Condition的子类加入对应Factory类中（调用了LoadCodonsAndConditions方法，我们在DefaultAddInTree的构造函数中见过了），并且把该文件和对应的Assembly保存到RuntimeLibraries列表中。</p>
<p>   如果子节点是Extension节点，则调用AddExtensions方法。</p>
<p>   根据这个扩展点的XML描述建立Extension对象加入到AddIn的Extensions列表中，并通过AddCodonsToExtension方法把其中包括的Codon加入到建立的Extension对象中。Extension对象是AddIn的一个内嵌类，其中一个重要的属性就是CodonCollection这个列表。AddCodonsToExtension就是把在配置中出现的Codon都加入到这个列表中保存。</p>
<p>   来看看AddCodonsToExtension方法。在代码中我略过了对Condition（条件）的处理的分析和一些无关紧要的部分，我们把注意力集中在插件的处理。首先是一个 foreach (object o in el.ChildNodes) 遍历<Extension>下所有的子节点，对于每个子节点的处理如下：</p>
<p>   我们看到了一个期待已久的调用</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> AddInTreeSingleton.AddInTree.CodonFactory.CreateCodon( this , curEl);<br><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"></p>
<p>   经过了上文支线2.1代码中的铺垫，SharpDevelop使用建立好的CodonFactory，调用CreateCodon方法根据<Extension>下的节点构造出实际的Codon对象，一切尽在不言中了吧。<br>   e.CodonCollection.Add(codon);把构造出来的Codon对象加入到Extension对象的CodonCollection列表中。<br>   之后，在形如菜单的这种允许无限嵌套的结构中，SharpDevelop对此进行了处理。如果该节点有嵌套的子节点，那么构造一个新的Extension对象，递归调用AddCodonsToExtension添加到这个Extension对象中。注意一点，这个新构造的Extension对象并不是分开保存在Codon中，而是直接保存在AddIn的扩展点列表中。这样是为了方便查找，毕竟保存在具体的Codon中也没有什么用处，我们可以通过Extension对象的Path属性得知它在插件树中的具体位置。</p>
<p><strong>2.2.2 addInTree.InsertAddIn（把AddIn添加到AddInTree中）</strong><br>   对AddIn的构造完成之后，需要把AddIn的实例对象添加AddInTree中管理。</p>
<p>   在DefaultAddInTree中，保存了两课树。一个是根据插件文件的结构形成的树，每个插件文件作为根节点，往下依次是Extension、Codon节点。addIns.Add(addIn);就是把插件加入到这个树结构中。另外一个树是根据Extension的Path＋Codon的ID作为路径构造出来的，每一个树节点是一个AddInTreeNode类，包含了在这个路径上的Codon对象。嵌套在这个节点中的Codon在通过它子节点来访问。在DefaultAddInTree中可以通过GetTreeNode来指定一个路径获得插件树上某一个节点的内容。<br>   AddExtensions方法很简单，遍历Extension中所有的Codon，把Extension的Path＋Codon的ID作为路径，创建这个路径上的所有节点，并把Codon连接到这个AddInTreeNode上。由于Codon的ID是全局唯一的，因此每一个AddInTreeNode都具有一个唯一的Codon。</p>
<p><strong>3、最后一公里（Codon和Command的关联）</strong><br>   在插件树的讨论中，我们依次把AddIn－Extension－Codon的配置和他们对应的类关联了起来。不过我们一直没有涉及到Codon和它包含的Command是如何关联的。由于这个关联调用是在插件树外部的（记得在讲述SharpDevelop程序入口Main函数中，提到ServiceManager的方法InitializeServicesSubsystem么？AddServices((IService[])AddInTreeSingleton.AddInTree.GetTreeNode(servicesPath).BuildChildItems(this).ToArray(typeof(IService))); 这里就调用了BuildChildItems），因此单独在这里说明。实现这个关联的就是AddInTreeNode的BuildChildItems和BuildChildItem方法以及Codon的BuildItem方法。<br>   BuildChildItem方法和BuildChildItems方法仅有一字之差，BuildChildItem是根据指定的Codon的ID在所属AddInTreeNode的子节点下查找包含该Codon的节点并调用该Codon的BuildItem方法；而BuildChildItems则是首先遍历所属AddInTreeNode的所有子节点，依次调用各个子节点的Codon的BuildItem方法，之后再调用所属AddInTreeNode的Codon的BuildItem方法（也就是一个树的后根遍历）。<br>   重点在Codon的BuildItem方法。在AbstractCodon中，这个方法是一个抽象方法，SharpDevelop的代码注释中并没有明确说清楚这个方法是做什么用的。但是我们可以找一个Codon的实例来看看。例如ClassCodon的BuildItem：</p>
<p>   调用AddIn的CreateObject，传入Codon的Class（类名）作为参数，建立这个类的实例。例如这个配置</p>
<p>   而Codon的中的Class（类名）属性就是ICSharpCode.SharpDevelop.Commands.InitializeWorkbenchCommand。也就是说，Codon的Class指的是实现具体功能模块的Command类的名称。在读取addin配置中的<Runtime>节的时候，AddInTree把Assembly保存到了RuntimeLibraries中，因此CreateObject方法可以通过它们来查找并建立类的实例。<br>   各位看官可以再看看MenuItemCodon的实现，同样是建立了对应的SdMenuCommand。<br>   这样，SharpDevelop本身的插件结构可以和具体的对象建立分离开来，实际的对象建立是在各个Codon的BuildItem中进行的。因此我们可以发现在SharpDevelop整个是基础插件系统部分没有任何GUI的操作，实现了很好的解耦效果。</p>
<p><strong>4、问题</strong><br>   好了，本文对插件树构造的分析到此告一段落。我提一个小小的问题给各位看官思考：在构造插件树的过程中，如果Codon的某一个节点路径不存在（也就是说它的依赖项不存在），那么SharpDevelop会提示失败并且终止程序运行。可是实际上可能因为部署的原因或者权限的原因，某些Codon的失败并不会影响整个系统的使用，例如试用版本仅仅提供部分插件给客户使用，而并不希望系统因此而终止运行。那么就存在一个Codon依赖项失败而允许继续运行的问题。另外，我希望各个插件不在系统启动的时候全部调入系统，而是在运行期实际调用的时候才调入系统，也就是一个缓存机制，这样就可以实现系统插件的热部署。如何修改SharpDevelop的插件系统来实现这两个功能呢？</p>
<p>   下一回书，应某位网友的要求，分析一下SharpDevelop中的服务。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>SharpDevelop</tag>
      </tags>
  </entry>
  <entry>
    <title>SharpDevelop源码分析 (二、主程序+隐藏的初始化)</title>
    <url>/2015/08/29/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/SharpDevelop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20(%E4%BA%8C%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F+%E9%9A%90%E8%97%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96)/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/passos">石榴刺猬</a> 2004-10-07 20:10:00</p>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。</p>
<p><strong>二、主程序</strong>  </p>
<p>    在大学课程里面，我对于模拟电路总是搞不清楚，直到现在也是这样。我总觉得电路图很奇怪，总会问“这部分电路是做什么用的”、“为什么会有这样的效果”。在我的脑海里面，每部分的电路都应该有一定的用处，可是我总是看不明白。我妈妈说，我的思路被软件所固化的太久了，看电路图不应该总是一个个模块的看，正确的方法应该是从电源的一极顺着电路看，一直看到电源的另一极。我现在仍然不懂看电路图，可是以我看代码的经验来说，我觉得分析源代码按照这样的思路来看会比较容易把脉络理清楚。<br>     在SharpDevelop的代码中，由于很多的接口和插件的原因，很多代码在看到某个地方会突然失去函数&#x2F;方法调用的线索。例如看某个函数的实现的时候会跳到一个接口里面去，那是因为这部分功能在运行期才会给一个实现了这个接口的对象来进行具体的执行。从这个角度来说，设计模式也给我们研究代码稍微带来了一点小小的难度。在看Linux下源代码的时候也经常遇到这种问题，在这个时候寻找代码线索比较好的方法是用一个文本搜索工具来搜索相关的关键字。在Linux下我经常会用grep，Windows下面类似UltraEdit的“批量文件查找”功能会很好用（或者“Search And Replace”之类的工具）。这个是我读代码的一点小小的经验，如果你知道有更好的方法，请告诉我让我也学习一下 ? 。<br>     我不想大段大段的贴代码出来占地方（空间、带宽，还有各位看官的注意力），在需要的地方我会贴上主要的代码，因此最好能够找代码来对应着看。把代码包解压缩，我把它解到了“F:&#x2F;SharpDevelop”（如果没有说明，下文都是以此为代码的根目录了）。由于SharpDevelop本身对于察看代码不是很方便，没有“转到定义”之类的功能，因此我建议你把它的代码转成VS的工程来看。不过很可惜，SharpDevelop的工程导出功能现在有问题，如果导出&#x2F;src&#x2F;SharpDevelop.cmbx 这个总的复合工程的话会失败（我记得RC1版本是可以成功的，不知道为什么后来的版本反而会出问题），所以只能一个一个工程的导出。<br>     好了，让我们来看SharpDevelop的代码吧。<br><strong>1、起点</strong><br>    在主程序的起点在&#x2F;src&#x2F;Main&#x2F;StartUp&#x2F;SharpDevelopMain.cs，找到Main函数这就是整个程序的起点了。开始的部分是显示封面窗体并加上命令行控制，其中SplashScreenForm 定义在&#x2F;src&#x2F;Main&#x2F;Base&#x2F;Gui&#x2F;Dialogs&#x2F;SplashScreen.cs文件中，这部分我就不多说了。之后是</p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> Application.ThreadException  +&#x3D;  new  ThreadExceptionEventHandler(ShowErrorBox);<br><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"></p>
<p>    SharpDevelop为了有效的进行错误报告，因此自己进行了异常的控制。系统出现异常的时候，SharpDevelop会拦截下来弹出它自己的异常提示报告对话框。这个代码就是在这一行实现的。其中 ShowErrorBox 这个方法就在类SharpDevelopMain中，ExceptionBox 定义在&#x2F;src&#x2F;Main&#x2F;StartUp&#x2F;Dialogs&#x2F;ExceptionBox.cs中。如果需要进行自己的异常控制，可以学习一下这里的技巧。</p>
<p><strong>2、充满玄机的初始化</strong></p>
<p><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif"> string  [] addInDirs  =  ICSharpCode.SharpDevelop.AddInSettingsHandler.GetAddInDirectories(  out  ignoreDefaultPath );<br><img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif">AddInTreeSingleton.SetAddInDirectories(addInDirs, ignoreDefaultPath);</p>
<p>    通过AddInSettingsHandler取得插件的目录，并告知AddInTreeSingleton。AddInSettingsHandler定义在&#x2F;src&#x2F;Main&#x2F;StartUp&#x2F;Dialogs&#x2F;AddInTreeSettingsHandler.cs中，它通过读取系统配置（App.config）文件中的AddInDirectory节点的Path属性来确定插件的目录位置，或者你也可以通过自己定义的AddInDirectories节来指定插件目录。如果你没有做这些配置，默认的目录在SharpDevelop运行目录的..&#x2F;Addins目录下。</p>
<p>    通过ServiceManager(服务管理器)加入三个系统默认的服务，消息服务、资源服务、图标服务。这三个服务中，消息服务是显示各种信息提示，另外两个是属于系统的资源，SharpDevelop通过服务来进行统一调用和管理。<br>ServiceManager.Services.InitializeServicesSubsystem(“&#x2F;Workspace&#x2F;Services”);</p>
<p>    初始化其他的服务。SharpDevelop把服务定义在插件树的&#x2F;Workspace&#x2F;Services这个路径中，凡是在这个路径下的插件都被认为是服务，因此如果你自己定义了一个服务的话，也需要挂到这个路径下（这里就是系统服务的扩展点了）。</p>
<p>    <strong>注意！</strong>这一步中，在我们的眼皮子底下悄悄的进行了一个重要的初始化工作。各位看官请看，ServiceManager 定义在&#x2F;src&#x2F;Main&#x2F;Core&#x2F;Services&#x2F; ServiceManager.cs文件中，察看它的InitializeServicesSubsystem方法，我们发现这样一行</p>
<p>AddServices((IService[]) <strong>AddInTreeSingleton.AddInTree</strong>.GetTreeNode(servicesPath).BuildChildItems(this).ToArray(typeof(IService)));</p>
<p>    在这里，AddInTreeSingleton首次调用了AddInTree（插件树）的实例。按照Singleton模式，只有在首次调用的时候才会初始化实例，这里也是同样如此。整个系统的AddInTree是在这一步中进行了初始化工作，稍候我们将详细介绍AddInTree如何进行初始化工作，先顺便看看服务的初始化。在ServiceManager的InitializeServicesSubsystem方法中，通过AddInTree检索服务插件路径下的所有配置，并通过它来读取、建立具体的对象，然后加入到服务列表中。之后通过一个循环，逐个的调用各个服务的InitializeService方法初始化服务。</p>
<p>    AddInTree的初始化工作容我们稍候再看，先把主体的代码看完。  </p>
<p>commands &#x3D; AddInTreeSingleton.AddInTree.GetTreeNode(“&#x2F;Workspace&#x2F;Autostart”).BuildChildItems(null);<br>for (int i &#x3D; 0; i &lt; commands.Count - 1; ++i)<br>{<br> ((ICommand)commands[i]).Run();<br>}</p>
<p>    &#x2F;Workspace&#x2F;Autostart是系统自动运行命令的扩展点路径，定义在这个路径下的插件会在系统启动的时候自动运行。在这里，通过插件树初始化建立处于这个路径下的Command（命令），并逐一执行。BuildChildItems方法的功能是建立这个扩展点下的Command列表，我会在介绍AddTree的时候具体说明它的实现。</p>
<p>     主程序代码的最后，初始化完毕、关闭封面窗体，然后执行命令列表中最后一个命令（也就是系统的主界面）。在主界面退出的时候，系统卸载所有的服务。</p>
<p>    在这部分代码中，我们知道了两个系统指定的扩展点路径 &#x2F;Workspace&#x2F;Services 和 &#x2F;Workspace&#x2F;Autostart ，我们实现服务和指定系统自动运行命令的时候就可以挂到这两个扩展点路径下了。<br>     托反射的福，ServiceManager.Services可以通过类型（接口）来查找具体的实例，也就是GetServices方法。但是ServiceManager的具体实现我们可以容后再看，这里已经不是最紧要的部分了。<br>     接下来，我们来看看整个插件系统的核心－AddinTree的代码，看看它是如何通过插件配置进行初始化并建立起整个系统的插件树骨干。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>SharpDevelop</tag>
      </tags>
  </entry>
  <entry>
    <title>Vsiual Studio自动生成版本号的一种方法</title>
    <url>/2017/12/30/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/Vsiual%20Studio%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1、安装nuget包MSBuildTasks</p>
<p>2、编辑项目的csproj文件，找到被注释掉的target的beforebuild，去掉注释，添加如下代码。代码如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;BeforeBuild&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Version</span> <span class="attr">VersionFile</span>=<span class="string">&quot;Propertiesversion.txt&quot;</span> <span class="attr">Major</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Minor</span>=<span class="string">&quot;0&quot;</span> <span class="attr">BuildType</span>=<span class="string">&quot;Automatic&quot;</span> <span class="attr">StartDate</span>=<span class="string">&quot;09/01/2017&quot;</span> <span class="attr">RevisionType</span>=<span class="string">&quot;BuildIncrement&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Output</span> <span class="attr">TaskParameter</span>=<span class="string">&quot;Major&quot;</span> <span class="attr">PropertyName</span>=<span class="string">&quot;Major&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Output</span> <span class="attr">TaskParameter</span>=<span class="string">&quot;Minor&quot;</span> <span class="attr">PropertyName</span>=<span class="string">&quot;Minor&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Output</span> <span class="attr">TaskParameter</span>=<span class="string">&quot;Build&quot;</span> <span class="attr">PropertyName</span>=<span class="string">&quot;Build&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Output</span> <span class="attr">TaskParameter</span>=<span class="string">&quot;Revision&quot;</span> <span class="attr">PropertyName</span>=<span class="string">&quot;Revision&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AssemblyInfo</span> <span class="attr">CodeLanguage</span>=<span class="string">&quot;CS&quot;</span> <span class="attr">OutputFile</span>=<span class="string">&quot;Properties\FileVersionInfo.cs&quot;</span> <span class="attr">AssemblyFileVersion</span>=<span class="string">&quot;$(Major).$(Minor).$(Build).$(Revision)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Target</span>&gt;</span>     </span><br></pre></td></tr></table></figure>

<p>3、编译项目一次就会在项目文件夹下生成 Propertiesversion.txt</p>
<p>4、在AssemblyInfo.cs文件中包含了AssemblyVersion和AssemblyFileVersion，这里把AssemblyFileVersion单独放到了FileVersionInfo.cs中，编译时会自动生成FileVersionInfo.cs文件，其内容为AssemblyFileVersion，把该文件包含到项目中即可。这里并没有让程序自动生成AssemblyVersion。</p>
<p>这种方式生成版本号会在vs编译时更新版本号。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>自动生成版本号</tag>
        <tag>Visual</tag>
        <tag>Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF</title>
    <url>/2022/07/27/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/maizi314/article/details/103979437">https://blog.csdn.net/maizi314/article/details/103979437</a><br><a href="https://blog.csdn.net/wushang923/article/details/9226529">https://blog.csdn.net/wushang923/article/details/9226529</a><br><a href="https://www.cnblogs.com/lonelyxmas/p/7979743.html">https://www.cnblogs.com/lonelyxmas/p/7979743.html</a><br><a href="https://blog.csdn.net/yangyy9611/article/details/17464133">https://blog.csdn.net/yangyy9611/article/details/17464133</a><br><a href="https://lindexi.oschina.io/lindexi/post/WPF-%E4%BD%BF%E7%94%A8%E5%B0%81%E8%A3%85%E7%9A%84-SharpDx-%E6%8E%A7%E4%BB%B6.html">https://lindexi.oschina.io/lindexi/post/WPF-%E4%BD%BF%E7%94%A8%E5%B0%81%E8%A3%85%E7%9A%84-SharpDx-%E6%8E%A7%E4%BB%B6.html</a><br><a href="https://blog.csdn.net/weixin_34320159/article/details/86132420">https://blog.csdn.net/weixin_34320159/article/details/86132420</a><br><a href="https://blog.csdn.net/wangsunjun/article/details/8894952">https://blog.csdn.net/wangsunjun/article/details/8894952</a><br><a href="https://www.codeproject.com/Articles/15610/Regex-Validation-in-WPF">https://www.codeproject.com/Articles/15610/Regex-Validation-in-WPF</a><br><a href="https://www.cnblogs.com/mantian/p/3816834.html">https://www.cnblogs.com/mantian/p/3816834.html</a><br><a href="https://cloud.tencent.com/developer/ask/76782/answer/132738">https://cloud.tencent.com/developer/ask/76782/answer/132738</a><br><a href="https://blog.csdn.net/ZZZWWWPPP11199988899/article/details/77620211">https://blog.csdn.net/ZZZWWWPPP11199988899/article/details/77620211</a><br><a href="https://blog.csdn.net/qq_38888555/article/details/82118505">https://blog.csdn.net/qq_38888555/article/details/82118505</a><br><a href="https://blog.csdn.net/lwwl12/article/details/78472235">https://blog.csdn.net/lwwl12/article/details/78472235</a><br><a href="https://blog.walterlv.com/post/win10/2017/10/02/wpf-transparent-blur-in-windows-10.html">https://blog.walterlv.com/post/win10/2017/10/02/wpf-transparent-blur-in-windows-10.html</a><br><a href="http://toto0668.blog.163.com/blog/static/30990252201691441716893/">http://toto0668.blog.163.com/blog/static/30990252201691441716893/</a><br><a href="https://blog.csdn.net/catshitone/article/details/78522931">https://blog.csdn.net/catshitone/article/details/78522931</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
  </entry>
  <entry>
    <title>WPF自定义窗体</title>
    <url>/2018/10/06/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E4%BD%93/</url>
    <content><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>[<a href="https://www.cnblogs.com/dino623/p/CustomWindowStyle.html">WPF]使用WindowChrome自定义Window Style - dino.c - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/choumengqizhigou/p/15739993.html">WPF自定义界面WindowChrome - 丑萌气质狗 - 博客园 (cnblogs.com)</a></p>
<p>[<a href="https://www.cnblogs.com/dino623/p/custom_window_style_using_WindowChrome.html">WPF 自定义控件]﻿使用WindowChrome自定义Window Style - dino.c - 博客园 (cnblogs.com)</a></p>
<p>[<a href="https://www.cnblogs.com/dino623/p/problems_of_WindowChrome.html">WPF 自定义控件]使用WindowChrome的问题 - dino.c - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>WindowChrome</tag>
        <tag>自定义界面</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式ID生成方法生成演变</title>
    <url>/2017/01/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%BC%94%E5%8F%98/</url>
    <content><![CDATA[<p><strong>一、需求缘起</strong></p>
<p>几乎所有的业务系统，都有生成一个记录标识的需求，例如：</p>
<p>（1）消息标识：message-id</p>
<p>（2）订单标识：order-id</p>
<p>（3）帖子标识：tiezi-id</p>
<p>这个记录标识往往就是数据库中的<strong>唯一主键</strong>，数据库上会建立聚集索引（cluster index），即在物理存储上以这个字段排序。</p>
<p>这个记录标识上的查询，往往又有分页或者排序的业务需求，例如：</p>
<p>（1）拉取最新的一页消息：selectmessage-id&#x2F; order by time&#x2F; limit 100</p>
<p>（2）拉取最新的一页订单：selectorder-id&#x2F; order by time&#x2F; limit 100</p>
<p>（3）拉取最新的一页帖子：selecttiezi-id&#x2F; order by time&#x2F; limit 100</p>
<p>所以往往要有一个time字段，并且在time字段上建立普通索引（non-cluster index）。</p>
<p>我们都知道普通索引存储的是实际记录的指针，其访问效率会比聚集索引慢，如果记录标识在生成时能够基本按照时间有序，则可以省去这个time字段的索引查询：</p>
<p>select message-id&#x2F; (order by message-id)&#x2F;limit 100</p>
<p>再次强调，能这么做的前提是，message-id的生成基本是<strong>趋势时间递增的</strong>。</p>
<p>这就引出了记录标识生成（也就是上文提到的三个XXX-id）的两大核心需求：</p>
<p>（1）全局唯一</p>
<p>（2）趋势有序</p>
<p>这也是本文要讨论的核心问题：<strong>如何高效生成趋势有序的全局唯一ID。</strong></p>
<p><strong>二、常见方法、不足与优化</strong></p>
<p><strong>【常见方法一：使用数据库的 auto_increment 来生成全局唯一递增ID】</strong></p>
<p><strong>优点：</strong></p>
<p>（1）简单，使用数据库已有的功能</p>
<p>（2）能够保证唯一性</p>
<p>（3）能够保证递增性</p>
<p>（4）步长固定</p>
<p><strong>缺点：</strong></p>
<p>（1）可用性难以保证：数据库常见架构是一主多从+读写分离，生成自增ID是写请求，主库挂了就玩不转了</p>
<p>（2）扩展性差，性能有上限：因为写入是单点，数据库主库的写性能决定ID的生成性能上限，并且难以扩展</p>
<p><strong>改进方法：</strong></p>
<p>（1）增加主库，避免写入单点</p>
<p>（2）数据水平切分，保证各主库生成的ID不重复</p>
<img src="/2017/01/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%BC%94%E5%8F%98/IMG-20250804110742685.png" class="">  
<p>如上图所述，由1个写库变成3个写库，<strong>每个写库设置不同的auto_increment初始值，以及相同的增长步长</strong>，以保证每个数据库生成的ID是不同的（上图中库0生成0,3,6,9…，库1生成1,4,7,10，库2生成2,5,8,11…）</p>
<p>改进后的架构保证了可用性，但<strong>缺点</strong>是：</p>
<p>（1）丧失了ID生成的“绝对递增性”：先访问库0生成0,3，再访问库1生成1，可能导致在非常短的时间内，ID生成不是绝对递增的（这个问题不大，我们的目标是趋势递增，不是绝对递增）</p>
<p>（2）数据库的写压力依然很大，每次生成ID都要访问数据库</p>
<p>为了解决上述两个问题，引出了第二个常见的方案</p>
<p><strong>【常见方法二：单点批量ID生成服务】</strong></p>
<p>分布式系统之所以难，很重要的原因之一是“没有一个全局时钟，难以保证绝对的时序”，要想保证绝对的时序，还是只能使用单点服务，用本地时钟保证“绝对时序”。数据库写压力大，是因为每次生成ID都访问了数据库，可以使用批量的方式降低数据库写压力。</p>
<img src="/2017/01/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%BC%94%E5%8F%98/IMG-20250804110742685.png" class="">  
<p>如上图所述，数据库使用双master保证可用性，数据库中只存储当前ID的最大值，例如0。ID生成服务假设每次批量拉取6个ID，服务访问数据库，将当前ID的最大值修改为5，这样应用访问ID生成服务索要ID，ID生成服务不需要每次访问数据库，就能依次派发0,1,2,3,4,5这些ID了，当ID发完后，再将ID的最大值修改为11，就能再次派发6,7,8,9,10,11这些ID了，于是数据库的压力就降低到原来的1&#x2F;6了。</p>
<p><strong>优点</strong>：</p>
<p>（1）保证了ID生成的绝对递增有序</p>
<p>（2）大大的降低了数据库的压力，ID生成可以做到每秒生成几万几十万个</p>
<p><strong>缺点</strong>：</p>
<p>（1）服务仍然是单点</p>
<p>（2）如果服务挂了，服务重启起来之后，继续生成ID可能会不连续，中间出现空洞（服务内存是保存着0,1,2,3,4,5，数据库中max-id是5，分配到3时，服务重启了，下次会从6开始分配，4和5就成了空洞，不过这个问题也不大）</p>
<p>（3）虽然每秒可以生成几万几十万个ID，但毕竟还是有性能上限，无法进行水平扩展</p>
<p><strong>改进方法</strong>：</p>
<p>单点服务的常用高可用优化方案是“备用服务”，也叫“影子服务”，所以我们能用以下方法优化上述缺点（1）：</p>
<p>如上图，对外提供的服务是主服务，有一个影子服务时刻处于备用状态，当主服务挂了的时候影子服务顶上。这个切换的过程对调用方是透明的，可以自动完成，常用的技术是vip+keepalived，具体就不在这里展开。</p>
<p> <img src="/2017/01/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%BC%94%E5%8F%98/IMG-20250804110742685.png" class=""></p>
<p><strong>【常见方法三：uuid】</strong></p>
<p>上述方案来生成ID，虽然性能大增，但由于是单点系统，总还是存在性能上限的。同时，上述两种方案，不管是数据库还是服务来生成ID，业务方Application都需要进行一次远程调用，比较耗时。有没有一种本地生成ID的方法，即高性能，又时延低呢？</p>
<p>uuid是一种常见的方案：string ID &#x3D;GenUUID();</p>
<p><strong>优点</strong>：</p>
<p>（1）本地生成ID，不需要进行远程调用，时延低</p>
<p>（2）扩展性好，基本可以认为没有性能上限</p>
<p><strong>缺点</strong>：</p>
<p>（1）无法保证趋势递增</p>
<p>（2）uuid过长，往往用字符串表示，作为主键建立索引查询效率低，常见优化方案为“转化为两个uint64整数存储”或者“折半存储”（折半后不能保证唯一性）</p>
<p><strong>【常见方法四：取当前毫秒数】</strong></p>
<p>uuid是一个本地算法，生成性能高，但无法保证趋势递增，且作为字符串ID检索效率低，有没有一种能保证递增的本地算法呢？</p>
<p>取当前毫秒数是一种常见方案：uint64 ID &#x3D; GenTimeMS();</p>
<p><strong>优点</strong>：</p>
<p>（1）本地生成ID，不需要进行远程调用，时延低</p>
<p>（2）生成的ID趋势递增</p>
<p>（3）生成的ID是整数，建立索引后查询效率高</p>
<p><strong>缺点</strong>：</p>
<p>（1）如果并发量超过1000，会生成重复的ID</p>
<p>我去，这个缺点要了命了，不能保证ID的唯一性。当然，使用微秒可以降低冲突概率，但每秒最多只能生成1000000个ID，再多的话就一定会冲突了，所以使用微秒并不从根本上解决问题。</p>
<p><strong>【常见方法五：类snowflake算法】</strong></p>
<p>snowflake是twitter开源的分布式ID生成算法，其<strong>核心思想</strong>是：一个long型的ID，使用其中41bit作为毫秒数，10bit作为机器编号，12bit作为毫秒内序列号。这个算法单机每秒内理论上最多可以生成1000*(2^12)，也就是400W的ID，完全能满足业务的需求。</p>
<p>借鉴snowflake的思想，结合各公司的业务逻辑和并发量，可以实现自己的分布式ID生成算法。</p>
<p>举例，假设某公司ID生成器服务的需求如下：</p>
<p>（1）单机高峰并发量小于1W，预计未来5年单机高峰并发量小于10W</p>
<p>（2）有2个机房，预计未来5年机房数量小于4个</p>
<p>（3）每个机房机器数小于100台</p>
<p>（4）目前有5个业务线有ID生成需求，预计未来业务线数量小于10个</p>
<p>（5）…</p>
<p>分析过程如下：</p>
<p>（1）高位取从2016年1月1日到现在的毫秒数（假设系统ID生成器服务在这个时间之后上线），假设系统至少运行10年，那至少需要10年*365天*24小时*3600秒*1000毫秒=320*10^9，差不多预留39bit给毫秒数</p>
<p>（2）每秒的单机高峰并发量小于10W，即平均每毫秒的单机高峰并发量小于100，差不多预留7bit给每毫秒内序列号</p>
<p>（3）5年内机房数小于4个，预留2bit给机房标识</p>
<p>（4）每个机房小于100台机器，预留7bit给每个机房内的服务器标识</p>
<p>（5）业务线小于10个，预留4bit给业务线标识</p>
<img src="/2017/01/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%BC%94%E5%8F%98/IMG-20250804110742877.png" class="">  
<p>这样设计的64bit标识，可以保证：</p>
<p>（1）每个业务线、每个机房、每个机器生成的ID都是不同的</p>
<p>（2）同一个机器，每个毫秒内生成的ID都是不同的</p>
<p>（3）同一个机器，同一个毫秒内，以序列号区区分保证生成的ID是不同的</p>
<p>（4）将毫秒数放在最高位，保证生成的ID是趋势递增的</p>
<p><strong>缺点</strong>：</p>
<p>（1）由于“没有一个全局时钟”，每台服务器分配的ID是绝对递增的，但从全局看，生成的ID只是趋势递增的（有些服务器的时间早，有些服务器的时间晚）</p>
<p><strong>最后一个容易忽略的问题</strong>：</p>
<p>生成的ID，例如message-id&#x2F; order-id&#x2F; tiezi-id，在数据量大时往往需要分库分表，这些ID经常作为取模分库分表的依据，为了分库分表后数据均匀，ID生成往往有“取模随机性”的需求，所以我们通常把每秒内的序列号放在ID的最末位，保证生成的ID是随机的。</p>
<p>又如果，我们在跨毫秒时，序列号总是归0，会使得序列号为0的ID比较多，导致生成的ID取模后不均匀。解决方法是，序列号不是每次都归0，而是归一个0到9的随机数，这个地方。</p>
<p>下面附上C#.Net 实现snowflake算法实现</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CommonTools</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SnowFlake</span></span><br><span class="line">    &#123;</span><br><span class="line">             <span class="comment">//机器ID</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> workerId;</span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> twepoch = <span class="number">687888001020L</span>; <span class="comment">//唯一时间，这是一个避免重复的随机量，自行设定不要大于当前时间戳</span></span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> workerIdBits = <span class="number">4</span>; <span class="comment">//机器码字节数。4个字节用来保存机器码</span></span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> maxWorkerId = <span class="number">-1L</span> ^ <span class="number">-1L</span> &lt;&lt; workerIdBits; <span class="comment">//最大机器ID</span></span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> sequenceBits = <span class="number">10</span>; <span class="comment">//计数器字节数，10个字节用来保存计数码</span></span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> workerIdShift = sequenceBits; <span class="comment">//机器码数据左移位数，就是后面计数器占用的位数</span></span><br><span class="line">	    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> timestampLeftShift = sequenceBits + workerIdBits; <span class="comment">//时间戳左移动位数就是机器码和计数器总字节数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> sequenceMask = <span class="number">-1L</span> ^ <span class="number">-1L</span> &lt;&lt; sequenceBits; <span class="comment">//一微秒内可以产生计数，如果达到该值则等到下一微妙在进行生成</span></span><br><span class="line">	    <span class="keyword">private</span> <span class="built_in">long</span> lastTimestamp = <span class="number">-1L</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SnowFlake sigle = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span>  <span class="title">SnowFlake</span>(<span class="params"><span class="built_in">long</span> workerId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;worker Id can&#x27;t be greater than &#123;0&#125; or less than 0 &quot;</span>, workerId));</span><br><span class="line">            SnowFlake.workerId = workerId;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">NewID</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sigle == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sigle = <span class="keyword">new</span> SnowFlake(<span class="number">4L</span>); <span class="comment">//此处4L应该从配置文件里读取当前机器配置</span></span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">return</span>  sigle.nextId();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">long</span> <span class="title">nextId</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (<span class="keyword">this</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">long</span> timestamp = timeGen();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.lastTimestamp == timestamp)&#123; <span class="comment">//同一微妙中生成ID</span></span><br><span class="line">                    <span class="comment">//用&amp;运算计算该微秒内产生的计数是否已经到达上限</span></span><br><span class="line">                    SnowFlake.sequence = (SnowFlake.sequence + <span class="number">1</span>) &amp; SnowFlake.sequenceMask; </span><br><span class="line">                    <span class="keyword">if</span> (SnowFlake.sequence == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//一微妙内产生的ID计数已达上限，等待下一微妙</span></span><br><span class="line">                        timestamp = tillNextMillis(<span class="keyword">this</span>.lastTimestamp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; <span class="comment">//不同微秒生成ID</span></span><br><span class="line">                    SnowFlake.sequence = <span class="number">0</span>; <span class="comment">//计数清0</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(timestamp &lt; lastTimestamp)</span><br><span class="line">                &#123; <span class="comment">//如果当前时间戳比上一次生成ID时时间戳还小，抛出异常，因为不能保证现在生成的ID之前没有生成过</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for &#123;0&#125; milliseconds&quot;</span>,</span><br><span class="line">                        <span class="keyword">this</span>.lastTimestamp - timestamp));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.lastTimestamp = timestamp; <span class="comment">//把当前时间戳保存为最后生成ID的时间戳</span></span><br><span class="line">                <span class="built_in">long</span> nextId = (timestamp - twepoch &lt;&lt; timestampLeftShift) </span><br><span class="line">                    | SnowFlake.workerId &lt;&lt; SnowFlake.workerIdShift | SnowFlake.sequence;</span><br><span class="line">                <span class="keyword">return</span> nextId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取下一微秒时间戳</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lastTimestamp&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">long</span> <span class="title">tillNextMillis</span>(<span class="params"><span class="built_in">long</span> lastTimestamp</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> timestamp = timeGen();</span><br><span class="line">            <span class="keyword">while</span>(timestamp &lt;= lastTimestamp)</span><br><span class="line">            &#123;</span><br><span class="line">                timestamp = timeGen();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> timestamp;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 生成当前时间戳</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">long</span> <span class="title">timeGen</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">long</span>)(DateTime.UtcNow - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc)).TotalMilliseconds;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>分布式ID</tag>
      </tags>
  </entry>
  <entry>
    <title>在 WPF 中使用 Path 路径</title>
    <url>/2015/10/17/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%9C%A8%20WPF%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Path%20%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>在 WPF 中总会修改 Button 的 Style，比如一个自定义的 Close 按钮。刚入门的可能会用一张 PNG 格式的图片来做这个按钮的 Icon，但这个是不优雅的。而且你要改的时候还得去操作文件，想想都痛苦。</p>
<p>但是很多人苦于不知道去哪里获取 Path，当然网上已经有不少使用 Photoshop 获取图片的 Path ，但如果图片的质量不好，获取的 Path 歪歪曲曲的也不好看，更何况在这之前你还得会使用 Photoshop。</p>
<p>现在分享一个我经常使用的解决方案，<a href="http://www.iconfont.cn/">阿里巴巴矢量图</a>，这上面可以说有海量的图标可以用到。</p>
<p>流程：</p>
<p>　　1，进入 <a href="http://www.iconfont.cn/">阿里巴巴矢量图</a> 并搜索你想要的图标</p>
<p>　　2，下载 Icon 时使用 SVG 下载</p>
<p>　　3，用记事本或文本编辑器打开，标签 Path 下的 d 属性就是 Path 的 Data 数据（很多复杂一点的 Icon 可能是多个 Data 组成，使用时只要用空格把几个 Data 隔开就行）</p>
<p>　　例子：</p>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"\>

<p>　　&lt;svg t=“1491032725422” class=“icon” style=“” viewBox=“0 0 1024 1024” version=“1.1” xmlns=“<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>“ p-id=“2372” xmlns:xlink=“<a href="http://www.w3.org/1999/xlink">http://www.w3.org/1999/xlink</a>“ width=“248” height=“248”&gt;<br>　　&lt;defs&gt;<br>　　　　&lt;style type=“text&#x2F;css”&gt;&lt;&#x2F;style&gt;<br>　　&lt;&#x2F;defs&gt;<br>　　&lt;path d=“M503.2868 510.9903m-349.4226 0a341.233 341.233 0 1 0 698.8452 0 341.233 341.233 0 1 0-698.8452 0Z” p-id=“2373”&gt;&lt;&#x2F;path&gt;<br>　　&lt;path d=“M106.1386 263.9677a110 100 0 1 1 121.6696 248.2668Z” p-id=“2374”&gt;&lt;&#x2F;path&gt;<br>&lt;&#x2F;svg&gt;</p>
<p>　　在WPF中使用时：</p>
<p>&lt;Path Data=“M503.2868 510.9903m-349.4226 0a341.233 341.233 0 1 0 698.8452 0 341.233 341.233 0 1 0-698.8452 0Z M106.1386 263.9677a110 100 0 1 1 121.6696 248.2668Z”&#x2F;&gt;</p>
<p>Data 也可以作为资源放在独立的资源字典里，使用的 Geometry 标签</p>
<p>&lt;Geometry x:Key=“logo”&gt;M503.2868 510.9903m-349.4226 0a341.233 341.233 0 1 0 698.8452 0 341.233 341.233 0 1 0-698.8452 0Z M106.1386 263.9677a110 100 0 1 1 121.6696 248.2668Z&lt;&#x2F;Geometry&gt;</p>
<p>XAML：</p>
<p>&lt;Path Data=“{StaticResource logo}” Fill=“White” Stretch=“Fill” Stroke=“White” StrokeThickness=“1.5” &#x2F;&gt;</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>微软官方提供的SqlHelper类，完整版并附中文注释详解</title>
    <url>/2015/07/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E5%BE%AE%E8%BD%AF%E5%AE%98%E6%96%B9%E7%9A%84SQLHelper%E7%B1%BB(%E5%90%AB%E5%AE%8C%E6%95%B4%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A)/</url>
    <content><![CDATA[<script src="https://gist.github.com/chengming0916/f2b4e005d1d2287ab59b08579da1daee.js"></script>]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Helper</tag>
      </tags>
  </entry>
  <entry>
    <title>最全的Windows Azure学习教程汇总</title>
    <url>/2017/01/14/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E6%9C%80%E5%85%A8%E7%9A%84Windows%20Azure%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>Windows Azure 是微软基于云计算的操作系统，能够为开发者提供一个平台，帮助开发可运行在云服务器、数据中心、Web 和 PC 上的应用程序。</p>
<p>Azure 是一种灵活和支持互操作的平台，能够将处于云端的开发者个人能力，同微软全球数据中心网络托管的服务，比如存储、计算和网络基础设施服务，紧密结合起来。帮助开发者在“云端”和“客户端”同时部署应用，使得企业与用户都能共享资源。</p>
<p>本文整理了丰富的 Windows Azure 学习资源，帮助开发者能全面地学习 Windows Azure 知识，并将 Windows Azure 运用在项目和实际工作中。  </p>
<p>通过本系列博客，先来了解一下 Windows Azure 平台的基本知识。Windows Azure，正如同桌面操作系统 Windows 和服务器操作系统 Windows Server 一样，是一个云端的操作系统。开发人员可以使用同一套技术：.NET（包括 Silverlight），或者 Win32，同时针对桌面，服务器，以及云，开发程序，而不需要针对某个平台学习专门的技术。Visual Studio 和 Expression Studio 为开发人员提供了强大的工具支持。</p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/05/windows-azure-94/">Windows Azure平台简介(一)：定位与产品结构</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/05/windows-azurewindows-azure/">Windows Azure平台简介(二)：Windows Azure</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/05/windows-azureappfabric/">Windows Azure平台简介(三)：AppFabric</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/05/windows-azuresql-azure/">Windows Azure平台简介(四)：SQL Azure以及其他服务</a></p>
<p>在开始本教学之前，请确保你从 <a href="http://msdn.microsoft.com/zh-cn/windowsazure/cc974146">Windows Azure 平台下载</a>下载并安装了最新的 Windows Azure 开发工具。本教学使用 Visual Studio 2010 作为开发工具。</p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/09/windows-azure-webrole/">Windows Azure入门教学系列 (一)：创建第一个WebRole程序</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/18/windows-azure-web-role/">Windows Azure入门教学系列 (二)：部署第一个Web Role程序</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/02/22/windows-azure-worker-role/">Windows Azure入门教学系列 (三)：创建第一个Worker Role程序</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/03/07/windows-azure-blob-storage/">Windows Azure入门教学系列 (四)：使用Blob Storage</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/03/08/windows-azure-queue-storage/">Windows Azure入门教学系列 (五)：使用Queue Storage</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/03/11/windows-azure-table-storage/">Windows Azure入门教学系列 (六)：使用Table Storage</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/03/19/windows-azure-rest-apistorage-service/">Windows Azure入门教学系列 (七)：使用REST API访问Storage Service</a></p>
<p><a href="https://blogs.msdn.microsoft.com/azchina/2010/04/12/windows-azure-windows-azure-drive/">Windows Azure入门教学系列 (八)：使用Windows Azure Drive</a></p>
<p><a href="http://blog.csdn.net/ghostbear/article/details/20532753">Azure学习笔记：Web Site（1）</a></p>
<p><a href="http://blog.csdn.net/ghostbear/article/details/20533315">Azure学习笔记：Service Bus（2）</a></p>
<p><a href="http://blog.csdn.net/ghostbear/article/details/20533339">Azure学习笔记：Storage（3）</a></p>
<p><a href="http://blog.csdn.net/ghostbear/article/details/20533419">Azure学习笔记：Cloud Service（4）</a></p>
<p>Azure Storage 是微软 Azure 云提供的云端存储解决方案，当前支持的存储类型有 Blob、Queue、File 和 Table。</p>
<p><img src="https://images2015.cnblogs.com/blog/139239/201611/139239-20161108110807749-165409149.png"></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/Azure_Blob_Storage.html">Azure Blob Storage 基本用法 – Azure Storage 之 Blob</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/Azure%20Queue%20Storage%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%20--%20Azure%20Storage%20%E4%B9%8B%20Queue">Azure Queue Storage 基本用法 – Azure Storage 之 Queue</a></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/Azure_File_Storage.html">Azure File Storage 基本用法 – Azure Storage 之 File</a></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/5707033.html">Azure Table storage 基本用法 – Azure Storage 之 Table</a></p>
<p>Windows Azure Storage 支持三重冗余的。保存在 Azure Storage 的内容，会在同一个数据中心保留有3个副本。这样的好处显而易见：当数据中心发生一般性故障的时候，比如磁盘损坏，机架服务器损坏等，用户保存在 Azure Storage 的数据不会丢失。每次对于 Storage 的写操作，都会对三个副本进行同步写操作，等到在副本操作完毕之后，才会返回执行成功给客户端。</p>
<p>Windows Azure 提供了三种不同类型的存储服务(这里的存储是非关系型数据，比如图片、文档等文件)，用来提供给 Windows Azure 上运行的应用程序存储数据使用。依据不同的存储格式会有不同的限制，因为这些存储服务都是以分散式巨量存储（Distributed Mass Storage）为核心概念所设计出来的，为了要达成快速在分散式存储空间中存储与管理数据（还包含高可用度的赘余存储管理），微软有在数据的存储上做一些限制。</p>
<p>微软还提供了 REST API 来方便用户操作 Storage Service。</p>
<p>（1）<a href="http://www.cnblogs.com/threestone/archive/2012/01/18/2325567.html">Windows Azure Storage Service存储服务</a></p>
<p>（2）<a href="http://www.cnblogs.com/threestone/archive/2012/01/19/2327651.html">Windows Azure Storage Service存储服务之Blob详解(上)</a></p>
<p>（3）<a href="http://www.cnblogs.com/threestone/archive/2012/01/20/2328004.html">Windows Azure Storage Service存储服务之Blob详解(中)</a></p>
<p>（4）<a href="http://www.cnblogs.com/threestone/archive/2012/01/20/2553501.html">Windows Azure Storage Service存储服务之Blob Share Access Signature</a></p>
<p>（5）<a href="http://www.cnblogs.com/threestone/archive/2012/01/21/2328638.html">Windows Azure Drive</a></p>
<p>（6）<a href="http://www.cnblogs.com/threestone/p/3406259.html">Windows Azure Storage之Table</a></p>
<p>（7）<a href="http://www.cnblogs.com/threestone/archive/2012/01/23/2328878.html">使用工具管理Windows Azure Storage</a></p>
<p>（8）<a href="http://www.cnblogs.com/threestone/archive/2012/06/07/2540896.html">Windows Azure 上的托管服务CDN (上)</a></p>
<p>（9）<a href="http://www.cnblogs.com/threestone/archive/2012/06/08/2541682.html">Windows Azure 上的托管服务CDN (中) Blob Service</a></p>
<p>（10）<a href="http://www.cnblogs.com/threestone/archive/2012/06/11/2542076.html">Windows Azure 上的托管服务CDN (下) Hosted Service</a>、</p>
<p>（11）<a href="http://www.cnblogs.com/threestone/archive/2012/06/19/2555286.html">计算你存储的Blob的大小</a></p>
<p>（12）<a href="http://www.cnblogs.com/threestone/archive/2013/05/23/3093667.html">本地冗余存储 vs 地理冗余存储 (上)</a></p>
<p>（13）<a href="http://www.cnblogs.com/threestone/archive/2013/05/23/3094803.html">本地冗余存储 vs 地理冗余存储 (下)</a></p>
<p>（14）<a href="http://www.cnblogs.com/threestone/p/3211183.html">使用Azure Blob的PutBlock方法，实现文件的分块、离线上传</a></p>
<p>（15）<a href="http://www.cnblogs.com/threestone/p/3398818.html">使用WCF服务，将本地图片上传至Azure Storage (上) 服务器端代码</a></p>
<p>（16）<a href="http://www.cnblogs.com/threestone/p/3401591.html">使用WCF服务，将本地图片上传至Azure Storage (上) 客户端代码</a></p>
<p>（17）<a href="http://www.cnblogs.com/threestone/p/3778854.html">Azure Storage读取访问地域冗余(Read Access – Geo Redundant Storage, RA-GRS)</a></p>
<p>（18）<a href="http://www.cnblogs.com/threestone/p/3788615.html">使用HTML5 Portal的Azure CDN服务</a></p>
<p>（19）<a href="http://www.cnblogs.com/threestone/p/4403539.html">再谈Azure Block Blob和Page Blob</a></p>
<p>（20）<a href="http://www.cnblogs.com/threestone/p/4441388.html">使用Azure File实现共享文件夹</a></p>
<p>（21）<a href="http://www.cnblogs.com/threestone/p/4486392.html">使用AzCopy工具，加快Azure Storage传输速度</a></p>
<p>（22）<a href="http://www.cnblogs.com/threestone/p/4872080.html">Azure Storage如何支持多级目录</a></p>
<p>（23）<a href="http://www.cnblogs.com/threestone/p/5179832.html">计算Azure VHD实际使用容量</a></p>
<p>PowerShell 是管理 Azure 的最好方式之一，通过使用 PowerShell 脚本可以把很多的工作自动化。比如对于 Azure 上的虚拟机，可以设置定时关机操作，并在适当的时间把它开机，这样就能减少虚拟机的运行时间，同时也能为节能减排做出贡献。</p>
<p>（1）<a href="http://www.cnblogs.com/threestone/p/4001540.html">PowerShell入门</a></p>
<p>（2）<a href="http://www.cnblogs.com/threestone/p/4001943.html">修改Azure订阅名称</a></p>
<p>（3）<a href="http://www.cnblogs.com/threestone/p/4001632.html">上传证书</a></p>
<p>（4）<a href="http://www.cnblogs.com/threestone/p/4001907.html">使用PowerShell管理多个订阅</a></p>
<p>（5）<a href="http://www.cnblogs.com/threestone/p/4016287.html">使用Azure PowerShell创建简单的Azure虚拟机和Linux虚拟机</a></p>
<p>（6）<a href="http://www.cnblogs.com/threestone/p/4018913.html">设置单个Virtual Machine Endpoint</a></p>
<p>（7）<a href="http://www.cnblogs.com/threestone/p/4174346.html">使用CSV文件批量设置Virtual Machine Endpoint</a></p>
<p>（8）<a href="http://www.cnblogs.com/threestone/p/4378472.html">使用PowerShell设置Azure负载均衡器规则</a></p>
<p>（9）<a href="http://www.cnblogs.com/threestone/p/4427990.html">使用PowerShell导出订阅下所有的Azure VM的Public IP和Private IP</a></p>
<p>（10）<a href="http://www.cnblogs.com/threestone/p/4802038.html">使用PowerShell导出订阅下所有的Azure VM和Cloud Service的高可用情况</a></p>
<p>（11）<a href="http://www.cnblogs.com/threestone/p/5381726.html">使用自定义虚拟机镜像模板，创建Azure虚拟机并绑定公网IP(VIP)和内网IP(DIP)</a></p>
<p>（12）<a href="http://www.cnblogs.com/threestone/p/6000824.html">通过Azure PowerShell创建SSH登录的Linux VM</a></p>
<p>SQL Azure 是微软基于 Microsoft SQL Server Denali，也就是 SQL Server 2012 构建的云端关系型数据库服务。SQL Azure 是 SQL Server 的一个大子集，能够实现 SQL Server 的绝大部分功能，并且将它们作为云端的服务来扩展。SQL Azure Database 提供内置的高精准、可用性、功效与其他功能。</p>
<p>（1）<a href="http://www.cnblogs.com/threestone/archive/2012/01/31/2332370.html">入门</a></p>
<p>（2）<a href="http://www.cnblogs.com/threestone/archive/2012/01/31/2332746.html">SQL Azure vs SQL Server</a></p>
<p>（3）<a href="http://www.cnblogs.com/threestone/archive/2012/01/31/2332845.html">创建一个SQL Azure 服务器</a></p>
<p>（4）<a href="http://www.cnblogs.com/threestone/archive/2012/01/31/2332859.html">创建一个SQL Azure数据库</a></p>
<p>（5）<a href="http://www.cnblogs.com/threestone/archive/2012/01/31/2332915.html">使用SQL Server Management Studio连接SQL Azure</a></p>
<p>（6）<a href="http://www.cnblogs.com/threestone/archive/2012/02/27/2367773.html">使用Project Houston管理SQL Azure</a></p>
<p>（7）<a href="http://www.cnblogs.com/threestone/archive/2012/02/01/2334403.html">在SQL Azure Database中执行的T-SQL</a></p>
<p>（8）<a href="http://www.cnblogs.com/threestone/archive/2012/02/02/2334949.html">使用Visual Studio 2010开发应用连接SQL Azure云端数据库</a></p>
<p>（9）<a href="http://www.cnblogs.com/threestone/archive/2012/02/06/2338122.html">把本地的SQL Server数据库迁移到SQL Azure云数据库上</a></p>
<p>（10）<a href="http://www.cnblogs.com/threestone/archive/2012/03/26/2417757.html">SQL Azure Data Sync数据同步功能(上)</a></p>
<p>（11）<a href="http://www.cnblogs.com/threestone/archive/2012/03/26/2417907.html">SQL Azure Data Sync数据同步功能(下)</a></p>
<p>（12）<a href="http://www.cnblogs.com/threestone/archive/2013/03/28/2986097.html">使用新Portal 创建 SQL Azure Database</a></p>
<p>（13）<a href="http://www.cnblogs.com/threestone/p/3439856.html">Azure的两种关系型数据库服务：SQL Azure与SQL Server VM的不同</a></p>
<p>（14）<a href="http://www.cnblogs.com/threestone/p/3662486.html">将云端SQL Azure中的数据库备份到本地SQL Server</a></p>
<p>（15）<a href="http://www.cnblogs.com/threestone/p/3778087.html">SQL Azure 新的规格</a></p>
<p>（16）<a href="http://www.cnblogs.com/threestone/p/4986231.html">创建PaaS SQL Azure V12数据库</a></p>
<p>（17）<a href="http://www.cnblogs.com/threestone/p/5481911.html">SQL Azure V12 - 跨数据中心标准地域复制(Standard Geo-Replication)</a></p>
<p>（18）<a href="http://www.cnblogs.com/threestone/p/5552502.html">使用External Table实现垮库查询</a></p>
<p>（19）<a href="http://www.cnblogs.com/threestone/p/5822962.html">Stretch Database 概览</a></p>
<p>（20）<a href="http://www.cnblogs.com/threestone/p/5824869.html">使用SQL Server 2016 Upgrade Advisor</a></p>
<p>（21）<a href="http://www.cnblogs.com/threestone/p/5826310.html">将整张表都迁移到Azure Stretch Database里</a></p>
<p>（22）<a href="http://www.cnblogs.com/threestone/p/5826450.html">迁移部分数据到Azure Stretch Database</a></p>
<p>1. 《Windows Azure 实战》全面深入，完整覆盖 Windows Azure 所有关键技术和理论，详细讲解云计算开发流程、云服务架构（可用性、可靠性和高性能）、云设备整合、系统整合，以及云计算项目的管理。<br>注重实战，68个精心策划的针对特定实际应用场景的真实案例，详细呈现案例的设计思路和完整实现步骤。</p>
<p><img src="https://images2015.cnblogs.com/blog/139239/201611/139239-20161108134142889-1790002180.jpg"></p>
<p>2. 《Windows Azure 从入门到精通》介绍了如何构建和管理云端的可扩展应用，一次一个知识点，同时辅之以适当的练习，可帮助读者轻松掌握基本的编程技能，掌握 Windows Azure 云计算平台的核心服务和特性，是一本理想的入门教程。</p>
<p><strong><img src="https://images2015.cnblogs.com/blog/139239/201611/139239-20161108134407405-1273791227.jpg"></strong></p>
<p>3. 《云计算与Azure平台实战》解决了从本地转移到基于云的应用程序时，可能面临的各种问题；展示了如何将 ASP.NET 身份验证和角色管理用应用于 Azure Web 角色；揭示了迁移到 Windows Azure 时把计算服务卸载到一个或多个 WorkerWeb 角色的益处；讲解如何为共享 Azure 表选择最合适的 PartionKey 和 RowKey 值的组合；探讨了改善 Azure 表的可扩展性和性能的方法。</p>
<p><img src="https://images2015.cnblogs.com/blog/139239/201611/139239-20161108135006545-720283508.jpg"></p>
<p>4. 《走进云计算:Windows Azure实战手记》介绍了你必须学会的微软云开发技术，介绍目前最火爆的云计算，深入剖析微软最新的云开发平台，涵盖 Windows Azure 环境、存储服务、SQL Azure 数据库与 App Fabric 服务平台 Step by Step 递进教学，初学者可按部就班地学习云应用的开发技术。</p>
<p><img src="https://images2015.cnblogs.com/blog/139239/201611/139239-20161108135448327-262312994.jpg"></p>
<p><strong>相关阅读：</strong></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/Azure_Blob_Storage.html">Azure Blob Storage 基本用法 – Azure Storage 之 Blob</a></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/Azure_Queue_Storage.html">Azure Queue Storage 基本用法 – Azure Storage 之 Queue</a></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/Azure_File_Storage.html">Azure File Storage 基本用法 – Azure Storage 之 File</a></p>
<p><a href="http://www.cnblogs.com/powertoolsteam/p/5707033.html">Azure Table storage 基本用法 – Azure Storage 之 Table</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>Azure教程</tag>
      </tags>
  </entry>
  <entry>
    <title>解决LibVLCSharp弹出Direct3d11窗体问题</title>
    <url>/2024/06/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E8%A7%A3%E5%86%B3LibVLCSharp%E5%BC%B9%E5%87%BADirect3d11%E7%AA%97%E4%BD%93%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>LibVLCSharp版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;LibVLCSharp&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.6.6&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;LibVLCSharp.WPF&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.6.6&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;VideoLAN.LibVLC.Windows&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0.16&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>现象播放RTSP视频流时在VideoView播放正常，但会弹出一个窗体同时播放，窗体名<code>VLC (Direct3D11 output)</code></p>
<img src="/2024/06/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/%E8%A7%A3%E5%86%B3LibVLCSharp%E5%BC%B9%E5%87%BADirect3d11%E7%AA%97%E4%BD%93%E9%97%AE%E9%A2%98/IMG-20250804110742686.png" class="">



<p>代码如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LibVLC m_libVLC;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.Loaded += MainWindow_Loaded;</span><br><span class="line">        </span><br><span class="line">        m_libVLC = <span class="keyword">new</span> LibVLC();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainWindow_Loaded</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        VideoView.MediaPlayer = <span class="keyword">new</span> LibVLCSharp.Shared.MediaPlayer(m_libVLC);</span><br><span class="line">        VideoView.MediaPlayer.Play(<span class="keyword">new</span> Media(m_libVLC, <span class="keyword">new</span> Uri(uri)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>故障原因</p>
<p>打断点调试发现，Loaded时间执行两次，第一次执行在VideoView播放正常，第二次执行弹出<code>VLC (Direct3D11 output)</code>窗</p>
<p>解决方法: 控制只初始化和播放一次</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LibVLC m_libVLC;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.Loaded += MainWindow_Loaded;</span><br><span class="line">        </span><br><span class="line">        m_libVLC = <span class="keyword">new</span> LibVLC();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainWindow_Loaded</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        VideoView.MediaPlayer ??= <span class="keyword">new</span> LibVLCSharp.Shared.MediaPlayer(m_libVLC)</span><br><span class="line">        &#123;</span><br><span class="line">            Media = <span class="keyword">new</span> Media(m_libVLC, <span class="keyword">new</span> Uri(uri))</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!VideoView.MediaPlayer.IsPlaying)</span><br><span class="line">            VideoView.MediaPlayer.Play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>LibVLCSharp</tag>
        <tag>Direct3d11</tag>
      </tags>
  </entry>
  <entry>
    <title>Go MVC框架对比</title>
    <url>/2022/11/03/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Go-MVC%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h4 id="Beego"><a href="#Beego" class="headerlink" title="Beego"></a>Beego</h4><p>官网 <a href="https://beego.me/">https://beego.me</a></p>
<p>github <a href="https://github.com/astaxie/beego">https://github.com/astaxie/beego</a></p>
<p>优点：</p>
<ul>
<li>很全很简单</li>
<li>不仅追求性能，同样追求开发效率，解放程序员的生产力</li>
<li>社区良好，中文开发者很多，找资料很方便</li>
<li>代码文档化做的很优秀</li>
</ul>
<p>缺点：</p>
<ul>
<li>比较臃肿，因为提供了很多支持，当遇到坑时需要花很多时间查源码解决问题</li>
<li>模块众多，这既是优点也是缺点</li>
</ul>
<h4 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h4><p>官网 <a href="https://echo.labstack.com/">https://echo.labstack.com</a></p>
<p>github <a href="https://github.com/labstack/echo">https://github.com/labstack/echo</a></p>
<p>优点：</p>
<ul>
<li>路由性能高</li>
<li>更轻量级的web开发框架</li>
</ul>
<p>缺点：</p>
<ul>
<li>调试不方便，报错信息不友好</li>
<li>路由性能虽高，但是路由实现的算法底层不支持路由排序，会引起路由冲突</li>
</ul>
<h4 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h4><p>官网 <a href="https://gin-gonic.github.io/gin">https://gin-gonic.github.io/gin</a></p>
<p>github <a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a></p>
<p>优点：</p>
<ul>
<li>封装比较好，API友好，源码注释比较明确，具有快速灵活，容错方便等特点</li>
<li>运行速度快，分组的路由器，良好的崩溃捕获和错误处理，非常好的支持中间件和 json</li>
</ul>
<p>缺点：</p>
<ul>
<li>封装比较好，API友好，源码注释比较明确，具有快速灵活，容错方便等特点</li>
<li>运行速度快，分组的路由器，良好的崩溃捕获和错误处理，非常好的支持中间件和 json</li>
</ul>
<h4 id="Iris"><a href="#Iris" class="headerlink" title="Iris"></a>Iris</h4><p>官网 <a href="https://iris-go.com/">https://iris-go.com</a></p>
<p>github <a href="https://github.com/kataras/iris">https://github.com/kataras/iris</a></p>
<p>优点：</p>
<ul>
<li>是社区驱动的Go语言Web 框架，支持http2，完备 MVC 支持。</li>
<li>极简主义风格</li>
<li>社区活跃度和文档支持都非常到位</li>
</ul>
<p>缺点：</p>
<ul>
<li>不够稳定，社区里有人反馈：最新的release版本是alpha版非常不稳定</li>
<li>支持Iris的人很多，但是目前仍然不如Gin和Echo多</li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/09/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Go-Websocket/</url>
    <content><![CDATA[<h3 id="golang-org-x-net-websocket示例"><a href="#golang-org-x-net-websocket示例" class="headerlink" title="golang.org/x/net/websocket示例"></a><code>golang.org/x/net/websocket</code>示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;code.google.com/p/go.net/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo</span><span class="params">(ws *websocket.Conn)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> reply <span class="type">string</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//建立连接后接收来自客户端的信息reply</span></span><br><span class="line">		<span class="keyword">if</span> err == websocket.Message.Receive(ws, &amp;reply); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;error, can&#x27;t receive message ...&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		fmt.Println(<span class="string">&quot;recevied from client: &quot;</span> + reply)</span><br><span class="line">		i++</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 把收到的信息进行处理，可以做过滤也可以返回国定信息</span></span><br><span class="line">		msg := <span class="string">&quot;received: &quot;</span> + reply</span><br><span class="line">		fmt.Println(<span class="string">&quot;send to client: &quot;</span> + msg)</span><br><span class="line">		fmt.Println(i)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 返回消息给客户端</span></span><br><span class="line">		<span class="keyword">if</span> err = websocket.Message.Send(ws, msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;error,can&#x27;t send message ...&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.Handle(<span class="string">&quot;/&quot;</span>, websocket.Handle(echo))</span><br><span class="line">	<span class="comment">// 访问服务器地址，ws://127.0.0.1:8088</span></span><br><span class="line">	<span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:8088&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;listen and serve: &quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="github-com-gorilla-websocket示例"><a href="#github-com-gorilla-websocket示例" class="headerlink" title="github.com/gorilla/websocket示例"></a><code>github.com/gorilla/websocket</code>示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	upgrader = websocket.Upgrader&#123;</span><br><span class="line">		<span class="comment">// 读取缓冲区空间大小</span></span><br><span class="line">		ReadBufferSize: <span class="number">1024</span>,</span><br><span class="line">		<span class="comment">// 写入缓冲区空间大小</span></span><br><span class="line">		WriteBufferSize: <span class="number">1024</span>,</span><br><span class="line">		CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wsHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">//完成握手升级为websocket长连接，使用conn发送和接收消息</span></span><br><span class="line">	conn, err := upgrader.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;upgrade: &quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		messageType, msg, err := conn.ReadMessage()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;reading error ...&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		log.Printf(<span class="string">&quot;read from client msg: %s \n&quot;</span>, msg)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err := conn.WriteMessage(messageType, msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(<span class="string">&quot;writing error ...&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		log.Printf(<span class="string">&quot;write msg to client: %s \n&quot;</span>, msg)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 监听地址 ws://127.0.0.1:8088</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, wsHandler)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:8088&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;listen and serve &quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>GoLang搭建WebAPI</title>
    <url>/2022/11/03/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/GoLang%E6%90%AD%E5%BB%BAWebAPI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>WebAPI</tag>
        <tag>Gin</tag>
        <tag>Gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang使用JWT</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E4%BD%BF%E7%94%A8JWT/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/CYD-self/p/13954661.html">GO语言Gin包（JWT使用） - 码农后生 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://juejin.cn/post/7059184806906560543">在Gin中使用JWT做认证以及JWT的续签方案 - 掘金 (juejin.cn)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/87557437">使用 Go 添加 JWT 认证 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/jiujuan/p/11403066.html">gin框架教程三：JWT的使用 - 九卷 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang国内镜像源</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_43064185/article/details/123797508">Golang 国内的镜像源_golang 国内镜像-CSDN博客</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Golang实现Async/Await模式</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E5%AE%9E%E7%8E%B0Async-Await%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/341794161">使用 Go 实现 Async&#x2F;Await 模式 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Golang实现SM4</title>
    <url>/2025/03/26/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E5%AE%9E%E7%8E%B0SM4/</url>
    <content><![CDATA[<p>ECB模式，PKCS5填充</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sm4</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/tjfoc/gmsm/sm4&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SM4EcbEncrypt</span><span class="params">(key, plaintext []<span class="type">byte</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	block, err := sm4.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	plaintext = PKCS5Padding(plaintext, block.BlockSize())</span><br><span class="line">	ciphertext := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plaintext))</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> start := <span class="number">0</span>; start &lt; <span class="built_in">len</span>(plaintext); start += block.BlockSize() &#123;</span><br><span class="line">		block.Encrypt(ciphertext[start:start+block.BlockSize()], plaintext[start:start+block.BlockSize()])</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(ciphertext), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SM4EcbDecrypt</span><span class="params">(key []<span class="type">byte</span>, data <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	plaintext, _ := hex.DecodeString(data)</span><br><span class="line">	block, err := sm4.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	ciphertext := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plaintext))</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> start := <span class="number">0</span>; start &lt; <span class="built_in">len</span>(plaintext); start += block.BlockSize() &#123;</span><br><span class="line">		block.Decrypt(ciphertext[start:start+block.BlockSize()], plaintext[start:start+block.BlockSize()])</span><br><span class="line">	&#125;</span><br><span class="line">	ciphertext = PKCS5Unpadding(ciphertext)</span><br><span class="line">	<span class="keyword">return</span> ciphertext, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS5Padding</span><span class="params">(ciphertext []<span class="type">byte</span>, blockSize <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	padding := blockSize - <span class="built_in">len</span>(ciphertext)%blockSize</span><br><span class="line">	padtext := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padding)&#125;, padding)</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">append</span>(ciphertext, padtext...)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS5Unpadding</span><span class="params">(origData []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(origData)</span><br><span class="line">	unpadding := <span class="type">int</span>(origData[length<span class="number">-1</span>])</span><br><span class="line">	<span class="keyword">return</span> origData[:(length - unpadding)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>国密</tag>
        <tag>SM4</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang日志组件logrus使用</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E6%97%A5%E5%BF%97%E7%BB%84%E4%BB%B6logrus%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/375086909">Golang日志之logrus的使用 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>logrus</tag>
        <tag>日志组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang检查目录是否存在</title>
    <url>/2025/03/26/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E6%A3%80%E6%9F%A5%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
    <content><![CDATA[<h4 id="使用os-stat"><a href="#使用os-stat" class="headerlink" title="使用os.stat()"></a>使用<code>os.stat()</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   dir := <span class="string">&quot;new&quot;</span></span><br><span class="line">   <span class="keyword">if</span> _, err := os.Stat(dir); os.IsNotExist(err) &#123;</span><br><span class="line">      fmt.Println(dir, <span class="string">&quot;does not exist&quot;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;The provided directory named&quot;</span>, dir, <span class="string">&quot;exists&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用os-open"><a href="#使用os-open" class="headerlink" title="使用os.open()"></a>使用<code>os.open()</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   dir := <span class="string">&quot;go&quot;</span></span><br><span class="line">   <span class="keyword">if</span> _, err := os.Open(dir); os.IsNotExist(err) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;The directory named&quot;</span>, dir, <span class="string">&quot;does not exist&quot;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;The directory namend&quot;</span>, dir, <span class="string">&quot;exists&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用mkdir"><a href="#使用mkdir" class="headerlink" title="使用mkdir()"></a>使用<code>mkdir()</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   dir := <span class="string">&quot;new&quot;</span></span><br><span class="line">   <span class="keyword">if</span> err := os.Mkdir(dir, <span class="number">0755</span>); os.IsExist(err) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;The directory named&quot;</span>, dir, <span class="string">&quot;exists&quot;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;The directory named&quot;</span>, dir, <span class="string">&quot;does not exist&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang环境配置</title>
    <url>/2025/03/19/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Golang%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装Golang"><a href="#安装Golang" class="headerlink" title="安装Golang"></a>安装Golang</h2><p>Windows版本下载<a href="">安装程序</a>安装即可，Ubuntu下有两种安装方式<br>第一种方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install golang</span><br></pre></td></tr></table></figure>
<p>此种方式安装的版本并不是最新版，或者下载 [官方包]执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf go1.24.2.linux-amd64.tar.gz -C  /usr/local <span class="comment"># 解压缩到/usr/local</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 -R /usr/local/go <span class="comment"># 修改权限，一般解压后就有权限，此步可以省略</span></span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>打开 <code>系统设置-&gt;关于-&gt;高级系统设置-&gt;环境变量</code>，注意如果只给当前用户使用添加到用户的环境变量即可，全部用户可用需配置系统环境变量。</p>
<p>GOROOT</p>
<p>![[Golang环境配置&#x2F;IMG-20250804110742705.png]]</p>
<p>GOPATH<br>![[Golang环境配置&#x2F;IMG-20250804110742880.png]]</p>
<p>GOPROXY</p>
<p>![[Golang环境配置&#x2F;IMG-20250804110743185.png]]</p>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>如果只给当前用户使用编辑用户目录下<code>.bashrc</code>文件，全部用户可用需配置<code>/etc/profile</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go <span class="comment"># Golang根目录</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/go-project <span class="comment"># 项目根目录</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>


<h4 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h4><p>GOPROXY可在环境变量中配置也可使用<code>go env -w</code>命令配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn <span class="comment"># 七牛</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://mirrors.aliyun.com/goproxy/ <span class="comment"># 阿里</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.io <span class="comment"># 官方</span></span><br></pre></td></tr></table></figure>

<p>GO111MODULE<br>从go 1.11版本开始，推荐使用Go Modules进行包管理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br></pre></td></tr></table></figure>

<p>在项目目录下初始化模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Gorm使用</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Golang/Gorm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/113251066">Golang下的ORM框架gorm的介绍和使用 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java&amp;Quartz实现任务调度</title>
    <url>/2015/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/Java&amp;Quartz%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="1-Quartz的作用"><a href="#1-Quartz的作用" class="headerlink" title="1.Quartz的作用"></a>1.Quartz的作用</h2><p>定时自动执行任务</p>
<h2 id="2-预备"><a href="#2-预备" class="headerlink" title="2.预备"></a>2.预备</h2><p>相关包<a href="http://www.quartz-scheduler.org/">官方网站</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quartz2.2.1</span><br><span class="line">quartz-jobs2.2.1</span><br></pre></td></tr></table></figure>

<p>POM文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;   </span><br></pre></td></tr></table></figure>

<h2 id="3-Quartz核心"><a href="#3-Quartz核心" class="headerlink" title="3.Quartz核心"></a>3.Quartz核心</h2><h3 id="3-1-Job接口"><a href="#3-1-Job接口" class="headerlink" title="3.1.Job接口"></a>3.1.Job接口</h3><p>被调度的任务,只有一个方法execute(JobExecutionContext xontext),Job运行时的信息保存在JobDataMap中</p>
<h3 id="3-2-JobDetail类"><a href="#3-2-JobDetail类" class="headerlink" title="3.2.JobDetail类"></a>3.2.JobDetail类</h3><p>实现Job接口,用来描述Job的相关信息,包含Name,Group,JobDataMap等</p>
<h3 id="3-3-JobExecutionContext类"><a href="#3-3-JobExecutionContext类" class="headerlink" title="3.3 JobExecutionContext类"></a>3.3 JobExecutionContext类</h3><p>定时程序执行的run-time的上下文环境,用于得到Job的名字、配置的参数等</p>
<h3 id="3-3-JobDataMap类"><a href="#3-3-JobDataMap类" class="headerlink" title="3.3 JobDataMap类"></a>3.3 JobDataMap类</h3><p>用来描述一个作业的参数,参数可以为金和基本类型或者某个对象的引用</p>
<h3 id="3-3-JobListener接口"><a href="#3-3-JobListener接口" class="headerlink" title="3.3 JobListener接口"></a>3.3 JobListener接口</h3><p>监听作业状态</p>
<h3 id="3-3-TriggaerListener接口"><a href="#3-3-TriggaerListener接口" class="headerlink" title="3.3 TriggaerListener接口"></a>3.3 TriggaerListener接口</h3><p>监听触发器状态</p>
<h3 id="3-3-JobStore"><a href="#3-3-JobStore" class="headerlink" title="3.3 JobStore"></a>3.3 JobStore</h3><h3 id="3-3-Tigger抽象类"><a href="#3-3-Tigger抽象类" class="headerlink" title="3.3.Tigger抽象类"></a>3.3.Tigger抽象类</h3><p>触发器,描述执行Job的触发规则,有SimpleTrigger和CronTrigger两个子类</p>
<h4 id="3-3-1-SimpleTrigger类"><a href="#3-3-1-SimpleTrigger类" class="headerlink" title="3.3.1.SimpleTrigger类"></a>3.3.1.SimpleTrigger类</h4><p>继承自Trigger类,每隔xx毫秒&#x2F;秒执行一次,主要实现固定一次或者固定时间<code>周期类</code>任务的触发</p>
<h4 id="3-3-2-CronTrigger类"><a href="#3-3-2-CronTrigger类" class="headerlink" title="3.3.2.CronTrigger类"></a>3.3.2.CronTrigger类</h4><p>继承自Trigger类,使用Cron表达式,实现各种<code>复杂时间规则</code>调度方案,如每天的某个时间,或每周的某几天触发执行之类</p>
<h3 id="3-4-Calendar包"><a href="#3-4-Calendar包" class="headerlink" title="3.4.Calendar包"></a>3.4.Calendar包</h3><p>一些日历特定时间点的集合,包内包含以下几个类</p>
<h4 id="3-4-1-BaseCalendar类"><a href="#3-4-1-BaseCalendar类" class="headerlink" title="3.4.1 BaseCalendar类"></a>3.4.1 BaseCalendar类</h4><h4 id="3-4-2-AnnualCalendar类"><a href="#3-4-2-AnnualCalendar类" class="headerlink" title="3.4.2 AnnualCalendar类"></a>3.4.2 AnnualCalendar类</h4><p>排除每一年中指定的一天或者多天</p>
<h4 id="3-4-3-CalendarComparator类"><a href="#3-4-3-CalendarComparator类" class="headerlink" title="3.4.3 CalendarComparator类"></a>3.4.3 CalendarComparator类</h4><h4 id="3-4-4-CronCalendar类"><a href="#3-4-4-CronCalendar类" class="headerlink" title="3.4.4 CronCalendar类"></a>3.4.4 CronCalendar类</h4><p>使用表达式排除某时间段不执行</p>
<h4 id="3-4-5-DailyCalendar类"><a href="#3-4-5-DailyCalendar类" class="headerlink" title="3.4.5 DailyCalendar类"></a>3.4.5 DailyCalendar类</h4><p>指定的时间范围内每天不执行</p>
<h4 id="3-4-6-HolidayCalendar类"><a href="#3-4-6-HolidayCalendar类" class="headerlink" title="3.4.6 HolidayCalendar类"></a>3.4.6 HolidayCalendar类</h4><p>排除节假日</p>
<h4 id="3-4-7-MonthlyCalendar类"><a href="#3-4-7-MonthlyCalendar类" class="headerlink" title="3.4.7 MonthlyCalendar类"></a>3.4.7 MonthlyCalendar类</h4><p>配出月份中的数天</p>
<h4 id="3-4-8-WeeklyCalendar类"><a href="#3-4-8-WeeklyCalendar类" class="headerlink" title="3.4.8 WeeklyCalendar类"></a>3.4.8 WeeklyCalendar类</h4><p>排除没周中的一天或者多天</p>
<h3 id="3-5-Scheduler类"><a href="#3-5-Scheduler类" class="headerlink" title="3.5.Scheduler类"></a>3.5.Scheduler类</h3><p>任务调度器,代表一个Quartz独立容器。</p>
<p>Scheduler可以将JobDetail和Trigger绑定,当Trigger触发时,对应的Job就会被执行,Job和Trigger是1:n(一对多)的关系</p>
<h3 id="3-6Misfire类"><a href="#3-6Misfire类" class="headerlink" title="3.6Misfire类"></a>3.6Misfire类</h3><p>错误的任务,本该执行单没有执行的任务调度</p>
<h2 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h2><h3 id="1-单任务实现"><a href="#1-单任务实现" class="headerlink" title="1.单任务实现"></a>1.单任务实现</h3><p>1.定义一个任务,新建任务类继承自Job类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.quartz.Job;</span><br><span class="line">import org.quartz.JobExecutionContext;</span><br><span class="line">import org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line">public class DemoJob implements Job &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void execute(JobExecutionContext arg0) throws JobExecutionException &#123;</span><br><span class="line">System.out.println(new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.新建类执行这个任务(SimpleTrigger)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.quartz.DateBuilder;</span><br><span class="line">import org.quartz.JobBuilder;</span><br><span class="line">import org.quartz.JobDetail;</span><br><span class="line">import org.quartz.Scheduler;</span><br><span class="line">import org.quartz.SchedulerException;</span><br><span class="line">import org.quartz.SchedulerFactory;</span><br><span class="line">import org.quartz.SimpleScheduleBuilder;</span><br><span class="line">import org.quartz.Trigger;</span><br><span class="line">import org.quartz.TriggerBuilder;</span><br><span class="line">import org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line">public class QuartzDemo &#123;</span><br><span class="line"></span><br><span class="line">public void simpleRun() throws SchedulerException &#123;</span><br><span class="line"></span><br><span class="line">SchedulerFactory factory = new StdSchedulerFactory();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    Date runTime = DateBuilder.evenSecondDateAfterNow();  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JobDetail jobDetail = JobBuilder.newJob(DemoJob.class)</span><br><span class="line">.withIdentity(&quot;demo_job&quot;, &quot;demo_group&quot;)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">.withIdentity(&quot;demo_trigger&quot;, &quot;demo_group&quot;)</span><br><span class="line"></span><br><span class="line">.startAt(new Date())</span><br><span class="line">.withSchedule(</span><br><span class="line">SimpleScheduleBuilder</span><br><span class="line">.simpleSchedule()</span><br><span class="line">.withIntervalInSeconds(1)</span><br><span class="line">.withRepeatCount(5)</span><br><span class="line">).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scheduler scheduler = factory.getScheduler();</span><br><span class="line"></span><br><span class="line">scheduler.scheduleJob(jobDetail,trigger);</span><br><span class="line">System.out.println(jobDetail.getKey() + &quot; 运行在: &quot; + runTime);   </span><br><span class="line">scheduler.start();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">QuartzDemo demo = new QuartzDemo();</span><br><span class="line">try &#123;</span><br><span class="line">demo.simpleRun();</span><br><span class="line">&#125; catch (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-多任务实现"><a href="#2-多任务实现" class="headerlink" title="2.多任务实现"></a>2.多任务实现</h3><ol>
<li>测试任务类<br>新建两个DemoJonOne和DemoJobTwo,都实现Job接口,内容如下</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void execute(JobExecutionContext arg0) throws JobExecutionException &#123;</span><br><span class="line">System.out.println(new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date())+&quot; Runed &quot;+getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.新建QuartzUtil类,内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import org.quartz.Job;</span><br><span class="line">import org.quartz.JobBuilder;</span><br><span class="line">import org.quartz.JobDetail;</span><br><span class="line">import org.quartz.Scheduler;</span><br><span class="line">import org.quartz.SchedulerException;</span><br><span class="line">import org.quartz.SchedulerFactory;</span><br><span class="line">import org.quartz.SimpleScheduleBuilder;</span><br><span class="line">import org.quartz.Trigger;</span><br><span class="line">import org.quartz.TriggerBuilder;</span><br><span class="line">import org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line">public class QuartzUtil &#123;</span><br><span class="line">private final static String JOB_GROUP_NAME = &quot;QUARTZ_JOBGROUP_NAME&quot;;</span><br><span class="line">private final static String TRIGGER_GROUP_NAME = &quot;QUARTZ_TRIGGERGROUP_NAME&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void addJob(String jobName, String triggerName, Class&lt;? extends Job&gt; jobClass, int seconds)</span><br><span class="line">throws SchedulerException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SchedulerFactory sf = new StdSchedulerFactory();</span><br><span class="line"></span><br><span class="line">Scheduler sche = sf.getScheduler();</span><br><span class="line"></span><br><span class="line">JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, JOB_GROUP_NAME).build();</span><br><span class="line"></span><br><span class="line">Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">.withIdentity(triggerName, TRIGGER_GROUP_NAME)</span><br><span class="line">.startNow()</span><br><span class="line">.withSchedule(</span><br><span class="line">SimpleScheduleBuilder</span><br><span class="line">.simpleSchedule()</span><br><span class="line">.withIntervalInSeconds(seconds)</span><br><span class="line">.repeatForever()</span><br><span class="line">).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sche.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">sche.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">QuartzUtil.addJob(&quot;job1&quot;, &quot;trigger1&quot;, DemoJobOne.class, 2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QuartzUtil.addJob(&quot;Job2&quot;, &quot;trigger2&quot;, DemoJobTwo.class, 5);</span><br><span class="line">&#125; catch (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上方法属于手动调用,如果是web项目中就不同了<br>添加POM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line">import org.quartz.SchedulerException;</span><br><span class="line"></span><br><span class="line">import com.DemoJobOne;</span><br><span class="line">import com.DemoJobTwo;</span><br><span class="line">import com.QuartzUtil;</span><br><span class="line"></span><br><span class="line">public class InitServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">private static final long serialVersionUID = 8507188690597926975L;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void init() throws ServletException &#123;</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">QuartzUtil.addJob(&quot;job1&quot;, &quot;trigger1&quot;, DemoJobOne.class, 2);</span><br><span class="line"></span><br><span class="line">QuartzUtil.addJob(&quot;Job2&quot;, &quot;trigger2&quot;, DemoJobTwo.class, 5);</span><br><span class="line">&#125; catch (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.注册servlet</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;InitServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;servlet.InitServlet&lt;/servlet-class&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;InitServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/InitServlet&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-复杂规则任务调度-CronTrigger"><a href="#3-复杂规则任务调度-CronTrigger" class="headerlink" title="3.复杂规则任务调度(CronTrigger)"></a>3.复杂规则任务调度(CronTrigger)</h3><p>在每分钟的1-30秒执行示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import org.quartz.CronScheduleBuilder;</span><br><span class="line">import org.quartz.JobBuilder;</span><br><span class="line">import org.quartz.JobDetail;</span><br><span class="line">import org.quartz.Scheduler;</span><br><span class="line">import org.quartz.SchedulerException;</span><br><span class="line">import org.quartz.SchedulerFactory;</span><br><span class="line">import org.quartz.Trigger;</span><br><span class="line">import org.quartz.TriggerBuilder;</span><br><span class="line">import org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line">public class CronTriggerDemo &#123;</span><br><span class="line">public static void main(String[] args) throws SchedulerException &#123;</span><br><span class="line"></span><br><span class="line">SchedulerFactory factory = new StdSchedulerFactory();</span><br><span class="line">Scheduler scheduler = factory.getScheduler();</span><br><span class="line"></span><br><span class="line">JobDetail job = JobBuilder</span><br><span class="line">.newJob(DemoJobOne.class)</span><br><span class="line">.withIdentity(&quot;job&quot;,&quot;group&quot;)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">Trigger trigger = TriggerBuilder</span><br><span class="line">.newTrigger()</span><br><span class="line">.withIdentity(&quot;trigger&quot;, &quot;group&quot;)</span><br><span class="line">.startNow().withSchedule(</span><br><span class="line">CronScheduleBuilder</span><br><span class="line">.cronSchedule(&quot;1-30 * * * * ?&quot;)</span><br><span class="line">).build();</span><br><span class="line"></span><br><span class="line">scheduler.scheduleJob(job,trigger);</span><br><span class="line">scheduler.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Cron表达式"><a href="#5-Cron表达式" class="headerlink" title="5.Cron表达式"></a>5.Cron表达式</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s M h d m w [y]</span><br></pre></td></tr></table></figure>

<p>s:seconds,取值0-59,允许- * &#x2F;;</p>
<p>M:minutes,取值0-59,允许- * &#x2F;;</p>
<p>h:hour,取值0-23,允许- * &#x2F;;</p>
<p>d:day of month,取值1-31,允许- * ? &#x2F; L W;</p>
<p>m:month,取值1-12&#x2F;JAN-DEC,允许- * &#x2F;;</p>
<p>w:day of week,取值1-7&#x2F;SUN-SAT,允许- * ? &#x2F; L #;</p>
<p>y:year,可选,取值empty、1970-2099,允许- * &#x2F;;</p>
<h3 id="符号解释"><a href="#符号解释" class="headerlink" title="符号解释"></a>符号解释</h3><p>、 指定枚举值,如在秒字段使用10、12,则表示只有第10秒和第12秒执行<br>- 指定区间范围,配合使用,如在小时字段使用10-12,表示在10、11、12时都会触发</p>
<p>* 代表所有值,单独使用,如在秒字段使用,表示每秒触发</p>
<p>? 代表不确定值,单独使用,不用关心的值</p>
<p>&#x2F; 用于递增触发,配合使用,n&#x2F;m,从n开始,每次增加m,如在秒字段设置5&#x2F;15,表示从第5秒开始,每15秒触发一次</p>
<p>L 表示最后,单独使用,如在秒字段使用,代表第59秒触发,如果在前面加上数字,则表示该数据的最后一个,如在周字段使用6L,则表示本月最后一个周五<br>W 表示最近的工作日,不会跨月,比如30W，30号是周六，则不会顺延至下周一来执行,如在月字段使用15W,则表示到本月15日最近的工作日(周一到周五)<br># 用来指定x的第n个工作日,如在周字段使用6#3则表示该月的第三个星期五</p>
<h3 id="月取值"><a href="#月取值" class="headerlink" title="月取值"></a>月取值</h3><p>一月:JAN&#x2F;0<br>二月:FEB&#x2F;1<br>三月:MAR&#x2F;2<br>四月:APR&#x2F;3<br>五月:MAY&#x2F;4<br>六月:JUN&#x2F;5<br>七月:JUL&#x2F;6<br>八月:AUG&#x2F;7<br>九月:SEP&#x2F;8<br>十月:OCT&#x2F;9<br>十一月:NOV&#x2F;10<br>十二月:DEC&#x2F;11</p>
<h3 id="周取值"><a href="#周取值" class="headerlink" title="周取值"></a>周取值</h3><p>周日:SUN&#x2F;1<br>周一:MON&#x2F;2<br>周二:TUE&#x2F;3<br>周三:WED&#x2F;4<br>周四:THU&#x2F;5<br>周五:FRI&#x2F;6<br>周六:SAT&#x2F;7</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0/20 * * * * ? 每20秒执行一次</span><br><span class="line">1-30 * * * * ? 在1-30秒执行</span><br><span class="line">15 0/2 * * * ? 偶数分钟的第15秒执行</span><br><span class="line">0 0/2 8-17 * * ? 从8时到17时 ,每个偶数分钟执行一次</span><br><span class="line">0 0/3 17-23 * * ? 从17时到23时,每3分钟运行一次</span><br><span class="line">0 0 10am 1,15 * ? 每个月的1号和15号的上午10点 运行</span><br><span class="line">0,30 * * ? * MON-FRI 周一至周五,每30秒运行一次</span><br><span class="line">0,30 * * ? * SAT,SUN 周六、周日,每30秒运行一次</span><br><span class="line">0 0 12 * * ? 每天12点触发</span><br><span class="line">0 15 10 ? * * 每天10点15分触发</span><br><span class="line">0 15 10 * * ? 每天10点15分触发</span><br><span class="line">0 15 10 * * ? * 每天10点15分触发</span><br><span class="line">0 15 10 * * ? 2005 2005年每天10点15分触发</span><br><span class="line">0 * 14 * * ? 每天下午的 2点到2点59分每分触发</span><br><span class="line">0 0/5 14 * * ? 每天下午的 2点到2点59分(整点开始，每隔5分触发)</span><br><span class="line">0 0/5 14,18 * * ? 每天下午的 2点到2点59分(整点开始，每隔5分触发) 每天下午的 18点到18点59分(整点开始，每隔5分触发)</span><br><span class="line">0 0-5 14 * * ?  每天下午的 2点到2点05分每分触发</span><br><span class="line">0 10,44 14 ? 3 WED 3月分每周三下午的 2点10分和2点44分触发</span><br><span class="line">0 15 10 ? * MON-FRI 从周一到周五每天上午的10点15分触发</span><br><span class="line">0 15 10 15 * ? 每月15号上午10点15分触发</span><br><span class="line">0 15 10 L * ? 每月最后一天的10点15分触发</span><br><span class="line">0 15 10 ? * 6L 每月最后一周的星期五的10点15分触发</span><br><span class="line">0 15 10 ? * 6L 2002-2005 从2002年到2005年每月最后一周的星期五的10点15分触发</span><br><span class="line">0 15 10 ? * 6#3 每月的第三周的星期五开始触发</span><br><span class="line">0 0 12 1/5 * ? 每月的第一个中午开始每隔5天触发一次</span><br><span class="line">0 11 11 11 11 ? 每年的11月11号 11点11分触发(光棍节)</span><br></pre></td></tr></table></figure>

<h2 id="6-Spring整合Quartz"><a href="#6-Spring整合Quartz" class="headerlink" title="6.Spring整合Quartz"></a>6.Spring整合Quartz</h2><p>需要Spring-context-support包支持,POM如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>新建两种Job测试类–&gt;DemoSimpleJob类和DemoCronJob类,并继承自QuartzJobBean,代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.quartz.JobExecutionContext;</span><br><span class="line">import org.quartz.JobExecutionException;</span><br><span class="line">import org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line">public class DemoJob extends QuartzJobBean &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext arg0) throws JobExecutionException &#123;</span><br><span class="line">        System.out.println(new SimpleDateFormat(&quot;hh:mm:ss&quot;).format(new Date()) + &quot; 输出自:&quot; + getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置spring bean如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context-4.3.xsd</span><br><span class="line">       http://www.springframework.org/schema/aop</span><br><span class="line">       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span><br><span class="line">       http://www.springframework.org/schema/tx</span><br><span class="line">       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;bean id=&quot;demoCronJob&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jobClass&quot; value=&quot;com.DemoCronJob&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;demoSimpleJob&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jobClass&quot; value=&quot;com.DemoSimpleJob&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;bean id=&quot;simpleTrigger&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.SimpleTriggerFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jobDetail&quot; ref=&quot;demoSimpleJob&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;startDelay&quot; value=&quot;1000&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;repeatInterval&quot; value=&quot;2000&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;cornTrigger&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jobDetail&quot; ref=&quot;demoCronJob&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;cronExpression&quot; value=&quot;1-30 * * * * ?&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;triggers&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=&quot;cornTrigger&quot; /&gt;</span><br><span class="line">                &lt;ref bean=&quot;simpleTrigger&quot; /&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>有待补充</code></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>任务调度</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Generator最完整配置详解</title>
    <url>/2015/11/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/Mybatis%20Generator%E6%9C%80%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>同学们有福了，花了一些时间，重新整理了一个最完整的Mybatis Generator（简称MBG）的最完整配置文件，带详解，再也不用去看EN的User Guide了；</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
"http://mybatis.org/dtd/mybatis-generator-config\_1\_0.dtd"\>
<!-- 配置生成器 \-->
<p>&lt;generatorConfiguration&gt;</p>
<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    注意，两个属性只能选址一个;

    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
<properties resource="" url="" /> \-->

 <!-- 在MBG工作的时候，需要额外加载的依赖包
     location属性指明加载jar/zip包的全路径
<classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /> \-->

<!-- context:生成一组对象的环境 
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG \-->
<p>&lt;context id=“mysql” defaultModelType=“hierarchical” targetRuntime=“MyBatis3Simple” &gt;</p>
<pre><code>&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
    一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 \--&gt;
&lt;property name\=&quot;autoDelimitKeywords&quot; value\=&quot;false&quot;/&gt;
&lt;!-- 生成的Java文件的编码 \--&gt;
&lt;property name\=&quot;javaFileEncoding&quot; value\=&quot;UTF-8&quot;/&gt;
&lt;!-- 格式化java代码 \--&gt;
&lt;property name\=&quot;javaFormatter&quot; value\=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt;
&lt;!-- 格式化XML代码 \--&gt;
&lt;property name\=&quot;xmlFormatter&quot; value\=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt;

&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是\`反引号； \--&gt;
&lt;property name\=&quot;beginningDelimiter&quot; value\=&quot;\`&quot;/&gt;
&lt;property name\=&quot;endingDelimiter&quot; value\=&quot;\`&quot;/&gt;

&lt;!-- 必须要有的，使用这个配置链接数据库
    @TODO:是否可以扩展 \--&gt;
&lt;jdbcConnection driverClass\=&quot;com.mysql.jdbc.Driver&quot; connectionURL\=&quot;jdbc:mysql:///pss&quot; userId\=&quot;root&quot; password\=&quot;admin&quot;\&gt;
    &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 \--&gt;
&lt;/jdbcConnection\&gt;

&lt;!-- java类型处理器 
    用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
    注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； \--&gt;
&lt;javaTypeResolver type\=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;\&gt;
    &lt;!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
        false：默认,
            scale&gt;0;length&gt;18：使用BigDecimal;
            scale=0;length\[10,18\]：使用Long；
            scale=0;length\[5,9\]：使用Integer；
            scale=0;length&lt;5：使用Short； \--&gt;
    &lt;property name\=&quot;forceBigDecimals&quot; value\=&quot;false&quot;/&gt;
&lt;/javaTypeResolver\&gt;

&lt;!-- java模型创建器，是必须要的元素
    负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
    targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
    targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 \--&gt;
&lt;javaModelGenerator targetPackage\=&quot;com.\_520it.mybatis.domain&quot; targetProject\=&quot;src/main/java&quot;\&gt;
    &lt;!-- for MyBatis3/MyBatis3Simple
        自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； \--&gt;
    &lt;property name\=&quot;constructorBased&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false \--&gt;
    &lt;property name\=&quot;enableSubPackages&quot; value\=&quot;true&quot;/&gt;

    &lt;!-- for MyBatis3 / MyBatis3Simple
        是否创建一个不可变的类，如果为true，
        那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 \--&gt;
    &lt;property name\=&quot;immutable&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 设置一个根对象，
        如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
        注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
            1，属性名相同，类型相同，有相同的getter/setter方法； \--&gt;
    &lt;property name\=&quot;rootClass&quot; value\=&quot;com.\_520it.mybatis.domain.BaseDomain&quot;/&gt;

    &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 \--&gt;
    &lt;property name\=&quot;trimStrings&quot; value\=&quot;true&quot;/&gt;
&lt;/javaModelGenerator\&gt;

&lt;!-- 生成SQL map的XML文件生成器，
    注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
        或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
    targetPackage/targetProject:同javaModelGenerator \--&gt;
&lt;sqlMapGenerator targetPackage\=&quot;com.\_520it.mybatis.mapper&quot; targetProject\=&quot;src/main/resources&quot;\&gt;
    &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false \--&gt;
    &lt;property name\=&quot;enableSubPackages&quot; value\=&quot;true&quot;/&gt;
&lt;/sqlMapGenerator\&gt;

&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 
    targetPackage/targetProject:同javaModelGenerator
    type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
        1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
        2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
        3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
    注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER \--&gt;
&lt;javaClientGenerator targetPackage\=&quot;com.\_520it.mybatis.mapper&quot; type\=&quot;ANNOTATEDMAPPER&quot; targetProject\=&quot;src/main/java&quot;\&gt;
    &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false \--&gt;
    &lt;property name\=&quot;enableSubPackages&quot; value\=&quot;true&quot;/&gt;

    &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
    &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; \--&gt;
&lt;/javaClientGenerator\&gt;

&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
    选择的table会生成一下文件：
    1，SQL map文件
    2，生成一个主键类；
    3，除了BLOB和主键的其他字段的类；
    4，包含BLOB的类；
    5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
    6，Mapper接口（可选）

    tableName（必要）：要生成对象的表名；
    注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
        根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
        1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
        2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
        3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
        4，否则，使用指定的大小写格式查询；
    另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
    这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式；

    可选：
    1，schema：数据库的schema；
    2，catalog：数据库的catalog；
    3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias\_actualColumnName
    4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
    5，enableInsert（默认true）：指定是否生成insert语句；
    6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
    7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
    8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
    9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
    10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
    11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
    12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
    13，modelType：参考context元素的defaultModelType，相当于覆盖；
    14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是\`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
    15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

    注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写； \--&gt;
&lt;table tableName\=&quot;userinfo&quot; \&gt;

    &lt;!-- 参考 javaModelGenerator 的 constructorBased属性\--&gt;
    &lt;property name\=&quot;constructorBased&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； \--&gt;
    &lt;property name\=&quot;ignoreQualifiersAtRuntime&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 参考 javaModelGenerator 的 immutable 属性 \--&gt;
    &lt;property name\=&quot;immutable&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 \--&gt;
    &lt;property name\=&quot;modelOnly&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 
    &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 参考javaClientGenerator 的  rootInterface 属性
    &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog 
    &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema 
    &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename 
    &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 注意，该属性只针对MyBatis3Simple有用；
        如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件； \--&gt;
    &lt;property name\=&quot;selectAllOrderByClause&quot; value\=&quot;age desc,username asc&quot;/&gt;

    &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN\_DATE，生成的属性名字就是BORN\_DATE,而不会是bornDate \--&gt;
    &lt;property name\=&quot;useActualColumnNames&quot; value\=&quot;false&quot;/&gt;

    &lt;!-- generatedKey用于生成生成主键的方法，
        如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选
        column:主键的列名；
        sqlStatement：要生成的selectKey语句，有以下可选项：
            Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY\_VAL\_LOCAL()
            DB2       :相当于selectKey的SQL为： VALUES IDENTITY\_VAL\_LOCAL()
            DB2\_MF    :相当于selectKey的SQL为：SELECT IDENTITY\_VAL\_LOCAL() FROM SYSIBM.SYSDUMMY1
            Derby      :相当于selectKey的SQL为：VALUES IDENTITY\_VAL\_LOCAL()
            HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
            Informix  :相当于selectKey的SQL为：select dbinfo(&#39;sqlca.sqlerrd1&#39;) from systables where tabid=1
            MySql      :相当于selectKey的SQL为：SELECT LAST\_INSERT\_ID()
            SqlServer :相当于selectKey的SQL为：SELECT SCOPE\_IDENTITY()
            SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
            JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性
    &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt; \--&gt;

    &lt;!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
        比如列名为：CUST\_ID,CUST\_NAME,CUST\_EMAIL,CUST\_ADDRESS等；
        那么就可以设置searchString为&quot;^CUST\_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是
        custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

        注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
        如果使用了columnOverride元素，该属性无效；

    &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt; \--&gt;

     &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
         column:要重新设置的列名；
         注意，一个table元素中可以有多个columnOverride元素哈~ \--&gt;
     &lt;columnOverride column\=&quot;username&quot;\&gt;
         &lt;!-- 使用property属性来指定列要生成的属性名称 \--&gt;
         &lt;property name\=&quot;property&quot; value\=&quot;userName&quot;/&gt;

         &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名
         &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt; \--&gt;

         &lt;!-- jdbcType用于指定该列的JDBC类型 
         &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; \--&gt;

         &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
             注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler
             只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com.\_520it.mybatis.MyTypeHandler&#125;的参数描述
         &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; \--&gt;

         &lt;!-- 参考table元素的delimitAllColumns配置，默认为false
         &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt; \--&gt;
     &lt;/columnOverride\&gt;

     &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 
         column:指定要忽略的列的名字；
         delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

         注意，一个table元素中可以有多个ignoreColumn元素
     &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt; \--&gt;
&lt;/table\&gt;
</code></pre>
<p>&lt;&#x2F;context&gt;</p>
<p>&lt;&#x2F;generatorConfiguration&gt;</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/2015/11/14/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/Shiro%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E9%99%86%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><ul>
<li>登陆、授权、拦截</li>
<li>按钮权限控制</li>
</ul>
<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><ul>
<li>Maven+Spring+shiro</li>
<li>自定义登陆、授权</li>
<li>自定义拦截器</li>
<li>加载数据库资源构建拦截链</li>
</ul>
<p>使用总结：</p>
<p>1、需要设计的数据库：用户、角色、权限、资源</p>
<p>2、可以通过，角色，权限，两个拦截器同时确定是否能访问</p>
<p>3、角色与权限的关系，role1&#x3D;permission1,permission2，多级的权限：sys:permission1,拥有高级权限同时用于低级权限。</p>
<p>4、perms[“permission1”] 为权限</p>
<p>5、拦截器机制介绍了拦截角色还是权限</p>
<p>6、角色与权限 是两个概念</p>
<p>7、权限-资源，一对一。资源分为上下级，因此权限分为父权限，子权限。创建资源的时候，创建权限。权限里资源的别名</p>
<p>8、角色-权限，一对多。角色里权限的别名</p>
<p>9、按钮是通过权限来控制的</p>
<p>10、防止有父级资源可以访问，子级资源不能访问的情况，不适用 sys:add 权限写法</p>
<h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><h3 id="1、Pom-xml"><a href="#1、Pom-xml" class="headerlink" title="1、Pom.xml"></a>1、Pom.xml</h3><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1     &lt;properties&gt;<br> 2         &lt;spring.version&gt;4.3.4.RELEASE&lt;&#x2F;spring.version&gt;<br> 3     &lt;&#x2F;properties&gt;<br> 4         &lt;dependency&gt;<br> 5             &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;<br> 6             &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;<br> 7             &lt;version&gt;4.9&lt;&#x2F;version&gt;<br> 8         &lt;&#x2F;dependency&gt;<br> 9         &lt;dependency&gt;<br>10             &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;<br>11             &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;<br>12             &lt;version&gt;1.1.3&lt;&#x2F;version&gt;<br>13         &lt;&#x2F;dependency&gt;<br>14         &lt;dependency&gt;<br>15             &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;<br>16             &lt;artifactId&gt;shiro-core&lt;&#x2F;artifactId&gt;<br>17             &lt;version&gt;1.2.2&lt;&#x2F;version&gt;<br>18         &lt;&#x2F;dependency&gt;<br>19         &lt;dependency&gt;<br>20             &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;<br>21             &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;<br>22             &lt;version&gt;1.2.2&lt;&#x2F;version&gt;<br>23         &lt;&#x2F;dependency&gt;<br>24         &lt;dependency&gt;<br>25             &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;<br>26             &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;<br>27             &lt;version&gt;3.0.1&lt;&#x2F;version&gt;<br>28             &lt;scope&gt;provided&lt;&#x2F;scope&gt;<br>29         &lt;&#x2F;dependency&gt;<br>30         &lt;dependency&gt;<br>31             &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;<br>32             &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;<br>33             &lt;version&gt;${spring.version}&lt;&#x2F;version&gt;<br>34         &lt;&#x2F;dependency&gt;<br>35         <dependency><br>36             <groupId>org.apache.shiro</groupId><br>37             <artifactId>shiro-ehcache</artifactId><br>38             <version>1.2.2</version><br>39         </dependency><br>40         <dependency><br>41             <groupId>org.springframework</groupId><br>42             <artifactId>spring-context</artifactId><br>43             <version>${spring.version}</version><br>44         </dependency><br>45         <dependency><br>46             <groupId>org.apache.shiro</groupId><br>47             <artifactId>shiro-web</artifactId><br>48             <version>1.2.2</version><br>49         </dependency><br>50         <dependency><br>51             <groupId>net.sf.ehcache</groupId><br>52             <artifactId>ehcache</artifactId><br>53             <version>2.10.1</version><br>54     </dependency> </p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="2、web-xml"><a href="#2、web-xml" class="headerlink" title="2、web.xml"></a>2、web.xml</h3><p>　　Servlet拦截访问，使用注解更方便，需要删除项目中的servlet使用javax.servlet-api 3.0 包</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1 package com.cyd.shiro;<br> 2<br> 3 import java.io.IOException;<br> 4<br> 5 import javax.servlet.ServletException;<br> 6 import javax.servlet.annotation.WebServlet;<br> 7 import javax.servlet.http.HttpServlet;<br> 8 import javax.servlet.http.HttpServletRequest;<br> 9 import javax.servlet.http.HttpServletResponse;<br>10<br>11 import org.apache.shiro.SecurityUtils;<br>12 import org.apache.shiro.authc.AuthenticationException;<br>13 import org.apache.shiro.authc.IncorrectCredentialsException;<br>14 import org.apache.shiro.authc.UnknownAccountException;<br>15 import org.apache.shiro.authc.UsernamePasswordToken;<br>16 import org.apache.shiro.subject.Subject;<br>17 import org.apache.shiro.web.util.SavedRequest;<br>18 import org.apache.shiro.web.util.WebUtils;<br>19 import org.junit.Test;<br>20<br>21 @WebServlet(name &#x3D; “loginServlet”, urlPatterns &#x3D; “&#x2F;loginController”)<br>22 public class LoginServlet extends HttpServlet {<br>23     @Override<br>24     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br>25         req.getRequestDispatcher(“login.jsp”).forward(req, resp);<br>26     }<br>27<br>28     @Override<br>29     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br>30         System.out.println(LoginServlet.class.toString());<br>31         String error &#x3D; null;<br>32         String username &#x3D; req.getParameter(“username”);<br>33         String password &#x3D; req.getParameter(“password”);<br>34         Subject subject &#x3D; SecurityUtils.getSubject();<br>35         UsernamePasswordToken token &#x3D; new UsernamePasswordToken(username, password);<br>36         try {<br>37             subject.login(token);<br>38         } catch (UnknownAccountException e) {<br>39             error &#x3D; “用户名&#x2F;密码错误”;<br>40         } catch (IncorrectCredentialsException e) {<br>41             error &#x3D; “用户名&#x2F;密码错误”;<br>42         } catch (AuthenticationException e) {<br>43             &#x2F;&#x2F; 其他错误，比如锁定，如果想单独处理请单独catch处理<br>44             error &#x3D; “其他错误：” + e.getMessage();<br>45         }<br>46         if (error !&#x3D; null) {&#x2F;&#x2F; 出错了，返回登录页面<br>47             req.setAttribute(“error”, error);<br>48             req.getRequestDispatcher(“login.jsp”).forward(req, resp);<br>49         } else {&#x2F;&#x2F; 登录成功<br>50             &#x2F;&#x2F;跳转到拦截登陆前的地址<br>51             SavedRequest request&#x3D;WebUtils.getSavedRequest(req);<br>52             String url &#x3D;request.getRequestURI();<br>53             req.getRequestDispatcher(url.substring(url.lastIndexOf(‘&#x2F;‘))).forward(req, resp);<br>54         }<br>55     }<br>56<br>57 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="3、Spring-shiro-xml"><a href="#3、Spring-shiro-xml" class="headerlink" title="3、Spring-shiro.xml"></a>3、Spring-shiro.xml</h3><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;beans xmlns=“<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>“ xmlns:xsi=“<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“ xmlns:context=“<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“ xmlns:util=“<a href="http://www.springframework.org/schema/util">http://www.springframework.org/schema/util</a>“ xsi:schemaLocation=“<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a><br>    <a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a><br>    <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br>    <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a><br>    <a href="http://www.springframework.org/schema/util">http://www.springframework.org/schema/util</a><br>    <a href="http://www.springframework.org/schema/util/spring-util-4.2.xsd%22/%3E">http://www.springframework.org/schema/util/spring-util-4.2.xsd&quot;\&gt;</a></p>
<pre><code>&lt;context:component-scan base-package\=&quot;com.cyd.shiro.\*&quot;\&gt;&lt;/context:component-scan\&gt;

&lt;!-- Shiro的Web过滤器 \--&gt;
&lt;bean id\=&quot;shiroFilter&quot; class\=&quot;com.cyd.shiro.ExtendShiroFilterFactoryBean&quot;\&gt;
    &lt;property name\=&quot;securityManager&quot; ref\=&quot;securityManager&quot; /&gt;
    &lt;property name\=&quot;loginUrl&quot; value\=&quot;/login.jsp&quot; /&gt;
    &lt;!-- &lt;property name=&quot;successUrl&quot; value=&quot;/index.jsp&quot; /&gt; \--&gt;
    &lt;property name\=&quot;unauthorizedUrl&quot; value\=&quot;/unauthorized.jsp&quot; /&gt;
    &lt;property name\=&quot;filters&quot;\&gt;
        &lt;util:map\&gt;
            &lt;!-- &lt;entry key=&quot;onperms&quot; value-ref=&quot;URLPermissionsFilter&quot; /&gt; \--&gt;
            &lt;entry key\=&quot;onrole&quot; value-ref\=&quot;ExtendRolesAuthorizationFilter&quot; /&gt;
        &lt;/util:map\&gt;
    &lt;/property\&gt; 
    &lt;property name\=&quot;filterChainDefinitions&quot;\&gt;
        &lt;value\&gt; /unauthorized.jsp = anon
            /logoutController=anon
            /login.jsp=authc
        &lt;/value\&gt;
    &lt;/property\&gt;
&lt;/bean\&gt;

&lt;!-- 安全管理器 \--&gt;
&lt;bean id\=&quot;securityManager&quot; class\=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;\&gt;
    &lt;property name\=&quot;realm&quot; ref\=&quot;myRealm&quot; /&gt;
    &lt;property name\=&quot;cacheManager&quot; ref\=&quot;cacheManager&quot; /&gt;
&lt;/bean\&gt;
&lt;!-- 自定义认证，授权 \--&gt;
&lt;bean id\=&quot;myRealm&quot; class\=&quot;com.cyd.shiro.AdminRealm&quot;\&gt;&lt;/bean\&gt;

&lt;!-- 注册ehcache，不然每次访问都要登陆 \--&gt;
&lt;bean id\=&quot;cacheManager&quot; class\=&quot;org.apache.shiro.cache.ehcache.EhCacheManager&quot;\&gt;
    &lt;property name\=&quot;cacheManagerConfigFile&quot; value\=&quot;classpath:ehcache.xml&quot; /&gt;
&lt;/bean\&gt;
&lt;!-- 自定义鉴权拦截器 \--&gt;
&lt;bean id\=&quot;URLPermissionsFilter&quot; class\=&quot;com.cyd.shiro.URLPermissionsFilter&quot; /&gt;
&lt;bean id\=&quot;ExtendRolesAuthorizationFilter&quot; class\=&quot;com.cyd.shiro.ExtendRolesAuthorizationFilter&quot; /&gt;
</code></pre>
<p>&lt;&#x2F;beans&gt;</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="4、Ehcache-xml-缓存"><a href="#4、Ehcache-xml-缓存" class="headerlink" title="4、Ehcache.xml 缓存"></a>4、Ehcache.xml 缓存</h3><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;ehcache xmlns:xsi=“<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“ xsi:noNamespaceSchemaLocation=“..&#x2F;config&#x2F;ehcache.xsd”&gt;<br>&lt;diskStore path=“java.io.tmpdir”&#x2F;&gt;<br>&lt;defaultCache<br>        maxElementsInMemory=“10000” eternal=“false” timeToIdleSeconds=“600” timeToLiveSeconds=“600” overflowToDisk=“true” maxElementsOnDisk=“10000000” diskPersistent=“false” diskExpiryThreadIntervalSeconds=“120” memoryStoreEvictionPolicy=“LRU”<br>        &#x2F;&gt;</p>
<!-- 内存中最多可以存储多少个数据 
    是否永久有效
    空闲时间
    存活时间
    内存空间不够是否存储到磁盘
    磁盘最大存储个数
    服务器重启,磁盘数据是否需要
    线程
    淘汰策略(最近最少使用)  
 \-->  
<p>&lt;&#x2F;ehcache&gt;</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="5、登陆Servlet"><a href="#5、登陆Servlet" class="headerlink" title="5、登陆Servlet"></a>5、登陆Servlet</h3><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>package com.cyd.shiro;</p>
<p>import java.io.IOException;</p>
<p>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.AuthenticationException;<br>import org.apache.shiro.authc.IncorrectCredentialsException;<br>import org.apache.shiro.authc.UnknownAccountException;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.subject.Subject;<br>import org.apache.shiro.web.util.SavedRequest;<br>import org.apache.shiro.web.util.WebUtils;</p>
<p>@WebServlet(name &#x3D; “loginServlet”, urlPatterns &#x3D; “&#x2F;loginController”)<br>public class LoginServlet extends HttpServlet {<br>    @Override<br>    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br>        req.getRequestDispatcher(“login.jsp”).forward(req, resp);<br>    }</p>
<pre><code>@Override
protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;
    System.out.println(LoginServlet.class.toString());
    String error = null;
    String username = req.getParameter(&quot;username&quot;);
    String password = req.getParameter(&quot;password&quot;);
    Subject subject = SecurityUtils.getSubject();
    UsernamePasswordToken token = new UsernamePasswordToken(username, password);
    try &#123;
        subject.login(token); 
    &#125; catch (UnknownAccountException e) &#123; 
        error = &quot;用户名/密码错误&quot;;
    &#125; catch (IncorrectCredentialsException e) &#123;
        error = &quot;用户名/密码错误&quot;;
    &#125; catch (AuthenticationException e) &#123;
        // 其他错误，比如锁定，如果想单独处理请单独catch处理
        error = &quot;其他错误：&quot; + e.getMessage();
    &#125;
    if (error != null) &#123;// 出错了，返回登录页面
        req.setAttribute(&quot;error&quot;, error);
        req.getRequestDispatcher(&quot;login.jsp&quot;).forward(req, resp);
    &#125; else &#123;// 登录成功
        //跳转到拦截登陆前的地址
        SavedRequest request=WebUtils.getSavedRequest(req);
        String url =request.getRequestURI();
        req.getRequestDispatcher(url.substring(url.lastIndexOf(&#39;/&#39;))).forward(req, resp);
    &#125;
&#125;
</code></pre>
<p>}</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="6、自定义登陆、授权。"><a href="#6、自定义登陆、授权。" class="headerlink" title="6、自定义登陆、授权。"></a>6、自定义登陆、授权。</h3><p>　　根据需求自定义登陆异常。从数据库查询出当前用户拥有的权限并授权</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1 package com.cyd.shiro;<br> 2<br> 3 import java.util.HashSet;<br> 4 import java.util.LinkedList;<br> 5 import java.util.List;<br> 6 import java.util.Set;<br> 7<br> 8 import org.apache.shiro.authc.AuthenticationException;<br> 9 import org.apache.shiro.authc.AuthenticationInfo;<br>10 import org.apache.shiro.authc.AuthenticationToken;<br>11 import org.apache.shiro.authc.SimpleAuthenticationInfo;<br>12 import org.apache.shiro.authc.UnknownAccountException;<br>13 import org.apache.shiro.authz.AuthorizationInfo;<br>14 import org.apache.shiro.authz.SimpleAuthorizationInfo;<br>15 import org.apache.shiro.realm.AuthorizingRealm;<br>16 import org.apache.shiro.subject.PrincipalCollection;<br>17 import org.springframework.beans.factory.annotation.Autowired;<br>18<br>19 import com.cyd.helloworld.SysRoles;<br>20 import com.cyd.helloworld.SysUsers;<br>21 import com.cyd.shiro.admin.SysUsersService;<br>22<br>23 public class AdminRealm extends AuthorizingRealm {<br>24<br>25     @Autowired<br>26     private SysUsersService    sysusersservice;<br>27     &#x2F;&#x2F; 认证登陆<br>28     @Override<br>29     protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {<br>30         System.out.println(“do doGetAuthenticationInfo”);<br>31         String username &#x3D; (String) token.getPrincipal();<br>32         SysUsers user &#x3D; sysusersservice.getSysUsers(username);<br>33         if (user &#x3D;&#x3D; null) {<br>34             throw new UnknownAccountException();&#x2F;&#x2F; 没找到帐号<br>35         }<br>36         SimpleAuthenticationInfo authenticationInfo &#x3D; new SimpleAuthenticationInfo(user.getUserName(), &#x2F;&#x2F; 用户名<br>37                 user.getPassWorld(), &#x2F;&#x2F; 密码<br>38                 getName() &#x2F;&#x2F; realm name<br>39         );<br>40         return authenticationInfo;<br>41     }<br>42<br>43     &#x2F;&#x2F; 用户授权<br>44     @Override<br>45     protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {<br>46         System.out.println(“do doGetAuthorizationInfo”);<br>47         String username &#x3D; (String)principals.getPrimaryPrincipal();<br>48         SimpleAuthorizationInfo authorizationInfo &#x3D; new SimpleAuthorizationInfo();<br>49         &#x2F;&#x2F;从数据库加载当前用户的角色，例如：[admin]<br>50         authorizationInfo.setRoles(new HashSet<String>(sysusersservice.getSysRoles(username)));<br>51         &#x2F;&#x2F;从数据库加载当前用户可以访问的资源，例如：[index.jsp, abc.jsp]<br>52         authorizationInfo.setStringPermissions(new HashSet<String>(sysusersservice.getSysResource(username)));<br>53<br>54         return authorizationInfo;<br>55     }<br>56 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="7、自定义拦截器。"><a href="#7、自定义拦截器。" class="headerlink" title="7、自定义拦截器。"></a>7、自定义拦截器。</h3><p>　　重写拦截器是因为shiro 验证是否有权限访问是需要当前用户拥有拦截器链的所有权限。一般需求只需要拥有部分权限即可。</p>
<p>       角色验证拦截，hasRole和hasAllRoles 验证是否有权限。</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1 package com.cyd.shiro;<br> 2<br> 3 import java.io.IOException;<br> 4 import java.util.Set;<br> 5<br> 6 import javax.servlet.ServletRequest;<br> 7 import javax.servlet.ServletResponse;<br> 8<br> 9 import org.apache.shiro.subject.Subject;<br>10 import org.apache.shiro.util.CollectionUtils;<br>11 import org.apache.shiro.web.filter.authz.RolesAuthorizationFilter;<br>12<br>13 &#x2F;**<br>14  * 通过角色验证权限<br>15  * @author chenyd<br>16  * 2017年11月21日<br>17  *&#x2F;<br>18 public class ExtendRolesAuthorizationFilter extends RolesAuthorizationFilter{<br>19<br>20     @Override<br>21     public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws IOException {<br>22<br>23         System.out.println(ExtendRolesAuthorizationFilter.class.toString());<br>24         Subject subject &#x3D; getSubject(request, response);<br>25         String[] rolesArray &#x3D; (String[]) mappedValue;<br>26<br>27         if (rolesArray &#x3D;&#x3D; null || rolesArray.length &#x3D;&#x3D; 0) {<br>28             &#x2F;&#x2F;no roles specified, so nothing to check - allow access.<br>29             return true;<br>30         }<br>31         &#x2F;&#x2F;AbstractFilter<br>32         Set<String> roles &#x3D; CollectionUtils.asSet(rolesArray);<br>33<br>34         boolean flag&#x3D;false;<br>35         for(String role: roles){<br>36             if(subject.hasRole(role)){<br>37                 flag&#x3D;true;<br>38                 break;<br>39             }<br>40         }<br>41         return flag;<br>42     }<br>43 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>       url拦截校验，isPermitted和isPermittedAll验证是否有权限访问，</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1 package com.cyd.shiro;<br> 2<br> 3 import java.io.IOException;<br> 4<br> 5 import javax.servlet.ServletRequest;<br> 6 import javax.servlet.ServletResponse;<br> 7 import javax.servlet.http.HttpServletRequest;<br> 8<br> 9 import org.apache.shiro.subject.Subject;<br>10 import org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter;<br>11 &#x2F;**<br>12  * 通过字符串验证权限<br>13  * @author chenyd<br>14  * 2017年11月21日<br>15  *&#x2F;<br>16 public class URLPermissionsFilter extends PermissionsAuthorizationFilter {<br>17<br>18     &#x2F;**<br>19      * mappedValue 访问该url时需要的权限<br>20      * subject.isPermitted 判断访问的用户是否拥有mappedValue权限<br>21      * 重写拦截器，只要符合配置的一个权限，即可通过<br>22      *&#x2F;<br>23     @Override<br>24     public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)<br>25             throws IOException {<br>26         System.out.println(URLPermissionsFilter.class.toString());<br>27         Subject subject &#x3D; getSubject(request, response);<br>28         &#x2F;&#x2F; DefaultFilterChainManager<br>29         &#x2F;&#x2F; PathMatchingFilterChainResolver<br>30         String[] perms &#x3D; (String[]) mappedValue;<br>31         boolean isPermitted &#x3D; false;<br>32         if (perms !&#x3D; null &amp;&amp; perms.length &gt; 0) {<br>33             for (String str : perms) {<br>34                 if (subject.isPermitted(str)) {<br>35                     isPermitted &#x3D; true;<br>36                 }<br>37             }<br>38         }<br>39<br>40         return isPermitted;<br>41     }<br>42 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h2 id="8、加载数据库资源构建拦截器链"><a href="#8、加载数据库资源构建拦截器链" class="headerlink" title="8、加载数据库资源构建拦截器链"></a>8、加载数据库资源构建拦截器链</h2><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> 1 package com.cyd.shiro;<br> 2<br> 3 import java.util.Map;<br> 4<br> 5 import org.apache.shiro.config.Ini;<br> 6 import org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br> 7 import org.apache.shiro.util.CollectionUtils;<br> 8 import org.apache.shiro.web.config.IniFilterChainResolverFactory;<br> 9 import org.springframework.beans.factory.annotation.Autowired;<br>10<br>11 import com.cyd.shiro.admin.SysUsersService;<br>12<br>13 public class ExtendShiroFilterFactoryBean extends ShiroFilterFactoryBean{<br>14<br>15     @Autowired<br>16     private SysUsersService    sysusersservice;<br>17     &#x2F;&#x2F;PathMatchingFilter<br>18     @Override<br>19     public void setFilterChainDefinitions(String definitions) {<br>20         &#x2F;&#x2F;数据库中获取权限，{&#x2F;index.jsp&#x3D;authc,onrole[“admin2”,”admin”], &#x2F;abc.jsp&#x3D;authc,onrole[“admin2”,”admin”]}<br>21         Map&lt;String, String&gt; otherChains &#x3D; sysusersservice.getFilterChain();<br>22         Ini ini &#x3D; new Ini();<br>23         ini.load(definitions);<br>24         Ini.Section section &#x3D; ini.getSection(IniFilterChainResolverFactory.URLS);<br>25         if (CollectionUtils.isEmpty(section)) {<br>26             section &#x3D; ini.getSection(Ini.DEFAULT_SECTION_NAME);<br>27         }<br>28         section.putAll(otherChains);<br>29         setFilterChainDefinitionMap(section);<br>30     }<br>31<br>32 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h2 id="三、-学习笔记"><a href="#三、-学习笔记" class="headerlink" title="三、  学习笔记"></a>三、  学习笔记</h2><h3 id="1、INI文件配置"><a href="#1、INI文件配置" class="headerlink" title="1、INI文件配置"></a>1、INI文件配置</h3><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>[users]  #提供了对用户&#x2F;密码及其角色的配置，用户名&#x3D;密码，角色1，角色2  </p>
<p>zhang&#x3D;123,admin</p>
<p>[roles]  #提供了角色及权限之间关系的配置，角色&#x3D;权限1，权限2  </p>
<p>admin&#x3D;index.jsp</p>
<p>[urls] #配置拦截器链，&#x2F;** 为拦截器链名称（filterChain），authc,roles[admin],perms[“index.jsp”]拦截器列表名</p>
<p>&#x2F;login.jsp&#x3D;anon</p>
<p>&#x2F;loginController&#x3D;anon</p>
<p>&#x2F;unauthorized.jsp&#x3D;anon</p>
<p>&#x2F;**&#x3D;authc,roles[admin],perms[“index.jsp”] </p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h2 id="2、拦截器链"><a href="#2、拦截器链" class="headerlink" title="2、拦截器链"></a>2、拦截器链</h2><p>　　Shiro的所有拦截器链名定义在源码DefaultFilter中。</p>
<p>anon            </p>
<p>例子&#x2F;admins&#x2F;**&#x3D;anon 没有参数，表示可以匿名使用。 </p>
<p>authc</p>
<p>例如&#x2F;admins&#x2F;user&#x2F;**&#x3D;authc表示需要认证(登录)才能使用，没有参数  </p>
<p>roles</p>
<p> 例子&#x2F;admins&#x2F;user&#x2F;**&#x3D;roles[admin],参数可以写多个，多个时必须加上引号，  </p>
<p> 并且参数之间用逗号分割，当有多个参数时，例如admins&#x2F;user&#x2F;**&#x3D;roles[“admin,guest”],  </p>
<p> 每个参数通过才算通过，相当于hasAllRoles()方法。  </p>
<p>perms</p>
<p>例子&#x2F;admins&#x2F;user&#x2F;**&#x3D;perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，  </p>
<p>例如&#x2F;admins&#x2F;user&#x2F;**&#x3D;perms[“user:add:*,user:modify:*“]，当有多个参数时必须每个参数都通过才通过，  </p>
<p>想当于isPermitedAll()方法。</p>
<p>rest</p>
<p>例子&#x2F;admins&#x2F;user&#x2F;**&#x3D;rest[user],根据请求的方法，相当于&#x2F;admins&#x2F;user&#x2F;**&#x3D;perms[user:method] ,  </p>
<p> 其中method为post，get，delete等。</p>
<p>port</p>
<p>例子&#x2F;admins&#x2F;user&#x2F;**&#x3D;port[8081],当请求的url的端口不是8081是跳转到schemal:&#x2F;&#x2F;serverName:8081?queryString,  其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。</p>
<p>authcBasic                                 </p>
<p>例如&#x2F;admins&#x2F;user&#x2F;**&#x3D;authcBasic没有参数表示httpBasic认证</p>
<p>ssl</p>
<p>例子&#x2F;admins&#x2F;user&#x2F;**&#x3D;ssl没有参数，表示安全的url请求，协议为https</p>
<p>user</p>
<p>例如&#x2F;admins&#x2F;user&#x2F;**&#x3D;user没有参数表示必须存在用户，当登入操作时不做检查  </p>
<p><strong>注：anon，authcBasic，auchc，user是认证过滤器，</strong> </p>
<p> <strong>perms，roles，ssl，rest，port是授权过滤器</strong> </p>
<h3 id="3、拦截器链源码类关系图"><a href="#3、拦截器链源码类关系图" class="headerlink" title="3、拦截器链源码类关系图"></a>3、拦截器链源码类关系图</h3><p> <img src="https://images2017.cnblogs.com/blog/990457/201711/990457-20171122183041446-117461293.jpg"> </p>
<p>①   NameableFilter有一个name属性，定义每一个filter的名字。</p>
<p>②   OncePerRequestFilter保证客户端请求后该filter的doFilter只会执行一次。</p>
<p>　　doFilterInternal非常重要，在shiro整个filter体系中的核心方法及实质入口。另外，shiro是通过在request中设置一个该filter特定的属性值来保证该filter只会执行一次的。</p>
<p>③   AdviceFilter中主要是对doFilterInternal做了更细致的切分。</p>
<p>　　springmvc中的Interceptor，doFilterInternal会先调用preHandle做一些前置判断，如果返回false则filter链不继续往下执行，</p>
<p>④   AccessControlFilter中的对onPreHandle方法做了进一步细化。</p>
<p>　　isAccessAllowed方法和onAccessDenied方法达到控制效果。这两个方法都是抽象方法，由子类去实现。到这一层应该明白。isAccessAllowed和onAccessDenied方法会影响到onPreHandle方法，而onPreHandle方法会影响到preHandle方法，而preHandle方法会达到控制filter链是否执行下去的效果。所以如果正在执行的filter中isAccessAllowed和onAccessDenied都返回false，则整个filter控制链都将结束，不会到达目标方法（客户端请求的接口），而是直接跳转到某个页面（由filter定义的，将会在authc中看到）。</p>
<p>⑤   FormAuthenticationFiltershiro提供的登录的filter，</p>
<p>　　saveRequestAndRedirectToLogin保存request并拦截到登陆页面，登陆成功后可从WebUtils.getSavedRequest(req);中取出。</p>
<h2 id="四、未实现的功能"><a href="#四、未实现的功能" class="headerlink" title="四、未实现的功能"></a>四、未实现的功能</h2><ul>
<li>动态URL权限控制。当修改权限时，重新加载拦截器链。</li>
<li>密码加密</li>
<li>记住我</li>
<li>在线人数控制</li>
<li>集成验证码</li>
</ul>
<p>　</p>
<h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><blockquote>
<ul>
<li> spring mvc整合shiro登录 权限验证 　　<a href="http://blog.csdn.net/rongku/article/details/51336424">http://blog.csdn.net/rongku/article/details/51336424</a></li>
<li>Shiro（4）默认鉴权与自定义鉴权 　　<a href="http://blog.csdn.net/zhengwei223/article/details/9981741">http://blog.csdn.net/zhengwei223/article/details/9981741</a></li>
<li>拦截器机制-跟我学shiro 　　　　<a href="http://jinnianshilongnian.iteye.com/blog/2025656">http://jinnianshilongnian.iteye.com/blog/2025656</a></li>
<li>shiro Filter–拦截器源码解释　　 <a href="https://www.cnblogs.com/yoohot/p/6085830.html">https://www.cnblogs.com/yoohot/p/6085830.html</a></li>
<li>动态URL　　 <a href="http://blog.csdn.net/shadowsick/article/details/39001273">http://blog.csdn.net/shadowsick/article/details/39001273</a></li>
<li>重写shirofilterbean方式加载数据库资源权限　　 <a href="http://blog.csdn.net/qq_18333833/article/details/70243620">http://blog.csdn.net/qq_18333833&#x2F;article&#x2F;details&#x2F;70243620</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs清理无用依赖包</title>
    <url>/2019/05/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Javascript/Nodejs%E6%B8%85%E7%90%86%E6%97%A0%E7%94%A8%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
    <content><![CDATA[<p>npm-check</p>
<p> npm-check 是一个检查依赖包是否存在过期、不正确、未使用等情况的工具。</p>
<p> 全局安装：</p>
<blockquote>
<p>npm  install  -g  npm-check</p>
</blockquote>
<p> 使用：</p>
<blockquote>
<p>npm-check</p>
</blockquote>
<p>上述指令会自动检查当前目录下的依赖包情况。</p>
<p> 这里我们重点关注下未使用的依赖包。npm-check 在检查依赖包是否使用时判断的依据是文件中是否存在 require（package） 这条语句，例如：</p>
<blockquote>
<p>const lodash &#x3D; require(‘lodash’);</p>
</blockquote>
<p>只要存在这条语句，即使我并未在其它任何地方使用（也就是说这是个无用的包），但是 npm-check 是不会将其判定为未使用的。</p>
<p> ESLint</p>
<p>为了解决上述存在的这种情况，我们可以借助 ESLint 先去检查代码是否存在未使用的变量（no-unused-vars），这样就可以检查某个包 require 了但并未在后续使用的情况。</p>
<p>全局安装：</p>
<blockquote>
<p>npm install -g eslint</p>
</blockquote>
<p>编写 .eslintrc.js 配置文件：</p>
<p> <img src="https://images2018.cnblogs.com/blog/1211559/201808/1211559-20180821151852625-130510713.jpg"></p>
<blockquote>
<p>eslint  –config  .eslintrc.js  .&#x2F;</p>
</blockquote>
<p>执行上述指令便会检查当前目录下的所有代码是否存在定义了但未使用的变量。删除掉未使用的变量（包含对依赖包的引用）之后，再运行 npm-check 便能正确的找出那些在项目中已不再使用的依赖包了。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>npm修改全局包安装路径</title>
    <url>/2024/12/17/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Javascript/npm%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E5%8C%85%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>默认安装路径：<code>%AppData%\Roaming\npm</code><br>全局缓存路径：<code>%AppData%\Roaming\npm_cache</code></p>
<p>安装全局包命令: <code>npm install -g &lt;包名&gt;</code></p>
<h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置全局包安装路径</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;&lt;目标路径&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改缓存包安装路径</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;&lt;目标路径&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全局包安装路径</span></span><br><span class="line">npm config get prefix </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看缓存包安装路径</span></span><br><span class="line">npm config get cache </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有配置</span></span><br><span class="line">npm config <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>添加环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_PATH=&quot;&lt;全局安装包路径&gt;\node_modules\&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm修改国内源</title>
    <url>/2024/12/17/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Javascript/npm%E4%BF%AE%E6%94%B9%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h3 id="npm镜像源地址"><a href="#npm镜像源地址" class="headerlink" title="npm镜像源地址"></a>npm镜像源地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">https://registry.npmjs.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 淘宝npm镜像</span></span><br><span class="line">https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云npm镜像</span></span><br><span class="line">https://npm.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯云npm镜像</span></span><br><span class="line">https://mirrors.cloud.tencent.com/npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 华为云npm镜像</span></span><br><span class="line">https://mirrors.huaweicloud.com/repository/npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易npm镜像</span></span><br><span class="line">https:/mirrors.163.com/npm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像源</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>基于.NET6和VUE3搭建SPA应用</title>
    <url>/2024/12/17/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Javascript/%E5%9F%BA%E4%BA%8E.NET6%E5%92%8CVue3%E6%90%AD%E5%BB%BASPA%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>.NET 出到 6 之后，原本官方的 [SPA 套件]被弃用(<a href="https://github.com/dotnet/aspnetcore/issues/12890)%EF%BC%8C%E6%96%B0%E7%89%88%E6%94%B9%E6%88%90%E4%BD%BF%E7%94%A8">https://github.com/dotnet/aspnetcore/issues/12890)，新版改成使用</a> Vue-CLI + SPA Proxy。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认.NET版本,此处为 6.0.200</span></span><br><span class="line">dotnet --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认Node版本,此处为 v16.4.0</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>

<h2 id="新建-NET项目"><a href="#新建-NET项目" class="headerlink" title="新建.NET项目"></a>新建.NET项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建react模板项目</span></span><br><span class="line">dotnet new react</span><br></pre></td></tr></table></figure>

<p>前端文件放在ClientApp目录,清空此目录下所有文件并使用Vue-CLI新建Vue项目并修改对应参数即可</p>
<h2 id="新建Vue项目"><a href="#新建Vue项目" class="headerlink" title="新建Vue项目"></a>新建Vue项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Vue CLI, 此处使用版本 v5.0.1</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vue CLI 不允许大写字母，此处使用 client-app作为项目名</span></span><br><span class="line">vue create client-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">npm run dev </span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开项目<code>.csproj</code>文件,修改<code>SpaRoot</code>节点值为<code>client-app</code>所在目录，并注意这里的<code>SpaProxyServerUrl</code> 节点的值是前端的访问地址，<code>SpaProxyLaunchCommand</code>是<code>npm start</code>是前端的启动命令。</p>
<p>[^注意]若<code>SpaProxyServerUrl</code>是HTTPS需要改成http。<br>[^注意]每次新建.NET项目时对应的端口都不一样，前端需要改成对应的端口。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaRoot</span>&gt;</span>client-app\<span class="tag">&lt;/<span class="name">SpaRoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaProxyServerUrl</span>&gt;</span>http://localhost:44405<span class="tag">&lt;/<span class="name">SpaProxyServerUrl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaProxyLaunchCommand</span>&gt;</span>npm start<span class="tag">&lt;/<span class="name">SpaProxyLaunchCommand</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>修改<code>package.json</code>,在scripts中添加启动命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>vue.config.js</code>,将<code>devServer port</code>换成44405。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125;  = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">44405</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transplieDependencies</span>: [</span><br><span class="line">    <span class="string">&#x27;vuetify&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>SPA</tag>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda环境配置</title>
    <url>/2025/03/26/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Anaconda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x Anaconda3-2024.10-1-Linux-x86_64.sh <span class="comment"># 文件添加执行权限</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sh Anaconda3-2024.10-1-Linux-x86_64.sh <span class="comment"># 执行安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please, press ENTER to continue -&gt; 回车继续</span></span><br><span class="line"><span class="comment"># 阅读协议，同意按回车（跳过ctrl+c）</span></span><br><span class="line"><span class="comment"># Do you accept the license terms? [yes|no] -&gt; 同意协议输入yes回车</span></span><br><span class="line"><span class="comment"># Anaconda3 will now be installed into this location -&gt; 选择安装路径（本文安装/usr/local/anaconda3），等待安装</span></span><br><span class="line"><span class="comment"># by running conda init? [yes|no] -&gt; 是否添加系统环境，输入yes回车</span></span><br><span class="line"><span class="comment"># 待安装结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新当前用户环境（激活环境）</span></span><br><span class="line"><span class="built_in">source</span> /usr/local/anaconda3/bin</span><br></pre></td></tr></table></figure>

<p>如果是否添加环境变量选择<code>no</code>的话，安装完成需要手动添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANACONDA3_ROOT=/usr/local/anaconda3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANACONDA3_ROOT</span>/bin:<span class="variable">$ANACONDA3_ROOT</span>/condabin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>如果安装时选择了<code>no</code>但安装完成还想初始化可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/local/anaconda3/bin/activate</span><br><span class="line">conda init</span><br></pre></td></tr></table></figure>
<p>![[Anaconda环境配置&#x2F;IMG-20250804110742705.png]]</p>
<p>安装完成后查看<code>.bashrc</code> 中变更内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(&#x27;/usr/local/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/local/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/usr/local/anaconda3/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>

<h4 id="解决打开终端Anaconda自启动问题"><a href="#解决打开终端Anaconda自启动问题" class="headerlink" title="解决打开终端Anaconda自启动问题"></a>解决打开终端Anaconda自启动问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h4><p>北京外国语大学</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https://mirrors.bfsu.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>

<p>上海交通大学</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default_channels:</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class="line">  pytorch: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="Anaconda添加删除虚拟环境"><a href="#Anaconda添加删除虚拟环境" class="headerlink" title="Anaconda添加删除虚拟环境"></a>Anaconda添加删除虚拟环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建虚拟环境 -n 为新建虚拟环境命名</span></span><br><span class="line">conda create -n python310 python=3.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">conda remove -n python310 --all</span><br></pre></td></tr></table></figure>

<h4 id="Anaconda切换虚拟环境"><a href="#Anaconda切换虚拟环境" class="headerlink" title="Anaconda切换虚拟环境"></a>Anaconda切换虚拟环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有虚拟环境</span></span><br><span class="line">conda <span class="built_in">env</span> list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda activate python310</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">conda deactivate python310</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Python使用国内源</title>
    <url>/2024/04/07/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h4 id="常用国内源"><a href="#常用国内源" class="headerlink" title="常用国内源"></a>常用国内源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">https://mirrors.ustc.edu.cn/pypi/web/simple # 已暂时移除并重定向到 BFSU PyPI</span><br><span class="line"></span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">http://mirrors.cloud.tencent.com/pypi/simple</span><br></pre></td></tr></table></figure>

<p>查看当前镜像地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据中对应路径</span></span><br><span class="line">global.index-url = <span class="string">&#x27;https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span></span><br><span class="line">install.trusted-host = <span class="string">&#x27;https://pypi.tuna.tsinghua.edu.cn&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h4 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h4 id="换回默认"><a href="#换回默认" class="headerlink" title="换回默认"></a>换回默认</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">unset</span> global.index-url</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对接C库</title>
    <url>/2025/03/27/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E5%AF%B9%E6%8E%A5C%E5%BA%93/</url>
    <content><![CDATA[<h4 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1. 准备环境"></a>1. 准备环境</h4><ul>
<li><strong>准备开发包</strong>：包含头文件(<code>.h</code>)、库文件（<code>.dll或.so</code>）及对接文档</li>
<li><strong>安装依赖</strong>：确保Python环境已安装<code>ctypes</code>库或第三方库例如<code>Cython</code>(用于复杂场景)</li>
<li><strong>配置路径</strong>：将SDK的库路径添加到环境变量或直接在代码中指定路径(推荐方式，不会因为换电脑导致无法编译，例如<code>sdk/windows/sdk.dll</code>)</li>
</ul>
<h4 id="2-封装接口"><a href="#2-封装接口" class="headerlink" title="2.  封装接口"></a>2.  封装接口</h4><p>加载SDK</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> wintypes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分Windows和Linux环境，加载不同SDK</span></span><br><span class="line"><span class="keyword">if</span> sys.platform.startwith(<span class="string">&quot;win&quot;</span>):</span><br><span class="line">	sdk = WinDLL(<span class="string">&quot;sdk/windows/sdk.dll&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.platform.startwith(<span class="string">&quot;linux&quot;</span>):</span><br><span class="line">	sdk = CDLL(<span class="string">&quot;sdk/linux/sdk.so&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义结构体</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义结构体，需要与SDK头文件一致</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DEMO</span>：</span><br><span class="line">	_fields_ = [</span><br><span class="line">		(<span class="string">&quot;fieldname-1&quot;</span>, c_int),   <span class="comment"># int 类型</span></span><br><span class="line">		(<span class="string">&quot;fieldname-2&quot;</span>, c_int_p), <span class="comment"># int 指针</span></span><br><span class="line">		<span class="comment"># 其他字段参考SDK文档</span></span><br><span class="line">	]</span><br></pre></td></tr></table></figure>
<p>![[Python对接C库&#x2F;IMG-20250804110742707.png]]<br>定义函数原型，需严格对齐SDK中的数据类型和函数参数顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sdk.Init.restype = c_bool <span class="comment"># 映射返回值，Init为C/C++中的函数名</span></span><br><span class="line">sdk.Init.argtypes = [     <span class="comment"># 映射参数列表</span></span><br><span class="line">	c_int, c_int_p, c_char_p</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="3-接口调用"><a href="#3-接口调用" class="headerlink" title="3. 接口调用"></a>3. 接口调用</h4><p><strong>函数调用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sdk.Init(c_int(<span class="number">0</span>), c_int_p(<span class="number">0</span>), c_char_p(<span class="string">b&quot;this is a test&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>带有回调函数的函数调用</strong><br>回调函数例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*Callback) (<span class="type">int</span>, <span class="type">char</span>*);</span><br></pre></td></tr></table></figure>
<p>Python中定义回调函数类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CallbackType = CFUNCTYPE(c_int, c_int, c_char_p) <span class="comment"># 返回类型在前，参数在后</span></span><br></pre></td></tr></table></figure>
<p>若C函数使用<code>__stdcall</code>（常见于Windows API）,需要<code>WINFUNCTYPE</code>替代<code>CFUNCTYPE</code>，若为<code>__cdecl</code>（默认）,则使用<code>CFUNCTYPE</code><br>Python实现回调函数（参数和返回值需与C定义严格一致）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">py_callback</span>(<span class="params">num, text</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;Received： <span class="subst">&#123;num&#125;</span>, <span class="subst">&#123;text.decode(<span class="string">&quot;utf-8&quot;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> <span class="comment"># 返回值需与C定义匹配</span></span><br></pre></td></tr></table></figure>

<p>处理指针参数</p>
<p>若回调参数包含指针，例如<code>void*</code>，需要使用<code>c_void_p</code>类型，并通过cast解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">py_callback</span>(<span class="params">data_ptr</span>): </span><br><span class="line">	data = cast(data_ptr, POINTER(c_int)).contents.value </span><br><span class="line">	<span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>注册回调函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_callback = CallbackType(py_callback) <span class="comment"># 使用定义的回调类型包装Python函数</span></span><br><span class="line">global_keep_alive = c_callback <span class="comment"># 关键！ 将回调对象保存为全局变量或类属性，防止被回收</span></span><br><span class="line">sdk.register_callback.argtypes = [c_int, CallbackType]</span><br><span class="line">sdk.register_callback.restype = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h4 id="4-资源释放"><a href="#4-资源释放" class="headerlink" title="4. 资源释放"></a>4. 资源释放</h4><p>退出时需要调用SDK中的清理函数释放资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sdk.Cleanup()</span><br></pre></td></tr></table></figure>

<h4 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h4><ul>
<li>结构体指针和缓冲区需要手动分配&#x2F;释放，避免内存泄漏</li>
<li>不同版本SDK接口可能有差异，建议统一开发与部署环境</li>
<li>映射Windows中特有的类型例如<code>WORD</code>,<code>DWORD</code>在<code>wintypes</code>包中</li>
<li>C调用Python回调时，若Python函数抛出异常可能导致程序崩溃。需要在回调内部处理异常。</li>
<li>若C函数在子线程中调用回调，需确保Python的GIL（全局解释锁）已获取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> py_object, pythonapi </span><br><span class="line">PyGILState_Ensure = pythonapi.PyGILState_Ensure </span><br><span class="line">PyGILState_Release = pythonapi.PyGILState_Release </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_safe_callback</span>(): </span><br><span class="line">	state = PyGILState_Ensure() </span><br><span class="line">	<span class="comment"># 执行Python操作 </span></span><br><span class="line">	PyGILState_Release(state)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python判断当前运行系统环境</title>
    <url>/2025/03/26/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="使用sys模块"><a href="#使用sys模块" class="headerlink" title="使用sys模块"></a>使用<code>sys</code>模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.platform.startwith(<span class="string">&quot;win&quot;</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Windows&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.platform.startwith(<span class="string">&quot;linux&quot;</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Linux&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.platform.startwith(<span class="string">&quot;darwin&quot;</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是MAC OS&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是其他操作系统&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用platform模块"><a href="#使用platform模块" class="headerlink" title="使用platform模块"></a>使用<code>platform</code>模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">system=platform.system()</span><br><span class="line"><span class="keyword">if</span> system==<span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Windows&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> system==<span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Linux&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> system==<span class="string">&quot;Darwin&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是MAC OS&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是其他操作系统&quot;</span>)	</span><br></pre></td></tr></table></figure>

<h4 id="使用os模块"><a href="#使用os模块" class="headerlink" title="使用os模块"></a>使用<code>os</code>模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">system = os.name</span><br><span class="line"><span class="keyword">if</span> system == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Windows&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> system == <span class="string">&quot;posix&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是Linux或Mac OS&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;当前系统是其他操作系统&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>运行环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境使用</title>
    <url>/2024/07/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/wangzirui32/article/details/113445369">Python：虚拟隔离环境的创建和基本使用_激活虚拟隔离环境的代码-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/216157886">你学Python 虚拟环境 看这一篇就够了 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>基于OpenCV的视频流处理</title>
    <url>/2025/02/24/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EOpenCV%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="获取VideoCapture实例"><a href="#获取VideoCapture实例" class="headerlink" title="获取VideoCapture实例"></a>获取VideoCapture实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取视频流</span></span><br><span class="line">strem_capture = cv2.VideoCapture(<span class="string">&quot;rtst://192.168.0.0/live/demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取视频文件</span></span><br><span class="line">file_capture = cv2.VideoCapture(<span class="string">&#x27;demo.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取摄像头</span></span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>获取摄像头编号可使用<code>ls -al /dev/ |grep video</code>,输出信息以<code>video</code>开头其后缀为数字即为可能的摄像头编号。</p>
<h3 id="检查获取VideoCapture实例是否成功"><a href="#检查获取VideoCapture实例是否成功" class="headerlink" title="检查获取VideoCapture实例是否成功"></a>检查获取VideoCapture实例是否成功</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 校验获取VideoCapture类实例</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> capture.isOpened():</span><br><span class="line">	<span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h3 id="获取视频流信息"><a href="#获取视频流信息" class="headerlink" title="获取视频流信息"></a>获取视频流信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取视频帧的宽</span></span><br><span class="line">width = capture.get(cv2.CAP_PROP_FRAME_WIDTH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频帧的高</span></span><br><span class="line">height = cpature.get(cv2.CAP_PROP_FRAME_HEIGHT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频帧率</span></span><br><span class="line">fps = capture.get(cv2.CAP_PROP_FPS)</span><br></pre></td></tr></table></figure>

<h3 id="获取帧画面"><a href="#获取帧画面" class="headerlink" title="获取帧画面"></a>获取帧画面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">success, frame = capture.read()</span><br></pre></td></tr></table></figure>

<p>当需要同时处理多路摄像头时一般使用<code>grab()</code>和<code>retrieve()</code>代替</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">success_1 = capture.grab()</span><br><span class="line">success_2 = stream_capture.grab()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> success_1 <span class="keyword">and</span> success_2:</span><br><span class="line">	frame_1 = capture.retrieve()</span><br><span class="line">	frame_2 = stream_capture.retrieve()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置分辨率"><a href="#设置分辨率" class="headerlink" title="设置分辨率"></a>设置分辨率</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置摄像头分辨率的宽</span></span><br><span class="line">capture.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, <span class="number">1920</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置摄像头分辨率的高</span></span><br><span class="line">capture.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, <span class="number">1080</span>)</span><br></pre></td></tr></table></figure>

<h3 id="保存视频文件"><a href="#保存视频文件" class="headerlink" title="保存视频文件"></a>保存视频文件</h3><p>无论是视频文件存储还是摄像头画面保存都是用<code>VideoWriter</code>类,初始化时需要传入文件名（包含文件格式）、视频编解码器、视频保存帧率 、分辨率，保存视频的帧率最好和读入的帧率一致，分辨率可以更改，只是要求写入的帧大小要与分辨率保持一致。<br>若指定的文件名已存在则会覆盖文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = cv2.VideoWriter(<span class="string">&#x27;output.mp4&#x27;</span>, </span><br><span class="line">	cv2.VideoWriter_fourcc(*<span class="string">&#x27;MP4V&#x27;</span>), <span class="number">30</span>, (<span class="number">1080</span>,<span class="number">1920</span>))</span><br><span class="line">writer.write(frame)</span><br></pre></td></tr></table></figure>

<h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><p>不管是<code>VideoCapture</code>还是<code>VideoWriter</code>类，使用完都应该释放资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 释放VideoCapture资源</span></span><br><span class="line">capture.release()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放VideoWriter资源</span></span><br><span class="line">writer.release()</span><br></pre></td></tr></table></figure>


<h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># /usr/bin/env/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">capture = cv2.VideoCapture(<span class="string">&#x27;rtsp://192.168.0.0/live/demo)</span></span><br><span class="line"><span class="string">fourcc = cv2.VideoWriter_fourcc(*&#x27;</span>MP$v<span class="string">&#x27;) # 或H264,H265</span></span><br><span class="line"><span class="string">fps = capture.get(cv2.CAP_PROP_FPS)</span></span><br><span class="line"><span class="string">width = capture.get(cv2.CAP_PROP_FRAME_WIDTH)</span></span><br><span class="line"><span class="string">height = capture.get(cv2.CAP_PROP_FRAME_HEIGHT)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">writer = cv2.VideoWriter(&#x27;</span>demo.mp4<span class="string">&#x27;, fourcd, fps, (height, width))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">	if not capture.isOpened():</span></span><br><span class="line"><span class="string">		time.sleep(0.5)</span></span><br><span class="line"><span class="string">		continue</span></span><br><span class="line"><span class="string">	success, frame = capture.read()</span></span><br><span class="line"><span class="string">	if success:</span></span><br><span class="line"><span class="string">		cv2.imshow(&#x27;</span>DEMO<span class="string">&#x27;, frame) # 显示画面</span></span><br><span class="line"><span class="string">		writer.write(frame) # 保存视频文件</span></span><br><span class="line"><span class="string">	if (cv2.waitKey(20) &amp; 0xff) == ord(&#x27;</span>q<span class="string">&#x27;): # 等待20ms并判断是否按下&#x27;</span>q<span class="string">&#x27;退出,waitkey只能传入整数，</span></span><br><span class="line"><span class="string">		break</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">capture.release() # 释放VideoCapture</span></span><br><span class="line"><span class="string">writer.release() # 释放VideoWriter</span></span><br><span class="line"><span class="string">cv2.destroyAllWindows() # 销毁所有opencv显示窗口</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>我如何使用 Django + Vue.js 快速构建项目</title>
    <url>/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p>写在开头：<br>1看这里的时候，请确保你已将熟悉JavaScript以及了解Vue的语法， Django的语法也略懂一二。<br>如果不是很了解，请点击这里查看学习文档<a href="https://cn.vuejs.org/v2/guide/index.html">Vue</a>、<a href="https://docs.djangoproject.com/en/2.1/topics/">Django</a>，否则下文可能有些不好理解。<br>2文章有点长 ，因为包含了一个Index.vue页面。<br>3第一次写长文章，所以排版很尴尬，请指正。</p>
</blockquote>
<ol>
<li><a href="">安装Vue环境</a></li>
<li>安装<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart">element-ui</a>组件 使用其组件美化界面</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S ||  npm install element-ui --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.js </span><br><span class="line">    import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">    import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line"></span><br><span class="line">    Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装<a href="https://www.kancloud.cn/yunye/axios/234845">axios</a> 使用其完成前端到后端的请求</li>
</ol>
<blockquote>
<p>由于axios 使用Vue.use(无效)，所以要将其绑定在Vue原型上</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios --save |  brew install axios --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = &#x27;http://localhost:8000&#x27;  </span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure>

<ol>
<li><a href="https://www.jianshu.com/p/d78e5392e54a">安装Django及配置环境</a></li>
<li>配置mysql数据库，使用sqlite3的 跳过此步骤无需配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">settings.py</span><br><span class="line">  DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;  #</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,  # 不同库有不同的殷勤</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;python_use&#x27;,  # 使用的库名</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class="line">        &#x27;PORT&#x27;: &#x27;3306&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后请查看django是否报错，不报错即连接成功</p>
<ol start="3">
<li>安装 <a href="https://pypi.org/project/pip/">pip</a> 及 <a href="https://pypi.org/project/django-cors-headers/">django-cors-headers</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">settings.py</span><br><span class="line">  </span><br><span class="line">  INSTALLED_APPS = &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x27;corsheaders&#x27;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  MIDDLEWARE = [  </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    &#x27;corsheaders.middleware.CorsMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  CORS_ORIGIN_ALLOW_ALL = True </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<hr>
<p>至此，已将Vue和Django安装并配置好，接下来写一个简单的CRUD操作。<br>请确认你的整个项目目录与此类似</p>
<p>![](Vue + Django&#x2F;2064404-d3a828d4530715b4.png)</p>
<p>项目目录结构</p>
<p>以下使用的目录均为此图所示</p>
<hr>
<ol>
<li>配置路由</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first/urls.py </span><br><span class="line">  urlpatterns = [</span><br><span class="line">    url(r&#x27;^admin/&#x27;, admin.site.urls),</span><br><span class="line">    url(r&#x27;&#x27;, include(&#x27;crud.urls&#x27;)),</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crud/urls.py</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  from django.conf.urls import url</span><br><span class="line">  from . import views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">    url(&#x27;create/&#x27;, views.create, name = &#x27;create&#x27;),</span><br><span class="line">    url(&#x27;read&#x27;, views.read, name = &#x27;read&#x27;),</span><br><span class="line">    url(&#x27;update/&#x27;, views.update, name = &#x27;update&#x27;),</span><br><span class="line">    url(&#x27;delete/&#x27;, views.delete, name = &#x27;delete&#x27;),</span><br><span class="line">    url(&#x27;search&#x27;, views.search, name = &#x27;search&#x27;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建models，即在数据库中创建表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class Books ( models.Model ):</span><br><span class="line">  book_name = models.CharField( max_length = 255 )</span><br><span class="line">  book_price = models.DecimalField( max_digits = 5, decimal_places = 2 )</span><br><span class="line">  book_time = models.DateTimeField( &#x27;保存日期&#x27;, auto_now_add = True )</span><br></pre></td></tr></table></figure>

<p>Models创建完成后运行命令 将其应用到数据库中并创建表<br>如果不懂 请返回顶部阅读Django文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写views.py 完成增删改查的逻辑</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 获取前端传递来的参数</span><br><span class="line"># 1.1 get方法发送的参数</span><br><span class="line">  request.GET[&#x27;content&#x27;]</span><br><span class="line"># 1.2 post方法发送的参数</span><br><span class="line">  obj = json.loads(request.body)</span><br><span class="line">  name = obj[&#x27;name&#x27;]</span><br><span class="line"># 2 由于使用Books.objects下的方法，获取到的数据为Query Set类型， </span><br><span class="line">#   所以需要使用serializers.serialize(&quot;json&quot;, books)</span><br><span class="line"># 将查询到的数据进行序列化，变成可读的对象。</span><br><span class="line"># 3 向前端返回处理结果</span><br><span class="line"> return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;) </span><br><span class="line"># 将res变成json字符串返回给前端。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from __future__ import unicode_literals</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">import json</span><br><span class="line">from django.core import serializers</span><br><span class="line">from django.utils import timezone</span><br><span class="line">from crud.models import Books</span><br><span class="line"></span><br><span class="line">def search(request):</span><br><span class="line">    content = request.GET[&#x27;content&#x27;]</span><br><span class="line">    try:</span><br><span class="line">        books = serializers.serialize(&quot;json&quot;,Books.objects.filter(book_name__contains=content))</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 200,</span><br><span class="line">            &quot;data&quot;: books</span><br><span class="line">        &#125;</span><br><span class="line">        print(books)</span><br><span class="line">    except Exception,e:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;errMsg&quot;: e</span><br><span class="line">        &#125;</span><br><span class="line">    return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">def create(request):</span><br><span class="line">    print(&#x27;create&#x27;)</span><br><span class="line">    obj = json.loads(request.body)</span><br><span class="line">    name = obj[&#x27;name&#x27;]</span><br><span class="line">    price = obj[&#x27;price&#x27;]</span><br><span class="line">    try:</span><br><span class="line">        book = Books(book_name=name, book_price=price, book_time=timezone.now())</span><br><span class="line">        book.save()</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 200,</span><br><span class="line">        &#125;</span><br><span class="line">    except Exception,e:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;errMsg&quot;: e</span><br><span class="line">        &#125;</span><br><span class="line">    return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">def read(request):</span><br><span class="line">    print(&#x27;read&#x27;)</span><br><span class="line">    try:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 200,</span><br><span class="line">            &quot;data&quot;: serializers.serialize(&quot;json&quot;,Books.objects.filter())</span><br><span class="line">        &#125;</span><br><span class="line">    except Exception,e:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;errMsg&quot;: e</span><br><span class="line">        &#125;</span><br><span class="line">    return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">def update(request):</span><br><span class="line">    print(&#x27;update&#x27;)</span><br><span class="line">    obj = json.loads(request.body)</span><br><span class="line">    pid = obj[&#x27;id&#x27;]</span><br><span class="line">    name = obj[&#x27;name&#x27;]</span><br><span class="line">    price = obj[&#x27;price&#x27;]</span><br><span class="line">    try:</span><br><span class="line">        Books.objects.filter(id=pid).update(book_price=price, book_name=name)</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 200</span><br><span class="line">        &#125;</span><br><span class="line">    except Exception,e:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;errMsg&quot;: e</span><br><span class="line">        &#125;</span><br><span class="line">    return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">def delete(request):</span><br><span class="line">    print(&#x27;delete&#x27;)</span><br><span class="line">    obj = json.loads(request.body)</span><br><span class="line">    print(obj)</span><br><span class="line">    pid = obj[&#x27;id&#x27;]</span><br><span class="line">    try:</span><br><span class="line">        Books.objects.filter(id=pid).delete()</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 200</span><br><span class="line">        &#125;</span><br><span class="line">    except Exception,e:</span><br><span class="line">        res = &#123;</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;errMsg&quot;: e</span><br><span class="line">        &#125;</span><br><span class="line">    return HttpResponse(json.dumps(res), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure>

<hr>
<ol>
<li>配置路由</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frontend/src/router/index.js</span><br><span class="line">  </span><br><span class="line">  import Vue from &#x27;vue&#x27;</span><br><span class="line">  import Router from &#x27;vue-router&#x27;</span><br><span class="line">  import Index from &#x27;@/components/Index&#x27;</span><br><span class="line"></span><br><span class="line">  Vue.use(Router)</span><br><span class="line"></span><br><span class="line">  export default new Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        name: &#x27;index&#x27;,</span><br><span class="line">        component: Index</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写路由中使用到的组件 与上面import所用名称和路径需要一致，请耐心看完注释。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">this.$axios.get(&#x27;/search&#x27;, &#123;</span><br><span class="line">  params: &#123;  </span><br><span class="line">     content: this.search   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">this.$axios.post(&#x27;/delete/&#x27;, JSON.stringify(row)).then(res =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  console.log(res)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以下为Index.vue的全部页面，包含增删改查的基本操作，以及更改和新增时的弹出框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frontend/src/components/Index.vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; round @click=&quot;handleShowCreate&quot;&gt;增加书籍&lt;/el-button&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;search&quot; placeholder=&quot;请输入内容&quot; style=&quot;width: 200px&quot;  @keyup.enter.native=&quot;handleSearch&quot;/&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; round @click=&quot;handleSearch&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">      &lt;el-table :data=&quot;booksData&quot; height=&quot;250&quot; border style=&quot;width: 600px; margin: 40px auto;&quot;  v-loading=&quot;loading&quot;&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;book_name&quot;</span><br><span class="line">          label=&quot;书名&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">          width=&quot;200&quot;&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;book_price&quot;</span><br><span class="line">          label=&quot;价格&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">          width=&quot;200&quot;&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt;</span><br><span class="line">          &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">            &lt;el-button</span><br><span class="line">              size=&quot;mini&quot;</span><br><span class="line">              @click=&quot;handleUpdate(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button</span><br><span class="line">              size=&quot;mini&quot;</span><br><span class="line">              type=&quot;danger&quot;</span><br><span class="line">              @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">      &lt;el-dialog title=&quot;修改书籍&quot; :visible.sync=&quot;dialogUpdateVisible&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;updateData&quot;&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;书籍名称&quot;&gt;</span><br><span class="line">            &lt;el-input auto-complete=&quot;off&quot; v-model=&quot;updateData.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;书籍价格&quot;&gt;</span><br><span class="line">            &lt;el-input-number v-model=&quot;updateData.price&quot; :precision=&quot;2&quot; :step=&quot;0.01&quot; :max=&quot;9999&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">          &lt;el-button @click=&quot;handleCancel(&#x27;dialogUpdateVisible&#x27;)&quot;&gt;Cancel&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;handleConfirm(&#x27;dialogUpdateVisible&#x27;)&quot;&gt;Submit&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-dialog&gt;</span><br><span class="line">      &lt;el-dialog title=&quot;增加书籍&quot; :visible.sync=&quot;dialogCreateVisible&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;createData&quot;&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;书籍名称&quot;&gt;</span><br><span class="line">            &lt;el-input auto-complete=&quot;off&quot; v-model=&quot;createData.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;书籍价格&quot;&gt;</span><br><span class="line">            &lt;el-input-number v-model=&quot;createData.price&quot; :precision=&quot;2&quot; :step=&quot;0.01&quot; :max=&quot;9999&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">          &lt;el-button @click=&quot;handleCancel(&#x27;dialogCreateVisible&#x27;)&quot;&gt;Cancel&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;handleCreate(&#x27;dialogCreateVisible&#x27;)&quot;&gt;Submit&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;index&#x27;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        search: &#x27;&#x27;,</span><br><span class="line">        booksData: [],</span><br><span class="line">        oldData: &#123;&#125;,</span><br><span class="line">        updateData: &#123;&#125;,</span><br><span class="line">        createData: &#123;</span><br><span class="line">          name: &#x27;&#x27;,</span><br><span class="line">          price: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        dialogUpdateVisible: false,</span><br><span class="line">        dialogCreateVisible: false,</span><br><span class="line">        loading: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleShowCreate () &#123;</span><br><span class="line">        this.dialogCreateVisible = true</span><br><span class="line">      &#125;,</span><br><span class="line">      handleCreate () &#123;</span><br><span class="line">        if (this.createData.name === &#x27;&#x27;) &#123;</span><br><span class="line">          this.$message.error(&#x27;please input book name&#x27;)</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.createData.price === 0) &#123;</span><br><span class="line">          this.$message.error(&#x27;please input book price&#x27;)</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        this.$axios.post(&#x27;/create/&#x27;, JSON.stringify(this.createData)).then(res =&gt; &#123;</span><br><span class="line">          if (res.data.code === 200) &#123;</span><br><span class="line">            this.$message.success(`create $&#123;this.createData.name&#125; success`)</span><br><span class="line">            this.dialogCreateVisible = false</span><br><span class="line">            this.handleRead()</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.error(&quot;can&#x27;t read books database&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(this.createData)</span><br><span class="line">      &#125;,</span><br><span class="line">      handleRead () &#123;</span><br><span class="line">        this.booksData = []</span><br><span class="line">        this.$axios.get(&#x27;/read&#x27;).then(res =&gt; &#123;</span><br><span class="line">          this.loading = false</span><br><span class="line">          if (res.data.code === 200) &#123;</span><br><span class="line">            let books = JSON.parse(res.data.data)</span><br><span class="line">            for (let i in books) &#123;</span><br><span class="line">              books[i].fields.id = books[i].pk</span><br><span class="line">              books[i].fields.book_price = Number(books[i].fields.book_price)</span><br><span class="line">              this.booksData.push(books[i].fields)</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.booksData)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.console.error(&quot;can&#x27;t read books database&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch((res) =&gt; &#123;</span><br><span class="line">          console.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      handleUpdate (index, row) &#123;</span><br><span class="line">        this.dialogUpdateVisible = true</span><br><span class="line">        this.updateData = Object.assign(&#123;&#125;, &#123;</span><br><span class="line">          id: row.id,</span><br><span class="line">          name: row.book_name,</span><br><span class="line">          price: row.book_price,</span><br><span class="line">          time: row.book_time</span><br><span class="line">        &#125;)</span><br><span class="line">        this.oldData = Object.assign(&#123;&#125;, &#123;</span><br><span class="line">          id: row.id,</span><br><span class="line">          name: row.book_name,</span><br><span class="line">          price: row.book_price,</span><br><span class="line">          time: row.book_time</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      handleDelete (index, row) &#123;</span><br><span class="line">        this.$confirm(`are you sure to delete $&#123;this.updateData.name&#125; ?`, &#x27;&#x27;, &#123;</span><br><span class="line">          confirmButtonText: &#x27;submit&#x27;,</span><br><span class="line">          cancelButtonText: &#x27;cancel&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">          this.$axios.post(&#x27;/delete/&#x27;, JSON.stringify(row)).then(res =&gt; &#123;</span><br><span class="line">            if (res.data.code === 200) &#123;</span><br><span class="line">              this.$message.success(`delete $&#123;this.updateData.name&#125; success`)</span><br><span class="line">              this.handleRead()</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message.error(&quot;can&#x27;t read books database&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(() =&gt; &#123;</span><br><span class="line">          this.$message.info(&#x27;cancel delete&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      handleCancel (arg) &#123;</span><br><span class="line">        this.$message.info(&#x27;cancel&#x27;)</span><br><span class="line">        this[arg] = false</span><br><span class="line">      &#125;,</span><br><span class="line">      handleConfirm (arg) &#123;</span><br><span class="line">        if (this.updateData.name === this.oldData.name &amp;&amp; this.updateData.price === this.oldData.price) &#123;</span><br><span class="line">          this.$message.error(&#x27;please update something or cancel&#x27;)</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        this[arg] = false</span><br><span class="line">        this.$axios.post(&#x27;/update/&#x27;, JSON.stringify(this.updateData)).then(res =&gt; &#123;</span><br><span class="line">          if (res.data.code === 200) &#123;</span><br><span class="line">            this.$message.success(`update $&#123;this.updateData.name&#125; success`)</span><br><span class="line">            this.handleRead()</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.error(&quot;can&#x27;t read books database&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      handleSearch () &#123;</span><br><span class="line">        this.$axios.get(&#x27;search&#x27;, &#123;</span><br><span class="line">          params: &#123;</span><br><span class="line">            content: this.search</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">          if (res.data.code === 200) &#123;</span><br><span class="line">            if (res.data.data &amp;&amp; JSON.parse(res.data.data).length &gt; 0) &#123;</span><br><span class="line">              this.booksData = []</span><br><span class="line">              let books = JSON.parse(res.data.data)</span><br><span class="line">              for (let i in books) &#123;</span><br><span class="line">                let obj = &#123;</span><br><span class="line">                  id: books[i].pk,</span><br><span class="line">                  book_name: books[i].fields.book_name,</span><br><span class="line">                  book_price: Number(books[i].fields.book_price),</span><br><span class="line">                  book_time: books[i].fields.book_time</span><br><span class="line">                &#125;</span><br><span class="line">                this.booksData.push(obj)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message.error(`can&#x27;t search contains of &#x27;$&#123;this.search&#125;&#x27; in database`)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.error(`can&#x27;t search books in database`)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.handleRead()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>到这里，一个增删改查基本操作的页面就写完了，如果哪里有问题可以留言指正。 git源码以上传， 没事可以star&#x2F;fork 更新将在以下附注后增加。</p>
<blockquote>
<p><a href="https://github.com/RogersLei/django-vue">https://github.com/RogersLei/django-vue</a></p>
</blockquote>
<hr>
<p>附注 ：</p>
<ol>
<li><p>Vue添加事件所用到的修饰符：</p>
<p>![](Vue + Django&#x2F;2064404-1aa984b701bf3e11.png)</p>
<p>Vue事件绑定修饰符</p>
</li>
<li><p>Django中模糊查询用到的语法：</p>
</li>
</ol>
<blockquote>
<p>YourModels.objects.filter(headline__contains&#x3D;str)<br>字段名__contains &#x2F; __icontains 忽略大小写</p>
</blockquote>
<p>更多精彩内容，就在简书APP</p>
<p>“小礼物走一走，来简书关注我”</p>
<p>还没有人赞赏，支持一下</p>
<p>总资产23共写了2.2W字获得33个赞共22个粉丝</p>
<h3 id="推荐阅读更多精彩内容"><a href="#推荐阅读更多精彩内容" class="headerlink" title="推荐阅读更多精彩内容"></a>推荐阅读<a href="https://www.jianshu.com/">更多精彩内容</a></h3><ul>
<li><p>一.前言 最近接手了一个项目，后端是django，前端是django自带的模板，用的是jinja2，写了一段时间发…</p>
<p><a href="https://www.jianshu.com/p/cbd747e36ef1"><img src="https://upload-images.jianshu.io/upload_images/12026440-8ede9a6ddebc09b1.png?imageMogr2/auto-orient/strip%7CimageView2/1/w/300/h/240/format/webp"></a></p>
</li>
<li><p>组织文章借鉴 ——培训师的21项修炼 书籍结构：错误的案例情景重现-抛出问题，传道受业解惑也 我们假设一个场景，大…</p>
</li>
<li><p>每天总是忙忙碌碌，感觉时间完全不够用，更不要说是学习了，可是忙忙碌碌到最后感觉收获也很小，就像大家说的，瞎忙活。…</p>
</li>
<li><p>和姑姑聊起当时借钱给已故父亲治病时的场景，我依稀记得当时我和涛古，妈妈给厂里老板下跪借那三万块的场景。这辈子希望以…</p>
</li>
</ul>
<p>本文整合Django和Vue.js  并引入elementUi 实现前后端分离项目环境</p>
<p>最终的成品是设计出一个ElementUi风格的页面可以添加和显示学生信息.</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110742708.png" class="">

<p>Django作为Python 三大Web框架之一,因其集成了大量的组件(例如: Models Admin Form 等等)而大受欢迎,但是他本身自带的template模板实在是有点弱.于是考虑整合Vue.js同时引入ElementUI 组件,可以更加快速高效的开发出美观实用的Web页面.</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>本文版本:Python 3.5</strong></p>
<p>安装教程: <a href="https://www.runoob.com/python3/python3-install.html">https://www.runoob.com/python3/python3-install.html</a></p>
<h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h2><p><strong>本文版本:2019.1.3</strong> </p>
<p>PyCharm 2019.1.3 (Community Edition)</p>
<p>安装教程:<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">https://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110742881.png" class="">

<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p><strong>本文版本:2.2.3</strong> </p>
<p>安装教程:<a href="https://www.runoob.com/django/django-install.html">https://www.runoob.com/django/django-install.html</a></p>
<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p><strong>本文版本:10.16.3</strong></p>
<p>安装教程:<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p><strong>本文版本: 8.0.13 for Win64</strong> </p>
<p>安装教程:<a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p>
<p><em>本文的Pycharm为社区版,如果为专业版则字段Django项目的创建选项,创建项目将更加简单.</em></p>
<h2 id="1-创建django项目-DjangoElementUI"><a href="#1-创建django项目-DjangoElementUI" class="headerlink" title="1.创建django项目:DjangoElementUI"></a>1.创建django项目:DjangoElementUI</h2><p>创建文件夹E:\PycharmProjects:</p>
<p>在项目文件夹目录输入Windows 命令行如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject DjangoElementUI</span><br></pre></td></tr></table></figure>

<p>成功创建项目完成后文件夹结构如下图:</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110743225.png" class="">

<p>进入项目文件夹目录,在目录中输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>看到如下提示则为项目创建成功</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110743535.png" class="">

<p>在浏览器输入你服务器的 ip（这里我们输入本机 IP 地址： <strong>127.0.0.1:8000</strong>） 及端口号，如果正常启动，输出结果如下：</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110743780.png" class="">

<h2 id="2-数据库配置"><a href="#2-数据库配置" class="headerlink" title="2.数据库配置"></a>2.数据库配置</h2><p>Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。</p>
<p>Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库。</p>
<p>MySQL 是 Web 应用中最常用的数据库。</p>
<p>本文采用MySQL</p>
<p>第一次使用MySQL需要安装 MySQL驱动,在项目文件夹目录下执行以下命令安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>Django无法直接创建数据库(只能操作到数据表层),我们需要手工创建MySQL数据库.</p>
<p><strong>以下通过命令行创建 MySQL 数据库:Django_ElementUI</strong></p>
<h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库:"></a>登录数据库:</h3><p>数据库安装文件夹bin文件夹下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110743916.png" class="">

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库:"></a>创建数据库:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create DATABASE Django_ElementUI DEFAULT CHARSET utf8;</span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744028.png" class="">

<h3 id="Django配置数据库"><a href="#Django配置数据库" class="headerlink" title="Django配置数据库"></a>Django配置数据库</h3><p>在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,  &#x27;NAME&#x27;: &#x27;Django_ElementUI&#x27;,  </span><br></pre></td></tr></table></figure>

<p>在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置 (告诉 Django 使用 pymysql 模块连接 mysql 数据库)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h2 id="3-利用Django模型设计数据库表"><a href="#3-利用Django模型设计数据库表" class="headerlink" title="3.利用Django模型设计数据库表"></a>3.利用Django模型设计数据库表</h2><p>Django 规定，如果要使用模型，必须要创建一个 app。</p>
<h3 id="创建Django-APP-myApp"><a href="#创建Django-APP-myApp" class="headerlink" title="创建Django APP:myApp"></a>创建Django APP:myApp</h3><p>我们使用以下命令创建一个Django app:myApp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin.py startapp myApp</span><br></pre></td></tr></table></figure>

<p>成功后的项目文件夹目录如下:</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744121.png" class="">

<h3 id="设计数据库表"><a href="#设计数据库表" class="headerlink" title="设计数据库表"></a>设计数据库表</h3><p>在myApp下的models.py设计表:</p>
<p>这里我们设计一个Student表,用来存储学生信息.</p>
<p><strong>表字段</strong></p>
<p><strong>字段类型</strong></p>
<p><strong>含义</strong></p>
<p>student_name</p>
<p>Varchar类型</p>
<p>学生姓名</p>
<p>student_sex</p>
<p>Varchar类型</p>
<p>学生性别</p>
<p>create_time</p>
<p>Datetime类型</p>
<p>创建日期时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db import modelsclass Student(models.Model):    student_name = models.CharField(max_length=64)    student_sex = models.CharField(max_length=3)    create_time = models.DateTimeField(auto_now=True)</span><br></pre></td></tr></table></figure>

<p>在 settings.py 中找到INSTALLED_APPS这一项，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;django.contrib.contenttypes&#x27;,&#x27;django.contrib.sessions&#x27;,&#x27;django.contrib.messages&#x27;,&#x27;django.contrib.staticfiles&#x27;,</span><br></pre></td></tr></table></figure>

<h3 id="生成数据库迁移文件"><a href="#生成数据库迁移文件" class="headerlink" title="生成数据库迁移文件"></a><strong>生成数据库迁移文件</strong></h3><p>在命令行中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations myApp</span><br></pre></td></tr></table></figure>

<p>执行成功后结果:</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744177.png" class="">

<h3 id="执行迁移文件来完成数据库表的创建"><a href="#执行迁移文件来完成数据库表的创建" class="headerlink" title="执行迁移文件来完成数据库表的创建"></a><strong>执行迁移文件来完成数据库表的创建</strong></h3><p>在命令行中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py migrate myApp</span><br></pre></td></tr></table></figure>

<p>执行成功后结果:</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744231.png" class="">

<p>查看数据库中数据库表已经生成成功</p>
<p>(django默认在makemigrations会为表对象创建主键id,id &#x3D; models.AutoField(primary_key&#x3D;True))</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744281.png" class="">

<h2 id="4-Django创建新增和查询学生信息接口"><a href="#4-Django创建新增和查询学生信息接口" class="headerlink" title="4.Django创建新增和查询学生信息接口"></a>4.Django创建新增和查询学生信息接口</h2><p>在myApp目录下的views.py中创建两个视图函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from __future__ import unicode_literalsfrom django.http import JsonResponsefrom django.core import serializersfrom django.shortcuts import renderfrom django.views.decorators.http import require_http_methodsfrom myApp.models import Student@require_http_methods([&quot;GET&quot;])def add_student(request):        student = Student(student_name=request.GET.get(&#x27;student_name&#x27;))        response[&#x27;msg&#x27;] = &#x27;success&#x27;        response[&#x27;error_num&#x27;] = 0        response[&#x27;error_num&#x27;] = 1return JsonResponse(response)@require_http_methods([&quot;GET&quot;])def show_students(request):        students = Student.objects.filter()        response[&#x27;list&#x27;] = json.loads(serializers.serialize(&quot;json&quot;, students))        response[&#x27;msg&#x27;] = &#x27;success&#x27;        response[&#x27;error_num&#x27;] = 0        response[&#x27;error_num&#x27;] = 1return JsonResponse(response)</span><br></pre></td></tr></table></figure>

<h2 id="5-配置路由"><a href="#5-配置路由" class="headerlink" title="5.配置路由"></a>5.配置路由</h2><p>1.在myApp目录下，新增一个urls.py文件,用于创建此APP下的分支路由，把新增的两个视图函数添加到路由里面.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url    url(r&#x27;^add_book/&#x27;, views.add_book),    url(r&#x27;^show_books/&#x27;, views.show_books),</span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744341.png" class="">

<p>2.把上面创建的myApp下的分支路由加到DjangoElementUI下的主路由中urls.py.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.contrib import adminfrom django.urls import pathfrom django.conf.urls import urlfrom django.conf.urls import include    url(r&#x27;^admin/&#x27;, admin.site.urls),    url(r&#x27;^api/&#x27;, include(urls)),</span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744391.png" class="">

<p>至此Django部分已经完成,总结下我们利用Django完成了数据库的创建,并创建了两个视图函数作为接口给前端调用.</p>
<p>1.安装vue-cli脚手架</p>
<p>在DjangoElementUI根目录下输入命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>2.安装好后，新建一个前端工程目录：appfront</p>
<p>在DjangoElementUI项目根目录下输入命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue-init webpack appfront</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2021041417083995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FnZWxlZQ==,size_16,color_FFFFFF,t_70"></p>
<p>3.进入appfront目录安装vue所需要的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210414171354867.png"></p>
<p>4.安装ElementUI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2021041417170686.png"></p>
<p>5.创建新vue页面</p>
<p>在src&#x2F;component文件夹下新建一个名为Studengt.vue的组件，通过调用之前在Django上写好的api，实现添加学生和展示学生信息的功能.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-row display=&quot;margin-top:10px&quot;&gt;&lt;el-input v-model=&quot;input&quot; placeholder=&quot;请输入学生姓名&quot; style=&quot;display:inline-table; width: 30%; float:left&quot;&gt;&lt;/el-input&gt;&lt;el-button type=&quot;primary&quot; @click=&quot;addStudent()&quot; style=&quot;float:left; margin: 2px;&quot;&gt;新增&lt;/el-button&gt;&lt;el-table :data=&quot;studentList&quot; style=&quot;width: 100%&quot; border&gt;&lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; min-width=&quot;100&quot;&gt;&lt;template scope=&quot;scope&quot;&gt; &#123;&#123; scope.row.pk &#125;&#125; &lt;/template&gt;&lt;el-table-column prop=&quot;student_name&quot; label=&quot;姓名&quot; min-width=&quot;100&quot;&gt;&lt;template scope=&quot;scope&quot;&gt; &#123;&#123; scope.row.fields.student_name &#125;&#125; &lt;/template&gt;&lt;el-table-column prop=&quot;student_sex&quot; label=&quot;性别&quot; min-width=&quot;100&quot;&gt;&lt;template scope=&quot;scope&quot;&gt; &#123;&#123; scope.row.fields.student_sex &#125;&#125; &lt;/template&gt;&lt;el-table-column prop=&quot;add_time&quot; label=&quot;添加时间&quot; min-width=&quot;100&quot;&gt;&lt;template scope=&quot;scope&quot;&gt; &#123;&#123; scope.row.fields.create_time &#125;&#125; &lt;/template&gt;this.$http.get(&#x27;http://127.0.0.1:8000/api/add_student?student_name=&#x27; + this.input)var res = JSON.parse(response.bodyText)if (res.error_num === 0) &#123;this.$message.error(&#x27;新增学生失败，请重试&#x27;)this.$http.get(&#x27;http://127.0.0.1:8000/api/show_students&#x27;)var res = JSON.parse(response.bodyText)if (res.error_num === 0) &#123;this.studentList = res[&#x27;list&#x27;]this.$message.error(&#x27;查询学生失败&#x27;)&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br></pre></td></tr></table></figure>

<p>6.配置路由</p>
<p>appfront&#x2F;router文件夹下的index.js中增加页面路由.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Router from &#x27;vue-router&#x27;import HelloWorld from &#x27;@/components/HelloWorld&#x27;import Student from &#x27;@/components/Student&#x27;export default new Router(&#123;</span><br></pre></td></tr></table></figure>

<p>appfront文件夹下的main.js中引入ElementUI并注册.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;import &#x27;../node_modules/element-ui/lib/theme-chalk/index.css&#x27;import ElementUI from &#x27;element-ui&#x27;Vue.config.productionTip = false</span><br></pre></td></tr></table></figure>

<p>7.打包并启动前端项目</p>
<p> <strong>打包vue项目</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>启动前端项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>出现下面信息则说明我们前端项目已经构建成功.</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744441.png" class="">

<p>去浏览器访问页面地址:<a href="http://localhost:8080/#/student">http://localhost:8080/#/student</a></p>
<p>出现如下页面说明我们的页面已经成功.</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744491.png" class="">

<p>截止到目前,我们已经成功通过Django创建了一个后端服务,通过Vue.js + ElementUI 实现了前端页面的构建,但是他们运行在各自的服务器,而且前端页面还无法调用后端的接口.</p>
<p>接下来我们需要将两个项目真正的整合到一个成一个项目.</p>
<p>1.引入用于HTTP解析的vue-resource</p>
<p>前端vue项目调用后端需要引入vue-resource</p>
<p>在appfront文件下运行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install </span><br></pre></td></tr></table></figure>

<p>安装完成后在main.js中引入vue-resource</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;import &#x27;../node_modules/element-ui/lib/theme-chalk/index.css&#x27;import ElementUI from &#x27;element-ui&#x27;import VueResource from &#x27;vue-resource&#x27;Vue.config.productionTip = false</span><br></pre></td></tr></table></figure>

<p>2.在Django层注入header</p>
<p>为了让后端可以识别前端需求,我们须要在Django层注入header，用Django的第三方包django-cors-headers来解决跨域问题：</p>
<p>在DjangoElementUI根目录下输入命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p>在settings.py中增加相关中间件代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;django.middleware.security.SecurityMiddleware&#x27;,&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,&#x27;corsheaders.middleware.CorsMiddleware&#x27;,     &#x27;django.middleware.common.CommonMiddleware&#x27;,&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,CORS_ORIGIN_ALLOW_ALL = True   </span><br></pre></td></tr></table></figure>

<p>3.修改Django路由</p>
<p>这一步我们通过Django路由配置连接前后端资源.</p>
<p>首先我们把Django的TemplateView指向我们刚才生成的前端dist文件</p>
<p>在DjangoElementUI目录下的urls.py中增加代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import urlfrom django.contrib import adminfrom django.conf.urls import includefrom django.views.generic import TemplateView    url(r&#x27;^admin/&#x27;, admin.site.urls),    url(r&#x27;^api/&#x27;, include(urls)),    url( r&#x27;^vue/&#x27;, TemplateView.as_view( template_name=&quot;index.html&quot; ) )</span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744546.png" class="">

<p>接着修改静态资源文件路径也指向前端appfront 相关文件</p>
<p>在DjangoElementUI目录下的setting.py中增加代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,&#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;appfront/dist&#x27;)],  &#x27;django.template.context_processors.debug&#x27;,&#x27;django.template.context_processors.request&#x27;,&#x27;django.contrib.auth.context_processors.auth&#x27;,&#x27;django.contrib.messages.context_processors.messages&#x27;,    os.path.join(BASE_DIR, &quot;appfront/dist/static&quot;)</span><br></pre></td></tr></table></figure>

<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744606.png" class="">

<p>3.重新构建前端项目</p>
<p>appfront目录下输入命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>重新启动Django项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>输入地址:<a href="http://localhost:8000/vue/#/student">http://localhost:8000/vue/#/student</a></p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744653.png" class="">

<p>添加一条记录</p>
<img src="/2019/05/18/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/%E5%9F%BA%E4%BA%8EVue%E5%92%8CDjango%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/IMG-20250804110744706.png" class="">

<p>至此,大功告成!</p>
<p>此份指南在配置的过程踩过不少坑,以下是踩的印象较深的坑.</p>
<p>1.数据库创建的过程中务必注意大小写的问题,数据库字段和Django的Models页面,View页面和Vue中的组件页面都有关联.很容易一个大小写不注意,导致整个接口无法使用.</p>
<p>2.连接MySQL需要按照对应的包,同时需要在根目录的_ini_.py中引入pymysql</p>
<p>3.在整个环境的搭建过程中VUE环境的搭建需要耗费较长的npm安装时间,需要耐心等待.</p>
<p>4.前后台连接需要在前端引入vue-resource,Django需要引入django-cors-headers</p>
<blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><a href="https://zhuanlan.zhihu.com/ucloud">大U的技术课堂</a> 的新年第一课，祝大家新的一年好好学习，天天向上：）</p>
<p>本篇将手把手教你如何快速而优雅的构建<strong>前后端分离的项目</strong>，想直接上手请往后翻！</p>
</blockquote>
<p><strong>目录：</strong></p>
<ol>
<li><p>我为什么要选择Django与VueJS？</p>
</li>
<li><p>Django和VueJS是如何结合起来的？</p>
</li>
<li><p>实操</p>
</li>
<li><p>创建 Django 项目</p>
</li>
<li><p>创建 Django App 做为后端</p>
</li>
<li><p>创建 VueJS 项目作为前端</p>
</li>
<li><p>使用 Webpack 处理前端代码</p>
</li>
<li><p>配置 Django 模板的搜索路径</p>
</li>
<li><p>配置 Django 静态文件搜索路径</p>
</li>
<li><p>开发环境</p>
</li>
<li><p>生产环境（部署到 UCloud）</p>
</li>
</ol>
<p><strong>正文：</strong></p>
<h2 id="我为什么要选择Django与VueJS？"><a href="#我为什么要选择Django与VueJS？" class="headerlink" title="我为什么要选择Django与VueJS？"></a>我为什么要选择Django与VueJS？</h2><p>首先介绍一下我看重的点：</p>
<p>Django (MVC框架) - <a href="https://link.zhihu.com/?target=https://www.djangoproject.com/">The Web framework for perfectionists with deadlines</a></p>
<ul>
<li><p>Python  </p>
</li>
<li><p>ORM</p>
</li>
<li><p>简单、清晰的配置</p>
</li>
<li><p>Admin app</p>
</li>
</ul>
<p>Django 仅因为 Python 的血统，就已经站在了巨人的肩膀上，配置管理( SaltStack、Ansible )<br>，数据分析( Pandas )，任务队列( Celery )，Restful API( <a href="https://link.zhihu.com/?target=http://www.django-rest-framework.org/">Django REST framework</a> )，HTTP请求( requests )，再加上高度抽象的ORM，功能强大的 Query Expressions，简单清晰的配置，着重提一下堪称神器的自带App: Admin，有了它你再也不用将一些经常变化的配置写在文件里面，每次增删改都重新发布一次，你只需要定义出配置的 data scheme ，只需要几行代码，Django Admin便为你提供美观，并带有权限控制的增删改查界面，而且可以通过ORM为它生成的API来做到定制化的更新，比如直接读某个wiki上的配置，自动的写入数据库，伪代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">settings = pd.read_html(&#x27;http://某个gitlab的README 或者 某个redmine wiki&#x27;)</span><br><span class="line">settings = clean(settings)</span><br><span class="line">update(settings)</span><br></pre></td></tr></table></figure>

<p>最后还可以使用 django-celery 的 celery-beat 按 Interval&#x2F;crontab 的方式扔更新配置的任务到 celery 队列里面，最最重要的是，这些都可以在Django Admin后台直接配置哦，还不够优雅？请联系我</p>
<p>VueJS (MVVM框架) - <a href="https://link.zhihu.com/?target=https://vuejs.org/">Vue.js</a></p>
<ul>
<li>数据双向绑定</li>
<li>单文件组件</li>
<li>清晰的生命周期</li>
<li>学习曲线平滑</li>
<li>vue-cli</li>
</ul>
<blockquote>
<p>前端是DevOps的弱项，我需要一个 MVVM 框架来提升交互和节约时间，在试过 AngularJS ，ReactJS，VueJS之后我选择了VueJS，因为我觉得写 VueJS 代码的感觉最接近写 Python</p>
</blockquote>
<p>着重提一下单文件组件：</p>
<p><img src="https://pic2.zhimg.com/v2-ce179dca92761a76652a1a91290c4a59_b.png"></p>
<p>特别清晰，一个文件包含且仅包含三块</p>
<ol>
<li><template></template > 前端渲染的模板</li>
<li>专为此模板写渲染逻辑的 <script></script></li>
<li>专为此模板写样式的 <style></style></li>
</ol>
<p>这样可以达到什么效果呢？一个文件一个组件，每个组件有它自己的逻辑与样式，你不用关心什么 local 什么 global ，CSS样式加载先后、覆盖问题，因为它是『闭包』的，而且『自给自足』，不知道这样说好不好理解</p>
<p>当然组件之间也是可以通信的，举个例子，我有一个组件叫 ListULB ，使用表格展示了我拥有的所有 ULB (负载均衡)，ListULB 做了一件事，从 API 获取 ULB 对象列表并 for 循环展现出来， ListULB 可以放到某个页面里，可以放到弹框里，放到模态框里，任何地方都可以，因为这个组件对外交互的只有API</p>
<p>如果我现在要写一个组件叫 AddVServer ，功能是可以为任意一个 ULB 对象添加VServer，我的写法是将在 AddVServer 组件创建的时候，将 ULB 对象传给 AddVServer 组件，这样AddVServer 组件拿到这个对象，就可以直接根据对象的ID等，创建出当前行的ULB的VServer了，伪代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ListULB&gt;</span><br><span class="line">  for **ulb_object** in ulbs_list:</span><br><span class="line">    &#123;&#123; ulb_object.name &#125;&#125;</span><br><span class="line">    &#123;&#123; ulb_object.id &#125;&#125;</span><br><span class="line">    &lt;AddVServer :current_ulb=&#x27;**ulb_object**&#x27;&gt;&lt;/AddVServer&gt;</span><br><span class="line">&lt;/ListULB&gt;</span><br></pre></td></tr></table></figure>

<p>注意双星号包着的对象，在 ListULB 组件里面是每行的ULB，传给AddServer组件之后，变成了 current_ulb 对象，拿到id为 current_ulb.id 尽情的为它创建 VServer 吧</p>
<p>如果我要为指定 VServer 创建 RServer 呢，一样的</p>
<blockquote>
<p>看出来了吧，进行开发之前，前端组件的结构与数据的结构对应起来可以省好多时间，数据驱动前端组件，棒吗？</p>
</blockquote>
<p>谁不喜欢优雅的代码呢， 『Data drive everything』 多么的省脑细胞</p>
<p>以上就是我选择Python与VueJS的原因</p>
<h2 id="Django与VueJS是如何结合起来？"><a href="#Django与VueJS是如何结合起来？" class="headerlink" title="Django与VueJS是如何结合起来？"></a>Django与VueJS是如何结合起来？</h2><ul>
<li>首先我选择了VueJS的前端渲染，自然放弃了Django的后端模板引擎渲染</li>
<li>然后业务逻辑放到了前端，放弃了Django的View（其实也就是前后端分离必要的条件）</li>
<li>保留了Django的 Controller (URLconf) 来实现前端路由的父级路由，可以达到不同页面使用不同的前端框架， 页面内部使用各自独有的前端路由的效果，万一老大给你配了前端呢，万一前端只想写 ReactJS 呢</li>
<li>保留了Django的 Model ，前面说了Django的ORM太好用了，而且可以配合Django Admin</li>
</ul>
<p>所以综合来说就是:</p>
<blockquote>
<p>M(Django) + C(Django) + MVVM (VueJS) &#x3D; <em>M + MVVM + C &#x3D; MMVVMC</em></p>
</blockquote>
<p>（为了容易理解，并没有使用Django自称的MTV模式理解，感兴趣看看我画的图）</p>
<p><img src="https://pic1.zhimg.com/v2-d2a826bf7ef379eea16a6ac56971ce34_b.png"></p>
<p>总结：作为以改变世界为己任的 DevOps ，MVC框架后端渲染的柔弱表现力与繁杂的交互已经不能满足我们了，…..省略1000子…..，所以我选择这样构建项目，嗯…</p>
<p>好吧，也该开始了</p>
<p>代码块中的修改都会用爽星号括起来，比如: **changed**</p>
<p>本文为了精简篇幅，默认您已经安装了必要的 命令行界面（CLI），比如 vue-cli等</p>
<h2 id="1-创建Django项目"><a href="#1-创建Django项目" class="headerlink" title="1. 创建Django项目"></a>1. 创建Django项目</h2><p><img src="https://pic4.zhimg.com/v2-0b8ed26d48a1ad0b412cec59aeb3db03_b.png"></p>
<p><em>命令：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin startproject ulb_manager</span><br></pre></td></tr></table></figure>

<p><em>结构：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">└── ulb_manager</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure>

<h2 id="2-进入项目根目录，创建一个-app-作为项目后端"><a href="#2-进入项目根目录，创建一个-app-作为项目后端" class="headerlink" title="2. 进入项目根目录，创建一个 app 作为项目后端"></a>2. 进入项目根目录，创建一个 app 作为项目后端</h2><p><em>命令：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ulb_manager</span><br><span class="line">python manage.py startapp backend</span><br></pre></td></tr></table></figure>

<p>即：app 名叫做 backend</p>
<p><em>结构：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── manage.py</span><br><span class="line">└── ulb_manager</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure>

<h2 id="3-使用vue-cli创建一个vuejs项目作为项目前端"><a href="#3-使用vue-cli创建一个vuejs项目作为项目前端" class="headerlink" title="3. 使用vue-cli创建一个vuejs项目作为项目前端"></a>3. 使用vue-cli创建一个vuejs项目作为项目前端</h2><p><img src="https://pic1.zhimg.com/v2-df081aadcb6c5b35b7ae28253875d5a8_b.png"></p>
<p><em>命令：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue-init webpack frontend</span><br></pre></td></tr></table></figure>

<p>即：项目名叫 frontend</p>
<p><em>结构：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── frontend</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── build</span><br><span class="line">│   │   └── ....</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   ├── dev.env.js</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── prod.env.js</span><br><span class="line">│   │   └── test.env.js</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── src</span><br><span class="line">│   │   ├── App.vue</span><br><span class="line">│   │   ├── assets</span><br><span class="line">│   │   │   └── logo.png</span><br><span class="line">│   │   ├── components</span><br><span class="line">│   │   │   └── Hello.vue</span><br><span class="line">│   │   └── main.js</span><br><span class="line">│   ├── static</span><br><span class="line">│   └── test</span><br><span class="line">│       └── ...</span><br><span class="line">├── manage.py</span><br><span class="line">└── ulb_manager</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure>

<p><em>结构总结：</em></p>
<p>可以看到项目根目录有两个新文件夹，一个叫 backend ，一个叫 frontend，分别是：</p>
<ul>
<li>backend Django的一个app</li>
<li>frontend Vuejs项目</li>
</ul>
<h2 id="4-接下来我们使用-webpack-打包Vusjs项目"><a href="#4-接下来我们使用-webpack-打包Vusjs项目" class="headerlink" title="4. 接下来我们使用 webpack 打包Vusjs项目"></a>4. 接下来我们使用 webpack 打包Vusjs项目</h2><p><img src="https://pic4.zhimg.com/v2-c069d74a266268d832397a933cb6055b_b.png"></p>
<p><em>命令：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd frontend</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p><em>结构：</em></p>
<p><em>我引入了一些包，比如element-ui等，你的static里面的内容会不同，没关系 index.html 和 static 文件夹相同就够了</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">├── index.html</span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── app.42b821a6fd065652cb86e2af5bf3b5d2.css</span><br><span class="line">    │   └── app.42b821a6fd065652cb86e2af5bf3b5d2.css.map</span><br><span class="line">    ├── fonts</span><br><span class="line">    │   ├── element-icons.a61be9c.eot</span><br><span class="line">    │   └── element-icons.b02bdc1.ttf</span><br><span class="line">    ├── img</span><br><span class="line">    │   └── element-icons.09162bc.svg</span><br><span class="line">    └── js</span><br><span class="line">        ├── 0.8750b01fa7ffd70f7ba6.js</span><br><span class="line">        ├── vendor.804853a3a7c622c4cb5b.js</span><br><span class="line">        └── vendor.804853a3a7c622c4cb5b.js.map</span><br></pre></td></tr></table></figure>

<p>构建完成会生成一个 文件夹名字叫dist，里面有一个 index.html 和一个 文件夹static ，</p>
<h2 id="5-使用Django的通用视图-TemplateView"><a href="#5-使用Django的通用视图-TemplateView" class="headerlink" title="5. 使用Django的通用视图 TemplateView"></a>5. 使用Django的通用视图 TemplateView</h2><p>找到项目根 urls.py (即ulb_manager&#x2F;urls.py)，使用通用视图创建最简单的模板控制器，访问 『&#x2F;』时直接返回 index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^admin/&#x27;, admin.site.urls),</span><br><span class="line">    **url(r&#x27;^$&#x27;, TemplateView.as_view(template_name=&quot;index.html&quot;)),**</span><br><span class="line">    url(r&#x27;^api/&#x27;, include(&#x27;backend.urls&#x27;, namespace=&#x27;api&#x27;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="6-配置Django项目的模板搜索路径"><a href="#6-配置Django项目的模板搜索路径" class="headerlink" title="6. 配置Django项目的模板搜索路径"></a>6. 配置Django项目的模板搜索路径</h2><p>上一步使用了Django的模板系统，所以需要配置一下模板使Django知道从哪里找到index.html</p>
<p>打开 settings.py (ulb_manager&#x2F;settings.py)，找到TEMPLATES配置项，修改如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="line">        # &#x27;DIRS&#x27;: [],</span><br><span class="line">        **&#x27;DIRS&#x27;: [&#x27;frontend/dist&#x27;]**,</span><br><span class="line">        &#x27;APP_DIRS&#x27;: True,</span><br><span class="line">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="line">            &#x27;context_processors&#x27;: [</span><br><span class="line">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="line">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="line">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="line">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意这里的 frontend 是VueJS项目目录，dist则是运行 npm run build 构建出的index.html与静态文件夹 static 的父级目录</p>
<p>这时启动Django项目，访问 &#x2F; 则可以访问index.html，但是还有问题，静态文件都是404错误，下一步我们解决这个问题</p>
<h2 id="7-配置静态文件搜索路径"><a href="#7-配置静态文件搜索路径" class="headerlink" title="7. 配置静态文件搜索路径"></a>7. 配置静态文件搜索路径</h2><p>打开 settings.py (ulb_manager&#x2F;settings.py)，找到 STATICFILES_DIRS 配置项，配置如下:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Add for vuejs</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &quot;frontend/dist/static&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这样Django不仅可以将&#x2F;ulb 映射到index.html，而且还可以顺利找到静态文件  </p>
<p>此时访问 &#x2F;ulb 我们可以看到使用Django作为后端的VueJS helloworld</p>
<p>ALL DONE.</p>
<h2 id="8-开发环境"><a href="#8-开发环境" class="headerlink" title="8. 开发环境"></a>8. 开发环境</h2><p>因为我们使用了Django作为后端，每次修改了前端之后都要重新构建（你可以理解为不编译不能运行）</p>
<p>除了使用Django作为后端，我们还可以在dist目录下面运行以下命令来看效果：</p>
<p><img src="https://pic3.zhimg.com/v2-63bb75e8e032b4a9331b67fe4f38ffa6_b.png"></p>
<p>但是问题依然没有解决，我想过检测文件变化来自动构建，但是构建是秒级的，太慢了，所以我直接使用VueJS的开发环境来调试</p>
<p><img src="https://pic4.zhimg.com/v2-9eb17d07a276d968e24dd13d39b6da73_b.png"></p>
<p>毫秒，但是有个新问题，使用VueJS的开发环境脱离了Django环境，访问Django写的API，出现了跨域问题，有两种方法解决，一种是在VueJS层上做转发（proxyTable），另一种是在Django层注入header，这里我使用后者，用Django的第三方包 django-cors-headers 来解决跨域问题</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p>配置（两步）</p>
<p>1. settings.py 修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span><br><span class="line">    **&#x27;corsheaders.middleware.CorsMiddleware&#x27;,**</span><br><span class="line">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这里要注意中间件加载顺序，列表是有序的哦</p>
<p>2. settings.py 添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br></pre></td></tr></table></figure>

<p>至此，我的开发环境就搭建完成了</p>
<h2 id="9-生产环境部署（部署到-UCloud-）"><a href="#9-生产环境部署（部署到-UCloud-）" class="headerlink" title="9. 生产环境部署（部署到 UCloud ）"></a>9. 生产环境部署（部署到 UCloud ）</h2><p>9.1 创建主机</p>
<ol>
<li>注册 <a href="https://link.zhihu.com/?target=https://ucloud.cn/">UCloud - 专业云计算服务商</a></li>
<li>点击左侧的 云主机，然后点击 创建主机</li>
<li>右侧选择 付费方式，点击 立即购买</li>
<li>在支付确认页面，点击 确认支付</li>
</ol>
<p>购买成功后回到主机管理列表，如下所示：  </p>
<p><img src="https://pic4.zhimg.com/v2-5d91cf1a36574fb6ea9de229bffc8b4b_b.png"></p>
<blockquote>
<p>这里注意记住你的外网IP，下面的ip替换成你的  </p>
</blockquote>
<p>9.2 环境搭建与部署</p>
<p>登录主机，用你刚填写的密码：</p>
<blockquote>
<p>ssh <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#50;&#48;&#46;&#x31;&#51;&#x32;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#50;&#48;&#46;&#x31;&#51;&#x32;</a>.**.75</p>
</blockquote>
<p>CentOS 系统可以使用 yum 安装必要的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果你使用git来托管代码的话</span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line"># 如果你要在服务器上构建前端</span><br><span class="line">yum install nodejs</span><br><span class="line">yum install npm</span><br><span class="line"></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们使用 uwsgi 来处理 Django 请求，使用 nginx 处理 static 文件（即之前 build 之后 dist 里面的static，这里默认前端已经打包好了，如果在服务端打包前端需要安装nodejs，npm等）</p>
</blockquote>
<p>安装uWsgi</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install uwsgi</span><br><span class="line"># 或者</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>

<p>我们使用配置文件启动uwsgi，比较清楚</p>
<p>uwsgi配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:9292</span><br><span class="line">stats = 127.0.0.1:9293</span><br><span class="line">workers = 4</span><br><span class="line"># 项目根目录</span><br><span class="line">chdir = /opt/inner_ulb_manager</span><br><span class="line">touch-reload = /opt/inner_ulb_manager</span><br><span class="line">py-auto-reload = 1</span><br><span class="line"># 在项目跟目录和项目同名的文件夹里面的一个文件</span><br><span class="line">module= inner_ulb_manager.wsgi</span><br><span class="line">pidfile = /var/run/inner_ulb_manager.pid</span><br><span class="line">daemonize = /var/log/inner_ulb_manager.log</span><br></pre></td></tr></table></figure>

<p>nginx 配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    server_name 120.132.**.75;</span><br><span class="line">    root /opt/inner_ulb_manager;</span><br><span class="line">    access_log /var/log/nginx/access_narwhals.log;</span><br><span class="line">    error_log /var/log/nginx/error_narwhals.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            uwsgi_pass 127.0.0.1:9292;</span><br><span class="line">            include /etc/nginx/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">            root  /opt/inner_ulb_manager/;</span><br><span class="line">            access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ /admin/ &#123;</span><br><span class="line">            uwsgi_pass 127.0.0.1:9292;</span><br><span class="line">            include /etc/nginx/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;opt&#x2F;inner_ulb_manager&#x2F;static 即为静态文件目录，那么现在我们静态文件还在 frontend&#x2F;dist 怎么办，不怕，Django给我们提供了命令：</p>
<p>先去settings里面配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &quot;static&quot;)</span><br></pre></td></tr></table></figure>

<p>然后在存在manage.py的目录，即项目跟目录执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

<p>这样frontend&#x2F;dist&#x2F;static里面的东西就到了项目根目录的static文件夹里面了</p>
<p>那么为什么不直接手动把构建好的dist&#x2F;static拷过来呢，因为开始提过Django自带的App：admin 也有一些静态文件（css,js等），它会一并collect过来，毕竟nginx只认项目跟目录的静态文件，它不知道django把它自己的需求文件放到哪了</p>
<p>开头说过Django配置灵活，那么我们专门为Django创建一个生产环境的配置 prod.py  </p>
<p>prod.py 与 默认 settings.py 同目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导入公共配置</span><br><span class="line">from .settings import *</span><br><span class="line"></span><br><span class="line"># 生产环境关闭DEBUG模式</span><br><span class="line">DEBUG = False</span><br><span class="line"></span><br><span class="line"># 生产环境开启跨域</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = False</span><br><span class="line"></span><br><span class="line"># 特别说明，下面这个不需要，因为前端是VueJS构建的，它默认使用static作为静态文件入口，我们nginx配置static为入口即可，保持一致，没Django什么事</span><br><span class="line">STATIC_URL = &#x27;/static/&#x27;</span><br></pre></td></tr></table></figure>

<p>如何使用这个配置呢，进入 wisg.py 即uwsgi配置里面的module配置修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">from django.core.wsgi import get_wsgi_application</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;**inner_ulb_manager.prod**&quot;)</span><br><span class="line"></span><br><span class="line">application = get_wsgi_application()</span><br></pre></td></tr></table></figure>

<p>启动uwsgi</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uwsgi --ini inner_ulb_manager.ini</span><br></pre></td></tr></table></figure>

<p>启动ngingx</p>
<p>至此，部署就完成了</p>
<h2 id="10-效果图"><a href="#10-效果图" class="headerlink" title="10. 效果图"></a>10. 效果图</h2><p>List 组件：</p>
<p><img src="https://pic4.zhimg.com/v2-65889a6f9431124be7b1359ba179e9b3_b.png"></p>
<blockquote>
<p><em>传单个 ULB 对象给 Detail 组件使用即可</em></p>
</blockquote>
<p>Detail 组件：</p>
<p><img src="https://pic2.zhimg.com/v2-705538ffd2da07562b42a5e256838e29_b.png"></p>
<blockquote>
<p><em>当然里面还实现了前面提到的 ULB 的 VServer 创建，VServer 的 RServer 的创建等。</em></p>
</blockquote>
<p>————————</p>
<p>本文由『<strong>UCloud平台产品研发团队</strong>』提供。</p>
<p>项目源码文件戳下面链接查看，大家可以马上拿源码上手试起来，操作过程中遇到问题也可直接在github上留言：）<a href="https://link.zhihu.com/?target=https://github.com/tmpbook/django-with-vuejs">https://github.com/tmpbook/django-with-vuejs</a></p>
<p>现在注册使用UCloud，还免费试用 及 首充返现优惠，最高可返3000元代金券！活动传送门：<a href="https://link.zhihu.com/?target=https://www.ucloud.cn/site/active/gift.html">用UCloud！3000元限量版礼盒等你来拆！</a></p>
<p>另，欢迎添加UCloud运营小妹个人微信号：Surdur，陪聊很专业：）</p>
<p><img src="https://pic3.zhimg.com/v2-d9f126c84351c1bb089dda34b630523e_b.jpg"></p>
<blockquote>
<p><strong>关于作者：</strong></p>
<p>星辰（<a href="https://www.zhihu.com/people/tmpbook/activities">@星辰</a>）， UCloud平台产品研发工程师，DevOps一枚。你也可以去他的知乎专栏 <a href="https://zhuanlan.zhihu.com/heart-devops">《随心DevOps》</a> 上逛逛，干货满满，带你更优雅的改变世界。</p>
</blockquote>
<h2 id="相关阅读推荐："><a href="#相关阅读推荐：" class="headerlink" title="相关阅读推荐："></a>相关阅读推荐：</h2><p><a href="https://zhuanlan.zhihu.com/p/24899387">机器学习进阶笔记之八 | TensorFlow与中文手写汉字识别</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/23938423">机器学习进阶笔记之七 | MXnet初体验</a><br><a href="https://zhuanlan.zhihu.com/p/23651687">机器学习进阶笔记之六 | 深入理解Fast Neural Style</a><br><a href="https://zhuanlan.zhihu.com/p/23518167">机器学习进阶笔记之五 | 深入理解VGG\Residual Network</a><br><a href="https://zhuanlan.zhihu.com/p/22817228">机器学习进阶笔记之四 | 深入理解GoogLeNet</a><br><a href="https://zhuanlan.zhihu.com/p/22659166">机器学习进阶笔记之三 | 深入理解Alexnet</a><br><a href="https://zhuanlan.zhihu.com/p/22493132">机器学习进阶笔记之二 | 深入理解Neural Style</a><br><a href="https://zhuanlan.zhihu.com/p/22410917">机器学习进阶笔记之一 | TensorFlow安装与入门</a></p>
<p>「UCloud机构号」将独家分享云计算领域的技术洞见、行业资讯以及一切你想知道的相关讯息。</p>
<p>欢迎提问&amp;求关注 o(*&#x2F;&#x2F;&#x2F;&#x2F;▽&#x2F;&#x2F;&#x2F;&#x2F;*)q～</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（一）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（一）"><a href="#DotNetty完全教程（一）" class="headerlink" title="DotNetty完全教程（一）"></a>DotNetty完全教程（一）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>写本系列文章的目的我一直以来都在从事.NET相关的工作，做过工控，做过网站，工作初期维护过别人写的网络库，后来自己写网络库，我发现在使用C#编程的程序员中，能否写出高性能的网络库一直都是考验一个程序员能力的标杆。为了写出高性能的网络库，我查阅了很多资料，发现Java的Netty有着得天独厚的设计以及实现优势，Java也因为Netty的存在，在开发大吞吐量的应用程序中得心应手。我想，.NET程序…</p>
</blockquote>
<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102794214">原文出处链接</a>和本声明。</p>
<h3 id="写本系列文章的目的"><a href="#写本系列文章的目的" class="headerlink" title="写本系列文章的目的"></a>写本系列文章的目的</h3><p>我一直以来都在从事.NET相关的工作，做过<a href="https://so.csdn.net/so/search?q=%E5%B7%A5%E6%8E%A7&spm=1001.2101.3001.7020">工控</a>，做过网站，工作初期维护过别人写的网络库，后来自己写网络库，我发现在使用C#编程的程序员中，能否写出高性能的网络库一直都是考验一个程序员能力的标杆。为了写出高性能的网络库，我查阅了很多资料，发现Java的Netty有着得天独厚的设计以及实现优势，Java也因为Netty的存在，在开发大吞吐量的应用程序中得心应手。</p>
<p>我想，.NET程序员为什么不能使用这么好的应用程序框架。好在，Azure团队写出了DotNetty，使得.NET程序员也可以迅速的，便捷的搭建一个高性能的网络应用程序，但是，DotNetty并没有多少资料，项目代码中也没有多少注释，这对我们的学习以及使用带来了极大的障碍。</p>
<p>我通过对于Netty的研究，一步步的使用DotNetty来创建应用程序，分析DotNetty实现了哪些，没有实现哪些，实现的有何不同，希望通过最简单的描述，让读者能够了解DotNetty，无论是在工作学习中快速搭建网络应用程序还是通过分析Netty的思想，为自己写的网络库添砖加瓦都是十分有意义的。</p>
<p>本系列文章参考了《Netty实战》，感兴趣的同学可以去看看这本书。</p>
<h3 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h3><p>Netty 是一款用于创建高性能网络应用程序的高级框架。</p>
<p>Netty 是一款异步的事件驱动的网络应用程序框架，支持快速地开发可维护的高性能的面向协议的服务器<br>和客户端</p>
<h3 id="DotNetty是什么"><a href="#DotNetty是什么" class="headerlink" title="DotNetty是什么"></a>DotNetty是什么</h3><p>DotNetty是微软的Azure团队仿造Netty编写的网络应用程序框架。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>关注点分离——业务和网络逻辑解耦；</li>
<li>模块化和可复用性；</li>
<li>可测试性作为首要的要求</li>
</ol>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ol>
<li>阻塞Socket通信特点：<ol>
<li>建立连接要阻塞线程，读取数据要阻塞线程</li>
<li>如果要管理多个客户端，就需要为每个客户端建立不同的线程</li>
<li>会有大量的线程在休眠状态，等待接收数据，资源浪费</li>
<li>每个线程都要占用系统资源</li>
<li>线程的切换很耗费系统资源</li>
</ol>
</li>
<li>非阻塞Socket（NIO）特点：<ol>
<li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcwNnlkODhzdXFqMzBhczA3ejN5dS5qcGc?x-oss-process=image/format,png"></li>
<li>如图，每个Socket如果需要读写操作，都通过事件通知的方式通知选择器，这样就实现了一个线程管理多个Socket的目的。</li>
<li>选择器甚至可以在所有的Socket空闲的时候允许线程先去干别的事情</li>
<li>减少了线程数量导致的资源占用，减少了线程切换导致的资源消耗</li>
</ol>
</li>
<li>Netty特点<br><img src="https://img-blog.csdnimg.cn/20191030090453365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L254eV93dWhhbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h3 id="Netty设计的关键点"><a href="#Netty设计的关键点" class="headerlink" title="Netty设计的关键点"></a>Netty设计的关键点</h3><p>异步和事件驱动是Netty设计的关键</p>
<h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><ul>
<li>Channel：一个连接就是一个Channel</li>
<li>回调：通知的基础</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ConnectHandler : SimpleChannelInboundHandler&lt;string&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public override void ChannelActive(IChannelHandlerContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        // 新的连接建立的时候会触发这个回调</span><br><span class="line">        base.ChannelActive(context);</span><br><span class="line">    &#125;</span><br><span class="line">    protected override void ChannelRead0(IChannelHandlerContext ctx, string msg)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Future：通知的另一种方式，可以认为ChannelFuture是包装了一系列Channel事件的对象。回调和Future相互补充，相互结合同时也可以理解Future是一种更加精细的回调。</p>
<p>但是ChannelFuture在DotNetty中被Task取代</p>
</li>
<li><p>事件和ChannelHandler<br>ChannelHandler是事件处理器，负责处理入站事件和出站事件。通常每一个事件都由一系列的Handler处理。</p>
</li>
</ul>
<blockquote>
<p>本文参考资料以及截图来自《Netty实战》</p>
</blockquote>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（七）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（七）"><a href="#DotNetty完全教程（七）" class="headerlink" title="DotNetty完全教程（七）"></a>DotNetty完全教程（七）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>ChannelPipeline和ChannelHandleContext介绍ChannelPipeline是一系列ChannelHandler连接的实例链，这个实例链构成了应用程序逻辑处理的核心。下图反映了这种关联：ChannelHandlerContext提供了一个ChannelPipeline的上下文，用于ChannelHandler在Pipeline中的交互，这种交互十分的灵活，不仅…</p>
</blockquote>
<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102819946">原文出处链接</a>和本声明。</p>
<h2 id="ChannelPipeline和ChannelHandleContext"><a href="#ChannelPipeline和ChannelHandleContext" class="headerlink" title="ChannelPipeline和ChannelHandleContext"></a>ChannelPipeline和ChannelHandleContext</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ChannelPipeline是一系列ChannelHandler连接的实例链，这个实例链构成了应用程序逻辑处理的核心。下图反映了这种关联：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2tsa2FuYXBqMzBtbDA4YmFhcS5qcGc?x-oss-process=image/format,png"></p>
<p>ChannelHandlerContext提供了一个ChannelPipeline的上下文，用于ChannelHandler在Pipeline中的交互，这种交互十分的灵活，不仅是信息可以交互，甚至可以改变其他<a href="https://so.csdn.net/so/search?q=Handler&spm=1001.2101.3001.7020">Handler</a>在Pipeline中的位置。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol>
<li>每一个Channel都会被分配到一个ChannelPipeline，这种关联是永久性的。在Netty中是关联，在DotNetty中这种关联被进一步的强绑定，变成了一个Channel中存在一个Pipeline。</li>
<li>对于Pipeline来说，入站口被当作Pipeline的头部，出站口被当作尾部。虽然我们看到有两条线，但是在Pipeline中其实是线性的，在事件传播的时候，如果Pipeline发现这个事件的属性（入站出站）跟下一个Handler不匹配，就会跳过这个Handler，前进到下一个。</li>
<li>一个Handler可以既作为入站处理器也作为出站处理器。</li>
<li>修改Pipeline<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2wxejY3dXJqMzB5ZDA3Njc1Zi5qcGc?x-oss-process=image/format,png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2wxajgxdmtqMzB5czA3M2RoNi5qcGc?x-oss-process=image/format,png"></li>
<li>为了保证ChannelHandler处理事件的高效性，在Handler中不能有阻塞代码，但是如果遇到了一些阻塞API，就需要用到DefaultEventExecutorGroup，其功能是把这个事件的处理从原先的EventLoop中移除，送到一个专门的执行事件处理器中进行处理，从而不阻塞Pipeline。</li>
</ol>
<h3 id="ChanelPipeline的事件"><a href="#ChanelPipeline的事件" class="headerlink" title="ChanelPipeline的事件"></a>ChanelPipeline的事件</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2wzNHdjd3pqMzB5cjBtZmdycC5qcGc?x-oss-process=image/format,png"><br>我们可以看到fire方法都是调用下一个Handler中的方法，我们可以在合适的时机调用下一个Handler中的方法以实现数据的流动。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2w1Z2VwMTdqMzB5dTBuNWd0by5qcGc?x-oss-process=image/format,png"><br>这里我们注意一下，Write方法并不会将消息写入Socket中，而是写入消息队列中，等待Flush将数据冲刷下去。</p>
<h3 id="Context的API支持"><a href="#Context的API支持" class="headerlink" title="Context的API支持"></a>Context的API支持</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2xhb3FrNDFqMzBrbTBtamFnaS5qcGc?x-oss-process=image/format,png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxa2xhd3RwNXlqMzBrZTAydmRnNi5qcGc?x-oss-process=image/format,png"></p>
<h3 id="Pipeline和Context"><a href="#Pipeline和Context" class="headerlink" title="Pipeline和Context"></a>Pipeline和Context</h3><p>我们可以发现，Pipeline上也有fire–的方法，Context也有类似的方法，他们的差别在于，Pipeline或者Channel上的这些方法引发的事件流将从Pipeline的头部开始移动，而Context上的方法会让事件从当前Handler开始移动，所以为了更短的事件流，我们应该尽可能的使用Context的方法。</p>
<h3 id="使用ChannelHandlerContext"><a href="#使用ChannelHandlerContext" class="headerlink" title="使用ChannelHandlerContext"></a>使用ChannelHandlerContext</h3><ol>
<li><p>获取当前Channel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IChannelHandlerContext ctx = ...;</span><br><span class="line">IChannel channel = ctx.Channel</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取当前pipeline</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意一下在Netty中可以直接通过context获取pipeline，在DotNetty中需要从Channel中获取</span><br><span class="line">// Netty</span><br><span class="line">IChannelHandlerContext ctx = ...;</span><br><span class="line">IChannel channel = ctx.pipeline</span><br><span class="line">// DotNetty</span><br><span class="line">IChannel channel = ctx.Channel;</span><br><span class="line">IChannelPipeline pipeline = channel.Pipeline;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入pipeline让事件从尾端开始移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IChannel channel = ctx.Channel;</span><br><span class="line">IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">channel.WriteAndFlushAsync(&quot;Hello World!&quot;);</span><br><span class="line">pipeline.WriteAndFlushAsync(&quot;Hello World!&quot;);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意，Write是出站事件，他的流动方向是从末尾到头部，这个一定要注意。在pipeline或者channel中写入事件，都是从最末尾开始流动，在Context中写入是从当前Handler中开始移动，这个我们已经在很多地方都说明了这样的不同。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol>
<li>协议切换<br>因为我们可以通过Context获取Pipeline的引用，获取了pipeline之后又可以动态的加载和删除Handler，利用这个特性我们可以实现协议的切换，</li>
<li>随时随地使用Context<br>这里我们补充一个知识，Context和Handler的关系是一对一的，而不是一个Context对应多个Handler，这就让我们可以缓存下Context的引用，在任何时候进行使用，这里的任何时候可以是不同的线程。举个例子就是我们之前写的回声程序是在收到信息之后发送，但是复杂一点我们需要在按下按钮的时候发送一条数据，这时候我们可以在连接之后缓存Context的引用，在按下按钮的时候使用Ctx.Write()；方法来发送一条数据。</li>
</ol>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>在Netty中，如果想要将一个Handler用于多个Pipeline中，需要标注Shared，同时需要保证线程安全，因为这里可能有多线程的重入问题。</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ol>
<li>入站异常无论在何时引发，都会顺着Pipeline继续向下流动，如果最后的Handler没有处理，则会被标记为未处理。所以为了处理所有的入站异常，我们可以在pipeline的尾端通过复写ExceptionCaught来处理所有pipeline上的异常。</li>
<li>在出站Handler中获取异常在Netty中需要使用ChannelFuture以及ChannelPromise这里先不做叙述</li>
</ol>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（三）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（三）"><a href="#DotNetty完全教程（三）" class="headerlink" title="DotNetty完全教程（三）"></a>DotNetty完全教程（三）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>组件介绍ChannelChannel是Socket的封装，提供绑定，读，写等操作，降低了直接使用Socket的复杂性。EventLoop我们之前就讲过EventLoop这里回顾一下：一个 EventLoopGroup 包含一个或者多个 EventLoop；一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；所有由 EventLoop 处理的 I&#x2F;O 事件都将在它…</p>
</blockquote>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102812623">原文出处链接</a>和本声明。</p>
<h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Channel是<a href="https://so.csdn.net/so/search?q=Socket&spm=1001.2101.3001.7020">Socket</a>的封装，提供绑定，读，写等操作，降低了直接使用Socket的复杂性。</p>
<h3 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h3><p>我们之前就讲过EventLoop这里回顾一下：</p>
<ol>
<li>一个 EventLoopGroup 包含一个或者多个 EventLoop；</li>
<li>一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；</li>
<li>所有由 EventLoop 处理的 I&#x2F;O 事件都将在它专有的 Thread 上被处理；</li>
<li>一个 Channel 在它的生命周期内只注册于一个 EventLoop；</li>
<li>一个 EventLoop 可能会被分配给一个或多个 Channel。</li>
</ol>
<h3 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h3><p>本身是Channel中消息的回调，在DotNetty中被Task取代。</p>
<h3 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h3><p>ChannelHandler是处理数据的逻辑容器</p>
<p>ChannelInboundHandler是接收并处理入站事件的逻辑容器，可以处理入站数据以及给客户端以回复。</p>
<h3 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h3><p>ChannelPipeline是将ChannelHandler穿成一串的的容器。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcwZzU2MzdwY3dqMzB1cTA3bmRnZi5qcGc?x-oss-process=image/format,png"><br>需要说明的是：</p>
<ol>
<li>ChannelInboundHandler只处理入站事件，ChannelOutboundHandler只处理出站事件</li>
<li>ChannelInboundHandler和ChannelOutboundHandler可以注册在同一个ChannelPipeline中</li>
</ol>
<p><em>（尝试一下）在 Netty 中，有两种发送消息的方式。你可以直接写到 Channel 中，也可以 写到和 ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline 的尾端开始流动，而后者将导致消息从 ChannelPipeline 中的下一个 ChannelHandler 开始流动。</em></p>
<h3 id="编码器和解码器"><a href="#编码器和解码器" class="headerlink" title="编码器和解码器"></a>编码器和解码器</h3><p>Netty中内置了一些编码器和解码器，用来进行处理字节流数据，编码器用来将消息编码为字节流，解码器用来将字节流解码为另一种格式（字符串或一个对象）。</p>
<p>需要注意的是，编码器和解码器都实现了ChannelInboundHandler和 ChannelOutboundHandler接口用于处理入站或出站数据。</p>
<h3 id="Bootstrap引导类"><a href="#Bootstrap引导类" class="headerlink" title="Bootstrap引导类"></a>Bootstrap引导类</h3><ol>
<li>Bootstrap用于引导客户端，ServerBootstrap用于引导服务器</li>
<li>客户端引导类只需要一个EventLoopGroup服务器引导类需要两个EventLoopGroup。但是在简单使用中，也可以公用一个EventLoopGroup。为什么服务器需要两个EventLoopGroup呢？是因为服务器的第一个EventLoopGroup只有一个EventLoop，只含有一个SeverChannel用于监听本地端口，一旦连接建立，这个EventLoop就将Channel控制权移交给另一个EventLoopGroup，这个EventLoopGroup分配一个EventLoop给Channel用于管理这个Channel。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcwaWg0aXN4bzBqMzBpNjA3aWRoNi5qcGc?x-oss-process=image/format,png"></li>
</ol>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（五）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（五）"><a href="#DotNetty完全教程（五）" class="headerlink" title="DotNetty完全教程（五）"></a>DotNetty完全教程（五）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>ChannelHandler本篇文章着重介绍ChannelHandlerChannel的生命周期我们复习一下，Channel是Socket的抽象，可以被注册到一个EventLoop上，EventLoop相当于Selector，每一个EventLoop又有自己的处理线程。复习了这部分的知识，我们就知道在Channel的生命中，有以下这么几个关键的时间节点。ChannelHandler的生…</p>
</blockquote>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102814738">原文出处链接</a>和本声明。</p>
<h2 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h2><p>本篇文章着重介绍ChannelHandler</p>
<h3 id="Channel的生命周期"><a href="#Channel的生命周期" class="headerlink" title="Channel的生命周期"></a>Channel的<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&spm=1001.2101.3001.7020">生命周期</a></h3><p>我们复习一下，Channel是<a href="https://so.csdn.net/so/search?q=Socket&spm=1001.2101.3001.7020">Socket</a>的抽象，可以被注册到一个EventLoop上，EventLoop相当于Selector，每一个EventLoop又有自己的处理线程。复习了这部分的知识，我们就知道在Channel的生命中，有以下这么几个关键的时间节点。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanF4NDk1cG5qMzBpbDAzaWdtMS5qcGc?x-oss-process=image/format,png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanF4Yzl0bTBqMzBpdTAyaTB0NS5qcGc?x-oss-process=image/format,png"></p>
<h3 id="ChannelHandler的生命周期"><a href="#ChannelHandler的生命周期" class="headerlink" title="ChannelHandler的生命周期"></a>ChannelHandler的生命周期</h3><p>我们复习一下，ChannelHandler是定义了如何处理数据的处理器，被串在ChannelPipeline中用于入站或者出站数据的处理。既然是处理Channel中的数据，就需要关注很多的时间节点，比如Channel被激活，比如，读取到了数据，所以，ChannelHandler不仅需要关心数据何时来，还需要关注Channel处于一个什么样的状态，所以ChannelHandler的生命周期如下：<br><img src="https://img-blog.csdnimg.cn/20191030151057835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L254eV93dWhhbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanI4M3ZzNmZqMzBqMDBhZjc3NS5qcGc?x-oss-process=image/format,png"></p>
<h3 id="使用适配器类创建自己的Handler"><a href="#使用适配器类创建自己的Handler" class="headerlink" title="使用适配器类创建自己的Handler"></a>使用适配器类创建自己的<a href="https://so.csdn.net/so/search?q=Handler&spm=1001.2101.3001.7020">Handler</a></h3><p>你可以使用 ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter<br>类作为自己的 ChannelHandler 的起始点。使用的时候我们只需要扩展使用这些适配器类，然后重新我们需要的方法即可。</p>
<p>注意适配器类都有IsSharable属性，标识这个Hanlder能不能被添加到多个Pipeline中。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（二）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（二）"><a href="#DotNetty完全教程（二）" class="headerlink" title="DotNetty完全教程（二）"></a>DotNetty完全教程（二）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>第一个DotNetty应用程序准备工作NuGet包介绍DotNetty由九个项目构成，在NuGet中都是单独的包，可以按需引用，其中比较重要的几个是以下几个：DotNetty.Common 是公共的类库项目，包装线程池，并行任务和常用帮助类的封装DotNetty.Transport 是DotNetty核心的实现DotNetty.Buffers 是对内存缓冲区管理的封装DotNett…</p>
</blockquote>
<hr>
<p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png"></p>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102812324">原文出处链接</a>和本声明。</p>
<h2 id="第一个DotNetty应用程序"><a href="#第一个DotNetty应用程序" class="headerlink" title="第一个DotNetty应用程序"></a>第一个DotNetty应用程序</h2><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="NuGet包介绍"><a href="#NuGet包介绍" class="headerlink" title="NuGet包介绍"></a>NuGet包介绍</h3><p>DotNetty由九个项目构成，在NuGet中都是单独的包，可以按需引用，其中比较重要的几个是以下几个：</p>
<ul>
<li>DotNetty.Common 是公共的类库项目，包装线程池，并行任务和常用帮助类的封装</li>
<li>DotNetty.Transport 是DotNetty核心的实现</li>
<li>DotNetty.Buffers 是对内存缓冲区管理的封装</li>
<li>DotNetty.Codes 是对编码器解码器的封装，包括一些基础基类的实现，我们在项目中自定义的协议，都要继承该项目的特定基类和实现</li>
<li>DotNetty.Handlers 封装了常用的管道处理器，比如Tls编解码，超时机制，心跳检查，日志等，如果项目中没有用到可以不引用，不过一般都会用到</li>
</ul>
<h3 id="开始一个项目"><a href="#开始一个项目" class="headerlink" title="开始一个项目"></a>开始一个项目</h3><ol>
<li>新建一个解决方案</li>
<li>新建一个项目</li>
<li>到NuGet中引用 DotNetty.Common DotNetty.Transport DotNetty.Buffers</li>
<li>开始编写实例代码</li>
</ol>
<h2 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h2><h3 id="回声测试应用程序编写-源码下载"><a href="#回声测试应用程序编写-源码下载" class="headerlink" title="回声测试应用程序编写 源码下载"></a>回声测试应用程序编写 <a href="https://gitee.com/CharlesN/DotNettyExample.git">源码下载</a></h3><ol>
<li><p><strong>新建一个解决方案 名字叫NettyTest</strong></p>
</li>
<li><p><strong>新建一个项目 名字叫EchoServer</strong></p>
</li>
<li><p><strong>到NuGet中引用 DotNetty.Common DotNetty.Transport DotNetty.Buffers</strong></p>
</li>
<li><p><strong>新建一个类 EchoServerHandler</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Buffers;</span><br><span class="line">using DotNetty.Transport.Channels;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace EchoServer</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 因为服务器只需要响应传入的消息，所以只需要实现ChannelHandlerAdapter就可以了</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class EchoServerHandler : ChannelHandlerAdapter</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 每个传入消息都会调用</span><br><span class="line">        /// 处理传入的消息需要复写这个方法</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;ctx&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;msg&quot;&gt;&lt;/param&gt;</span><br><span class="line">        public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">        &#123;</span><br><span class="line">            IByteBuffer message = msg as IByteBuffer;</span><br><span class="line">            Console.WriteLine(&quot;收到信息：&quot; + message.ToString(Encoding.UTF8));</span><br><span class="line">            ctx.WriteAsync(message);</span><br><span class="line">        &#125;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 批量读取中的最后一条消息已经读取完成</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;context&quot;&gt;&lt;/param&gt;</span><br><span class="line">        public override void ChannelReadComplete(IChannelHandlerContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Flush();</span><br><span class="line">        &#125;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 发生异常</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;context&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;exception&quot;&gt;&lt;/param&gt;</span><br><span class="line">        public override void ExceptionCaught(IChannelHandlerContext context, Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(exception);</span><br><span class="line">            context.CloseAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码注释已经非常详细了，相信看注释你就能明白这个类大致干了些什么，但是突如其来的一个类还是有点难以理解，那么本着认真负责的精神我会再详细解释一下没有学过Netty的同学难以理解的点：</p>
<ol>
<li>问：EchoServerHandler 是干什么用的？回答：Netty帮我们封装了底层的通信过程让我们不需要再关心套接字等网络底层的问题，更加专注于处理业务，何为业务？就是数据来了之后我要怎么办，Handler就是一个处理数据的工厂，那么上面的Handler中我们做了什么事情呢？稍加分析就能发现，我们在接到消息之后打印在了控制台上，之后将消息再发送回去。</li>
<li>问：WriteAsync 是在干什么？Flush 又是在干什么？答：由于是初学，不灌输太多，大家现在只需要知道数据写入之后并不会直接发出去，Flush的时候才会发出去。</li>
</ol>
</li>
<li><p><strong>在自动生成的Program.cs中写入服务器引导程序。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Transport.Bootstrapping;</span><br><span class="line">using DotNetty.Transport.Channels;</span><br><span class="line">using DotNetty.Transport.Channels.Sockets;</span><br><span class="line">using System;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace EchoServer</span><br><span class="line">&#123;</span><br><span class="line">    public class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static async Task RunServerAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            IEventLoopGroup eventLoop;</span><br><span class="line">            eventLoop = new MultithreadEventLoopGroup();</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                // 服务器引导程序</span><br><span class="line">                var bootstrap = new ServerBootstrap();</span><br><span class="line">                bootstrap.Group(eventLoop);</span><br><span class="line">                bootstrap.Channel&lt;TcpServerSocketChannel&gt;();</span><br><span class="line">                bootstrap.ChildHandler(new ActionChannelInitializer&lt;IChannel&gt;(channel =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">                    pipeline.AddLast(new EchoServerHandler());</span><br><span class="line">                &#125;));</span><br><span class="line">                IChannel boundChannel = await bootstrap.BindAsync(3000);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">                await boundChannel.CloseAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            finally</span><br><span class="line">            &#123;</span><br><span class="line">                await eventLoop.ShutdownGracefullyAsync();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args) =&gt; RunServerAsync().Wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个程序中同样有很多需要解释的，但是对于初学者来说，先明白这些概念就好了：</p>
<ol>
<li>bootstrap是启动引导的意思，Netty中的bootstrap的意思就是启动一个网络应用程序，那在启动之前我们肯定需要设置很多参数，bootstrap可以接收参数，引导用户启动Netty应用。</li>
<li>EventLoopGroup 是一系列EventLoop的集合</li>
<li>EventLoop 就对应了一个选择器（选择器看上一节的图）</li>
<li>一个Channel都需要绑定到一个选择器（EventLoop）上</li>
<li>每一个选择器（EventLoop）和一个线程绑定</li>
<li>我们可以把Handler串起来处理数据，这个我们后面再讲，这里的做法是把Handler串到pipeline上。</li>
</ol>
</li>
<li><p><strong>再新建一个项目取名叫EchoClient</strong></p>
</li>
<li><p><strong>新建一个类 EchoClientHandler</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Buffers;</span><br><span class="line">using DotNetty.Transport.Channels;</span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace EchoClient</span><br><span class="line">&#123;</span><br><span class="line">    public class EchoClientHandler : SimpleChannelInboundHandler&lt;IByteBuffer&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Read0是DotNetty特有的对于Read方法的封装</span><br><span class="line">        /// 封装实现了：</span><br><span class="line">        /// 1. 返回的message的泛型实现</span><br><span class="line">        /// 2. 丢弃非该指定泛型的信息</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;ctx&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;msg&quot;&gt;&lt;/param&gt;</span><br><span class="line">        protected override void ChannelRead0(IChannelHandlerContext ctx, IByteBuffer msg)</span><br><span class="line">        &#123;</span><br><span class="line">            if (msg != null)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Receive From Server:&quot; + msg.ToString(Encoding.UTF8));</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.WriteAsync(Unpooled.CopiedBuffer(msg));</span><br><span class="line">        &#125;</span><br><span class="line">        public override void ChannelReadComplete(IChannelHandlerContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Flush();</span><br><span class="line">        &#125;</span><br><span class="line">        public override void ChannelActive(IChannelHandlerContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;发送Hello World&quot;);</span><br><span class="line">            context.WriteAndFlushAsync(Unpooled.CopiedBuffer(Encoding.UTF8.GetBytes(&quot;Hello World!&quot;)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void ExceptionCaught(IChannelHandlerContext context, Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(exception);</span><br><span class="line">            context.CloseAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Handler的编写方法于上面服务器的Handler基本一致，这里我们还是需要解释一些问题：</p>
<ol>
<li>SimpleChannelInboundHandler 继承自 ChannelHandlerAdapter，前者更强大的地方是对于资源的自动释放（这是一个伏笔）</li>
<li>Read0方法在代码的注释中已经解释过了，有兴趣的同学可以看一下源码。这里我就不贴出来了</li>
<li>ctx.WriteAsync(Unpooled.CopiedBuffer(msg));如果这里直接将msg发送出去，大家就会发现，实验失败了，这是为什么呢？简单解释就是因为引用计数器机制，IByteBuffer只能使用一次，而在我们使用Read0方法接收这个消息的时候，这个消息的引用计数就被归零了，这时候我们再次使用就会报出异常，所以这里需要将源消息再复制一份。当然，如果你使用的Read方法则不会有这样的问题。原则上来说，我们不应该存储指向任何消息的引用供未来使用，因为这些引用都会自动失效（意思就是消息收到了处理完就丢掉，消息不应该被长久保存）。</li>
</ol>
</li>
<li><p><strong>编写客户端引导程序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Transport.Bootstrapping;</span><br><span class="line">using DotNetty.Transport.Channels;</span><br><span class="line">using DotNetty.Transport.Channels.Sockets;</span><br><span class="line">using System;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace EchoClient</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static async Task RunClientAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            var group = new MultithreadEventLoopGroup();</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var bootstrap = new Bootstrap();</span><br><span class="line">                bootstrap</span><br><span class="line">                    .Group(group)</span><br><span class="line">                    .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">                    .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">                        pipeline.AddLast(new EchoClientHandler());</span><br><span class="line">                    &#125;));</span><br><span class="line">                IChannel clientChannel = await bootstrap.ConnectAsync(new IPEndPoint(IPAddress.Parse(&quot;10.10.10.158&quot;), 3000));</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">                await clientChannel.CloseAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            finally</span><br><span class="line">            &#123;</span><br><span class="line">                await group.ShutdownGracefullyAsync();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args) =&gt; RunClientAsync().Wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>项目的完整代码我放在了码云上，你可以点击<a href="https://gitee.com/CharlesN/DotNettyExample.git">这里</a>可以下载。我相信很多完全没有接触过Netty的同学在跟着写完了第一个项目之后还是很懵，虽然解释了很多，但是还是感觉似懂非懂，这很正常。就如同我们写完HelloWorld之后，仍然会纠结一下static void Main(string[] args)为什么要这么写。我要说的是，只要坚持写完了第一个应用程序，你就是好样的，关于Netty我们还有很多很多要讲，相信你学了之后的知识以后，回过头来再看这个实例，会有恍然大悟的感觉。如果你坚持看完了文章并且敲了程序并且试验成功了，恭喜你，晚饭加个鸡腿，我们还有很多东西要学。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（八）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（八）"><a href="#DotNetty完全教程（八）" class="headerlink" title="DotNetty完全教程（八）"></a>DotNetty完全教程（八）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>EventLoop介绍我们先回顾一下，EventLoop就是我们在最开始的示意图中的Selector，每个EventLoop和一个线程绑定，用于处理多个Channel。任务调度如果我们想实现延时任务的调度，比如连接成功5s之后发送一包数据，就可以用到EventLoop的计划任务ctx.Channel.EventLoop.Schedule(() &#x3D;&gt;{    Console.Wr…</p>
</blockquote>
<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102820447">原文出处链接</a>和本声明。</p>
<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们先回顾一下，EventLoop就是我们在最开始的示意图中的<a href="https://so.csdn.net/so/search?q=Selector&spm=1001.2101.3001.7020">Selector</a>，每个EventLoop和一个线程绑定，用于处理多个Channel。</p>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><ol>
<li><p>如果我们想实现延时任务的调度，比如连接成功5s之后发送一包数据，就可以用到EventLoop的计划任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctx.Channel.EventLoop.Schedule(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;delay 1s&quot;);</span><br><span class="line">&#125;, new TimeSpan(1000));</span><br><span class="line">// 如果需要提前取消，可以调用Cancel方法</span><br><span class="line">IScheduledTask task = ctx.Channel.EventLoop.Schedule(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;delay 1s&quot;);</span><br><span class="line">&#125;, new TimeSpan(1000));</span><br><span class="line">tsak.Cancel();</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个任务引发后，会判断当前是否在需要处理这个任务的EventLoop中（程序知道自己目前在执行哪个线程，线程又跟EventLoop对应），如果在就直接执行该任务，如果不在该任务中，则任务入队稍后处理</p>
</li>
<li><p>永远不要把一个需要耗费长时间的任务放到EventLoop执行队列来执行，需要使用我们前面介绍的EventExecutor的方法。</p>
</li>
</ol>
<h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p>许多Channel对应一个EventLoop，但是EventLoop能分配给她的Channel个数是有限的，要处理可以扩展的无数个Channel就需要EventLoopGroup。他们的结构关系如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxbzB1ZzNjMHpqMzBwaTBjejB3Mi5qcGc?x-oss-process=image/format,png"><br>我们之前讲过，Netty不仅能够完成NIO系统的搭建，也能通过一些简单的配置，变成OIO阻塞IO系统，阻塞IO的话，就不能多个Channel共享一个EventLoop了，就需要一个Channel分配一个EventLoop。总的来说，EventLoop跟线程的关系是不会改变的。</p>
<p>需要注意的是：</p>
<ol>
<li>给Channel分配EventLoop的是EventLoopGroup。而他将尽量均衡的将Channel进行分配。</li>
</ol>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（六）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（六）"><a href="#DotNetty完全教程（六）" class="headerlink" title="DotNetty完全教程（六）"></a>DotNetty完全教程（六）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>资源管理目的在处理数据的过程中，我们需要确保没有任何的资源泄漏。这时候我们就得很关心资源管理。引用计数的处理使用完ByteBuf之后，需要调整其引用计数以确保资源的释放内存内漏探测Netty提供了ResourceLeakDetector来检测内存泄漏，因为其是采样检测的，所以相关开销并不大。泄露日志检测级别手动释放消息ReferenceCountUtil.SafeRelea…</p>
</blockquote>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102819842">原文出处链接</a>和本声明。</p>
<h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>在处理数据的过程中，我们需要确保没有任何的资源泄漏。这时候我们就得很关心资源管理。</p>
<h3 id="引用计数的处理"><a href="#引用计数的处理" class="headerlink" title="引用计数的处理"></a>引用计数的处理</h3><p>使用完ByteBuf之后，需要调整其引用计数以确保资源的释放</p>
<h3 id="内存内漏探测"><a href="#内存内漏探测" class="headerlink" title="内存内漏探测"></a><a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>内漏探测</h3><p>Netty提供了ResourceLeakDetector来检测内存泄漏，因为其是<a href="https://so.csdn.net/so/search?q=%E9%87%87%E6%A0%B7&spm=1001.2101.3001.7020">采样</a>检测的，所以相关开销并不大。</p>
<ol>
<li><p>泄露日志<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanNyazU0djNqMzBnejAzYXEzbi5qcGc?x-oss-process=image/format,png"></p>
</li>
<li><p>检测级别<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanNzMjE1MmxqMzBqMzA1MmduYi5qcGc?x-oss-process=image/format,png"></p>
</li>
<li><p>手动释放消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceCountUtil.SafeRelease(this.Message);</span><br></pre></td></tr></table></figure>
</li>
<li><p>分析SimpleChannelInboundHandler</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">&#123;</span><br><span class="line">    bool release = true;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        if (this.AcceptInboundMessage(msg))</span><br><span class="line">        &#123;</span><br><span class="line">            I imsg = (I)msg;</span><br><span class="line">            this.ChannelRead0(ctx, imsg);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            release = false;</span><br><span class="line">            ctx.FireChannelRead(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finally</span><br><span class="line">    &#123;</span><br><span class="line">        if (autoRelease &amp;&amp; release)</span><br><span class="line">        &#123;</span><br><span class="line">            ReferenceCountUtil.Release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>由上面的源码可以看出，Read0事实上是Read的封装，区别就是Read0方法在调用的时候，消息一定是被释放了，这就是手动释放的例子。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（十）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（十）"><a href="#DotNetty完全教程（十）" class="headerlink" title="DotNetty完全教程（十）"></a>DotNetty完全教程（十）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>单元测试EmbeddedChannel介绍EmbeddedChannel是专门为了测试ChannelHandler的传输。我们先看一下他的API用一张图来描述这样的一个模拟过程编写基于xUnit的单元测试新建一个xUnit工程 UnitTest新建一个用于测试EmbededChannel的工程 EmbededChannelTestEmbededChannelTest工程需要引用…</p>
</blockquote>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102821003">原文出处链接</a>和本声明。</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a><a href="https://so.csdn.net/so/search?q=%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">单元测试</a></h2><h3 id="EmbeddedChannel介绍"><a href="#EmbeddedChannel介绍" class="headerlink" title="EmbeddedChannel介绍"></a>EmbeddedChannel介绍</h3><p>EmbeddedChannel是专门为了测试ChannelHandler的传输。我们先看一下他的<a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxcWtzMjhqYmRqMzBsdTBhYmdwZC5qcGc?x-oss-process=image/format,png"><br>用一张图来描述这样的一个模拟过程<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxcWt0dm80NHBqMzBqZTA5MG14cy5qcGc?x-oss-process=image/format,png"></p>
<h3 id="编写基于xUnit的单元测试"><a href="#编写基于xUnit的单元测试" class="headerlink" title="编写基于xUnit的单元测试"></a>编写基于xUnit的单元测试</h3><ol>
<li>新建一个xUnit工程 UnitTest</li>
<li>新建一个用于测试EmbededChannel的工程 EmbededChannelTest</li>
<li>EmbededChannelTest工程需要引用DotNetty的类库，这里因为我们需要测试一个解码器，所以除了原先的Buffer Common Transport之外我们还需要引用Codecs</li>
<li>xUnit工程需要引用EmbededChannelTest工程</li>
<li>在EmbededChannelTest工程之下新建FixedLengthFrameDecoder待测试类</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Buffers;</span><br><span class="line">using DotNetty.Codecs;</span><br><span class="line">using DotNetty.Transport.Channels;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace EmbededChannelTest</span><br><span class="line">&#123;</span><br><span class="line">    public class FixedLengthFrameDecoder : ByteToMessageDecoder</span><br><span class="line">    &#123;</span><br><span class="line">        private int _frameLength;</span><br><span class="line">        public FixedLengthFrameDecoder(int frameLength)</span><br><span class="line">        &#123;</span><br><span class="line">            if (frameLength &lt;= 0)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new Exception(&quot;不合法的参数。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            _frameLength = frameLength;</span><br><span class="line">        &#125;</span><br><span class="line">        protected override void Decode(IChannelHandlerContext context, IByteBuffer input, List&lt;object&gt; output)</span><br><span class="line">        &#123;</span><br><span class="line">            // 解码器实现固定的帧长度</span><br><span class="line">            while (input.ReadableBytes &gt;= _frameLength)</span><br><span class="line">            &#123;</span><br><span class="line">                IByteBuffer buf = input.ReadBytes(_frameLength);</span><br><span class="line">                output.Add(buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到这个解码器将buffer中的字节流转化为每3个一帧。接下来我们需要编写测试类，我们在UnitTest工程下新建一个类，名字叫做UnitTester，编写如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using DotNetty.Buffers;</span><br><span class="line">using DotNetty.Transport.Channels.Embedded;</span><br><span class="line">using EmbededChannelTest;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using Xunit;</span><br><span class="line"></span><br><span class="line">namespace UnitTest</span><br><span class="line">&#123;</span><br><span class="line">    public class UnitTester</span><br><span class="line">    &#123;</span><br><span class="line">        [Fact]</span><br><span class="line">        public void testFrameDecoder()</span><br><span class="line">        &#123;</span><br><span class="line">            IByteBuffer buf = Unpooled.Buffer();</span><br><span class="line">            for (int i = 0; i &lt; 9; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                buf.WriteByte(i);</span><br><span class="line">            &#125;</span><br><span class="line">            IByteBuffer input = buf.Duplicate();</span><br><span class="line">            EmbeddedChannel channel = new EmbeddedChannel(new FixedLengthFrameDecoder(3));</span><br><span class="line">            // 写数据</span><br><span class="line">            // retain能够将buffer的引用计数加1，并且返回这个buffer本身</span><br><span class="line">            Assert.True(channel.WriteInbound(input.Retain()));</span><br><span class="line">            Assert.True(channel.Finish());</span><br><span class="line">            // 读数据</span><br><span class="line">            IByteBuffer read = channel.ReadInbound&lt;IByteBuffer&gt;();</span><br><span class="line">            Assert.Equal(buf.ReadSlice(3), read);</span><br><span class="line">            read.Release();</span><br><span class="line"></span><br><span class="line">            read = channel.ReadInbound&lt;IByteBuffer&gt;();</span><br><span class="line">            Assert.Equal(buf.ReadSlice(3), read);</span><br><span class="line">            read.Release();</span><br><span class="line"></span><br><span class="line">            read = channel.ReadInbound&lt;IByteBuffer&gt;();</span><br><span class="line">            Assert.Equal(buf.ReadSlice(3), read);</span><br><span class="line">            read.Release();</span><br><span class="line"></span><br><span class="line">            Assert.Null(channel.ReadInbound&lt;object&gt;());</span><br><span class="line">            buf.Release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完成之后直接右键点击运行测试即可。同理我们可以测试用于出站数据的Encoder，这里不贴代码了，感兴趣的可以去工程中自己看源码进行学习。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（十一）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（十一）"><a href="#DotNetty完全教程（十一）" class="headerlink" title="DotNetty完全教程（十一）"></a>DotNetty完全教程（十一）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>编码器和解码器定义编码器负责将应用程序可以识别的数据结构转化为可传输的数据流，解码器反之。对于应用程序来说，编码器操作出站数据，解码器操作入站数据。解码器和Handler解码器因为是处理入站数据的，所以继承了ChannelInBoundHandler.我们理解的时候可以认为解码器就是一种特殊的Handler，用于处理信息。解码器的类型ByteToMessageDecoderRepl…</p>
</blockquote>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 BY-SA</a> 版权协议，转载请附上<a href="https://blog.csdn.net/nxy_wuhao/article/details/102839679">原文出处链接</a>和本声明。</p>
<h2 id="编码器和解码器"><a href="#编码器和解码器" class="headerlink" title="编码器和解码器"></a><a href="https://so.csdn.net/so/search?q=%E7%BC%96%E7%A0%81%E5%99%A8&spm=1001.2101.3001.7020">编码器</a>和解码器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>编码器负责将应用程序可以识别的<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">数据结构</a>转化为可传输的数据流，解码器反之。对于应用程序来说，编码器操作出站数据，解码器操作入站数据。</p>
<h3 id="解码器和Handler"><a href="#解码器和Handler" class="headerlink" title="解码器和Handler"></a>解码器和<a href="https://so.csdn.net/so/search?q=Handler&spm=1001.2101.3001.7020">Handler</a></h3><p>解码器因为是处理入站数据的，所以继承了ChannelInBoundHandler.我们理解的时候可以认为解码器就是一种特殊的Handler，用于处理信息。</p>
<h3 id="解码器的类型"><a href="#解码器的类型" class="headerlink" title="解码器的类型"></a>解码器的类型</h3><ul>
<li>ByteToMessageDecoder</li>
<li>ReplayingDecoder</li>
<li>MessageToMessageDecoder</li>
</ul>
<h3 id="解码器实例"><a href="#解码器实例" class="headerlink" title="解码器实例"></a>解码器实例</h3><p>ByteToMessageDecoder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ByteToMessageDecoder</span><br><span class="line">public class ToIntDecoder : ByteToMessageDecoder</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Decode(IChannelHandlerContext context, IByteBuffer input, List&lt;object&gt; output)</span><br><span class="line">    &#123;</span><br><span class="line">        if (input.ReadableBytes &gt;= 4) output.Add(input.ReadInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 测试代码</span><br><span class="line">[Fact]</span><br><span class="line">public void TestIntDecoder()</span><br><span class="line">&#123;</span><br><span class="line">    IByteBuffer buf = Unpooled.Buffer();</span><br><span class="line">    for (int i = 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf.WriteByte(i);</span><br><span class="line">    &#125;</span><br><span class="line">    // 构建Channel</span><br><span class="line">    EmbeddedChannel channel = new EmbeddedChannel(new ToIntDecoder());</span><br><span class="line">    // 测试</span><br><span class="line">    Assert.True(channel.WriteInbound(buf));</span><br><span class="line">    Assert.True(channel.Finish());</span><br><span class="line"></span><br><span class="line">    // 比如 0 1 2 3</span><br><span class="line">    // 3*2^0+2*2^8+1*2^16+0*2^24</span><br><span class="line">    Assert.Equal(66051, channel.ReadInbound&lt;int&gt;());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReplayingDecoder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不需要判断ReadableBytes的ReplayingDecoder</span><br><span class="line">public class ToIntDecoder2 : ReplayingDecoder&lt;int&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public ToIntDecoder2(int initialState) : base(initialState)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void Decode(IChannelHandlerContext context, IByteBuffer input, List&lt;object&gt; output)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Add(input.ReadInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MessageToMessageDecoder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class IntToStringDecoder : MessageToMessageDecoder&lt;int&gt;</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Decode(IChannelHandlerContext context, int message, List&lt;object&gt; output)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Add(message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更多解码器"><a href="#更多解码器" class="headerlink" title="更多解码器"></a>更多解码器</h3><ul>
<li>LineBaseFrameDecoder 使用行尾控制符解析数据，可以把数据一行一行解析出来</li>
<li>HttpObjectDecoder HTTP解码器</li>
</ul>
<h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>根据我们之前的知识可以轻易的推导出，Encoder继承了ChannelOutBoundHandler</p>
<ul>
<li>MessageToByteEncoder</li>
<li>MessageToMessageEncoder</li>
</ul>
<h3 id="编码器实例"><a href="#编码器实例" class="headerlink" title="编码器实例"></a>编码器实例</h3><p>MessageToByteEncoder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ShortToByteEncoder : MessageToByteEncoder&lt;short&gt;</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Encode(IChannelHandlerContext context, short message, IByteBuffer output)</span><br><span class="line">    &#123;</span><br><span class="line">        output.WriteShort(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MessageToMessageEncoder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class IntToStringEncoder : MessageToMessageEncoder&lt;int&gt;</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Encode(IChannelHandlerContext context, int message, List&lt;object&gt; output)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Add(message.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h3><p>MessageToMessageCodec,它拥有encode和<a href="https://so.csdn.net/so/search?q=decode&spm=1001.2101.3001.7020">decode</a>两个方法，用于实现来回的转换数据，这种编解码器我们在后面实例的时候再举例说明。<br>这种编解码器可以把数据的转换，逆转换过程封装，但是同时他的缺点是，不如分开写重用方便。那我们就会想了，既然如此的话，为什么我们不能把一个编码器，一个解码器结合起来，作为一个编解码器呢？这样的话，编码器解码器分别可以重用，结合出来的编解码器也可以方便的使用 CombinedChannelDuplexHandler 就可以实现这样的作用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 提供结合的编解码器</span><br><span class="line">public class CombinedCodec : CombinedChannelDuplexHandler&lt;ToIntDecoder, ShortToByteEncoder&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（四）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（四）"><a href="#DotNetty完全教程（四）" class="headerlink" title="DotNetty完全教程（四）"></a>DotNetty完全教程（四）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>ByteBufferNetty中ByteBuffer的介绍Netty 的数据处理 API 通过两个组件暴露——abstract class ByteBuf 和 interfaceByteBufHolderDotNetty中有AbstractByteBuffer  IByteBuffer IByteBufferHolder优点：它可以被用户自定义的缓冲区类型扩展；通过内置的复合缓冲区…</p>
</blockquote>
<hr>
<h2 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h2><h3 id="Netty中ByteBuffer的介绍"><a href="#Netty中ByteBuffer的介绍" class="headerlink" title="Netty中ByteBuffer的介绍"></a>Netty中ByteBuffer的介绍</h3><p>Netty 的数据处理 <a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a> 通过两个组件暴露——abstract class ByteBuf 和 interface<br>ByteBufHolder</p>
<p>DotNetty中有AbstractByteBuffer IByteBuffer IByteBufferHolder</p>
<p>优点：</p>
<ul>
<li>它可以被用户自定义的缓冲区类型扩展；</li>
<li>通过内置的复合缓冲区类型实现了透明的零拷贝；</li>
<li>容量可以按需增长（类似于 JDK 的 StringBuilder）；</li>
<li>在读和写这两种模式之间切换不需要调用 ByteBuffer 的 flip()方法；</li>
<li>读和写使用了不同的索引；</li>
<li>支持方法的链式调用；</li>
<li>支持引用计数；</li>
<li>支持池化</li>
</ul>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>每一个ByteBuf都有两个索引，读索引和写索引，read和write会移动索引，set和get不会引动索引。</p>
<h3 id="使用ByteBuf"><a href="#使用ByteBuf" class="headerlink" title="使用ByteBuf"></a>使用ByteBuf</h3><ol>
<li>堆缓冲区(使用数组的方式展示和操作数据)</li>
</ol>
<p>使用支撑数组给ByteBuf提供快速的分配和释放的能力。适用于有遗留数据需要处理的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">&#123;</span><br><span class="line">    IByteBuffer message = msg as IByteBuffer;</span><br><span class="line">    // 检查是否有支撑数组</span><br><span class="line">    if (message.HasArray)</span><br><span class="line">    &#123;</span><br><span class="line">        // 获取数组</span><br><span class="line">        byte[] array = message.Array;</span><br><span class="line">        // 计算第一个字节的偏移</span><br><span class="line">        int offset = message.ArrayOffset + message.ReaderIndex;</span><br><span class="line">        // 获取可读字节数</span><br><span class="line">        int length = message.ReadableBytes;</span><br><span class="line">        // 调用方法，处理数据</span><br><span class="line">        HandleArray(array, offset, length);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(&quot;收到信息：&quot; + message.ToString(Encoding.UTF8));</span><br><span class="line">    ctx.WriteAsync(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接缓冲区</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">&#123;</span><br><span class="line">    IByteBuffer message = msg as IByteBuffer;</span><br><span class="line">    if (message.HasArray)</span><br><span class="line">    &#123;</span><br><span class="line">        int length = message.ReadableBytes;</span><br><span class="line">        byte[] array = new byte[length];</span><br><span class="line">        message.GetBytes(message.ReaderIndex, array);</span><br><span class="line">        HandleArray(array, 0, length);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(&quot;收到信息：&quot; + message.ToString(Encoding.UTF8));</span><br><span class="line">    ctx.WriteAsync(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>CompositeByteBuffer 复合缓冲区</li>
</ol>
<p>如果要发送的命令是由两个ByteBuf拼接构成的，那么就需要复合缓冲区，比如Http协议中一个数据流由头跟内容构成这样的逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">&#123;</span><br><span class="line">    IByteBuffer message = msg as IByteBuffer;</span><br><span class="line">    // 创建一个复合缓冲区</span><br><span class="line">    CompositeByteBuffer messageBuf = Unpooled.CompositeBuffer();</span><br><span class="line">    // 创建两个ByteBuffer</span><br><span class="line">    IByteBuffer headBuf = Unpooled.CopiedBuffer(message);</span><br><span class="line">    IByteBuffer bodyBuf = Unpooled.CopiedBuffer(message);</span><br><span class="line">    // 添加到符合缓冲区中</span><br><span class="line">    messageBuf.AddComponents(headBuf, bodyBuf);</span><br><span class="line">    // 删除</span><br><span class="line">    messageBuf.RemoveComponent(0);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(&quot;收到信息：&quot; + message.ToString(Encoding.UTF8));</span><br><span class="line">    ctx.WriteAsync(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字节级操作"><a href="#字节级操作" class="headerlink" title="字节级操作"></a>字节级操作</h3><ol>
<li>读取(不移动索引)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public override void ChannelRead(IChannelHandlerContext ctx, object msg)</span><br><span class="line">&#123;</span><br><span class="line">    IByteBuffer message = msg as IByteBuffer;</span><br><span class="line">    for (int i = 0; i &lt; message.Capacity; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        // 如此使用索引访问不会改变读索引也不会改变写索引</span><br><span class="line">        byte b = message.GetByte(i);</span><br><span class="line">        Console.WriteLine(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(&quot;收到信息：&quot; + message.ToString(Encoding.UTF8));</span><br><span class="line">    ctx.WriteAsync(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>丢弃可丢弃字节<br>所谓可丢弃字节就是调用read方法之后，readindex已经移动过了的区域，这段区域的字节称为可丢弃字节。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message.DiscardReadBytes();</span><br></pre></td></tr></table></figure>

<p>只有在内存十分宝贵需要清理的时候再调用这个方法，随便调用有可能会造成内存的复制，降低效率。<br>3. 读取所有可读字节（移动读索引）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while (message.IsReadable())</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(message.ReadByte());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>写入数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用随机数填充可写区域</span><br><span class="line">while (message.WritableBytes &gt; 4)</span><br><span class="line">&#123;</span><br><span class="line">    message.WriteInt(new Random().Next(0, 100));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>管理索引</li>
</ol>
<ul>
<li>MarkReaderIndex ResetReaderIndex 标记和恢复读索引</li>
<li>MarkWriterIndex ResetWriterIndex 标记和恢复写索引</li>
<li>SetReaderIndex(int) SetWriterIndex(int) 直接移动索引</li>
<li>clear() 重置两个索引都为0，但是不会清除内容</li>
</ul>
<ol start="6">
<li>查找</li>
</ol>
<ul>
<li>IndexOf()</li>
<li>使用Processor</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查找\r</span><br><span class="line">message.ForEachByte(ByteProcessor.FindCR);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>派生</li>
</ol>
<p>派生的意思是创建一个新的ByteBuffer，这个ByteBuf派生于其他的ByteBuf，派生出来的子ByteBuf具有自己的读写索引，但是本质上指向同一个对象，这样就导致了改变一个，另一个也会改变。</p>
<ul>
<li>duplicate()；</li>
<li>slice()；</li>
<li>slice(int, int)；</li>
<li>Unpooled.unmodifiableBuffer(…)；</li>
<li>order(ByteOrder)；</li>
<li>readSlice(int)。</li>
</ul>
<ol start="8">
<li>复制<br>复制不同于派生，会复制出一个独立的ByteBuf，修改其中一个不会改变另一个。</li>
</ol>
<ul>
<li>copy</li>
</ul>
<ol start="9">
<li>释放</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 显式丢弃消息</span><br><span class="line">ReferenceCountUtil.release(msg);</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>增加引用计数防止释放</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceCountUtil.retain(message)</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>其他api<br><img src="https://img-blog.csdnimg.cn/20191030095627667.png" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanBvMDlqaWRqMzBqdzA2c2FicC5qcGc?x-oss-process=image/format,png"></li>
</ol>
<h3 id="ByteBufHolder"><a href="#ByteBufHolder" class="headerlink" title="ByteBufHolder"></a>ByteBufHolder</h3><ol>
<li>目的<br>再数据处理的过程中不仅仅有字节数据内容本身，还会有一些附加信息，比如HTTP响应的状态码，Cookie等。<strong>给ByteBuf附加信息就要用到ByteBufHolder</strong>.</li>
<li>API<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanB0Z2Z2MTBqMzBqaTA0MmFheS5qcGc?x-oss-process=image/format,png"></li>
</ol>
<h3 id="管理ByteBuffer"><a href="#管理ByteBuffer" class="headerlink" title="管理ByteBuffer"></a>管理ByteBuffer</h3><ol>
<li><p>按需分配 ByteBufAllocator<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxanB3NW96NmhqMzBrMzBhdWFjei5qcGc?x-oss-process=image/format,png"><br>注意分配是池化的，最大程度上降低分配和释放内存的开销。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取Allocator</span><br><span class="line">// 1</span><br><span class="line">IChannelHandlerContext ctx = null;</span><br><span class="line">IByteBufferAllocator allocator = ctx.Allocator;</span><br><span class="line">// 2</span><br><span class="line">IChannel channel = null;</span><br><span class="line">allocator = channel.Allocator;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>有两种ByteBufAllocator的实现：PooledByteBufAllocator和UnpooledByteBufAllocator，前者池化了ByteBuf的实例，极大限度的提升了性能减少了内存碎片。<br>2. Unpooled缓冲区<br>获取不到 ByteBufAllocator的引用的时候我们可以使用Unpooled工具类来操作ByteBuf。<br><img src="https://img-blog.csdnimg.cn/20191030103446350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L254eV93dWhhbw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="3">
<li>ByteBufUtil<br>这个类提供了一些通用的API，都是静态的辅助方法，例如hexdump方法可以以十六进制的方式打印ByteBuf的内容。还有equal方法判断bytebuf是否相等。</li>
</ol>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ol>
<li><p>目的</p>
<p>ByteBuf和ByteBufHolder都有计数的机制。引用计数都从1开始，如果计数大于0则不被释放，如果等于0就会被释放。它的目的是为了支持池化的实现，降低了内存分配的开销。</p>
</li>
<li><p>异常</p>
<p>如果访问一个计数为0的对象就会引发IllegalReferenceCountException。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty系列三：编码解码器,IdleStateHandler心跳机制</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E7%B3%BB%E5%88%97%E4%B8%89%EF%BC%9A%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E5%99%A8,IdleStateHandler%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="DotNetty系列三：编码解码器-IdleStateHandler心跳机制"><a href="#DotNetty系列三：编码解码器-IdleStateHandler心跳机制" class="headerlink" title="DotNetty系列三：编码解码器,IdleStateHandler心跳机制"></a>DotNetty系列三：编码解码器,IdleStateHandler心跳机制</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>在上一节基础上，实现编码解码器。1.创建一个类库项目。用于实现编码解码器。编码器：    public class CommonServerEncoder : MessageToByteEncoder&lt;string&gt;    {        protected override void Encode(IChannelHandlerContext context, s…</p>
</blockquote>
<hr>
<p>在上一节基础上，实现编码<a href="https://so.csdn.net/so/search?q=%E8%A7%A3%E7%A0%81&spm=1001.2101.3001.7020">解码</a>器。</p>
<p>1.创建一个类库项目。用于实现编码解码器。<img src="https://img-blog.csdnimg.cn/20190223162503435.png"></p>
<p><a href="https://so.csdn.net/so/search?q=%E7%BC%96%E7%A0%81%E5%99%A8&spm=1001.2101.3001.7020">编码器</a>：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommonServerEncoder</span> : <span class="title">MessageToByteEncoder</span>&lt;<span class="title">string</span>&gt;    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Encode</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">string</span> message, IByteBuffer output</span>)</span>        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] messageBytes = Encoding.UTF8.GetBytes(message);            </span><br><span class="line">        IByteBuffer initialMessage = Unpooled.Buffer(messageBytes.Length);            </span><br><span class="line">        initialMessage.WriteBytes(messageBytes);            </span><br><span class="line">        output.WriteBytes(initialMessage);        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommonClientEncoder</span> : <span class="title">MessageToByteEncoder</span>&lt;<span class="title">string</span>&gt;    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Encode</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">string</span> message, IByteBuffer output</span>)</span>        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] messageBytes = Encoding.UTF8.GetBytes(message);            </span><br><span class="line">        IByteBuffer initialMessage = Unpooled.Buffer(messageBytes.Length);            </span><br><span class="line">        initialMessage.WriteBytes(messageBytes);            </span><br><span class="line">        output.WriteBytes(initialMessage);        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解码器：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommonServerDecoder</span> : <span class="title">ByteToMessageDecoder</span>    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Decode</span>(<span class="params">IChannelHandlerContext context, IByteBuffer input, List&lt;<span class="built_in">object</span>&gt; output</span>)</span>        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[input.ReadableBytes];            </span><br><span class="line">        input.GetBytes(input.ReaderIndex, array, <span class="number">0</span>, input.ReadableBytes);            </span><br><span class="line">        input.Clear();            </span><br><span class="line">        output.Add(array);        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommonClientDecoder</span> : <span class="title">ByteToMessageDecoder</span>    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Decode</span>(<span class="params">IChannelHandlerContext context, IByteBuffer input, List&lt;<span class="built_in">object</span>&gt; output</span>)</span>        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[input.ReadableBytes];            </span><br><span class="line">        input.GetBytes(input.ReaderIndex, array, <span class="number">0</span>, input.ReadableBytes);            </span><br><span class="line">        input.Clear();            </span><br><span class="line">        output.Add(array);        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.服务端里添加：</p>
<p>                        &#x2F;&#x2F;配置编码解码器<br>                        pipeline.AddLast(new CommonServerEncoder());<br>                        pipeline.AddLast(new CommonServerDecoder());</p>
<p>客户端里添加：</p>
<p>                        &#x2F;&#x2F;配置编码解码器<br>                        pipeline.AddLast(new CommonClientEncoder());<br>                        pipeline.AddLast(new CommonClientDecoder());</p>
<p>3.服务端接收和发送：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ChannelRead</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> message</span>)</span>        </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">is</span> <span class="built_in">byte</span>[] o)            </span><br><span class="line">    &#123;                </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;解码器方式，从客户端接收:<span class="subst">&#123;Encoding.UTF8.GetString(o)&#125;</span>:<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;服务端从客户端接收到内容后返回，我是服务端&quot;</span>;            </span><br><span class="line">    context.WriteAsync(msg);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端接收和发送：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ChannelActive</span>(<span class="params">IChannelHandlerContext context</span>)</span>        </span><br><span class="line">&#123;           </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我是客户端.&quot;</span>);           </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;连接至服务端<span class="subst">&#123;context&#125;</span>.&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">&quot;客户端1&quot;</span>;            </span><br><span class="line">    context.WriteAndFlushAsync(message);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ChannelRead</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> message</span>)</span>        </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">is</span> <span class="built_in">byte</span>[] o)            </span><br><span class="line">    &#123;                </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;解码器方式，从服务端接收:<span class="subst">&#123;Encoding.UTF8.GetString(o)&#125;</span>:<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现了上一节一样的效果。</p>
<p>4.IdleStateHandler心跳机制:</p>
<p>4.1服务端添加IdleStateHandler心跳检测处理器,添加自定义处理<a href="https://so.csdn.net/so/search?q=Handler&spm=1001.2101.3001.7020">Handler</a>类实现userEventTriggered()方法作为超时事件的逻辑处理.</p>
<p>IdleStateHandler心跳检测每十五秒进行一次读检测，如果十五秒内ChannelRead()方法未被调用则触发一次userEventTrigger()方法.</p>
<p>                        &#x2F;&#x2F; IdleStateHandler 心跳<br>                        &#x2F;&#x2F;服务端为读IDLE<br>                        pipeline.AddLast(new IdleStateHandler(15, 0, 0));&#x2F;&#x2F;第一个参数为读，第二个为写，第三个为读写全部</p>
<p>4.2服务端Handler重载UserEventTriggered：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> lossConnectCount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UserEventTriggered</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> evt</span>)</span>        &#123;            </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;已经15秒未收到客户端的消息了！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (evt <span class="keyword">is</span> IdleStateEvent eventState)            </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventState.State == IdleState.ReaderIdle)               </span><br><span class="line">        &#123;                   </span><br><span class="line">            lossConnectCount++;<span class="keyword">if</span> (lossConnectCount &gt; <span class="number">2</span>)                    </span><br><span class="line">            &#123;                        </span><br><span class="line">                Console.WriteLine(<span class="string">&quot;关闭这个不活跃通道！&quot;</span>);                        </span><br><span class="line">                context.CloseAsync();                   </span><br><span class="line">            &#125;                &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>            </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.UserEventTriggered(context, evt);            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收部分改为判断心跳：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ChannelRead</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> message</span>)</span>        </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">is</span> <span class="built_in">byte</span>[] o)            </span><br><span class="line">    &#123;                </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;解码器方式，从客户端接收:<span class="subst">&#123;Encoding.UTF8.GetString(o)&#125;</span>:<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Encoding.UTF8.GetString(o).Contains(<span class="string">&quot;biubiu:&quot;</span>))                </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> temp = <span class="string">&quot;服务端接收到心跳连接&quot;</span>;                    </span><br><span class="line">            context.WriteAsync(temp);<span class="keyword">return</span>;                </span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;服务端从客户端接收到内容后返回，我是服务端&quot;</span>;            </span><br><span class="line">    context.WriteAsync(msg);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.3客户端添加IdleStateHandler心跳检测处理器，并添加自定义处理Handler类实现userEventTriggered()方法作为超时事件的逻辑处理；</p>
<p>设定IdleStateHandler心跳检测每十秒进行一次写检测，如果十秒内write()方法未被调用则触发一次userEventTrigger()方法，实现客户端每十秒向服务端发送一次消息；</p>
<p>                        &#x2F;&#x2F; IdleStateHandler 心跳<br>                        &#x2F;&#x2F;客户端为写IDLE<br>                        pipeline.AddLast(new IdleStateHandler(0, 10, 0));&#x2F;&#x2F;第一个参数为读，第二个为写，第三个为读写全部</p>
<p>4.4客户端Handler重载UserEventTriggered：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UserEventTriggered</span>(<span class="params">IChannelHandlerContext context, <span class="built_in">object</span> evt</span>)</span>        &#123;           </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;客户端循环心跳监测发送: &quot;</span> + DateTime.Now);</span><br><span class="line">    <span class="keyword">if</span> (evt <span class="keyword">is</span> IdleStateEvent eventState)            </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventState.State == IdleState.WriterIdle)                </span><br><span class="line">        &#123;                    </span><br><span class="line">            context.WriteAndFlushAsync(<span class="string">$&quot;biubiu:<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);         </span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.5实现效果：<img src="https://img-blog.csdnimg.cn/20190223165920231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MTY4,size_16,color_FFFFFF,t_70"></p>
<p>5.群发：将客户端上下线通知，群发至所有客户端。只在服务端修改</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> IChannelGroup groups;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandlerAdded</span>(<span class="params">IChannelHandlerContext context</span>)</span>        </span><br><span class="line">&#123;            </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;客户端<span class="subst">&#123;context&#125;</span>上线.&quot;</span>);</span><br><span class="line">                                                                          </span><br><span class="line">    <span class="keyword">base</span>.HandlerAdded(context);            </span><br><span class="line">    IChannelGroup g = groups;<span class="keyword">if</span> (g == <span class="literal">null</span>)            </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (groups == <span class="literal">null</span>)                    </span><br><span class="line">            &#123;                        </span><br><span class="line">                g = groups = <span class="keyword">new</span> DefaultChannelGroup(context.Executor);</span><br><span class="line">            &#125;               </span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;           </span><br><span class="line">    g.Add(context.Channel);            </span><br><span class="line">    groups.WriteAndFlushAsync(<span class="string">$&quot;欢迎<span class="subst">&#123;context.Channel.RemoteAddress&#125;</span>加入.&quot;</span>);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandlerRemoved</span>(<span class="params">IChannelHandlerContext context</span>)</span>        </span><br><span class="line">&#123;            </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;客户端<span class="subst">&#123;context&#125;</span>下线.&quot;</span>);</span><br><span class="line">    <span class="keyword">base</span>.HandlerRemoved(context);            </span><br><span class="line">    groups.Remove(context.Channel);            </span><br><span class="line">    groups.WriteAndFlushAsync(<span class="string">$&quot;恭送<span class="subst">&#123;context.Channel.RemoteAddress&#125;</span>离开.&quot;</span>);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190223172542736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MTY4,size_16,color_FFFFFF,t_70"></p>
<p>项目下载地址：<a href="https://download.csdn.net/download/qq_34719168/10972203">项目下载</a></p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF中Binding使用StringFormat格式化字符串</title>
    <url>/2025/02/11/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/WPF%E4%B8%ADBinding%E4%BD%BF%E7%94%A8StringFormat%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="货币格式"><a href="#货币格式" class="headerlink" title="货币格式"></a>货币格式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认保留两位小数 输出： $12.34 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=&#123;&#125;&#123;0:C&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保留一位小数 输出: $123.4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=&#123;&#125;&#123;0:C1&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="固定文字"><a href="#固定文字" class="headerlink" title="固定文字"></a>固定文字</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 固定前缀 输出: 单价：$12.34 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=单价: &#123;0:C&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 固定后缀 输出： 12.345元 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=&#123;&#125;&#123;0&#125;元&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 固定位数，仅支持整形 输出: 086723 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Total, StringFormat=&#123;&#125;&#123;0:D6&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 固定小数点后位数 输出: 8234.9354 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Total, StringFormat=&#123;&#125;&#123;0:F4&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用用分割符并指定小数点后位数 输出: 8234.933 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Total, StringFormat=&#123;&#125;&#123;0:N3&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 格式化百分比 输出: 78.9%--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Persent, StringFormat=&#123;&#125;&#123;0:P1&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出: 0123.46 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=&#123;&#125;&#123;0:0000.00&#125;&#125;&quot;</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 输出: 123.46 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Price, StringFormat=&#123;&#125;&#123;0:####.##&#125;&#125;&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出: 5/4/2015 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:d&#125;&#125;&quot;</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 输出: Monday, May 04, 2015 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:D&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: Monday, May 04, 2015 5:46 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:f&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: Monday, May 04, 2015 5:46:56 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:F&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 5/4/2015 5:46 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:g&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 5/4/2015 5:46:56 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:G&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: May 04 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:m&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: May 04 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:M&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 5:46 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:t&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 5:46:56 PM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:T&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 2015年05月04日 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:yyyy年MM月dd日&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 2015-05-04 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:yyyy-MM-dd&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 2015-05-04 17:46 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:yyyy-MM-dd HH:mm&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出: 2015-05-04 17:46:56 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding DateTimeNow, StringFormat=&#123;&#125;&#123;0:yyyy-MM-dd HH:mm:ss&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多重绑定"><a href="#多重绑定" class="headerlink" title="多重绑定"></a>多重绑定</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">\a  &amp;#x07;  BEL</span></span><br><span class="line"><span class="comment">\b  &amp;#x08;  BS - Backspace</span></span><br><span class="line"><span class="comment">\f  &amp;#x0c;  FF - Formfeed</span></span><br><span class="line"><span class="comment">\n  &amp;#x0a;  LF, NL - Linefeed, New Line</span></span><br><span class="line"><span class="comment">\r  &amp;#x0d;  CR - Carriage return</span></span><br><span class="line"><span class="comment">\t  &amp;#x09;  HT - Tab, Horizontal Tabelator</span></span><br><span class="line"><span class="comment">\v  &amp;#x0b;  VT - Vertical Tabelator </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock.Text</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">MultiBinding</span> <span class="attr">StringFormat</span>=<span class="string">&quot;姓名: &#123;0&#125;<span class="symbol">&amp;#x09;</span>&#123;1&#125;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Binding</span> <span class="attr">Path</span>=<span class="string">&quot;FirstName&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Binding</span> <span class="attr">Path</span>=<span class="string">&quot;LastName&quot;</span> /&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">MultiBinding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextBlock.Text</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>StringFormat</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 数据校验</title>
    <url>/2017/02/12/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/WPF%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>只要是有表单存在，那么就有可能有对数据的校验需求。如：判断是否为整数、判断电子邮件格式等等。</p>
<p>WPF采用一种全新的方式 - Binding，来实现前台显示与后台数据进行交互，当然数据校验方式也不一样了。</p>
<p>本专题全面介绍一下WPF中4种Validate方法，帮助你了解如何在WPF中对binding的数据进行校验，并处理错误显示。</p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>正常情况下，只要是绑定过程中出现异常或者在converter中出现异常，都会造成绑定失败。</p>
<p>但是WPF不会出现任何异常，只会显示一片空白（当然有些Converter中的异常会造成程序崩溃）。</p>
<p>这是因为默认情况下，Binding.ValidatesOnException为false，所以WPF忽视了这些绑定错误。</p>
<p>但是如果我们把Binding.ValidatesOnException为true，那么WPF会对错误做出以下反应：</p>
<ol>
<li>设置绑定元素的附加属性 Validation.HasError为true（如TextBox，如果Text被绑定，并出现错误）。</li>
<li>创建一个包含错误详细信息（如抛出的Exception对象）的ValidationError对象。</li>
<li>将上面产生的对象添加到绑定对象的Validation.Errors附加属性当中。</li>
<li>如果Binding.NotifyOnValidationError是true，那么绑定元素的附加属性中的Validation.Error附加事件将被触发。（这是一个冒泡事件）</li>
</ol>
<p>我们的Binding对象，维护着一个ValidationRule的集合，当设置ValidatesOnException为true时，</p>
<p>默认会添加一个ExceptionValidationRule到这个集合当中。</p>
<p>PS：对于绑定的校验只在Binding.Mode 为TwoWay和OneWayToSource才有效，</p>
<p>即当需要从target控件将值传到source属性时，很容易理解，当你的值不需要被别人使用时，就很可能校验也没必要。</p>
<h2 id="二、四种实现方法"><a href="#二、四种实现方法" class="headerlink" title="二、四种实现方法"></a>二、四种实现方法</h2><h4 id="1、在Setter方法中进行判断"><a href="#1、在Setter方法中进行判断" class="headerlink" title="1、在Setter方法中进行判断"></a>1、在Setter方法中进行判断</h4><p>直接在Setter方法中，对value进行校验，如果不符合规则，那么就抛出异常。然后修改XAML不忽视异常。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonValidateInSetter</span> : <span class="title">ObservableObject</span></span><br><span class="line">    &#123; <span class="keyword">private</span> <span class="built_in">string</span> name; <span class="keyword">private</span> <span class="built_in">int</span> age; <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123; <span class="keyword">get</span>   &#123;  <span class="keyword">return</span> <span class="keyword">this</span>.name;   &#125; <span class="keyword">set</span> &#123; <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(<span class="keyword">value</span>))</span><br><span class="line">                &#123; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Name cannot be empty!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">if</span> (<span class="keyword">value</span>.Length &lt; <span class="number">4</span>)</span><br><span class="line">                &#123; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Name must have more than 4 char!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">this</span>.name = <span class="keyword">value</span>; <span class="keyword">this</span>.OnPropertyChanged(() =&gt; <span class="keyword">this</span>.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.age;  &#125; <span class="keyword">set</span> &#123; <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">18</span>)</span><br><span class="line">                &#123; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;You must be an adult!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">this</span>.age = <span class="keyword">value</span>; <span class="keyword">this</span>.OnPropertyChanged(() =&gt; <span class="keyword">this</span>.Age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&lt;Grid</span> <span class="string">DataContext=&quot;&#123;Binding</span> <span class="string">PersonValidateInSetter&#125;&quot;&gt;</span></span><br><span class="line">               <span class="string">&lt;Grid.RowDefinitions&gt;</span></span><br><span class="line">                   <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                   <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">               <span class="string">&lt;/Grid.RowDefinitions&gt;</span></span><br><span class="line">               <span class="string">&lt;Grid.ColumnDefinitions&gt;</span></span><br><span class="line">                   <span class="string">&lt;ColumnDefinition</span> <span class="string">Width\=&quot;Auto&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                   <span class="string">&lt;ColumnDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">               <span class="string">&lt;/Grid.ColumnDefinitions&gt;</span></span><br><span class="line">               <span class="string">&lt;TextBlock</span> <span class="string">Text=&quot;Name:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">               <span class="string">&lt;TextBox</span> <span class="string">Grid.Column=&quot;1&quot;</span> <span class="string">Margin=&quot;1&quot;</span> <span class="string">Text=&quot;&#123;Binding</span> <span class="string">Name,</span></span><br><span class="line">                                       <span class="string">ValidatesOnExceptions=True,</span></span><br><span class="line">                                       <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">               <span class="string">&lt;TextBlock</span> <span class="string">Grid.Row=&quot;1&quot;</span> <span class="string">Text=&quot;Age:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">               <span class="string">&lt;TextBox</span> <span class="string">Grid.Row=&quot;1&quot;</span> <span class="string">Grid.Column=&quot;1&quot;</span> <span class="string">Margin=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Age,</span></span><br><span class="line">                                       <span class="string">ValidatesOnExceptions=True,</span></span><br><span class="line">                                       <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">           <span class="string">&lt;/Grid&gt;</span></span><br><span class="line">           </span><br></pre></td></tr></table></figure>

<p>当输入的值，在setter方法中校验时出现错误，就会出现一个红色的错误框。</p>
<p>关键代码：<code>ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged</code>。</p>
<p><strong>注意</strong>: 这种方式有一个BUG，首次加载时不会对默认数据进行检验。</p>
<h4 id="2、继承IDataErrorInfo接口"><a href="#2、继承IDataErrorInfo接口" class="headerlink" title="2、继承IDataErrorInfo接口"></a>2、继承IDataErrorInfo接口</h4><p>使Model对象继承IDataErrorInfo接口，并实现一个索引进行校验。如果索引返回空表示没有错误，如果返回不为空，</p>
<p>表示有错误。另外一个Erro属性，但是在WPF中没有被用到。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonDerivedFromIDataErrorInfo</span> : <span class="title">ObservableObject</span>, <span class="title">IDataErrorInfo</span></span><br><span class="line">    &#123; <span class="keyword">private</span> <span class="built_in">string</span> name; <span class="keyword">private</span> <span class="built_in">int</span> age; <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">            &#125; <span class="keyword">set</span> &#123; <span class="keyword">this</span>.name = <span class="keyword">value</span>; <span class="keyword">this</span>.OnPropertyChanged(() =&gt; <span class="keyword">this</span>.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">            &#125; <span class="keyword">set</span> &#123; <span class="keyword">this</span>.age = <span class="keyword">value</span>; <span class="keyword">this</span>.OnPropertyChanged(() =&gt; <span class="keyword">this</span>.Age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// never called by WPF</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Error</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>\[<span class="built_in">string</span> propertyName\]</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">switch</span> (propertyName)</span><br><span class="line">                &#123; <span class="keyword">case</span> <span class="string">&quot;Name&quot;</span>: <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(<span class="keyword">this</span>.Name))</span><br><span class="line">                        &#123; <span class="keyword">return</span> <span class="string">&quot;Name cannot be empty!&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">if</span> (<span class="keyword">this</span>.Name.Length &lt; <span class="number">4</span>)</span><br><span class="line">                        &#123; <span class="keyword">return</span> <span class="string">&quot;Name must have more than 4 char!&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">&quot;Age&quot;</span>: <span class="keyword">if</span> (<span class="keyword">this</span>.Age &lt; <span class="number">18</span>)</span><br><span class="line">                        &#123; <span class="keyword">return</span> <span class="string">&quot;You must be an adult!&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;Grid</span>  <span class="string">DataContext=&quot;&#123;Binding</span> <span class="string">PersonDerivedFromIDataErrorInfo&#125;&quot;\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.RowDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.RowDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">Width\=&quot;Auto&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Text\=&quot;Name:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Name,</span></span><br><span class="line">                                        <span class="string">NotifyOnValidationError=True,</span></span><br><span class="line">                                        <span class="string">ValidatesOnDataErrors=True,</span></span><br><span class="line">                                        <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Text\=&quot;Age:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Age,</span></span><br><span class="line">                                        <span class="string">NotifyOnValidationError=True,</span></span><br><span class="line">                                        <span class="string">ValidatesOnDataErrors=True,</span></span><br><span class="line">                                        <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>PS：这种方式，没有了第一种方法的BUG，但是相对很麻烦，既需要继承接口，又需要添加一个索引，如果遗留代码，那么这种方式就不太好。</p>
<h4 id="3、自定义校验规则"><a href="#3、自定义校验规则" class="headerlink" title="3、自定义校验规则"></a>3、自定义校验规则</h4><p>一个数据对象或许不能包含一个应用要求的所有不同验证规则，但是通过自定义验证规则就可以解决这个问题。</p>
<p>在需要的地方，添加我们创建的规则，并进行检测。</p>
<p>通过继承<code>ValidationRule</code>抽象类，并实现<code>Validate</code>方法，并添加到绑定元素的<code>Binding.ValidationRules</code>中。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MinAgeValidation</span> : <span class="title">ValidationRule</span></span><br><span class="line">    &#123; <span class="keyword">public</span> <span class="built_in">int</span> MinAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> ValidationResult <span class="title">Validate</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, CultureInfo cultureInfo</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ValidationResult result \= <span class="literal">null</span>; <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">            &#123; <span class="built_in">int</span> age; <span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(<span class="keyword">value</span>.ToString(), <span class="keyword">out</span> age))</span><br><span class="line">                &#123; <span class="keyword">if</span> (age &lt; <span class="keyword">this</span>.MinAge)</span><br><span class="line">                    &#123;</span><br><span class="line">                        result \= <span class="keyword">new</span> ValidationResult(<span class="literal">false</span>, <span class="string">&quot;Age must large than &quot;</span> + <span class="keyword">this</span>.MinAge.ToString(CultureInfo.InvariantCulture));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result \= <span class="keyword">new</span> ValidationResult(<span class="literal">false</span>, <span class="string">&quot;Age must be a number!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result \= <span class="keyword">new</span> ValidationResult(<span class="literal">false</span>, <span class="string">&quot;Age must not be null!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">return</span> <span class="keyword">new</span> ValidationResult(<span class="literal">true</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&lt;Grid\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.RowDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.RowDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">Width\=&quot;Auto&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Text\=&quot;Name:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Name&#125;&quot;\&gt;</span></span><br><span class="line">                <span class="string">&lt;/TextBox\&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Text\=&quot;Age:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;\&gt;</span></span><br><span class="line">                    <span class="string">&lt;TextBox.Text\&gt;</span></span><br><span class="line">                        <span class="string">&lt;Binding</span> <span class="string">Path\=&quot;Age&quot;</span> <span class="string">UpdateSourceTrigger\=&quot;PropertyChanged&quot;</span> <span class="string">ValidatesOnDataErrors\=&quot;True&quot;\&gt;</span></span><br><span class="line">                            <span class="string">&lt;Binding.ValidationRules\&gt;</span></span><br><span class="line">                                <span class="string">&lt;validations:MinAgeValidation</span> <span class="string">MinAge\=&quot;18&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                            <span class="string">&lt;/Binding.ValidationRules\&gt;</span></span><br><span class="line">                        <span class="string">&lt;/Binding\&gt;</span></span><br><span class="line">                    <span class="string">&lt;/TextBox.Text\&gt;</span></span><br><span class="line">                <span class="string">&lt;/TextBox\&gt;</span></span><br><span class="line">            <span class="string">&lt;/Grid\&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种方式，也会有第一种方法的BUG，暂时还不知道如何解决，但是这个能够灵活的实现校验，并且能传参数。</p>
<p>效果图：<br>![[WPF数据校验&#x2F;IMG-20250804110742687.png]]</p>
<h4 id="4、使用数据注解-特性方式"><a href="#4、使用数据注解-特性方式" class="headerlink" title="4、使用数据注解(特性方式)"></a>4、使用数据注解(特性方式)</h4><p>在System.ComponentModel.DataAnnotaions命名空间中定义了很多特性，</p>
<p>它们可以被放置在属性前面，显示验证的具体需要。放置了这些特性之后，</p>
<p>属性中的Setter方法就可以使用Validator静态类了，来用于验证数据。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonUseDataAnnotation</span> : <span class="title">ObservableObject</span></span><br><span class="line">    &#123; <span class="keyword">private</span> <span class="built_in">int</span> age; <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">        \[Range(<span class="number">18</span>, <span class="number">120</span>, ErrorMessage = <span class="string">&quot;Age must be a positive integer&quot;</span>)\] <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">            &#125; <span class="keyword">set</span> &#123; <span class="keyword">this</span>.ValidateProperty(<span class="keyword">value</span>, <span class="string">&quot;Age&quot;</span>); <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>.age, <span class="keyword">value</span>, () =&gt; <span class="keyword">this</span>.Age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        \[Required(ErrorMessage \= <span class="string">&quot;A name is required&quot;</span>)\]</span><br><span class="line">        \[StringLength(<span class="number">100</span>, MinimumLength = <span class="number">3</span>, ErrorMessage = <span class="string">&quot;Name must have at least 3 characters&quot;</span>)\] <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">            &#125; <span class="keyword">set</span> &#123; <span class="keyword">this</span>.ValidateProperty(<span class="keyword">value</span>, <span class="string">&quot;Name&quot;</span>); <span class="keyword">this</span>.SetProperty(<span class="keyword">ref</span> <span class="keyword">this</span>.name, <span class="keyword">value</span>, () =&gt; <span class="keyword">this</span>.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ValidateProperty</span>&lt;<span class="title">T</span>&gt;(<span class="params">T <span class="keyword">value</span>, <span class="built_in">string</span> propertyName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Validator.ValidateProperty(<span class="keyword">value</span>,                <span class="keyword">new</span> ValidationContext(<span class="keyword">this</span>, <span class="literal">null</span>, <span class="literal">null</span>) &#123; MemberName = propertyName &#125;); &#125; ___&#125;___</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&lt;Grid\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.RowDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;RowDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.RowDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">Width\=&quot;Auto&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;ColumnDefinition</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid.ColumnDefinitions\&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Text\=&quot;Name:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Name,</span></span><br><span class="line">                                        <span class="string">ValidatesOnExceptions=True,</span></span><br><span class="line">                                        <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBlock</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Text\=&quot;Age:&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;TextBox</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">Age,</span></span><br><span class="line">                                        <span class="string">ValidatesOnExceptions=True,</span></span><br><span class="line">                                        <span class="string">UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">            <span class="string">&lt;/Grid\&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用特性的方式，能够很自由的使用自定义的规则，而且在.Net4.5中新增了很多特性，可以很方便的对数据进行校验。</p>
<p>例如：EmailAddress, Phone, and Url等。</p>
<h2 id="三、自定义错误显示模板"><a href="#三、自定义错误显示模板" class="headerlink" title="三、自定义错误显示模板"></a>三、自定义错误显示模板</h2><p>在上面的例子中，我们可以看到当出现验证不正确时，绑定控件会被一圈红色错误线包裹住。</p>
<p>这种方式一般不能够正确的展示出，错误的原因等信息，所以有可能需要自己的错误显示方式。</p>
<p>前面，我们已经讲过了。当在检测过程中，出现错误时，WPF会把错误信息封装为一个ValidationError对象，</p>
<p>并添加到Validation.Errors中，所以我们可以取出错误详细信息，并显示出来。</p>
<h4 id="1、为控件创建ErrorTemplate"><a href="#1、为控件创建ErrorTemplate" class="headerlink" title="1、为控件创建ErrorTemplate"></a>1、为控件创建ErrorTemplate</h4><p>下面就是一个简单的例子，每次都把错误信息以红色展示在空间上面。这里的AdornedElementPlaceholder相当于</p>
<p>控件的占位符，表示控件的真实位置。这个例子是在书上直接拿过来的，只能做基本展示用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&lt;ControlTemplate</span> <span class="string">x:Key\=&quot;ErrorTemplate&quot;\&gt;</span></span><br><span class="line">            <span class="string">&lt;Border</span> <span class="string">BorderBrush\=&quot;Red&quot;</span> <span class="string">BorderThickness\=&quot;2&quot;\&gt;</span></span><br><span class="line">                <span class="string">&lt;Grid\&gt;</span></span><br><span class="line">                    <span class="string">&lt;AdornedElementPlaceholder</span> <span class="string">x:Name\=&quot;\_el&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                    <span class="string">&lt;TextBlock</span> <span class="string">Margin\=&quot;0,0,6,0&quot;</span> <span class="string">HorizontalAlignment\=&quot;Right&quot;</span> <span class="string">VerticalAlignment\=&quot;Center&quot;</span> <span class="string">Foreground\=&quot;Red&quot;</span> <span class="string">Text\=&quot;&#123;Binding</span> <span class="string">\[0\].ErrorContent&#125;&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">                <span class="string">&lt;/Grid\&gt;</span></span><br><span class="line">            <span class="string">&lt;/Border\&gt;</span></span><br><span class="line">        <span class="string">&lt;/ControlTemplate\&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&lt;TextBox</span> <span class="string">x:Name\=&quot;AgeTextBox&quot;</span> <span class="string">Grid.Row\=&quot;1&quot;</span> <span class="string">Grid.Column\=&quot;1&quot;</span> <span class="string">Margin\=&quot;1&quot;</span> <span class="string">Validation.ErrorTemplate\=&quot;&#123;StaticResource</span> <span class="string">ErrorTemplate&#125;&quot;</span> <span class="string">\&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方式非常简单，将上面的模板作为逻辑资源加入项目中，然后像上面一样引用即可。</p>
<p>效果图：</p>
<p>![[WPF数据校验&#x2F;IMG-20250804110742879.png]]</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>数据校验</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF自定义行为Behavior，实现双击控件复制文本</title>
    <url>/2017/08/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/WPF%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BABehavior%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%87%BB%E6%8E%A7%E4%BB%B6%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<p>WPF引用xmlns:i&#x3D;”clr-namespace:System.Windows.Interactivity;assembly&#x3D;System.Windows.Interactivity”后可以设置很多自定义的行为：</p>
<pre><code>       &lt;i:Interaction.Triggers\&gt;
            &lt;i:EventTrigger EventName\=&quot;ValueChanged&quot;\&gt;
                &lt;i:InvokeCommandAction Command\=&quot;&#123;Binding ValueChangedCommand&#125;&quot; /&gt;
            &lt;/i:EventTrigger\&gt;
        &lt;/i:Interaction.Triggers\&gt;
</code></pre>
<p>&lt;UserControl.Resources&gt;<br>        &lt;ControlTemplate x:Key=“trackThumb” TargetType=“{x:Type Slider}”&gt;<br>            &lt;Border Background=“{TemplateBinding Background}” BorderBrush=“{TemplateBinding BorderBrush}” BorderThickness=“{TemplateBinding BorderThickness}”&gt;<br>                &lt;Grid&gt;<br>                    &lt;Track x:Name=“PART_Track”&gt;<br>                        &lt;Track.Thumb&gt;<br>                            &lt;Thumb Width=“10”&gt;<br>                                &lt;i:Interaction.Triggers&gt;<br>                                    &lt;i:EventTrigger EventName=“DragCompleted”&gt;<br>                                        &lt;i:InvokeCommandAction Command=“{Binding ValueChangedCommand}” &#x2F;&gt;<br>                                    &lt;&#x2F;i:EventTrigger&gt;<br>                                &lt;&#x2F;i:Interaction.Triggers&gt;<br>                            &lt;&#x2F;Thumb&gt;<br>                        &lt;&#x2F;Track.Thumb&gt;<br>                    &lt;&#x2F;Track&gt;<br>                &lt;&#x2F;Grid&gt;<br>            &lt;&#x2F;Border&gt;<br>        &lt;&#x2F;ControlTemplate&gt;<br>    &lt;&#x2F;UserControl.Resources&gt;</p>
<p>当时当我们有一些自定义的需求时，需要自定义行为，例如给每个控件添加一个双击复制文本的行为。</p>
<p>1. 定义行为</p>
<p>public class MouseDoubleClickCopyTextBehavior : Behavior<FrameworkElement> {<br>        &#x2F;&#x2F;&#x2F; <summary><br>        &#x2F;&#x2F;&#x2F; 需要复制的内容<br>        &#x2F;&#x2F;&#x2F; </summary><br>        public string CopyText<br>        { get { return (string)GetValue(CopyTextProperty); } set { SetValue(CopyTextProperty, value); }<br>        } public static readonly DependencyProperty CopyTextProperty &#x3D; DependencyProperty.Register(“CopyText”, typeof(string), typeof(MouseDoubleClickCopyTextBehavior), new PropertyMetadata(null)); protected override void OnAttached()<br>        { base.OnAttached();<br>            AssociatedObject.PreviewMouseLeftButtonDown +&#x3D; AssociatedObject_PreviewMouseLeftButtonDown;<br>        } protected override void OnDetaching()<br>        { base.OnDetaching();<br>            AssociatedObject.PreviewMouseLeftButtonDown -&#x3D; AssociatedObject_PreviewMouseLeftButtonDown;<br>        } void AssociatedObject_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)<br>        { if (e.ClickCount &gt;&#x3D; 2)<br>                Clipboard.SetDataObject(CopyText);<br>        } </p>
<ol start="2">
<li>控件绑定行为</li>
</ol>
<Style TargetType\="Label" BasedOn\="{StaticResource {x:Type Label}}"\>
                <Setter Property\="VerticalAlignment" Value\="Center" />
                <Setter Property\="Template"\>
                    <Setter.Value\>
                        <ControlTemplate TargetType\="Label"\>
                            <Border\>
                                <ContentPresenter Name\="ContentPresenter" HorizontalAlignment\="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment\="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey\="True" \>
                                    <!-- 绑定自定义行为 \-->
                                    <i:Interaction.Behaviors\>  
 <hei:MouseDoubleClickCopyTextBehavior CopyText\="{Binding ElementName=ContentPresenter,Path=Content}"/>
                                    </i:Interaction.Behaviors\>
                                </ContentPresenter\>
                            </Border\>
                            <ControlTemplate.Triggers\>
                                <Trigger Property\="IsEnabled" Value\="false"\>
                                    <Setter Property\="Foreground"\><Setter.Value\>
                                            <SolidColorBrush Color\="{DynamicResource DisabledForegroundColor}" />
                                        </Setter.Value\>
                                    </Setter\>
                                </Trigger\>
                            </ControlTemplate.Triggers\>
                        </ControlTemplate\></Setter.Value\>
                </Setter\>
            </Style\>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Behavior</tag>
        <tag>行为</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt使用ONNX调用YOLOv8模型</title>
    <url>/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Qt%E4%BD%BF%E7%94%A8ONNX%E8%B0%83%E7%94%A8YOLOv8%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="Qt配置onnx-runtime"><a href="#Qt配置onnx-runtime" class="headerlink" title="Qt配置onnx_runtime"></a>Qt配置onnx_runtime</h2><p>首先，onnx_runtime官方也给编译好的release版本，下载即可。但是在qt中配置有一个坑。<br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/f285649ef971a256a02a12c80d3121c0.pngpic_center" alt="在这里插入图片描述"><br>在Qt Creator中正常添加外部库，但是你会发现构建会找不到onnxruntime.lib，这是如果你替换成全路径，即把注释的部分换成下面的lib路径，直接指明onnxruntime.lib。这时构建成功，可以include &lt;onnxruntime_cxx_api.h&gt;，但是在运行你会遇到应用程序无法启动。<br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/9998c7279c23cb3384a6682c150d6eb5.pngpic_center" alt="在这里插入图片描述"><br>根据百度把onnxruntime.dll复制到.exe目录下。  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Qt%E4%BD%BF%E7%94%A8ONNX%E8%B0%83%E7%94%A8YOLOv8%E6%A8%A1%E5%9E%8B/IMG-20250804110742710.png" class="" title="在这里插入图片描述">  
<p>OK，启动成功。</p>
<h2 id="opencv读取视频流"><a href="#opencv读取视频流" class="headerlink" title="opencv读取视频流"></a>opencv读取视频流</h2><p>居中显示，随意拉伸。<br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/c85d6456e082a061090d525060d438ef.pngpic_center" alt="在这里插入图片描述"><br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/03731735e1a578e9586e4907e895b56d.pngpic_center" alt="在这里插入图片描述"><br>实现居中的逻辑：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调整QImage的大小以匹配QLabel的大小 QPixmap scaledPixmap = QPixmap::fromImage(qimg).scaled(ui-&gt;Origin_Video-&gt;size(), Qt::KeepAspectRatio, Qt::FastTransformation);</span></span><br></pre></td></tr></table></figure>

<p>而在界面当中需要对窗口随意拉伸，这是就需要界面允许缩放。修改QLabel的属性：<br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/ffea42604dabb996f785e64e414b6d74.pngpic_center" alt="在这里插入图片描述"><br>修改成minimum，并给定最小宽度和高度。（还不知道原因，等有空学习一下）</p>
<p>最后opencv读取视频流并拉取每一帧显示在QLabel中，这里采用的是用一个Qtimer，定时去获取视频帧。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建定时器，每隔一定时间显示下一帧 timer = new QTimer(this); connect(timer, &amp;QTimer::timeout, this, &amp;MainWindow::showNextFrame); timer-&gt;start(33); // 设置帧率为30FPS，即每隔33毫秒显示一帧</span></span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在槽函数中处理视频的加载和显示 void MainWindow::on_actionvideo_triggered() &#123; camera-&gt;stop(); viewfinder-&gt;close(); QString curPath = QDir::homePath(); QString dlgTitle = &quot;选择视频文件&quot;; QString filter = &quot;视频文件(*.wmv *.mp4);;所有文件(*.*)&quot;; QString aFile = QFileDialog::getOpenFileName(this, dlgTitle, curPath, filter); if (aFile.isEmpty()) &#123; return; &#125; ui-&gt;dir_Edit-&gt;setText(aFile); currentSource = File; // 更新当前视频源为视频文件 displayVideo(); // 显示视频 &#125; // 根据当前视频源显示视频的函数 void MainWindow::displayVideo() &#123; if (currentSource == File) &#123; std::string video_path = ui-&gt;dir_Edit-&gt;text().toLocal8Bit().constData(); cap.open(video_path); if (!cap.isOpened()) &#123; qDebug() &lt;&lt; &quot;Error: Unable to open the video file&quot;; return; &#125; // 创建定时器，每隔一定时间显示下一帧 timer = new QTimer(this); connect(timer, &amp;QTimer::timeout, this, &amp;MainWindow::showNextFrame); timer-&gt;start(33); // 设置帧率为30FPS，即每隔33毫秒显示一帧 &#125; else if (currentSource == Camera) &#123; // 创建定时器，每隔一定时间显示下一帧 timer = new QTimer(this); connect(timer, &amp;QTimer::timeout, this, &amp;MainWindow::viewfinderchange); timer-&gt;start(33); // 设置帧率为30FPS，即每隔33毫秒显示一帧 // cameras = QCameraInfo::availableCameras(); //获取所有相机的列表 // camera = new QCamera(cameras[0]); //camera指向指定的摄像头 camera-&gt;setCaptureMode(QCamera::CaptureStillImage); //设定捕获模式 camera-&gt;setViewfinder(viewfinder); //设置取景器 camera-&gt;start(); &#125; &#125; // 显示下一帧的槽函数 void MainWindow::showNextFrame() &#123; cv::Mat frame; cap &gt;&gt; frame; // 从视频流中获取一帧 if (frame.empty()) &#123; cap.set(cv::CAP_PROP_POS_FRAMES, 0); // 如果视频结束，重新开始播放 cap &gt;&gt; frame; &#125; currentFrame = frame; // 保存当前帧 displayCurrentFrame(); // 显示当前帧 &#125; void MainWindow::displayCurrentFrame() &#123; // 将OpenCV帧转换为QImage QImage qimg(currentFrame.data, currentFrame.cols, currentFrame.rows, currentFrame.step, QImage::Format_RGB888); qimg = qimg.rgbSwapped(); // 将格式从BGR转换为RGB // 调整QImage的大小以匹配QLabel的大小 QPixmap scaledPixmap = QPixmap::fromImage(qimg).scaled(ui-&gt;Origin_Video-&gt;size(), Qt::KeepAspectRatio, Qt::FastTransformation); // 将调整大小后的图像居中显示在QLabel中 centerImageInLabel(ui-&gt;Origin_Video, scaledPixmap); &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="QCamra"><a href="#QCamra" class="headerlink" title="QCamra"></a>QCamra</h2><p>居中显示，随意拉伸<br><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/be2ce60fe3c19cd759a0b07821799600.pngpic_center" alt="在这里插入图片描述"><br>QCamera其实同理，中间拉伸也用了一个QTimer定时获取QLabel的size。<br>QCamera的使用包括初始化一个camera和设置取景器viewfinder，viewfinder的作用就是控制图像在空间中的展示。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_actioncamera_triggered</span><span class="params">()</span> &#123; cameras = QCameraInfo::availableCameras(); <span class="comment">//获取所有相机的列表 //qDebug() &lt;&lt; &quot;this is camera: &quot;; if (cameras.count() &gt; 0) &#123; for(const QCameraInfo &amp;cameraInfo:cameras) &#123; qDebug() &lt;&lt; cameraInfo.description(); &#125; camera = new QCamera(cameras.at(0)); //初始化实例化一个相机对象 &#125; //设置取景器 viewfinder = new QCameraViewfinder(ui-&gt;Origin_Video); camera-&gt;setViewfinder(viewfinder); centerCameraViewfinderInLabel(viewfinder, ui-&gt;Origin_Video); camera-&gt;start(); //开启相机 //设置默认摄像头参数 QCameraViewfinderSettings set; // set.setResolution(640, 480); //设置显示分辨率 set.setMaximumFrameRate(30); //设置帧率 camera-&gt;setViewfinderSettings(set); stopVideo(); ui-&gt;Origin_Video-&gt;setPixmap(QPixmap(&quot;&quot;)); currentSource = Camera; // 更新当前视频源为摄像头 viewfinder-&gt;show(); displayVideo(); // 显示视频 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="yolov8-onnx-推理"><a href="#yolov8-onnx-推理" class="headerlink" title="yolov8 onnx 推理"></a>yolov8 onnx 推理</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_actionTest_triggered</span><span class="params">()</span> &#123; <span class="comment">// std::string projectBasePath = &quot;./&quot;; // Set your ultralytics base path QString qs = QCoreApplication::applicationDirPath(); std::string projectBasePath = qs.toLocal8Bit().constData(); bool runOnGPU = false; // Note that in this example the classes are hard-coded and &#x27;classes.txt&#x27; is a place holder. Inference inf(projectBasePath + &quot;/moust_best.onnx&quot;, cv::Size(640, 640), &quot;mouse.txt&quot;, runOnGPU); std::string video_path = ui-&gt;dir_Edit-&gt;text().toLocal8Bit().constData(); // 读取视频文件 // cv::VideoCapture cap(projectBasePath + &quot;/video/video.mp4&quot;); cv::VideoCapture cap(video_path); if (!cap.isOpened()) &#123; std::cout &lt;&lt; &quot;Error opening video file&quot; &lt;&lt; std::endl; return ; &#125; cv::Mat frame; while (cap.read(frame)) &#123; // 推断开始... std::vector&lt;Detection&gt; output = inf.runInference(frame); int detections = output.size(); std::cout &lt;&lt; &quot;Number of detections:&quot; &lt;&lt; detections &lt;&lt; std::endl; for (int i = 0; i &lt; detections; ++i) &#123; Detection detection = output[i]; cv::Rect box = detection.box; cv::Scalar color = detection.color; // Detection box cv::rectangle(frame, box, color, 2); // Detection box text std::string classString = detection.className + &#x27; &#x27; + std::to_string(detection.confidence).substr(0, 4); cv::Size textSize = cv::getTextSize(classString, cv::FONT_HERSHEY_DUPLEX, 1, 2, 0); cv::Rect textBox(box.x, box.y - 40, textSize.width + 10, textSize.height + 20); cv::rectangle(frame, textBox, color, cv::FILLED); cv::putText(frame, classString, cv::Point(box.x + 5, box.y - 10), cv::FONT_HERSHEY_DUPLEX, 1, cv::Scalar(0, 0, 0), 2, 0); &#125; // 推断结束... // 仅用于预览 float scale = 0.8; cv::resize(frame, frame, cv::Size(frame.cols*scale, frame.rows*scale)); cv::imshow(&quot;Inference&quot;, frame); if (cv::waitKey(1) == 27) &#123; break; &#125; &#125; cap.release(); cv::destroyAllWindows(); &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="多线程（onnx推理线程和界面主线程）"><a href="#多线程（onnx推理线程和界面主线程）" class="headerlink" title="多线程（onnx推理线程和界面主线程）"></a>多线程（onnx推理线程和界面主线程）</h2><p><img src="/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91yolov8+qt+onnx_yolov8%20onnx%20qt-CSDN%E5%8D%9A%E5%AE%A2/97d0a21ce1306722fe5c6726ec18e730.pngpic_center" alt="在这里插入图片描述"><br>摄像头与onnx互不干扰，说明主界面线程与onnx推理是分开线程进行的，ok！</p>
<p>######################### 2024 05 09 更新 ##############################################  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Qt%E4%BD%BF%E7%94%A8ONNX%E8%B0%83%E7%94%A8YOLOv8%E6%A8%A1%E5%9E%8B/IMG-20250804110742884.png" class="" title="在这里插入图片描述">
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
        <category>YOLOv8</category>
      </categories>
      <tags>
        <tag>yolov8</tag>
        <tag>onnx</tag>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLOv8目标检测：使用ONNX模型进行推理</title>
    <url>/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%9A%E4%BD%BF%E7%94%A8ONNX%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%8E%A8%E7%90%86_onnx%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86-CSDN%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="YOLOv8目标检测：使用ONNX模型进行推理-onnx模型推理-CSDN博客"><a href="#YOLOv8目标检测：使用ONNX模型进行推理-onnx模型推理-CSDN博客" class="headerlink" title="YOLOv8目标检测：使用ONNX模型进行推理_onnx模型推理-CSDN博客"></a>YOLOv8目标检测：使用ONNX模型进行推理_onnx模型推理-CSDN博客</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>文章浏览阅读8.2k次，点赞46次，收藏119次。本文详细介绍了如何在COCO数据集上使用YOLOv8目标检测模型进行推理，涉及环境配置、代码实现（包括图像、视频和摄像头检测），以及展示ONNX模型在不同大小版本（YOLOv8n,YOLOv8s,YOLOv8m,YOLOv8l,YOLOv8x）上的实验结果。</p>
</blockquote>
<hr>
<h2 id="基于COCO数据集的YOLOv8目标检测onnx模型推理"><a href="#基于COCO数据集的YOLOv8目标检测onnx模型推理" class="headerlink" title="基于COCO数据集的YOLOv8目标检测onnx模型推理"></a>基于COCO数据集的YOLOv8目标检测onnx模型推理</h2><p>在本博客中，我们将探讨如何使用YOLOv8目标检测模型进行推理，包括图片，视频文件，摄像头实时检测，特别是ONNX在不同大小（YOLOv8n, YOLOv8s, YOLOv8m, YOLOv8l, YOLOv8x）的模型上进行的实验。我们还将讨论所需的环境配置，代码实现，以及如何展示推理结果。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>在详细描述环境配置和安装步骤之前，请确保您的系统已经安装了Python和pip。下面是详细的环境配置步骤，适用于基于YOLOv8模型进行目标检测的项目。</p>
<h4 id="1-安装必要的Python库"><a href="#1-安装必要的Python库" class="headerlink" title="1. 安装必要的Python库"></a>1. 安装必要的Python库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install onnxruntime-gpu==1.13.1 opencv-python==4.7.0.68 numpy==1.24.1 Pillow==9.4.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>

<p>如果您没有GPU或者不打算使用GPU，可以安装<code>onnxruntime</code>而不是<code>onnxruntime-gpu</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install onnxruntime==1.13.1 opencv-python==4.7.0.68 numpy==1.24.1 Pillow==9.4.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>

<h4 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h4><p>安装完成后，您可以通过运行Python并尝试导入安装的包来验证是否成功安装了所有必要的库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> onnxruntime <span class="keyword">import</span> cv2 <span class="keyword">import</span> numpy <span class="keyword">import</span> PIL</span><br></pre></td></tr></table></figure>

<p>如果上述命令没有引发任何错误，那么恭喜您，您已成功配置了运行环境。</p>
<h4 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h4><ul>
<li>如果您在安装过程中遇到任何问题，可能需要更新pip到最新版本：<code>pip install --upgrade pip</code>。</li>
<li>对于使用NVIDIA GPU的用户，确保您的系统已安装CUDA和cuDNN。<code>onnxruntime-gpu</code>要求系统预装这些NVIDIA库以利用GPU加速。</li>
</ul>
<p>按照这些步骤，您应该能够成功配置环境并运行基于YOLOv8的目标检测项目了。</p>
<h3 id="权重下载"><a href="#权重下载" class="headerlink" title="权重下载"></a>权重下载</h3><p>YOLOv8模型的权重可以通过以下百度网盘链接下载：</p>
<ul>
<li>链接：<a href="https://pan.baidu.com/s/1xpAdN7C9CS-L4XBLgBG8Kw">https://pan.baidu.com/s/1xpAdN7C9CS-L4XBLgBG8Kw</a></li>
<li>提取码：8dm8</li>
</ul>
<p>请确保下载适合您需求的模型版本。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>以下是进行目标检测的整体代码流程，包括模型加载、图像预处理、推理执行、后处理及结果展示的步骤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">import</span> onnxruntime <span class="keyword">as</span> ort <span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 置信度 confidence_thres = 0.35 # iou阈值 iou_thres = 0.5 # 类别 classes = &#123;0: &#x27;person&#x27;, 1: &#x27;bicycle&#x27;, 2: &#x27;car&#x27;, 3: &#x27;motorcycle&#x27;, 4: &#x27;airplane&#x27;, 5: &#x27;bus&#x27;, 6: &#x27;train&#x27;, 7: &#x27;truck&#x27;, 8: &#x27;boat&#x27;, 9: &#x27;traffic light&#x27;, 10: &#x27;fire hydrant&#x27;, 11: &#x27;stop sign&#x27;, 12: &#x27;parking meter&#x27;, 13: &#x27;bench&#x27;, 14: &#x27;bird&#x27;, 15: &#x27;cat&#x27;, 16: &#x27;dog&#x27;, 17: &#x27;horse&#x27;, 18: &#x27;sheep&#x27;, 19: &#x27;cow&#x27;, 20: &#x27;elephant&#x27;, 21: &#x27;bear&#x27;, 22: &#x27;zebra&#x27;, 23: &#x27;giraffe&#x27;, 24: &#x27;backpack&#x27;, 25: &#x27;umbrella&#x27;, 26: &#x27;handbag&#x27;, 27: &#x27;tie&#x27;, 28: &#x27;suitcase&#x27;, 29: &#x27;frisbee&#x27;, 30: &#x27;skis&#x27;, 31: &#x27;snowboard&#x27;, 32: &#x27;sports ball&#x27;, 33: &#x27;kite&#x27;, 34: &#x27;baseball bat&#x27;, 35: &#x27;baseball glove&#x27;, 36: &#x27;skateboard&#x27;, 37: &#x27;surfboard&#x27;, 38: &#x27;tennis racket&#x27;, 39: &#x27;bottle&#x27;, 40: &#x27;wine glass&#x27;, 41: &#x27;cup&#x27;, 42: &#x27;fork&#x27;, 43: &#x27;knife&#x27;, 44: &#x27;spoon&#x27;, 45: &#x27;bowl&#x27;, 46: &#x27;banana&#x27;, 47: &#x27;apple&#x27;, 48: &#x27;sandwich&#x27;, 49: &#x27;orange&#x27;, 50: &#x27;broccoli&#x27;, 51: &#x27;carrot&#x27;, 52: &#x27;hot dog&#x27;, 53: &#x27;pizza&#x27;, 54: &#x27;donut&#x27;, 55: &#x27;cake&#x27;, 56: &#x27;chair&#x27;, 57: &#x27;couch&#x27;, 58: &#x27;potted plant&#x27;, 59: &#x27;bed&#x27;, 60: &#x27;dining table&#x27;, 61: &#x27;toilet&#x27;, 62: &#x27;tv&#x27;, 63: &#x27;laptop&#x27;, 64: &#x27;mouse&#x27;, 65: &#x27;remote&#x27;, 66: &#x27;keyboard&#x27;, 67: &#x27;cell phone&#x27;, 68: &#x27;microwave&#x27;, 69: &#x27;oven&#x27;, 70: &#x27;toaster&#x27;, 71: &#x27;sink&#x27;, 72: &#x27;refrigerator&#x27;, 73: &#x27;book&#x27;, 74: &#x27;clock&#x27;, 75: &#x27;vase&#x27;, 76: &#x27;scissors&#x27;, 77: &#x27;teddy bear&#x27;, 78: &#x27;hair drier&#x27;, 79: &#x27;toothbrush&#x27;&#125; # 随机颜色 color_palette = np.random.uniform(100, 255, size=(len(classes), 3)) # 判断是使用GPU或CPU providers = [ (&#x27;CUDAExecutionProvider&#x27;, &#123; &#x27;device_id&#x27;: 0, # 可以选择GPU设备ID，如果你有多个GPU &#125;), &#x27;CPUExecutionProvider&#x27;, # 也可以设置CPU作为备选 ] def calculate_iou(box, other_boxes): &quot;&quot;&quot; 计算给定边界框与一组其他边界框之间的交并比（IoU）。 参数： - box: 单个边界框，格式为 [x1, y1, width, height]。 - other_boxes: 其他边界框的数组，每个边界框的格式也为 [x1, y1, width, height]。 返回值： - iou: 一个数组，包含给定边界框与每个其他边界框的IoU值。 &quot;&quot;&quot; # 计算交集的左上角坐标 x1 = np.maximum(box[0], np.array(other_boxes)[:, 0]) y1 = np.maximum(box[1], np.array(other_boxes)[:, 1]) # 计算交集的右下角坐标 x2 = np.minimum(box[0] + box[2], np.array(other_boxes)[:, 0] + np.array(other_boxes)[:, 2]) y2 = np.minimum(box[1] + box[3], np.array(other_boxes)[:, 1] + np.array(other_boxes)[:, 3]) # 计算交集区域的面积 intersection_area = np.maximum(0, x2 - x1) * np.maximum(0, y2 - y1) # 计算给定边界框的面积 box_area = box[2] * box[3] # 计算其他边界框的面积 other_boxes_area = np.array(other_boxes)[:, 2] * np.array(other_boxes)[:, 3] # 计算IoU值 iou = intersection_area / (box_area + other_boxes_area - intersection_area) return iou def custom_NMSBoxes(boxes, scores, confidence_threshold, iou_threshold): # 如果没有边界框，则直接返回空列表 if len(boxes) == 0: return [] # 将得分和边界框转换为NumPy数组 scores = np.array(scores) boxes = np.array(boxes) # 根据置信度阈值过滤边界框 mask = scores &gt; confidence_threshold filtered_boxes = boxes[mask] filtered_scores = scores[mask] # 如果过滤后没有边界框，则返回空列表 if len(filtered_boxes) == 0: return [] # 根据置信度得分对边界框进行排序 sorted_indices = np.argsort(filtered_scores)[::-1] # 初始化一个空列表来存储选择的边界框索引 indices = [] # 当还有未处理的边界框时，循环继续 while len(sorted_indices) &gt; 0: # 选择得分最高的边界框索引 current_index = sorted_indices[0] indices.append(current_index) # 如果只剩一个边界框，则结束循环 if len(sorted_indices) == 1: break # 获取当前边界框和其他边界框 current_box = filtered_boxes[current_index] other_boxes = filtered_boxes[sorted_indices[1:]] # 计算当前边界框与其他边界框的IoU iou = calculate_iou(current_box, other_boxes) # 找到IoU低于阈值的边界框，即与当前边界框不重叠的边界框 non_overlapping_indices = np.where(iou &lt;= iou_threshold)[0] # 更新sorted_indices以仅包含不重叠的边界框 sorted_indices = sorted_indices[non_overlapping_indices + 1] # 返回选择的边界框索引 return indices def draw_detections(img, box, score, class_id): &quot;&quot;&quot; 在输入图像上绘制检测到的对象的边界框和标签。 参数: img: 要在其上绘制检测结果的输入图像。 box: 检测到的边界框。 score: 对应的检测得分。 class_id: 检测到的对象的类别ID。 返回: 无 &quot;&quot;&quot; # 提取边界框的坐标 x1, y1, w, h = box # 根据类别ID检索颜色 color = color_palette[class_id] # 在图像上绘制边界框 cv2.rectangle(img, (int(x1), int(y1)), (int(x1 + w), int(y1 + h)), color, 2) # 创建标签文本，包括类名和得分 label = f&#x27;&#123;classes[class_id]&#125;: &#123;score:.2f&#125;&#x27; # 计算标签文本的尺寸 (label_width, label_height), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1) # 计算标签文本的位置 label_x = x1 label_y = y1 - 10 if y1 - 10 &gt; label_height else y1 + 10 # 绘制填充的矩形作为标签文本的背景 cv2.rectangle(img, (label_x, label_y - label_height), (label_x + label_width, label_y + label_height), color, cv2.FILLED) # 在图像上绘制标签文本 cv2.putText(img, label, (label_x, label_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA) def preprocess(img, input_width, input_height): &quot;&quot;&quot; 在执行推理之前预处理输入图像。 返回: image_data: 为推理准备好的预处理后的图像数据。 &quot;&quot;&quot; # 获取输入图像的高度和宽度 img_height, img_width = img.shape[:2] # 将图像颜色空间从BGR转换为RGB img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # 将图像大小调整为匹配输入形状 img = cv2.resize(img, (input_width, input_height)) # 通过除以255.0来归一化图像数据 image_data = np.array(img) / 255.0 # 转置图像，使通道维度为第一维 image_data = np.transpose(image_data, (2, 0, 1)) # 通道首 # 扩展图像数据的维度以匹配预期的输入形状 image_data = np.expand_dims(image_data, axis=0).astype(np.float32) # 返回预处理后的图像数据 return image_data, img_height, img_width def postprocess(input_image, output, input_width, input_height, img_width, img_height): &quot;&quot;&quot; 对模型输出进行后处理，提取边界框、得分和类别ID。 参数: input_image (numpy.ndarray): 输入图像。 output (numpy.ndarray): 模型的输出。 input_width (int): 模型输入宽度。 input_height (int): 模型输入高度。 img_width (int): 原始图像宽度。 img_height (int): 原始图像高度。 返回: numpy.ndarray: 绘制了检测结果的输入图像。 &quot;&quot;&quot; # 转置和压缩输出以匹配预期的形状 outputs = np.transpose(np.squeeze(output[0])) # 获取输出数组的行数 rows = outputs.shape[0] # 用于存储检测的边界框、得分和类别ID的列表 boxes = [] scores = [] class_ids = [] # 计算边界框坐标的缩放因子 x_factor = img_width / input_width y_factor = img_height / input_height # 遍历输出数组的每一行 for i in range(rows): # 从当前行提取类别得分 classes_scores = outputs[i][4:] # 找到类别得分中的最大得分 max_score = np.amax(classes_scores) # 如果最大得分高于置信度阈值 if max_score &gt;= confidence_thres: # 获取得分最高的类别ID class_id = np.argmax(classes_scores) # 从当前行提取边界框坐标 x, y, w, h = outputs[i][0], outputs[i][1], outputs[i][2], outputs[i][3] # 计算边界框的缩放坐标 left = int((x - w / 2) * x_factor) top = int((y - h / 2) * y_factor) width = int(w * x_factor) height = int(h * y_factor) # 将类别ID、得分和框坐标添加到各自的列表中 class_ids.append(class_id) scores.append(max_score) boxes.append([left, top, width, height]) # 应用非最大抑制过滤重叠的边界框 indices = custom_NMSBoxes(boxes, scores, confidence_thres, iou_thres) # 遍历非最大抑制后的选定索引 for i in indices: # 根据索引获取框、得分和类别ID box = boxes[i] score = scores[i] class_id = class_ids[i] # 在输入图像上绘制检测结果 draw_detections(input_image, box, score, class_id) # 返回修改后的输入图像 return input_image def init_detect_model(model_path): # 使用ONNX模型文件创建一个推理会话，并指定执行提供者 session = ort.InferenceSession(model_path, providers=providers) # 获取模型的输入信息 model_inputs = session.get_inputs() # 获取输入的形状，用于后续使用 input_shape = model_inputs[0].shape # 从输入形状中提取输入宽度 input_width = input_shape[2] # 从输入形状中提取输入高度 input_height = input_shape[3] # 返回会话、模型输入信息、输入宽度和输入高度 return session, model_inputs, input_width, input_height def detect_object(image, session, model_inputs, input_width, input_height): # 如果输入的图像是PIL图像对象，将其转换为NumPy数组 if isinstance(image, Image.Image): result_image = np.array(image) else: # 否则，直接使用输入的图像（假定已经是NumPy数组） result_image = image # 预处理图像数据，调整图像大小并可能进行归一化等操作 img_data, img_height, img_width = preprocess(result_image, input_width, input_height) # 使用预处理后的图像数据进行推理 outputs = session.run(None, &#123;model_inputs[0].name: img_data&#125;) # 对推理结果进行后处理，例如解码检测框，过滤低置信度的检测等 output_image = postprocess(result_image, outputs, input_width, input_height, img_width, img_height) # 返回处理后的图像 return output_image if __name__ == &#x27;__main__&#x27;: # 模型文件的路径 model_path = &quot;yolov8n.onnx&quot; # 初始化检测模型，加载模型并获取模型输入节点信息和输入图像的宽度、高度 session, model_inputs, input_width, input_height = init_detect_model(model_path) # 三种模式 1为图片预测，并显示结果图片；2为摄像头检测，并实时显示FPS； 3为视频检测，并保存结果视频 mode = 1 if mode == 1: # 读取图像文件 image_data = cv2.imread(&quot;street.jpg&quot;) # 使用检测模型对读入的图像进行对象检测 result_image = detect_object(image_data, session, model_inputs, input_width, input_height) # 将检测后的图像保存到文件 cv2.imwrite(&quot;output_image.jpg&quot;, result_image) # 在窗口中显示检测后的图像 cv2.imshow(&#x27;Output&#x27;, result_image) # 等待用户按键，然后关闭显示窗口 cv2.waitKey(0) elif mode == 2: # 打开摄像头 cap = cv2.VideoCapture() # 0表示默认摄像头，如果有多个摄像头可以尝试使用1、2等 # 检查摄像头是否成功打开 if not cap.isOpened(): print(&quot;Error: Could not open camera.&quot;) exit() # 初始化帧数计数器和起始时间 frame_count = 0 start_time = time.time() # 循环读取摄像头视频流 while True: # 读取一帧 ret, frame = cap.read() # 检查帧是否成功读取 if not ret: print(&quot;Error: Could not read frame.&quot;) break # 使用检测模型对读入的帧进行对象检测 output_image = detect_object(frame, session, model_inputs, input_width, input_height) # 计算帧速率 frame_count += 1 end_time = time.time() elapsed_time = end_time - start_time fps = frame_count / elapsed_time print(f&quot;FPS: &#123;fps:.2f&#125;&quot;) # 将FPS绘制在图像上 cv2.putText(output_image, f&quot;FPS: &#123;fps:.2f&#125;&quot;, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA) # 在窗口中显示当前帧 cv2.imshow(&quot;Video&quot;, output_image) # 按下 &#x27;q&#x27; 键退出循环 if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;): break # 释放摄像头资源 cap.release() # 关闭窗口 cv2.destroyAllWindows() elif mode == 3: # 输入视频路径 input_video_path = &#x27;kun.mp4&#x27; # 输出视频路径 output_video_path = &#x27;kun_det.mp4&#x27; # 打开视频文件 cap = cv2.VideoCapture(input_video_path) # 检查视频是否成功打开 if not cap.isOpened(): print(&quot;Error: Could not open video.&quot;) exit() # 读取视频的基本信息 frame_width = int(cap.get(3)) frame_height = int(cap.get(4)) fps = cap.get(cv2.CAP_PROP_FPS) # 定义视频编码器和创建VideoWriter对象 fourcc = cv2.VideoWriter_fourcc(*&#x27;mp4v&#x27;) # 根据文件名后缀使用合适的编码器 out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height)) # 初始化帧数计数器和起始时间 frame_count = 0 start_time = time.time() while True: ret, frame = cap.read() if not ret: print(&quot;Info: End of video file.&quot;) break # 对读入的帧进行对象检测 output_image = detect_object(frame, session, model_inputs, input_width, input_height) # 计算并打印帧速率 frame_count += 1 end_time = time.time() elapsed_time = end_time - start_time if elapsed_time &gt; 0: fps = frame_count / elapsed_time print(f&quot;FPS: &#123;fps:.2f&#125;&quot;) # 将处理后的帧写入输出视频 out.write(output_image) #（可选）实时显示处理后的视频帧 cv2.imshow(&quot;Output Video&quot;, output_image) if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;): break # 释放资源 cap.release() out.release() cv2.destroyAllWindows() else: print(&quot;输入错误，请检查mode的赋值&quot;)</span></span><br></pre></td></tr></table></figure>

<p>请根据您的需求调整置信度阈值、IOU阈值以及模型和mode的值（1为图片预测；2为摄像头检测； 3为视频检测）。</p>
<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>推理完成后，您可以查看处理后的图像，如下所示：</p>
<ul>
<li><p>原始图片：<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%9A%E4%BD%BF%E7%94%A8ONNX%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%8E%A8%E7%90%86_onnx%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86-CSDN%E5%8D%9A%E5%AE%A2/IMG-20250804110742712.jpeg" class="" title="待检测图片"></p>
</li>
<li><p>检测后的图片：<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%9A%E4%BD%BF%E7%94%A8ONNX%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%8E%A8%E7%90%86_onnx%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86-CSDN%E5%8D%9A%E5%AE%A2/IMG-20250804110742889.jpeg" class="" title="检测后的图片"></p>
</li>
</ul>
<p>请替换为您自己的图像路径来查看效果；或者其他两种模式（摄像头实时检测、视频文件检测）进行尝试。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，我们展示了如何使用YOLOv8进行目标检测的完整流程，从环境配置到代码实现和结果展示。此过程适用于YOLOv8目标检测任意模型进行检测任务。</p>
<hr>
<p>希望这篇博客能够帮助您理解和实现基于YOLOv8的目标检测项目。如果有任何问题或需要进一步的帮助，请随时留言讨论。</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
        <category>YOLOv8</category>
      </categories>
      <tags>
        <tag>onnx模型推理</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLOv8训练并测试VisDrone数据集</title>
    <url>/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p>在这之前，需要先准备主机的环境，环境如下：</p>
<p>Ubuntu18.04<br>cuda11.3<br>pytorch:1.11.0<br>torchvision:0.12.0<br>在服务器上执行以下命令，</p>
<h3 id="创建yolov8虚拟环境"><a href="#创建yolov8虚拟环境" class="headerlink" title="创建yolov8虚拟环境"></a>创建yolov8虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n yolov8 python=<span class="number">3.8</span></span><br></pre></td></tr></table></figure>

<h3 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda activate yolov8</span><br></pre></td></tr></table></figure>

<h3 id="安装pytorch-v1-11-0"><a href="#安装pytorch-v1-11-0" class="headerlink" title="安装pytorch v1.11.0"></a>安装pytorch v1.11.0</h3><p>pytorch v1.11.0（torch1.11.0+cu1113 ，torchvision0.12.0+cu113）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CUDA 11.3 pip install torch==1.11.0+cu113 torchvision==0.12.0+cu113 torchaudio==0.11.0 --extra-index-url https://download.pytorch.org/whl/cu113</span></span><br></pre></td></tr></table></figure>

<h3 id="下载yolov8的代码"><a href="#下载yolov8的代码" class="headerlink" title="下载yolov8的代码"></a>下载yolov8的代码</h3><p>先创建yolov8文件夹，存放等会要下载的yolov8代码<code>mkdir yolov8</code><br>进入yolov8文件夹，<code>cd yolov8</code><br>下载yolov8代码<code>git clone https://github.com/ultralytics/ultralytics.git</code></p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install ultralytics</span><br></pre></td></tr></table></figure>

<h2 id="2-VisDrone数据集准备"><a href="#2-VisDrone数据集准备" class="headerlink" title="2.VisDrone数据集准备"></a>2.VisDrone数据集准备</h2><h3 id="数据集下载"><a href="#数据集下载" class="headerlink" title="数据集下载"></a>数据集下载</h3><p>github链接上下载：<a href="https://github.com/VisDrone/VisDrone-Dataset">官方链接</a><br>下载Task1：Object Detectino in Images下面的四个VisDrone-DET dataset数据集  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110742713.png" class="" title="在这里插入图片描述">  
<p>下载好zip文件后，使用winscp将zip文件传输到远程服务器上。<br>在服务器上进入到zip文件所在的文件夹中使用unzip命令解压zip文件。<br>如： <code>unzip VisDrone2019-DET-val.zip</code></p>
<h3 id="数据集处理"><a href="#数据集处理" class="headerlink" title="数据集处理"></a>数据集处理</h3><p>和yolov5所需要的格式一致。参考yolov5数据处理方法。<br>主要是labels的生成，可以在yolov8下面新建一个visdrone2yolov.py文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> download, os, Path <span class="keyword">def</span> <span class="title function_">visdrone2yolo</span>(<span class="params"><span class="built_in">dir</span></span>): <span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="keyword">def</span> <span class="title function_">convert_box</span>(<span class="params">size, box</span>): <span class="comment"># Convert VisDrone box to YOLO xywh box dw = 1. / size[0] dh = 1. / size[1] return (box[0] + box[2] / 2) * dw, (box[1] + box[3] / 2) * dh, box[2] * dw, box[3] * dh (dir / &#x27;labels&#x27;).mkdir(parents=True, exist_ok=True) # make labels directory pbar = tqdm((dir / &#x27;annotations&#x27;).glob(&#x27;*.txt&#x27;), desc=f&#x27;Converting &#123;dir&#125;&#x27;) for f in pbar: img_size = Image.open((dir / &#x27;images&#x27; / f.name).with_suffix(&#x27;.jpg&#x27;)).size lines = [] with open(f, &#x27;r&#x27;) as file: # read annotation.txt for row in [x.split(&#x27;,&#x27;) for x in file.read().strip().splitlines()]: if row[4] == &#x27;0&#x27;: # VisDrone &#x27;ignored regions&#x27; class 0 continue cls = int(row[5]) - 1 # 类别号-1 box = convert_box(img_size, tuple(map(int, row[:4]))) lines.append(f&quot;&#123;cls&#125; &#123;&#x27; &#x27;.join(f&#x27;&#123;x:.6f&#125;&#x27; for x in box)&#125;\n&quot;) with open(str(f).replace(os.sep + &#x27;annotations&#x27; + os.sep, os.sep + &#x27;labels&#x27; + os.sep), &#x27;w&#x27;) as fl: fl.writelines(lines) # write label.txt dir = Path(&#x27;/home/yolov5/datasets/VisDrone2019&#x27;) # datasets文件夹下Visdrone2019文件夹目录 # Convert for d in &#x27;VisDrone2019-DET-train&#x27;, &#x27;VisDrone2019-DET-val&#x27;, &#x27;VisDrone2019-DET-test-dev&#x27;: visdrone2yolo(dir / d) # convert VisDrone annotations to YOLO labels</span></span><br></pre></td></tr></table></figure>

<p>正确执行代码后，会在’VisDrone2019-DET-train’, ‘VisDrone2019-DET-val’, ‘VisDrone2019-DET-test-dev三个文件夹内新生成labels文件夹，用以存放将VisDrone数据集处理成YoloV8格式后的数据标</p>
<h3 id="修改数据配置文件"><a href="#修改数据配置文件" class="headerlink" title="修改数据配置文件"></a>修改数据配置文件</h3><p>记事本或notepad++打开ultralytics-main\ultralytics\datasets\文件夹下的VisDrone.yaml文件，将其中path参数修改为VisDrone2019文件夹所在的路径。  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110742890.png" class="" title="在这里插入图片描述">

<h2 id="3-训练-验证-导出"><a href="#3-训练-验证-导出" class="headerlink" title="3.训练&#x2F;验证&#x2F;导出"></a>3.训练&#x2F;验证&#x2F;导出</h2><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>打开终端（或者pycharm等IDE），进入虚拟环境，随后进入yolov8文件夹，在终端中输入下面命令，即可开始训练。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yolo task=detect mode=train model=yolov8s.pt data=datasets/VisDrone.yaml batch=<span class="number">16</span> epochs=<span class="number">100</span> imgsz=<span class="number">640</span> workers=<span class="number">0</span> device=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol>
<li>val数据集上验证<br>激活yolov8虚拟环境<code>conda activate yolov8</code><br>进入yolov8文件夹<code>cd pyCode/yolov8/ultralytics/ultralytics/</code><br>使用如下命令，即可完成对验证数据的评估。<br>开始验证</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">yolo task=detect mode=val model=runs/detect/train4/weights/best.pt data=datasets/VisDrone.yaml device=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>验证结果如下。  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743361.png" class="" title="在这里插入图片描述">

<ol start="2">
<li>在test数据集上验证<br>将datasets&#x2F;VisDrone.yaml文件中的val路径修改为：VisDrone2019-DET-test-dev&#x2F;images</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..] # path: ../datasets/VisDrone # dataset root dir path: /home/xxx/yolov5/datasets/VisDrone # dataset root dir train: VisDrone2019-DET-train/images # train images (relative to &#x27;path&#x27;) 6471 images val: VisDrone2019-DET-test-dev/images # val images (relative to &#x27;path&#x27;) 548 images VisDrone2019-DET-val/images test: VisDrone2019-DET-test-dev/images # test images (optional) 1610 images</span></span><br></pre></td></tr></table></figure>

<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743603.png" class="" title="在这里插入图片描述">

<p>使用如下命令，即可完成在VisDrone2019-DET-test-dev数据集上的评估。<br>开始验证</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">yolo task=detect mode=val model=runs/detect/train4/weights/best.pt data=datasets/VisDrone.yaml device=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>结果如下  </p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLOv8%E8%AE%AD%E7%BB%83%E5%B9%B6%E6%B5%8B%E8%AF%95VisDrone%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743630.png" class="" title="在这里插入图片描述">

<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>使用如下命令即可导出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">yolo task=detect mode=<span class="keyword">export</span> model=runs/detect/train4/weights/best.pt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
        <category>YOLOv8</category>
      </categories>
      <tags>
        <tag>yolov8</tag>
        <tag>虚拟环境</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO数据处理界面程序</title>
    <url>/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/YOLO%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%95%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Wj421d78y/">点击这里，观看项目说明视频讲解</a></p>
<p>本案例 使用 <code>YOLOv8</code> 结合 <code>Python Qt</code> ，开发一个图形界面的 AI实时物品监测程序。</p>
<p>注意</p>
<p>如果你使用其它版本YOLO（比如YOLOv5）训练的模型，请修改相应的导入和检测代码。</p>
<h3 id="您需要高效学习，找工作？-点击咨询-报名实战班"><a href="#您需要高效学习，找工作？-点击咨询-报名实战班" class="headerlink" title="您需要高效学习，找工作？ 点击咨询 报名实战班"></a>您需要高效学习，找工作？ <a href="https://www.byhy.net/adv/vipcourse/">点击咨询</a> 报名实战班</h3><h3 id="点击查看学员就业情况"><a href="#点击查看学员就业情况" class="headerlink" title="点击查看学员就业情况"></a><a href="https://www.bilibili.com/read/readlist/rl416500">点击查看学员就业情况</a></h3><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面示例代码实现了摄像头实时视频流的YOLO检测。</p>
<p>如果还需要 包含 <code>视频文件实时检测</code> 的功能代码, 请将<a href="https://www.bilibili.com/video/BV1Wj421d78y/">这个YOLO+Qt视频分享到朋友圈（点击打开）</a>，截屏发微给 <code>byhy44</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=&quot;__span-0-1&quot;&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;PySide6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;QtCore&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;QtGui&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-2&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;os&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-3&quot;&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;threading&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-4&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-5&quot;&gt;&lt;span&gt;# 不然每次YOLO处理都会输出调试信息&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-6&quot;&gt;&lt;span&gt;os&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;environ&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&#x27;YOLO_VERBOSE&#x27;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27;False&#x27;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-7&quot;&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;ultralytics&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;YOLO&lt;/span&gt; </span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-8&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-9&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MWindow&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QMainWindow&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-10&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-11&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-12&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-13&quot;&gt;        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-14&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-15&quot;&gt;        &lt;span&gt;# 设置界面&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-16&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setupUI&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-17&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-18&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;camBtn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clicked&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startCamera&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-19&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stopBtn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clicked&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stop&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-20&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-21&quot;&gt;        &lt;span&gt;# 定义定时器，用于控制显示视频的帧率&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-22&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timer_camera&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtCore&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QTimer&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-23&quot;&gt;        &lt;span&gt;# 定时到了，回调 self.show_camera&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-24&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timer_camera&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;connect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show_camera&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-25&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-26&quot;&gt;        &lt;span&gt;# 加载 YOLO nano 模型，第一次比较耗时，要20秒左右&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-27&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;model&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;YOLO&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;yolov8n.pt&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-28&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-29&quot;&gt;        &lt;span&gt;# 要处理的视频帧图片队列，目前就放1帧图片&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-30&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameToAnalyze&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[]&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-31&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-32&quot;&gt;        &lt;span&gt;# 启动处理视频帧独立线程&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-33&quot;&gt;        &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameAnalyzeThreadFunc&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;daemon&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-34&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-35&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;setupUI&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-36&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-37&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;resize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1200&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;800&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-38&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-39&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setWindowTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;白月黑羽 YOLO-Qt 演示&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-40&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-41&quot;&gt;        &lt;span&gt;# central Widget&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-42&quot;&gt;        &lt;span&gt;centralWidget&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-43&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setCentralWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;centralWidget&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-44&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-45&quot;&gt;        &lt;span&gt;# central Widget 里面的 主 layout&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-46&quot;&gt;        &lt;span&gt;mainLayout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;centralWidget&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-47&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-48&quot;&gt;        &lt;span&gt;# 界面的上半部分 : 图形展示部分&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-49&quot;&gt;        &lt;span&gt;topLayout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-50&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-51&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-52&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setMinimumSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;520&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-53&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setMinimumSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;520&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-54&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setStyleSheet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;border:1px solid #D7E2F9;&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-55&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setStyleSheet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;border:1px solid #D7E2F9;&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-56&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-57&quot;&gt;        &lt;span&gt;topLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-58&quot;&gt;        &lt;span&gt;topLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-59&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-60&quot;&gt;        &lt;span&gt;mainLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addLayout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;topLayout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-61&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-62&quot;&gt;        &lt;span&gt;# 界面下半部分： 输出框 和 按钮&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-63&quot;&gt;        &lt;span&gt;groupBox&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QGroupBox&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-64&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-65&quot;&gt;        &lt;span&gt;bottomLayout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;  &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;groupBox&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-66&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;textLog&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QTextBrowser&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-67&quot;&gt;        &lt;span&gt;bottomLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;textLog&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-68&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-69&quot;&gt;        &lt;span&gt;mainLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;groupBox&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-70&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-71&quot;&gt;        &lt;span&gt;btnLayout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-72&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;videoBtn&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;🎞️视频文件&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-73&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;camBtn&lt;/span&gt;   &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;📹摄像头&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-74&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stopBtn&lt;/span&gt;  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;🛑停止&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-75&quot;&gt;        &lt;span&gt;btnLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;videoBtn&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-76&quot;&gt;        &lt;span&gt;btnLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;camBtn&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-77&quot;&gt;        &lt;span&gt;btnLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addWidget&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stopBtn&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-78&quot;&gt;        &lt;span&gt;bottomLayout&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;addLayout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;btnLayout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-79&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-80&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-81&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;startCamera&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-82&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-83&quot;&gt;        &lt;span&gt;# 参考 https://docs.opencv.org/3.4/dd/d43/tutorial_py_video_display.html&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-84&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-85&quot;&gt;        &lt;span&gt;# 在 windows上指定使用 cv2.CAP_DSHOW 会让打开摄像头快很多， &lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-86&quot;&gt;        &lt;span&gt;# 在 Linux/Mac上 指定 V4L, FFMPEG 或者 GSTREAMER&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-87&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cap&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;VideoCapture&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CAP_DSHOW&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-88&quot;&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isOpened&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-89&quot;&gt;            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;1号摄像头不能打开&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-90&quot;&gt;            &lt;span&gt;return&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-91&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-92&quot;&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timer_camera&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isActive&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;False&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;  &lt;span&gt;# 若定时器未启动&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-93&quot;&gt;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timer_camera&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-94&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-95&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-96&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;show_camera&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-97&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-98&quot;&gt;        &lt;span&gt;ret&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;frame&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;  &lt;span&gt;# 从视频流中读取&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-99&quot;&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;ret&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-100&quot;&gt;            &lt;span&gt;return&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-101&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-102&quot;&gt;        &lt;span&gt;# 把读到的16:10帧的大小重新设置 &lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-103&quot;&gt;        &lt;span&gt;frame&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;resize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;frame&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;520&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;400&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;          </span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-104&quot;&gt;        &lt;span&gt;# 视频色彩转换回RGB，OpenCV images as BGR&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-105&quot;&gt;        &lt;span&gt;frame&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cvtColor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;frame&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;cv2&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;COLOR_BGR2RGB&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;  </span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-106&quot;&gt;        &lt;span&gt;qImage&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QImage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;frame&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;frame&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;],&lt;/span&gt; &lt;span&gt;frame&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-107&quot;&gt;                                 &lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QImage&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Format_RGB888&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;  &lt;span&gt;# 变成QImage形式&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-108&quot;&gt;        &lt;span&gt;# 往显示视频的Label里 显示QImage&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-109&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromImage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;qImage&lt;/span&gt;&lt;span&gt;))&lt;/span&gt; </span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-110&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-111&quot;&gt;        &lt;span&gt;# 如果当前没有处理任务&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-112&quot;&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameToAnalyze&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-113&quot;&gt;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameToAnalyze&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;frame&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-114&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-115&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;frameAnalyzeThreadFunc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-116&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-117&quot;&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-118&quot;&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameToAnalyze&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-119&quot;&gt;                &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-120&quot;&gt;                &lt;span&gt;continue&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-121&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-122&quot;&gt;            &lt;span&gt;frame&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;frameToAnalyze&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;pop&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-123&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-124&quot;&gt;            &lt;span&gt;results&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;frame&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-125&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-126&quot;&gt;            &lt;span&gt;img&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;results&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;plot&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;line_width&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;    </span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-127&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-128&quot;&gt;            &lt;span&gt;qImage&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QImage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;],&lt;/span&gt; &lt;span&gt;img&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-129&quot;&gt;                                    &lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QImage&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Format_RGB888&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;  &lt;span&gt;# 变成QImage形式&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-130&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-131&quot;&gt;            &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;QtGui&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromImage&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;qImage&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;  &lt;span&gt;# 往显示Label里 显示QImage&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-132&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-133&quot;&gt;            &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-134&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-135&quot;&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;stop&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-136&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timer_camera&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stop&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;  &lt;span&gt;# 关闭定时器&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-137&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;cap&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;release&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;  &lt;span&gt;# 释放视频流&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-138&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_ori_video&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;  &lt;span&gt;# 清空视频显示区域        &lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-139&quot;&gt;        &lt;span&gt;self&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;label_treated&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;  &lt;span&gt;# 清空视频显示区域&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-140&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-141&quot;&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-142&quot;&gt;&lt;span&gt;app&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;QtWidgets&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;QApplication&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-143&quot;&gt;&lt;span&gt;window&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;MWindow&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-144&quot;&gt;&lt;span&gt;window&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;span id=&quot;__span-0-145&quot;&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;&lt;/code&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
        <category>YOLOv8</category>
      </categories>
      <tags>
        <tag>yolov8</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLOv8训练自己的数据集</title>
    <url>/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h2 id="一、Yolov8简介"><a href="#一、Yolov8简介" class="headerlink" title="一、Yolov8简介"></a>一、Yolov8简介</h2><h3 id="1、yolov8-源码地址："><a href="#1、yolov8-源码地址：" class="headerlink" title="1、yolov8 源码地址："></a>1、yolov8 源码地址：</h3><p>工程链接：<a href="https://github.com/ultralytics/ultralytics" title="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a></p>
<h3 id="2、官方文档："><a href="#2、官方文档：" class="headerlink" title="2、官方文档："></a>2、官方文档：</h3><p><a href="https://docs.ultralytics.com/usage/cli/#train" title="CLI - Ultralytics YOLOv8 Docs">CLI - Ultralytics YOLOv8 Docs</a></p>
<h3 id="3、预训练模型百度网盘地址："><a href="#3、预训练模型百度网盘地址：" class="headerlink" title="3、预训练模型百度网盘地址："></a>3、<a href="https://so.csdn.net/so/search?q=%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B&spm=1001.2101.3001.7020">预训练模型</a>百度网盘地址：</h3><p>训练时需要用到，下载的网址较慢：</p>
<p>如果模型下载不了，加QQ：187100248.</p>
<p>链接: <a href="https://pan.baidu.com/s/1YfMxRPGk8LF75a4cbgYxGg">https://pan.baidu.com/s/1YfMxRPGk8LF75a4cbgYxGg</a> 提取码: rd7b</p>
<h2 id="二、模型训练"><a href="#二、模型训练" class="headerlink" title="二、模型训练"></a>二、<a href="https://so.csdn.net/so/search?q=%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83&spm=1001.2101.3001.7020">模型训练</a></h2><h3 id="1、标定红绿灯数据："><a href="#1、标定红绿灯数据：" class="headerlink" title="1、标定红绿灯数据："></a>1、标定红绿灯数据：</h3><p>         类别为23类，分别为：</p>
<table><caption>红绿灯类别</caption><tbody><tr><td>red_light</td><td>green_light</td><td>yellow_light</td><td>off_light</td><td>part_ry_light</td><td>part_rg_light</td></tr><tr><td>part_yg_light</td><td>ryg_light</td><td>countdown_off_light</td><td>countdown_on_light</td><td>shade_light</td><td>zero</td></tr><tr><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td></tr><tr><td>seven</td><td>eight</td><td>nine</td><td>brokeNumber</td><td>brokenLight</td><td></td></tr></tbody></table>

<p>        标注工具地址：<a href="https://blog.csdn.net/zhulong1984/article/details/129676318" title="AI标注工具Labelme和LabelImage Labelme和LabelImage集成工具_labelimage与labelme-CSDN博客">AI标注工具Labelme和LabelImage Labelme和LabelImage集成工具_labelimage与labelme-CSDN博客</a></p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110742715.jpeg" class="">

<p>标注后图像格式</p>
<h3 id="2、训练环境："><a href="#2、训练环境：" class="headerlink" title="2、训练环境："></a>2、训练环境：</h3><p>1）、Ubuntu18.04；</p>
<p>2）、Cuda11.7 + CUDNN8.0.6；</p>
<p>3）、opencv4.5.5；</p>
<p>4）、PyTorch1.8.1-GPU；</p>
<p>5）、python3.9</p>
<h3 id="3、数据转化："><a href="#3、数据转化：" class="headerlink" title="3、数据转化："></a>3、数据转化：</h3><p> 1）、需要把上面标定的数据集中的.xml文件转换为.txt，转换代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line">from xml.etree.ElementTree import Element, SubElement</span><br><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">classes = [&#x27;red_light&#x27;, &#x27;green_light&#x27;, &#x27;yellow_light&#x27;, &#x27;off_light&#x27;, &#x27;part_ry_light&#x27;, &#x27;part_rg_light&#x27;, &#x27;part_yg_light&#x27;, &#x27;ryg_light&#x27;,</span><br><span class="line"></span><br><span class="line">&#x27;countdown_off_light&#x27;, &#x27;countdown_on_light&#x27;,&#x27;shade_light&#x27;,&#x27;zero&#x27;,&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;,&#x27;six&#x27;,&#x27;seven&#x27;,</span><br><span class="line"></span><br><span class="line">&#x27;eight&#x27;,&#x27;nine&#x27;,&#x27;brokeNumber&#x27;,&#x27;brokenLight&#x27;]</span><br><span class="line"></span><br><span class="line">class Xml_make(object):</span><br><span class="line"></span><br><span class="line">def __init__(self):</span><br><span class="line"></span><br><span class="line">super().__init__()</span><br><span class="line"></span><br><span class="line">def __indent(self, elem, level=0):</span><br><span class="line"></span><br><span class="line">i = &quot;\n&quot; + level * &quot;\t&quot;</span><br><span class="line"></span><br><span class="line">if len(elem):</span><br><span class="line"></span><br><span class="line">if not elem.text or not elem.text.strip():</span><br><span class="line"></span><br><span class="line">elem.text = i + &quot;\t&quot;</span><br><span class="line"></span><br><span class="line">if not elem.tail or not elem.tail.strip():</span><br><span class="line"></span><br><span class="line">elem.tail = i</span><br><span class="line"></span><br><span class="line">for elem in elem:</span><br><span class="line"></span><br><span class="line">self.__indent(elem, level + 1)</span><br><span class="line"></span><br><span class="line">if not elem.tail or not elem.tail.strip():</span><br><span class="line"></span><br><span class="line">elem.tail = i</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">if level and (not elem.tail or not elem.tail.strip()):</span><br><span class="line"></span><br><span class="line">elem.tail = i</span><br><span class="line"></span><br><span class="line">def _imageinfo(self, list_top):</span><br><span class="line"></span><br><span class="line">annotation_root = ET.Element(&#x27;annotation&#x27;)</span><br><span class="line"></span><br><span class="line">annotation_root.set(&#x27;verified&#x27;, &#x27;no&#x27;)</span><br><span class="line"></span><br><span class="line">tree = ET.ElementTree(annotation_root)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">0:xml_savepath 1:folder,2:filename,3:path</span><br><span class="line"></span><br><span class="line">4:checked,5:width,6:height,7:depth</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">folder_element = ET.Element(&#x27;folder&#x27;)</span><br><span class="line"></span><br><span class="line">folder_element.text = list_top[1]</span><br><span class="line"></span><br><span class="line">annotation_root.append(folder_element)</span><br><span class="line"></span><br><span class="line">filename_element = ET.Element(&#x27;filename&#x27;)</span><br><span class="line"></span><br><span class="line">filename_element.text = list_top[2]</span><br><span class="line"></span><br><span class="line">annotation_root.append(filename_element)</span><br><span class="line"></span><br><span class="line">path_element = ET.Element(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">path_element.text = list_top[3]</span><br><span class="line"></span><br><span class="line">annotation_root.append(path_element)</span><br><span class="line"></span><br><span class="line"># checked_element = ET.Element(&#x27;checked&#x27;)</span><br><span class="line"></span><br><span class="line"># checked_element.text = list_top[4]</span><br><span class="line"></span><br><span class="line"># annotation_root.append(checked_element)</span><br><span class="line"></span><br><span class="line">source_element = ET.Element(&#x27;source&#x27;)</span><br><span class="line"></span><br><span class="line">database_element = SubElement(source_element, &#x27;database&#x27;)</span><br><span class="line"></span><br><span class="line">database_element.text = &#x27;Unknown&#x27;</span><br><span class="line"></span><br><span class="line">annotation_root.append(source_element)</span><br><span class="line"></span><br><span class="line">size_element = ET.Element(&#x27;size&#x27;)</span><br><span class="line"></span><br><span class="line">width_element = SubElement(size_element, &#x27;width&#x27;)</span><br><span class="line"></span><br><span class="line">width_element.text = str(list_top[5])</span><br><span class="line"></span><br><span class="line">height_element = SubElement(size_element, &#x27;height&#x27;)</span><br><span class="line"></span><br><span class="line">height_element.text = str(list_top[6])</span><br><span class="line"></span><br><span class="line">depth_element = SubElement(size_element, &#x27;depth&#x27;)</span><br><span class="line"></span><br><span class="line">depth_element.text = str(list_top[7])</span><br><span class="line"></span><br><span class="line">annotation_root.append(size_element)</span><br><span class="line"></span><br><span class="line">segmented_person_element = ET.Element(&#x27;segmented&#x27;)</span><br><span class="line"></span><br><span class="line">segmented_person_element.text = &#x27;0&#x27;</span><br><span class="line"></span><br><span class="line">annotation_root.append(segmented_person_element)</span><br><span class="line"></span><br><span class="line">return tree, annotation_root</span><br><span class="line"></span><br><span class="line">def _bndbox(self, annotation_root, list_bndbox):</span><br><span class="line"></span><br><span class="line">for i in range(0, len(list_bndbox), 9):</span><br><span class="line"></span><br><span class="line">object_element = ET.Element(&#x27;object&#x27;)</span><br><span class="line"></span><br><span class="line">name_element = SubElement(object_element, &#x27;name&#x27;)</span><br><span class="line"></span><br><span class="line">name_element.text = list_bndbox[i]</span><br><span class="line"></span><br><span class="line"># flag_element = SubElement(object_element, &#x27;flag&#x27;)</span><br><span class="line"></span><br><span class="line"># flag_element.text = list_bndbox[i + 1]</span><br><span class="line"></span><br><span class="line">pose_element = SubElement(object_element, &#x27;pose&#x27;)</span><br><span class="line"></span><br><span class="line">pose_element.text = list_bndbox[i + 2]</span><br><span class="line"></span><br><span class="line">truncated_element = SubElement(object_element, &#x27;truncated&#x27;)</span><br><span class="line"></span><br><span class="line">truncated_element.text = list_bndbox[i + 3]</span><br><span class="line"></span><br><span class="line">difficult_element = SubElement(object_element, &#x27;difficult&#x27;)</span><br><span class="line"></span><br><span class="line">difficult_element.text = list_bndbox[i + 4]</span><br><span class="line"></span><br><span class="line">bndbox_element = SubElement(object_element, &#x27;bndbox&#x27;)</span><br><span class="line"></span><br><span class="line">xmin_element = SubElement(bndbox_element, &#x27;xmin&#x27;)</span><br><span class="line"></span><br><span class="line">xmin_element.text = str(list_bndbox[i + 5])</span><br><span class="line"></span><br><span class="line">ymin_element = SubElement(bndbox_element, &#x27;ymin&#x27;)</span><br><span class="line"></span><br><span class="line">ymin_element.text = str(list_bndbox[i + 6])</span><br><span class="line"></span><br><span class="line">xmax_element = SubElement(bndbox_element, &#x27;xmax&#x27;)</span><br><span class="line"></span><br><span class="line">xmax_element.text = str(list_bndbox[i + 7])</span><br><span class="line"></span><br><span class="line">ymax_element = SubElement(bndbox_element, &#x27;ymax&#x27;)</span><br><span class="line"></span><br><span class="line">ymax_element.text = str(list_bndbox[i + 8])</span><br><span class="line"></span><br><span class="line">annotation_root.append(object_element)</span><br><span class="line"></span><br><span class="line">return annotation_root</span><br><span class="line"></span><br><span class="line">def txt_to_xml(self, list_top, list_bndbox):</span><br><span class="line"></span><br><span class="line">tree, annotation_root = self._imageinfo(list_top)</span><br><span class="line"></span><br><span class="line">annotation_root = self._bndbox(annotation_root, list_bndbox)</span><br><span class="line"></span><br><span class="line">self.__indent(annotation_root)</span><br><span class="line"></span><br><span class="line">tree.write(list_top[0], encoding=&#x27;utf-8&#x27;, xml_declaration=True)</span><br><span class="line"></span><br><span class="line">def txt_2_xml(source_path, xml_save_dir, jpg_save_dir,txt_dir):</span><br><span class="line"></span><br><span class="line">COUNT = 0</span><br><span class="line"></span><br><span class="line">for folder_path_tuple, folder_name_list, file_name_list in os.walk(source_path):</span><br><span class="line"></span><br><span class="line">for file_name in file_name_list:</span><br><span class="line"></span><br><span class="line">file_suffix = os.path.splitext(file_name)[-1]</span><br><span class="line"></span><br><span class="line">if file_suffix != &#x27;.jpg&#x27;:</span><br><span class="line"></span><br><span class="line">continue</span><br><span class="line"></span><br><span class="line">list_top = []</span><br><span class="line"></span><br><span class="line">list_bndbox = []</span><br><span class="line"></span><br><span class="line">path = os.path.join(folder_path_tuple, file_name)</span><br><span class="line"></span><br><span class="line">xml_save_path = os.path.join(xml_save_dir, file_name.replace(file_suffix, &#x27;.xml&#x27;))</span><br><span class="line"></span><br><span class="line">txt_path = os.path.join(txt_dir, file_name.replace(file_suffix, &#x27;.txt&#x27;))</span><br><span class="line"></span><br><span class="line">filename = file_name#os.path.splitext(file_name)[0]</span><br><span class="line"></span><br><span class="line">checked = &#x27;NO&#x27;</span><br><span class="line"></span><br><span class="line">#print(file_name)</span><br><span class="line"></span><br><span class="line">im = Image.open(path)</span><br><span class="line"></span><br><span class="line">im_w = im.size[0]</span><br><span class="line"></span><br><span class="line">im_h = im.size[1]</span><br><span class="line"></span><br><span class="line">shutil.copy(path, jpg_save_dir)</span><br><span class="line"></span><br><span class="line">if im_w*im_h &gt; 34434015:</span><br><span class="line"></span><br><span class="line">print(file_name)</span><br><span class="line"></span><br><span class="line">if im_w &lt; 100:</span><br><span class="line"></span><br><span class="line">print(file_name)</span><br><span class="line"></span><br><span class="line">width = str(im_w)</span><br><span class="line"></span><br><span class="line">height = str(im_h)</span><br><span class="line"></span><br><span class="line">depth = &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">flag = &#x27;rectangle&#x27;</span><br><span class="line"></span><br><span class="line">pose = &#x27;Unspecified&#x27;</span><br><span class="line"></span><br><span class="line">truncated = &#x27;0&#x27;</span><br><span class="line"></span><br><span class="line">difficult = &#x27;0&#x27;</span><br><span class="line"></span><br><span class="line">list_top.extend([xml_save_path, folder_path_tuple, filename, path, checked, width, height, depth])</span><br><span class="line"></span><br><span class="line">for line in open(txt_path, &#x27;r&#x27;):</span><br><span class="line"></span><br><span class="line">line = line.strip()</span><br><span class="line"></span><br><span class="line">info = line.split(&#x27; &#x27;)</span><br><span class="line"></span><br><span class="line">name = classes[int(info[0])]</span><br><span class="line"></span><br><span class="line">x_cen = float(info[1]) * im_w</span><br><span class="line"></span><br><span class="line">y_cen = float(info[2]) * im_h</span><br><span class="line"></span><br><span class="line">w = float(info[3]) * im_w</span><br><span class="line"></span><br><span class="line">h = float(info[4]) * im_h</span><br><span class="line"></span><br><span class="line">xmin = int(x_cen - w / 2) - 1</span><br><span class="line"></span><br><span class="line">ymin = int(y_cen - h / 2) - 1</span><br><span class="line"></span><br><span class="line">xmax = int(x_cen + w / 2) + 3</span><br><span class="line"></span><br><span class="line">ymax = int(y_cen + h / 2) + 3</span><br><span class="line"></span><br><span class="line">if xmin &lt; 0:</span><br><span class="line"></span><br><span class="line">xmin = 0</span><br><span class="line"></span><br><span class="line">if ymin &lt; 0:</span><br><span class="line"></span><br><span class="line">ymin = 0</span><br><span class="line"></span><br><span class="line">if xmax &gt; im_w - 1:</span><br><span class="line"></span><br><span class="line">xmax = im_w - 1</span><br><span class="line"></span><br><span class="line">if ymax &gt; im_h - 1:</span><br><span class="line"></span><br><span class="line">ymax = im_h - 1</span><br><span class="line"></span><br><span class="line">if w &gt; 5 and h &gt; 5:</span><br><span class="line"></span><br><span class="line">list_bndbox.extend([name, flag, pose, truncated, difficult,str(xmin), str(ymin), str(xmax), str(ymax)])</span><br><span class="line"></span><br><span class="line">if xmin &lt; 0 or xmax &gt; im_w - 1 or ymin &lt; 0 or ymax &gt; im_h - 1:</span><br><span class="line"></span><br><span class="line">print(xml_save_path)</span><br><span class="line"></span><br><span class="line">Xml_make().txt_to_xml(list_top, list_bndbox)</span><br><span class="line"></span><br><span class="line">COUNT += 1</span><br><span class="line"></span><br><span class="line">#print(COUNT, xml_save_path)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">out_xml_path = &quot;/home/TL_TrainData/&quot; # .xml输出文件存放地址</span><br><span class="line"></span><br><span class="line">out_jpg_path = &quot;/home/TL_TrainData/&quot; # .jpg输出文件存放地址</span><br><span class="line"></span><br><span class="line">txt_path = &quot;/home/Data/TrafficLight/trainData&quot; # yolov3标注.txt和图片文件夹</span><br><span class="line"></span><br><span class="line">images_path = &quot;/home/TrafficLight/trainData&quot; # image文件存放地址</span><br><span class="line"></span><br><span class="line">txt_2_xml(images_path, out_xml_path, out_jpg_path, txt_path)</span><br></pre></td></tr></table></figure>

<h3 id="4、构造训练数据："><a href="#4、构造训练数据：" class="headerlink" title="4、构造训练数据："></a>4、构造训练数据：</h3><p>2）、训练样本数据构造，需要把分成images和labels，images下面放入图片，labels下面放入.txt文件:</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110742891.png" class="" title="分成images和labels">

<p>分成images和labels</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743403.png" class="">

<p>images</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743666.png" class="">

<p>labels</p>
<h3 id="5、训练样本："><a href="#5、训练样本：" class="headerlink" title="5、训练样本："></a>5、训练样本：</h3><p> 1）、首先安装训练包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ultralytics</span><br></pre></td></tr></table></figure>

<p>2）、修改训练数据参数coco128_light.yaml文件，这个是自己修改的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ultralytics YOLO 🚀, AGPL-3.0 license</span><br><span class="line"></span><br><span class="line"># COCO128 dataset https://www.kaggle.com/ultralytics/coco128 (first 128 images from COCO train2017) by Ultralytics</span><br><span class="line"></span><br><span class="line"># Example usage: yolo train data=coco128.yaml</span><br><span class="line"></span><br><span class="line"># parent</span><br><span class="line"></span><br><span class="line"># ├── ultralytics</span><br><span class="line"></span><br><span class="line"># └── datasets</span><br><span class="line"></span><br><span class="line"># └── coco128 ← downloads here (7 MB)</span><br><span class="line"></span><br><span class="line"># Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]</span><br><span class="line"></span><br><span class="line">path: /home/Data/TrafficLight/datasets # dataset root dir</span><br><span class="line"></span><br><span class="line">train: images # train images (relative to &#x27;path&#x27;) 128 images</span><br><span class="line"></span><br><span class="line">val: images # val images (relative to &#x27;path&#x27;) 128 images</span><br><span class="line"></span><br><span class="line">test: # test images (optional)</span><br><span class="line"></span><br><span class="line"># Parameters</span><br><span class="line"></span><br><span class="line">nc: 23 # number of classes</span><br><span class="line"></span><br><span class="line"># Classes</span><br><span class="line"></span><br><span class="line">names:</span><br><span class="line"></span><br><span class="line">0: red_light</span><br><span class="line"></span><br><span class="line">1: green_light</span><br><span class="line"></span><br><span class="line">2: yellow_light</span><br><span class="line"></span><br><span class="line">3: off_light</span><br><span class="line"></span><br><span class="line">4: part_ry_light</span><br><span class="line"></span><br><span class="line">5: part_rg_light</span><br><span class="line"></span><br><span class="line">6: part_yg_light</span><br><span class="line"></span><br><span class="line">7: ryg_light</span><br><span class="line"></span><br><span class="line">8: countdown_off_light</span><br><span class="line"></span><br><span class="line">9: countdown_on_light</span><br><span class="line"></span><br><span class="line">10: shade_light</span><br><span class="line"></span><br><span class="line">11: zero</span><br><span class="line"></span><br><span class="line">12: one</span><br><span class="line"></span><br><span class="line">13: two</span><br><span class="line"></span><br><span class="line">14: three</span><br><span class="line"></span><br><span class="line">15: four</span><br><span class="line"></span><br><span class="line">16: five</span><br><span class="line"></span><br><span class="line">17: six</span><br><span class="line"></span><br><span class="line">18: seven</span><br><span class="line"></span><br><span class="line">19: eight</span><br><span class="line"></span><br><span class="line">20: nine</span><br><span class="line"></span><br><span class="line">21: brokeNumber</span><br><span class="line"></span><br><span class="line">22: brokenLight</span><br><span class="line"></span><br><span class="line"># Download script/URL (optional)</span><br><span class="line"></span><br><span class="line">#download: https://ultralytics.com/assets/coco128.zip</span><br></pre></td></tr></table></figure>

<p>3）、执行 train_yolov8x_light.sh，内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yolo detect train data=coco128_light.yaml model=./runs/last.pt epochs=100 imgsz=640 workers=16 batch=32</span><br></pre></td></tr></table></figure>

<p>        开始启动训练：</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743690.png" class="">

<p>模型训练启动</p>
<h2 id="三、验证模型："><a href="#三、验证模型：" class="headerlink" title="三、验证模型："></a>三、验证模型：</h2><h3 id="1、图像测试："><a href="#1、图像测试：" class="headerlink" title="1、图像测试："></a>1、图像测试：</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line">model = YOLO(<span class="string">&#x27;best.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">results = model(<span class="string">&#x27;bus.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.boxes)</span><br></pre></td></tr></table></figure>

<h3 id="2、视频测试："><a href="#2、视频测试：" class="headerlink" title="2、视频测试："></a>2、视频测试：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">from ultralytics import YOLO</span><br><span class="line"></span><br><span class="line"># Load the YOLOv8 model</span><br><span class="line"></span><br><span class="line">model = YOLO(&#x27;best.pt&#x27;)</span><br><span class="line"></span><br><span class="line"># Open the video file</span><br><span class="line"></span><br><span class="line">video_path = &quot;test_car_person_1080P.mp4&quot;</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(video_path)</span><br><span class="line"></span><br><span class="line"># Loop through the video frames</span><br><span class="line"></span><br><span class="line">while cap.isOpened():</span><br><span class="line"></span><br><span class="line"># Read a frame from the video</span><br><span class="line"></span><br><span class="line">success, frame = cap.read()</span><br><span class="line"></span><br><span class="line">if success:</span><br><span class="line"></span><br><span class="line"># Run YOLOv8 inference on the frame</span><br><span class="line"></span><br><span class="line">results = model(frame)</span><br><span class="line"></span><br><span class="line"># Visualize the results on the frame</span><br><span class="line"></span><br><span class="line">annotated_frame = results[0].plot()</span><br><span class="line"></span><br><span class="line"># Display the annotated frame</span><br><span class="line"></span><br><span class="line">cv2.imshow(&quot;YOLOv8 Inference&quot;, annotated_frame)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(10)</span><br></pre></td></tr></table></figure>

<h2 id="四、导出ONNX"><a href="#四、导出ONNX" class="headerlink" title="四、导出ONNX"></a>四、导出ONNX</h2><p>1、训练输出，经过上面的训练后，得到训练生成文件，weights下生成了best.pt和last.pt：</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743875.png" class="">

<p>训练数据生成文件</p>
<p>2、等训练完毕后，利用best.pt生成best.onnx，执行命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yolo export model=best.pt imgsz=640 format=onnx opset=12</span><br></pre></td></tr></table></figure>

<h2 id="五、Opencv实现Yolov8-C-识别"><a href="#五、Opencv实现Yolov8-C-识别" class="headerlink" title="五、Opencv实现Yolov8 C++ 识别"></a>五、Opencv实现Yolov8 C++ 识别</h2><h3 id="1、开发环境："><a href="#1、开发环境：" class="headerlink" title="1、开发环境："></a>1、开发环境：</h3><p>1）、win7&#x2F;win10；</p>
<p>2）、vs2019；</p>
<p>3）、opencv4.7.0；</p>
<h3 id="2、main函数代码："><a href="#2、main函数代码：" class="headerlink" title="2、main函数代码："></a>2、main函数代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;opencv2/opencv.hpp&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;inference.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;io.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line"></span><br><span class="line">#define socklen_t int</span><br><span class="line"></span><br><span class="line">#pragma comment (lib, &quot;ws2_32.lib&quot;)</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int getFiles(std::string path, std::vector&lt;std::string&gt;&amp; files, std::vector&lt;std::string&gt;&amp; names)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line"></span><br><span class="line">intptr_t hFile = 0;</span><br><span class="line"></span><br><span class="line">struct _finddata_t c_file;</span><br><span class="line"></span><br><span class="line">std::string imageFile = path + &quot;*.*&quot;;</span><br><span class="line"></span><br><span class="line">if ((hFile = _findfirst(imageFile.c_str(), &amp;c_file)) == -1L)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">_findclose(hFile);</span><br><span class="line"></span><br><span class="line">return -1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">while (true)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::string strname(c_file.name);</span><br><span class="line"></span><br><span class="line">if (std::string::npos != strname.find(&quot;.jpg&quot;) || std::string::npos != strname.find(&quot;.png&quot;) || std::string::npos != strname.find(&quot;.bmp&quot;))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::string fullName = path + c_file.name;</span><br><span class="line"></span><br><span class="line">files.push_back(fullName);</span><br><span class="line"></span><br><span class="line">std::string cutname = strname.substr(0, strname.rfind(&quot;.&quot;));</span><br><span class="line"></span><br><span class="line">names.push_back(cutname);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (_findnext(hFile, &amp;c_file) != 0)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">_findclose(hFile);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::string projectBasePath = &quot;./&quot;; // Set your ultralytics base path</span><br><span class="line"></span><br><span class="line">bool runOnGPU = true;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// Pass in either:</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// &quot;yolov8s.onnx&quot; or &quot;yolov5s.onnx&quot;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// To run Inference with yolov8/yolov5 (ONNX)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// Note that in this example the classes are hard-coded and &#x27;classes.txt&#x27; is a place holder.</span><br><span class="line"></span><br><span class="line">Inference inf(projectBasePath + &quot;/best.onnx&quot;, cv::Size(640, 640), &quot;classes.txt&quot;, runOnGPU);</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::string&gt; files;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::string&gt; names;</span><br><span class="line"></span><br><span class="line">getFiles(&quot;./test/&quot;, files, names);</span><br><span class="line"></span><br><span class="line">//std::vector&lt;std::string&gt; imageNames;</span><br><span class="line"></span><br><span class="line">//imageNames.push_back(projectBasePath + &quot;/test/20221104_8336.jpg&quot;);</span><br><span class="line"></span><br><span class="line">//imageNames.push_back(projectBasePath + &quot;/test/20221104_8339.jpg&quot;);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; files.size(); ++i)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cv::Mat frame = cv::imread(files[i]);</span><br><span class="line"></span><br><span class="line">// Inference starts here...</span><br><span class="line"></span><br><span class="line">clock_t start, end;</span><br><span class="line"></span><br><span class="line">float time;</span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line"></span><br><span class="line">std::vector&lt;Detection&gt; output = inf.runInference(frame);</span><br><span class="line"></span><br><span class="line">end = clock();</span><br><span class="line"></span><br><span class="line">time = (float)(end - start);//CLOCKS_PER_SEC;</span><br><span class="line"></span><br><span class="line">printf(&quot;timeCount = %f\n&quot;, time);</span><br><span class="line"></span><br><span class="line">int detections = output.size();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;Number of detections:&quot; &lt;&lt; detections &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; detections; ++i)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Detection detection = output[i];</span><br><span class="line"></span><br><span class="line">cv::Rect box = detection.box;</span><br><span class="line"></span><br><span class="line">cv::Scalar color = detection.color;</span><br><span class="line"></span><br><span class="line">// Detection box</span><br><span class="line"></span><br><span class="line">cv::rectangle(frame, box, color, 2);</span><br><span class="line"></span><br><span class="line">// Detection box text</span><br><span class="line"></span><br><span class="line">std::string classString = detection.className + &#x27; &#x27; + std::to_string(detection.confidence).substr(0, 4);</span><br><span class="line"></span><br><span class="line">cv::Size textSize = cv::getTextSize(classString, cv::FONT_HERSHEY_DUPLEX, 1, 2, 0);</span><br><span class="line"></span><br><span class="line">cv::Rect textBox(box.x, box.y - 40, textSize.width + 10, textSize.height + 20);</span><br><span class="line"></span><br><span class="line">cv::rectangle(frame, textBox, color, cv::FILLED);</span><br><span class="line"></span><br><span class="line">cv::putText(frame, classString, cv::Point(box.x + 5, box.y - 10), cv::FONT_HERSHEY_DUPLEX, 1, cv::Scalar(0, 0, 0), 2, 0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Inference ends here...</span><br><span class="line"></span><br><span class="line">// This is only for preview purposes</span><br><span class="line"></span><br><span class="line">float scale = 0.8;</span><br><span class="line"></span><br><span class="line">cv::resize(frame, frame, cv::Size(frame.cols * scale, frame.rows * scale));</span><br><span class="line"></span><br><span class="line">cv::imshow(&quot;Inference&quot;, frame);</span><br><span class="line"></span><br><span class="line">cv::waitKey(10);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、yolov8-头文件inference-h代码："><a href="#3、yolov8-头文件inference-h代码：" class="headerlink" title="3、yolov8 头文件inference.h代码："></a>3、yolov8 头文件inference.h代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef INFERENCE_H</span><br><span class="line"></span><br><span class="line">#define INFERENCE_H</span><br><span class="line"></span><br><span class="line">// Cpp native</span><br><span class="line"></span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;random&gt;</span><br><span class="line"></span><br><span class="line">// OpenCV / DNN / Inference</span><br><span class="line"></span><br><span class="line">#include &lt;opencv2/imgproc.hpp&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;opencv2/dnn.hpp&gt;</span><br><span class="line"></span><br><span class="line">struct Detection</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int class_id&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">std::string className&#123;&#125;;</span><br><span class="line"></span><br><span class="line">float confidence&#123;0.0&#125;;</span><br><span class="line"></span><br><span class="line">cv::Scalar color&#123;&#125;;</span><br><span class="line"></span><br><span class="line">cv::Rect box&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Inference</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Inference(const std::string &amp;onnxModelPath, const cv::Size &amp;modelInputShape = &#123;640, 640&#125;, const std::string &amp;classesTxtFile = &quot;&quot;, const bool &amp;runWithCuda = true);</span><br><span class="line"></span><br><span class="line">std::vector&lt;Detection&gt; runInference(const cv::Mat &amp;input);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">void loadClassesFromFile();</span><br><span class="line"></span><br><span class="line">void loadOnnxNetwork();</span><br><span class="line"></span><br><span class="line">cv::Mat formatToSquare(const cv::Mat &amp;source);</span><br><span class="line"></span><br><span class="line">std::string modelPath&#123;&#125;;</span><br><span class="line"></span><br><span class="line">std::string classesPath&#123;&#125;;</span><br><span class="line"></span><br><span class="line">bool cudaEnabled&#123;&#125;;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::string&gt; classes&#123; &quot;red_light&quot;, &quot;green_light&quot;, &quot;yellow_light&quot;, &quot;off_light&quot;, &quot;part_ry_light&quot;, &quot;part_rg_light&quot;, &quot;part_yg_light&quot;, &quot;ryg_light&quot;,&quot;countdown_off_light&quot;, &quot;countdown_on_light&quot;,&quot;shade_light&quot;,&quot;zero&quot;,&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;,&quot;seven&quot;,&quot;eight&quot;,&quot;nine&quot;,&quot;brokeNumber&quot;,&quot;brokenLight&quot; &#125;;</span><br><span class="line"></span><br><span class="line">cv::Size2f modelShape&#123;&#125;;</span><br><span class="line"></span><br><span class="line">float modelConfidenceThreshold &#123;0.25&#125;;</span><br><span class="line"></span><br><span class="line">float modelScoreThreshold &#123;0.45&#125;;</span><br><span class="line"></span><br><span class="line">float modelNMSThreshold &#123;0.50&#125;;</span><br><span class="line"></span><br><span class="line">bool letterBoxForSquare = true;</span><br><span class="line"></span><br><span class="line">cv::dnn::Net net;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // INFERENCE_H</span><br></pre></td></tr></table></figure>

<h3 id="4、yolov8-cpp文件inference-cpp代码："><a href="#4、yolov8-cpp文件inference-cpp代码：" class="headerlink" title="4、yolov8 cpp文件inference.cpp代码："></a>4、yolov8 cpp文件inference.cpp代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;inference.h&quot;</span><br><span class="line"></span><br><span class="line">Inference::Inference(const std::string &amp;onnxModelPath, const cv::Size &amp;modelInputShape, const std::string &amp;classesTxtFile, const bool &amp;runWithCuda)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">modelPath = onnxModelPath;</span><br><span class="line"></span><br><span class="line">modelShape = modelInputShape;</span><br><span class="line"></span><br><span class="line">classesPath = classesTxtFile;</span><br><span class="line"></span><br><span class="line">cudaEnabled = runWithCuda;</span><br><span class="line"></span><br><span class="line">loadOnnxNetwork();</span><br><span class="line"></span><br><span class="line">// loadClassesFromFile(); The classes are hard-coded for this example</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;Detection&gt; Inference::runInference(const cv::Mat &amp;input)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cv::Mat modelInput = input;</span><br><span class="line"></span><br><span class="line">if (letterBoxForSquare &amp;&amp; modelShape.width == modelShape.height)</span><br><span class="line"></span><br><span class="line">modelInput = formatToSquare(modelInput);</span><br><span class="line"></span><br><span class="line">cv::Mat blob;</span><br><span class="line"></span><br><span class="line">cv::dnn::blobFromImage(modelInput, blob, 1.0/255.0, modelShape, cv::Scalar(), true, false);</span><br><span class="line"></span><br><span class="line">net.setInput(blob);</span><br><span class="line"></span><br><span class="line">std::vector&lt;cv::Mat&gt; outputs;</span><br><span class="line"></span><br><span class="line">net.forward(outputs, net.getUnconnectedOutLayersNames());</span><br><span class="line"></span><br><span class="line">int rows = outputs[0].size[1];</span><br><span class="line"></span><br><span class="line">int dimensions = outputs[0].size[2];</span><br><span class="line"></span><br><span class="line">bool yolov8 = false;</span><br><span class="line"></span><br><span class="line">// yolov5 has an output of shape (batchSize, 25200, 85) (Num classes + box[x,y,w,h] + confidence[c])</span><br><span class="line"></span><br><span class="line">// yolov8 has an output of shape (batchSize, 84, 8400) (Num classes + box[x,y,w,h])</span><br><span class="line"></span><br><span class="line">if (dimensions &gt; rows) // Check if the shape[2] is more than shape[1] (yolov8)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">yolov8 = true;</span><br><span class="line"></span><br><span class="line">rows = outputs[0].size[2];</span><br><span class="line"></span><br><span class="line">dimensions = outputs[0].size[1];</span><br><span class="line"></span><br><span class="line">outputs[0] = outputs[0].reshape(1, dimensions);</span><br><span class="line"></span><br><span class="line">cv::transpose(outputs[0], outputs[0]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float *data = (float *)outputs[0].data;</span><br><span class="line"></span><br><span class="line">float x_factor = modelInput.cols / modelShape.width;</span><br><span class="line"></span><br><span class="line">float y_factor = modelInput.rows / modelShape.height;</span><br><span class="line"></span><br><span class="line">std::vector&lt;int&gt; class_ids;</span><br><span class="line"></span><br><span class="line">std::vector&lt;float&gt; confidences;</span><br><span class="line"></span><br><span class="line">std::vector&lt;cv::Rect&gt; boxes;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; rows; ++i)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (yolov8)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">float *classes_scores = data+4;</span><br><span class="line"></span><br><span class="line">cv::Mat scores(1, classes.size(), CV_32FC1, classes_scores);</span><br><span class="line"></span><br><span class="line">cv::Point class_id;</span><br><span class="line"></span><br><span class="line">double maxClassScore;</span><br><span class="line"></span><br><span class="line">minMaxLoc(scores, 0, &amp;maxClassScore, 0, &amp;class_id);</span><br><span class="line"></span><br><span class="line">if (maxClassScore &gt; modelScoreThreshold)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">confidences.push_back(maxClassScore);</span><br><span class="line"></span><br><span class="line">class_ids.push_back(class_id.x);</span><br><span class="line"></span><br><span class="line">float x = data[0];</span><br><span class="line"></span><br><span class="line">float y = data[1];</span><br><span class="line"></span><br><span class="line">float w = data[2];</span><br><span class="line"></span><br><span class="line">float h = data[3];</span><br><span class="line"></span><br><span class="line">int left = int((x - 0.5 * w) * x_factor);</span><br><span class="line"></span><br><span class="line">int top = int((y - 0.5 * h) * y_factor);</span><br><span class="line"></span><br><span class="line">int width = int(w * x_factor);</span><br><span class="line"></span><br><span class="line">int height = int(h * y_factor);</span><br><span class="line"></span><br><span class="line">boxes.push_back(cv::Rect(left, top, width, height));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else // yolov5</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">float confidence = data[4];</span><br><span class="line"></span><br><span class="line">if (confidence &gt;= modelConfidenceThreshold)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">float *classes_scores = data+5;</span><br><span class="line"></span><br><span class="line">cv::Mat scores(1, classes.size(), CV_32FC1, classes_scores);</span><br><span class="line"></span><br><span class="line">cv::Point class_id;</span><br><span class="line"></span><br><span class="line">double max_class_score;</span><br><span class="line"></span><br><span class="line">minMaxLoc(scores, 0, &amp;max_class_score, 0, &amp;class_id);</span><br><span class="line"></span><br><span class="line">if (max_class_score &gt; modelScoreThreshold)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">confidences.push_back(confidence);</span><br><span class="line"></span><br><span class="line">class_ids.push_back(class_id.x);</span><br><span class="line"></span><br><span class="line">float x = data[0];</span><br><span class="line"></span><br><span class="line">float y = data[1];</span><br><span class="line"></span><br><span class="line">float w = data[2];</span><br><span class="line"></span><br><span class="line">float h = data[3];</span><br><span class="line"></span><br><span class="line">int left = int((x - 0.5 * w) * x_factor);</span><br><span class="line"></span><br><span class="line">int top = int((y - 0.5 * h) * y_factor);</span><br><span class="line"></span><br><span class="line">int width = int(w * x_factor);</span><br><span class="line"></span><br><span class="line">int height = int(h * y_factor);</span><br><span class="line"></span><br><span class="line">boxes.push_back(cv::Rect(left, top, width, height));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data += dimensions;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;int&gt; nms_result;</span><br><span class="line"></span><br><span class="line">cv::dnn::NMSBoxes(boxes, confidences, modelScoreThreshold, modelNMSThreshold, nms_result);</span><br><span class="line"></span><br><span class="line">std::vector&lt;Detection&gt; detections&#123;&#125;;</span><br><span class="line"></span><br><span class="line">for (unsigned long i = 0; i &lt; nms_result.size(); ++i)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int idx = nms_result[i];</span><br><span class="line"></span><br><span class="line">Detection result;</span><br><span class="line"></span><br><span class="line">result.class_id = class_ids[idx];</span><br><span class="line"></span><br><span class="line">result.confidence = confidences[idx];</span><br><span class="line"></span><br><span class="line">std::random_device rd;</span><br><span class="line"></span><br><span class="line">std::mt19937 gen(rd());</span><br><span class="line"></span><br><span class="line">std::uniform_int_distribution&lt;int&gt; dis(100, 255);</span><br><span class="line"></span><br><span class="line">result.color = cv::Scalar(dis(gen),</span><br><span class="line"></span><br><span class="line">dis(gen),</span><br><span class="line"></span><br><span class="line">dis(gen));</span><br><span class="line"></span><br><span class="line">result.className = classes[result.class_id];</span><br><span class="line"></span><br><span class="line">result.box = boxes[idx];</span><br><span class="line"></span><br><span class="line">detections.push_back(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return detections;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Inference::loadClassesFromFile()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::ifstream inputFile(classesPath);</span><br><span class="line"></span><br><span class="line">if (inputFile.is_open())</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::string classLine;</span><br><span class="line"></span><br><span class="line">while (std::getline(inputFile, classLine))</span><br><span class="line"></span><br><span class="line">classes.push_back(classLine);</span><br><span class="line"></span><br><span class="line">inputFile.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Inference::loadOnnxNetwork()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">net = cv::dnn::readNetFromONNX(modelPath);</span><br><span class="line"></span><br><span class="line">if (cudaEnabled)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;\nRunning on CUDA&quot; &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">net.setPreferableBackend(cv::dnn::DNN_BACKEND_CUDA);</span><br><span class="line"></span><br><span class="line">net.setPreferableTarget(cv::dnn::DNN_TARGET_CUDA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;\nRunning on CPU&quot; &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">net.setPreferableBackend(cv::dnn::DNN_BACKEND_OPENCV);</span><br><span class="line"></span><br><span class="line">net.setPreferableTarget(cv::dnn::DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cv::Mat Inference::formatToSquare(const cv::Mat &amp;source)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int col = source.cols;</span><br><span class="line"></span><br><span class="line">int row = source.rows;</span><br><span class="line"></span><br><span class="line">int _max = MAX(col, row);</span><br><span class="line"></span><br><span class="line">cv::Mat result = cv::Mat::zeros(_max, _max, CV_8UC3);</span><br><span class="line"></span><br><span class="line">source.copyTo(result(cv::Rect(0, 0, col, row)));</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、效果图：</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743968.jpeg" class="">

<p>vs2019工程运行结果</p>
<img src="/2024/09/04/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/YOLOv8/Yolov8%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/IMG-20250804110743995.jpeg" class="">

<p>红绿灯识别结果</p>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>Python</category>
        <category>YOLOv8</category>
      </categories>
      <tags>
        <tag>yolov8</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNetty完全教程（九）</title>
    <url>/2019/10/31/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/DotNetty%E6%95%99%E7%A8%8B/DotNetty%E5%AE%8C%E5%85%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DotNetty完全教程（九）"><a href="#DotNetty完全教程（九）" class="headerlink" title="DotNetty完全教程（九）"></a>DotNetty完全教程（九）</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>引导Bootstrap引导一个应用程序是指对他进行配置并且使他运行的过程。体系结构注意，DotNetty没有实现Cloneable的接口，而是直接实现了一个Clone方法。Netty实现这个接口是为了创建两个有着相同配置的应用程序，可以把一个配置整体应用到另一个上面，需要注意的是EventLoopGroup是一个浅拷贝，这就导致了拷贝的Bootstrap都会使用同一个EventLoopGr…</p>
</blockquote>
<hr>
<h2 id="引导Bootstrap"><a href="#引导Bootstrap" class="headerlink" title="引导Bootstrap"></a>引导<a href="https://so.csdn.net/so/search?q=Bootstrap&spm=1001.2101.3001.7020">Bootstrap</a></h2><p>引导一个应用程序是指对他进行配置并且使他运行的过程。</p>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a><a href="https://so.csdn.net/so/search?q=%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">体系结构</a></h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxbzQzMnVqZDZqMzBpZTA3YmFhYy5qcGc?x-oss-process=image/format,png"><br>注意，DotNetty没有实现Cloneable的接口，而是直接实现了一个Clone方法。Netty实现这个接口是为了创建两个有着相同配置的应用程序，可以把一个配置整体应用到另一个上面，需要注意的是EventLoopGroup是一个<a href="https://so.csdn.net/so/search?q=%E6%B5%85%E6%8B%B7%E8%B4%9D&spm=1001.2101.3001.7020">浅拷贝</a>，这就导致了拷贝的Bootstrap都会使用同一个EventLoopGroup，这在每个Channel生命周期很短的时候是没有太大影响的。</p>
<p>服务器引导和普通引导有什么区别呢？区别在于，服务器接收到客户端的连接请求，会用一个Channel接受连接，然后用另一个Channel与客户端进行交流，但是客户端只需要一个Channel就可以与服务器进行交互。</p>
<h3 id="关于链式调用"><a href="#关于链式调用" class="headerlink" title="关于链式调用"></a>关于链式调用</h3><p>我们发现Bootstrap类可以通过流式语法进行链式调用，这要归功于Bootstrap类的特殊定义。下面我们来看一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义</span><br><span class="line">public abstract class AbstractBootstrap&lt;TBootstrap, TChannel&gt;</span><br><span class="line">    where TBootstrap : AbstractBootstrap&lt;TBootstrap, TChannel&gt;</span><br><span class="line">    where TChannel : IChannel</span><br><span class="line">// 定义子类</span><br><span class="line">public class Bootstrap : AbstractBootstrap&lt;Bootstrap, IChannel&gt;</span><br><span class="line">// 方法实现</span><br><span class="line">public virtual TBootstrap Group(IEventLoopGroup group)</span><br><span class="line">&#123;</span><br><span class="line">    Contract.Requires(group != null);</span><br><span class="line"></span><br><span class="line">    if (this.group != null)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new InvalidOperationException(&quot;group has already been set.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.group = group;</span><br><span class="line">    return (TBootstrap)this;</span><br><span class="line">&#125;</span><br><span class="line">// 使用</span><br><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">bootstrap</span><br><span class="line">    .Group(group)</span><br><span class="line">    .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">    .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">        pipeline.AddLast(new EchoClientHandler());</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure>

<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxbzRtNG1va3NqMzBqODBmNHdrMC5qcGc?x-oss-process=image/format,png"><br><img src="https://img-blog.csdnimg.cn/20191030154635566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L254eV93dWhhbw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-KF8h1wnu-1572421399290)(https://ws1.sinaimg.cn/large/007hF5Quly1g1o4mltliij30jr05mabe.jpg)]"></p>
<h3 id="客户端引导"><a href="#客户端引导" class="headerlink" title="客户端引导"></a>客户端引导</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var group = new MultithreadEventLoopGroup();</span><br><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">bootstrap</span><br><span class="line">    .Group(group)</span><br><span class="line">    .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">    .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">        pipeline.AddLast(new EchoClientHandler());</span><br><span class="line">    &#125;));</span><br><span class="line">IChannel clientChannel = await bootstrap.ConnectAsync(new IPEndPoint(IPAddress.Parse(&quot;10.10.10.158&quot;), 3000));</span><br><span class="line">Console.ReadLine();</span><br><span class="line">await clientChannel.CloseAsync();</span><br></pre></td></tr></table></figure>

<h3 id="服务器引导"><a href="#服务器引导" class="headerlink" title="服务器引导"></a>服务器引导</h3><p>API：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxbzUxNmJvcnJqMzBrZjBoeG40OS5qcGc?x-oss-process=image/format,png"><br>注意上面箭头指示的是与Bootstrap不一样的方法。<br>为什么会有子Channel的概念呢，我们看下面这个图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDdoRjVRdWx5MWcxcWQzeGp5YTBqMzBpZDA3ZmdtaS5qcGc?x-oss-process=image/format,png"><br>因为服务器是一对多的，所以有子Channel的概念。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IEventLoopGroup eventLoop;</span><br><span class="line">eventLoop = new MultithreadEventLoopGroup();</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    // 服务器引导程序</span><br><span class="line">    var bootstrap = new ServerBootstrap();</span><br><span class="line">    bootstrap.Group(eventLoop);</span><br><span class="line">    bootstrap.Channel&lt;TcpServerSocketChannel&gt;();</span><br><span class="line">    bootstrap.ChildHandler(new ActionChannelInitializer&lt;IChannel&gt;(channel =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line">        pipeline.AddLast(new EchoServerHandler());</span><br><span class="line">    &#125;));</span><br><span class="line">    IChannel boundChannel = await bootstrap.BindAsync(3000);</span><br><span class="line">    Console.ReadLine();</span><br><span class="line">    await boundChannel.CloseAsync();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(ex);</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">    await eventLoop.ShutdownGracefullyAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从Channel中引导客户端"><a href="#从Channel中引导客户端" class="headerlink" title="从Channel中引导客户端"></a>从Channel中引导客户端</h3><ul>
<li><p>场景</p>
<p>如果我们的服务器需要去第三方获取数据，这时候服务器就需要充当客户端去第三方取数据，这时候就需要在Channel中再开一个客户端获取数据。</p>
</li>
<li><p>方式</p>
<p>我们最好是从Channel中获取当前EventLoop，这样新开的客户端就跟当前Channel在一个线程中，减少了线程切换带来的开销，尽可能的重用了EventLoop</p>
</li>
<li><p>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 从Context创建客户端引导</span><br><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">bootstrap.Group(ctx.Channel.EventLoop);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="初始化Pipeline"><a href="#初始化Pipeline" class="headerlink" title="初始化Pipeline"></a>初始化Pipeline</h3><p>如果要添加的Handler不止一个，我们就需要用到ChannelInitializer，在DotNetty中，我们有十分简单的方法可以初始化一个pipeline</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">bootstrap</span><br><span class="line">    .Group(group)</span><br><span class="line">    .Channel&lt;TcpSocketChannel&gt;()</span><br><span class="line">    .Option(ChannelOption.TcpNodelay, true)</span><br><span class="line">    .Handler(new ActionChannelInitializer&lt;ISocketChannel&gt;(channel =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        IChannelPipeline pipeline = channel.Pipeline;</span><br><span class="line"></span><br><span class="line">        if (cert != null)</span><br><span class="line">        &#123;</span><br><span class="line">            pipeline.AddLast(&quot;tls&quot;, new TlsHandler(stream =&gt; new SslStream(stream, true, (sender, certificate, chain, errors) =&gt; true), new ClientTlsSettings(targetHost)));</span><br><span class="line">        &#125;</span><br><span class="line">        pipeline.AddLast(new LoggingHandler());</span><br><span class="line">        pipeline.AddLast(&quot;framing-enc&quot;, new LengthFieldPrepender(2));</span><br><span class="line">        pipeline.AddLast(&quot;framing-dec&quot;, new LengthFieldBasedFrameDecoder(ushort.MaxValue, 0, 2, 0, 2));</span><br><span class="line"></span><br><span class="line">        pipeline.AddLast(&quot;echo&quot;, new EchoClientHandler());</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure>

<h3 id="ChannelOption"><a href="#ChannelOption" class="headerlink" title="ChannelOption"></a>ChannelOption</h3><p>ChannelOption可以在引导的时候将设置批量的设置到所有Channel上，而不必要在每一个Channel建立的时候手动的去指定它的配置，应用场景是比如设置KeepAlive或者设置超时时间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bootstrap.Option(ChannelOption.SoKeepalive, true)</span><br><span class="line">    .Option(ChannelOption.ConnectTimeout, new TimeSpan(5000));</span><br></pre></td></tr></table></figure>

<h3 id="面向无连接的用户数据报文"><a href="#面向无连接的用户数据报文" class="headerlink" title="面向无连接的用户数据报文"></a>面向无连接的用户数据报文</h3><p>UDP的全称是“User Datagram Protocol”，在DotNetty中实现了SocketDatagramChannel来创建无连接的引导，需要注意的是无连接的引导不需要Connect只需要bind即可，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bootstrap = new Bootstrap();</span><br><span class="line">bootstrap</span><br><span class="line">    .Group(group)</span><br><span class="line">    .Channel&lt;SocketDatagramChannel&gt;()</span><br><span class="line">    .Option(ChannelOption.SoBroadcast, true)</span><br><span class="line">    .Handler(new ActionChannelInitializer&lt;IChannel&gt;(channel =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        channel.Pipeline.AddLast(&quot;Quote&quot;, new QuoteOfTheMomentClientHandler());</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">IChannel clientChannel = await bootstrap.BindAsync(IPEndPoint.MinPort);</span><br></pre></td></tr></table></figure>

<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>Channel的关闭：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">await clientChannel.CloseAsync();</span><br></pre></td></tr></table></figure>

<p>EventLoopGroup的关闭：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">await group.ShutdownGracefullyAsync();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>DotNetty教程</category>
      </categories>
      <tags>
        <tag>DotNetty</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF控件库汇总</title>
    <url>/2024/12/10/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/%E6%8E%A7%E4%BB%B6%E5%BA%93/WPF%E6%8E%A7%E4%BB%B6%E5%BA%93%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="XamlFlair"><a href="#XamlFlair" class="headerlink" title="XamlFlair"></a><a href="https://github.com/XamlFlair/XamlFlair">XamlFlair</a></h2><p>XamlFlair库的目标是简化常见动画的实现，并允许开发人员使用几行Xaml<code>轻松</code>地添加单个或组合的动画集。</p>
<img src="/2024/12/10/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/DotNet/WPF/%E6%8E%A7%E4%BB%B6%E5%BA%93/WPF%E6%8E%A7%E4%BB%B6%E5%BA%93%E6%B1%87%E6%80%BB/IMG-20250804110742704.gif" class="">
]]></content>
      <categories>
        <category>编程技术</category>
        <category>DotNet</category>
        <category>WPF</category>
        <category>控件库</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>控件库</tag>
      </tags>
  </entry>
</search>
